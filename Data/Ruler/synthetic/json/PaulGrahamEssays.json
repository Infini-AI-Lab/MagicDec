{"text": "July 2010What hard liquor, cigarettes, heroin, and crack have in common is\nthat they're all more concentrated forms of less addictive predecessors.\nMost if not all the things we describe as addictive are.  And the\nscary thing is, the process that created them is accelerating.We wouldn't want to stop it.  It's the same process that cures\ndiseases: technological progress.  Technological progress means\nmaking things do more of what we want.  When the thing we want is\nsomething we want to want, we consider technological progress good.\nIf some new technique makes solar cells x% more efficient, that\nseems strictly better.  When progress concentrates something we\ndon't want to want\u2014when it transforms opium into heroin\u2014it seems\nbad.  But it's the same process at work.\n[1]No one doubts this process is accelerating, which means increasing\nnumbers of things we like will be transformed into things we like\ntoo much.\n[2]As far as I know there's no word for something we like too much.\nThe closest is the colloquial sense of \"addictive.\" That usage has\nbecome increasingly common during my lifetime.  And it's clear why:\nthere are an increasing number of things we need it for.  At the\nextreme end of the spectrum are crack and meth.  Food has been\ntransformed by a combination of factory farming and innovations in\nfood processing into something with way more immediate bang for the\nbuck, and you can see the results in any town in America.  Checkers\nand solitaire have been replaced by World of Warcraft and FarmVille.\nTV has become much more engaging, and even so it can't compete with Facebook.The world is more addictive than it was 40 years ago.   And unless\nthe forms of technological progress that produced these things are\nsubject to different laws than technological progress in general,\nthe world will get more addictive in the next 40 years than it did\nin the last 40.The next 40 years will bring us some wonderful things.  I don't\nmean to imply they're all to be avoided.  Alcohol is a dangerous\ndrug, but I'd rather live in a world with wine than one without.\nMost people can coexist with alcohol; but you have to be careful.\nMore things we like will mean more things we have to be careful\nabout.Most people won't, unfortunately.  Which means that as the world\nbecomes more addictive, the two senses in which one can live a\nnormal life will be driven ever further apart.  One sense of \"normal\"\nis statistically normal: what everyone else does.  The other is the\nsense we mean when we talk about the normal operating range of a\npiece of machinery: what works best.These two senses are already quite far apart.  Already someone\ntrying to live well would seem eccentrically abstemious in most of\nthe US.  That phenomenon is only going to become more pronounced.\nYou can probably take it as a rule of thumb from now on that if\npeople don't think you're weird, you're living badly.Societies eventually develop antibodies to addictive new things.\nI've seen that happen with cigarettes.  When cigarettes first\nappeared, they spread the way an infectious disease spreads through\na previously isolated population.  Smoking rapidly became a\n(statistically) normal thing.  There were ashtrays everywhere.  We\nhad ashtrays in our house when I was a kid, even though neither of\nmy parents smoked.  You had to for guests.As knowledge spread about the dangers of smoking, customs changed.\nIn the last 20 years, smoking has been transformed from something\nthat seemed totally normal into a rather seedy habit: from something\nmovie stars did in publicity shots to something small huddles of\naddicts do outside the doors of office buildings.  A lot of the\nchange was due to legislation, of course, but the legislation\ncouldn't have happened if customs hadn't already changed.It took a while though\u2014on the order of 100 years.  And unless the\nrate at which social antibodies evolve can increase to match the\naccelerating rate at which technological progress throws off new\naddictions, we'll be increasingly unable to rely on customs to\nprotect us.\n[3]\nUnless we want to be canaries in the coal mine\nof each new addiction\u2014the people whose sad example becomes a\nlesson to future generations\u2014we'll have to figure out for ourselves\nwhat to avoid and how.  It will actually become a reasonable strategy\n(or a more reasonable strategy) to suspect \neverything new.In fact, even that won't be enough.  We'll have to worry not just\nabout new things, but also about existing things becoming more\naddictive.  That's what bit me.  I've avoided most addictions, but\nthe Internet got me because it became addictive while I was using\nit.\n[4]Most people I know have problems with Internet addiction.  We're\nall trying to figure out our own customs for getting free of it.\nThat's why I don't have an iPhone, for example; the last thing I\nwant is for the Internet to follow me out into the world.\n[5]\nMy latest trick is taking long hikes.  I used to think running was a\nbetter form of exercise than hiking because it took less time.  Now\nthe slowness of hiking seems an advantage, because the longer I\nspend on the trail, the longer I have to think without interruption.Sounds pretty eccentric, doesn't it?  It always will when you're\ntrying to solve problems where there are no customs yet to guide\nyou.  Maybe I can't plead Occam's razor; maybe I'm simply eccentric.\nBut if I'm right about the acceleration of addictiveness, then this\nkind of lonely squirming to avoid it will increasingly be the fate\nof anyone who wants to get things done.  We'll increasingly be\ndefined by what we say no to.\nNotes[1]\nCould you restrict technological progress to areas where you\nwanted it?  Only in a limited way, without becoming a police state.\nAnd even then your restrictions would have undesirable side effects.\n\"Good\" and \"bad\" technological progress aren't sharply differentiated,\nso you'd find you couldn't slow the latter without also slowing the\nformer.  And in any case, as Prohibition and the \"war on drugs\"\nshow, bans often do more harm than good.[2]\nTechnology has always been accelerating.  By Paleolithic\nstandards, technology evolved at a blistering pace in the Neolithic\nperiod.[3]\nUnless we mass produce social customs.  I suspect the recent\nresurgence of evangelical Christianity in the US is partly a reaction\nto drugs.  In desperation people reach for the sledgehammer; if\ntheir kids won't listen to them, maybe they'll listen to God.  But\nthat solution has broader consequences than just getting kids to\nsay no to drugs.  You end up saying no to \nscience as well.\nI worry we may be heading for a future in which only a few people\nplot their own itinerary through no-land, while everyone else books\na package tour.  Or worse still, has one booked for them by the\ngovernment.[4]\nPeople commonly use the word \"procrastination\" to describe\nwhat they do on the Internet.  It seems to me too mild to describe\nwhat's happening as merely not-doing-work.  We don't call it\nprocrastination when someone gets drunk instead of working.[5]\nSeveral people have told me they like the iPad because it\nlets them bring the Internet into situations where a laptop would\nbe too conspicuous.  In other words, it's a hip flask.  (This is\ntrue of the iPhone too, of course, but this advantage isn't as\nobvious because it reads as a phone, and everyone's used to those.)Thanks to Sam Altman, Patrick Collison, Jessica Livingston, and\nRobert Morris for reading drafts of this.October 2015When I talk to a startup that's been operating for more than 8 or\n9 months, the first thing I want to know is almost always the same.\nAssuming their expenses remain constant and their revenue growth\nis what it has been over the last several months, do they make it to\nprofitability on the money they have left?  Or to put it more\ndramatically, by default do they live or die?The startling thing is how often the founders themselves don't know.\nHalf the founders I talk to don't know whether they're default alive\nor default dead.If you're among that number, Trevor Blackwell has made a handy\ncalculator you can use to find out.The reason I want to know first whether a startup is default alive\nor default dead is that the rest of the conversation depends on the\nanswer.  If the company is default alive, we can talk about ambitious\nnew things they could do.  If it's default dead, we probably need\nto talk about how to save it.  We know the current trajectory ends\nbadly.  How can they get off that trajectory?Why do so few founders know whether they're default alive or default\ndead?  Mainly, I think, because they're not used to asking that.\nIt's not a question that makes sense to ask early on, any more than\nit makes sense to ask a 3 year old how he plans to support\nhimself.  But as the company grows older, the question switches from\nmeaningless to critical.  That kind of switch often takes people\nby surprise.I propose the following solution: instead of starting to ask too\nlate whether you're default alive or default dead, start asking too\nearly.  It's hard to say precisely when the question switches\npolarity.  But it's probably not that dangerous to start worrying\ntoo early that you're default dead, whereas it's very dangerous to\nstart worrying too late.The reason is a phenomenon I wrote about earlier: the\nfatal pinch.\nThe fatal pinch is default dead + slow growth + not enough\ntime to fix it.  And the way founders end up in it is by not realizing\nthat's where they're headed.There is another reason founders don't ask themselves whether they're\ndefault alive or default dead: they assume it will be easy to raise\nmore money.  But that assumption is often false, and worse still, the\nmore you depend on it, the falser it becomes.Maybe it will help to separate facts from hopes. Instead of thinking\nof the future with vague optimism, explicitly separate the components.\nSay \"We're default dead, but we're counting on investors to save\nus.\" Maybe as you say that, it will set off the same alarms in your\nhead that it does in mine.  And if you set off the alarms sufficiently\nearly, you may be able to avoid the fatal pinch.It would be safe to be default dead if you could count on investors\nsaving you.  As a rule their interest is a function of\ngrowth.  If you have steep revenue growth, say over 5x a year, you\ncan start to count on investors being interested even if you're not\nprofitable.\n[1]\nBut investors are so fickle that you can never\ndo more than start to count on them.  Sometimes something about your\nbusiness will spook investors even if your growth is great.  So no\nmatter how good your growth is, you can never safely treat fundraising\nas more than a plan A. You should always have a plan B as well: you\nshould know (as in write down) precisely what you'll need to do to\nsurvive if you can't raise more money, and precisely when you'll \nhave to switch to plan B if plan A isn't working.In any case, growing fast versus operating cheaply is far from the\nsharp dichotomy many founders assume it to be.  In practice there\nis surprisingly little connection between how much a startup spends\nand how fast it grows.  When a startup grows fast, it's usually\nbecause the product hits a nerve, in the sense of hitting some big\nneed straight on.  When a startup spends a lot, it's usually because\nthe product is expensive to develop or sell, or simply because\nthey're wasteful.If you're paying attention, you'll be asking at this point not just\nhow to avoid the fatal pinch, but how to avoid being default dead.\nThat one is easy: don't hire too fast.  Hiring too fast is by far\nthe biggest killer of startups that raise money.\n[2]Founders tell themselves they need to hire in order to grow.  But\nmost err on the side of overestimating this need rather than\nunderestimating it.  Why?  Partly because there's so much work to\ndo.  Naive founders think that if they can just hire enough\npeople, it will all get done.  Partly because successful startups have\nlots of employees, so it seems like that's what one does in order\nto be successful.  In fact the large staffs of successful startups\nare probably more the effect of growth than the cause.  And\npartly because when founders have slow growth they don't want to\nface what is usually the real reason: the product is not appealing\nenough.Plus founders who've just raised money are often encouraged to\noverhire by the VCs who funded them.  Kill-or-cure strategies are\noptimal for VCs because they're protected by the portfolio effect.\nVCs want to blow you up, in one sense of the phrase or the other.\nBut as a founder your incentives are different.  You want above all\nto survive.\n[3]Here's a common way startups die.  They make something moderately\nappealing and have decent initial growth. They raise their first\nround fairly easily, because the founders seem smart and the idea\nsounds plausible. But because the product is only moderately\nappealing, growth is ok but not great.  The founders convince\nthemselves that hiring a bunch of people is the way to boost growth.\nTheir investors agree.  But (because the product is only moderately\nappealing) the growth never comes.  Now they're rapidly running out\nof runway.  They hope further investment will save them. But because\nthey have high expenses and slow growth, they're now unappealing\nto investors. They're unable to raise more, and the company dies.What the company should have done is address the fundamental problem:\nthat the product is only moderately appealing.  Hiring people is\nrarely the way to fix that.  More often than not it makes it harder.\nAt this early stage, the product needs to evolve more than to be\n\"built out,\" and that's usually easier with fewer people.\n[4]Asking whether you're default alive or default dead may save you\nfrom this.  Maybe the alarm bells it sets off will counteract the\nforces that push you to overhire.  Instead you'll be compelled to\nseek growth in other ways. For example, by doing\nthings that don't scale, or by redesigning the product in the\nway only founders can.\nAnd for many if not most startups, these paths to growth will be\nthe ones that actually work.Airbnb waited 4 months after raising money at the end of Y\u00a0Combinator\nbefore they hired their first employee.  In the meantime the founders\nwere terribly overworked.  But they were overworked evolving Airbnb\ninto the astonishingly successful organism it is now.Notes[1]\nSteep usage growth will also interest investors.  Revenue\nwill ultimately be a constant multiple of usage, so x% usage growth\npredicts x% revenue growth.  But in practice investors discount\nmerely predicted revenue, so if you're measuring usage you need a\nhigher growth rate to impress investors.[2]\nStartups that don't raise money are saved from hiring too\nfast because they can't afford to. But that doesn't mean you should\navoid raising money in order to avoid this problem, any more than\nthat total abstinence is the only way to avoid becoming an alcoholic.[3]\nI would not be surprised if VCs' tendency to push founders\nto overhire is not even in their own interest.  They don't know how\nmany of the companies that get killed by overspending might have\ndone well if they'd survived.  My guess is a significant number.[4]\nAfter reading a draft, Sam Altman wrote:\"I think you should make the hiring point more strongly.  I think\nit's roughly correct to say that YC's most successful companies\nhave never been the fastest to hire, and one of the marks of a great\nfounder is being able to resist this urge.\"Paul Buchheit adds:\"A related problem that I see a lot is premature scaling\u2014founders\ntake a small business that isn't really working (bad unit economics,\ntypically) and then scale it up because they want impressive growth\nnumbers. This is similar to over-hiring in that it makes the business\nmuch harder to fix once it's big, plus they are bleeding cash really\nfast.\"\nThanks to Sam Altman, Paul Buchheit, Joe Gebbia, Jessica Livingston,\nand Geoff Ralston for reading drafts of this.\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nNovember 2009I don't think Apple realizes how badly the App Store approval process\nis broken.  Or rather, I don't think they realize how much it matters\nthat it's broken.The way Apple runs the App Store has harmed their reputation with\nprogrammers more than anything else they've ever done. \nTheir reputation with programmers used to be great.\nIt used to be the most common complaint you heard\nabout Apple was that their fans admired them too uncritically.\nThe App Store has changed that.  Now a lot of programmers\nhave started to see Apple as evil.How much of the goodwill Apple once had with programmers have they\nlost over the App Store?  A third?  Half?  And that's just so far.\nThe App Store is an ongoing karma leak.* * *How did Apple get into this mess?  Their fundamental problem is\nthat they don't understand software.They treat iPhone apps the way they treat the music they sell through\niTunes.  Apple is the channel; they own the user; if you want to\nreach users, you do it on their terms. The record labels agreed,\nreluctantly.  But this model doesn't work for software.  It doesn't\nwork for an intermediary to own the user.  The software business\nlearned that in the early 1980s, when companies like VisiCorp showed\nthat although the words \"software\" and \"publisher\" fit together,\nthe underlying concepts don't.  Software isn't like music or books.\nIt's too complicated for a third party to act as an intermediary\nbetween developer and user.   And yet that's what Apple is trying\nto be with the App Store: a software publisher.  And a particularly\noverreaching one at that, with fussy tastes and a rigidly enforced\nhouse style.If software publishing didn't work in 1980, it works even less now\nthat software development has evolved from a small number of big\nreleases to a constant stream of small ones.  But Apple doesn't\nunderstand that either.  Their model of product development derives\nfrom hardware.  They work on something till they think it's finished,\nthen they release it.  You have to do that with hardware, but because\nsoftware is so easy to change, its design can benefit from evolution.\nThe standard way to develop applications now is to launch fast and\niterate.  Which means it's a disaster to have long, random delays\neach time you release a new version.Apparently Apple's attitude is that developers should be more careful\nwhen they submit a new version to the App Store.  They would say\nthat.  But powerful as they are, they're not powerful enough to\nturn back the evolution of technology.  Programmers don't use\nlaunch-fast-and-iterate out of laziness.  They use it because it\nyields the best results.  By obstructing that process, Apple is\nmaking them do bad work, and programmers hate that as much as Apple\nwould.How would Apple like it if when they discovered a serious bug in\nOS\u00a0X, instead of releasing a software update immediately, they had\nto submit their code to an intermediary who sat on it for a month\nand then rejected it because it contained an icon they didn't like?By breaking software development, Apple gets the opposite of what\nthey intended: the version of an app currently available in the App\nStore tends to be an old and buggy one.  One developer told me:\n\n  As a result of their process, the App Store is full of half-baked\n  applications. I make a new version almost every day that I release\n  to beta users. The version on the App Store feels old and crappy.\n  I'm sure that a lot of developers feel this way: One emotion is\n  \"I'm not really proud about what's in the App Store\", and it's\n  combined with the emotion \"Really, it's Apple's fault.\"\n\nAnother wrote:\n\n  I believe that they think their approval process helps users by\n  ensuring quality.  In reality, bugs like ours get through all the\n  time and then it can take 4-8 weeks to get that bug fix approved,\n  leaving users to think that iPhone apps sometimes just don't work.\n  Worse for Apple, these apps work just fine on other platforms\n  that have immediate approval processes.\n\nActually I suppose Apple has a third misconception: that all the\ncomplaints about App Store approvals are not a serious problem.\nThey must hear developers complaining.  But partners and suppliers\nare always complaining.  It would be a bad sign if they weren't;\nit would mean you were being too easy on them.  Meanwhile the iPhone\nis selling better than ever.  So why do they need to fix anything?They get away with maltreating developers, in the short term, because\nthey make such great hardware.  I just bought a new 27\" iMac a\ncouple days ago.  It's fabulous.  The screen's too shiny, and the\ndisk is surprisingly loud, but it's so beautiful that you can't\nmake yourself care.So I bought it, but I bought it, for the first time, with misgivings.\nI felt the way I'd feel buying something made in a country with a\nbad human rights record.  That was new.  In the past when I bought\nthings from Apple it was an unalloyed pleasure.  Oh boy!  They make\nsuch great stuff.  This time it felt like a Faustian bargain.  They\nmake such great stuff, but they're such assholes.  Do I really want\nto support this company?* * *Should Apple care what people like me think?  What difference does\nit make if they alienate a small minority of their users?There are a couple reasons they should care.  One is that these\nusers are the people they want as employees.  If your company seems\nevil, the best programmers won't work for you.  That hurt Microsoft\na lot starting in the 90s.  Programmers started to feel sheepish\nabout working there.  It seemed like selling out.  When people from\nMicrosoft were talking to other programmers and they mentioned where\nthey worked, there were a lot of self-deprecating jokes about having\ngone over to the dark side.  But the real problem for Microsoft\nwasn't the embarrassment of the people they hired.  It was the\npeople they never got.  And you know who got them?  Google and\nApple.  If Microsoft was the Empire, they were the Rebel Alliance.\nAnd it's largely because they got more of the best people that\nGoogle and Apple are doing so much better than Microsoft today.Why are programmers so fussy about their employers' morals?  Partly\nbecause they can afford to be.  The best programmers can work\nwherever they want.  They don't have to work for a company they\nhave qualms about.But the other reason programmers are fussy, I think, is that evil\nbegets stupidity.  An organization that wins by exercising power\nstarts to lose the ability to win by doing better work.  And it's\nnot fun for a smart person to work in a place where the best ideas\naren't the ones that win.  I think the reason Google embraced \"Don't\nbe evil\" so eagerly was not so much to impress the outside world\nas to inoculate themselves against arrogance.\n[1]That has worked for Google so far.  They've become more\nbureaucratic, but otherwise they seem to have held true to their\noriginal principles. With Apple that seems less the case.  When you\nlook at the famous \n1984 ad \nnow, it's easier to imagine Apple as the\ndictator on the screen than the woman with the hammer.\n[2]\nIn fact, if you read the dictator's speech it sounds uncannily like a\nprophecy of the App Store.\n\n  We have triumphed over the unprincipled dissemination of facts.We have created, for the first time in all history, a garden of\n  pure ideology, where each worker may bloom secure from the pests\n  of contradictory and confusing truths.\n\nThe other reason Apple should care what programmers think of them\nis that when you sell a platform, developers make or break you.  If\nanyone should know this, Apple should.  VisiCalc made the Apple II.And programmers build applications for the platforms they use.  Most\napplications\u2014most startups, probably\u2014grow out of personal projects.\nApple itself did.  Apple made microcomputers because that's what\nSteve Wozniak wanted for himself.  He couldn't have afforded a\nminicomputer. \n[3]\n Microsoft likewise started out making interpreters\nfor little microcomputers because\nBill Gates and Paul Allen were interested in using them.  It's a\nrare startup that doesn't build something the founders use.The main reason there are so many iPhone apps is that so many programmers\nhave iPhones.  They may know, because they read it in an article,\nthat Blackberry has such and such market share.  But in practice\nit's as if RIM didn't exist. If they're going to build something,\nthey want to be able to use it themselves, and that means building\nan iPhone app.So programmers continue to develop iPhone apps, even though Apple\ncontinues to maltreat them.  They're like someone stuck in an abusive\nrelationship.  They're so attracted to the iPhone that they can't\nleave.  But they're looking for a way out.  One wrote:\n\n  While I did enjoy developing for the iPhone, the control they\n  place on the App Store does not give me the drive to develop\n  applications as I would like. In fact I don't intend to make any\n  more iPhone applications unless absolutely necessary.\n[4]\n\nCan anything break this cycle?  No device I've seen so far could.\nPalm and RIM haven't a hope.  The only credible contender is Android.\nBut Android is an orphan; Google doesn't really care about it, not\nthe way Apple cares about the iPhone.  Apple cares about the iPhone\nthe way Google cares about search.* * *Is the future of handheld devices one locked down by Apple?  It's\na worrying prospect.  It would be a bummer to have another grim\nmonoculture like we had in the 1990s.  In 1995, writing software\nfor end users was effectively identical with writing Windows\napplications.  Our horror at that prospect was the single biggest\nthing that drove us to start building web apps.At least we know now what it would take to break Apple's lock.\nYou'd have to get iPhones out of programmers' hands.  If programmers\nused some other device for mobile web access, they'd start to develop\napps for that instead.How could you make a device programmers liked better than the iPhone?\nIt's unlikely you could make something better designed.  Apple\nleaves no room there.  So this alternative device probably couldn't\nwin on general appeal.  It would have to win by virtue of some\nappeal it had to programmers specifically.One way to appeal to programmers is with software.  If you\ncould think of an application programmers had to have, but that\nwould be impossible in the circumscribed world of the iPhone, \nyou could presumably get them to switch.That would definitely happen if programmers started to use handhelds\nas development machines\u2014if handhelds displaced laptops the\nway laptops displaced desktops.  You need more control of a development\nmachine than Apple will let you have over an iPhone.Could anyone make a device that you'd carry around in your pocket\nlike a phone, and yet would also work as a development machine?\nIt's hard to imagine what it would look like.  But I've learned\nnever to say never about technology.  A phone-sized device that\nwould work as a development machine is no more miraculous by present\nstandards than the iPhone itself would have seemed by the standards\nof 1995.My current development machine is a MacBook Air, which I use with\nan external monitor and keyboard in my office, and by itself when\ntraveling.  If there was a version half the size I'd prefer it.\nThat still wouldn't be small enough to carry around everywhere like\na phone, but we're within a factor of 4 or so.  Surely that gap is\nbridgeable.  In fact, let's make it an\nRFS. Wanted: \nWoman with hammer.Notes[1]\nWhen Google adopted \"Don't be evil,\" they were still so small\nthat no one would have expected them to be, yet.\n[2]\nThe dictator in the 1984 ad isn't Microsoft, incidentally;\nit's IBM.  IBM seemed a lot more frightening in those days, but\nthey were friendlier to developers than Apple is now.[3]\nHe couldn't even afford a monitor.  That's why the Apple\nI used a TV as a monitor.[4]\nSeveral people I talked to mentioned how much they liked the\niPhone SDK.  The problem is not Apple's products but their policies.\nFortunately policies are software; Apple can change them instantly\nif they want to.  Handy that, isn't it?Thanks to Sam Altman, Trevor Blackwell, Ross Boucher, \nJames Bracy, Gabor Cselle,\nPatrick Collison, Jason Freedman, John Gruber, Joe Hewitt, Jessica Livingston,\nRobert Morris, Teng Siong Ong, Nikhil Pandit, Savraj Singh, and Jared Tame for reading drafts of this.\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nApril 2001, rev. April 2003(This article is derived from a talk given at the 2001 Franz\nDeveloper Symposium.)\nIn the summer of 1995, my friend Robert Morris and I\nstarted a startup called \nViaweb.  \nOur plan was to write\nsoftware that would let end users build online stores.\nWhat was novel about this software, at the time, was\nthat it ran on our server, using ordinary Web pages\nas the interface.A lot of people could have been having this idea at the\nsame time, of course, but as far as I know, Viaweb was\nthe first Web-based application.  It seemed such\na novel idea to us that we named the company after it:\nViaweb, because our software worked via the Web,\ninstead of running on your desktop computer.Another unusual thing about this software was that it\nwas written primarily in a programming language called\nLisp. It was one of the first big end-user\napplications to be written in Lisp, which up till then\nhad been used mostly in universities and research labs. [1]The Secret WeaponEric Raymond has written an essay called \"How to Become a Hacker,\"\nand in it, among other things, he tells would-be hackers what\nlanguages they should learn.  He suggests starting with Python and\nJava, because they are easy to learn.  The serious hacker will also\nwant to learn C, in order to hack Unix, and Perl for system\nadministration and cgi scripts.  Finally, the truly serious hacker\nshould consider learning Lisp:\n\n  Lisp is worth learning for the profound enlightenment experience\n  you will have when you finally get it; that experience will make\n  you a better programmer for the rest of your days, even if you\n  never actually use Lisp itself a lot.\n\nThis is the same argument you tend to hear for learning Latin.  It\nwon't get you a job, except perhaps as a classics professor, but\nit will improve your mind, and make you a better writer in languages\nyou do want to use, like English.But wait a minute.  This metaphor doesn't stretch that far.  The\nreason Latin won't get you a job is that no one speaks it.  If you\nwrite in Latin, no one can understand you.  But Lisp is a computer\nlanguage, and computers speak whatever language you, the programmer,\ntell them to.So if Lisp makes you a better programmer, like he says, why wouldn't\nyou want to use it? If a painter were offered a brush that would\nmake him a better painter, it seems to me that he would want to\nuse it in all his paintings, wouldn't he? I'm not trying to make\nfun of Eric Raymond here.  On the whole, his advice is good.  What\nhe says about Lisp is pretty much the conventional wisdom.  But\nthere is a contradiction in the conventional wisdom:  Lisp will\nmake you a better programmer, and yet you won't use it.Why not?  Programming languages are just tools, after all.  If Lisp\nreally does yield better programs, you should use it.  And if it\ndoesn't, then who needs it?This is not just a theoretical question.  Software is a very\ncompetitive business, prone to natural monopolies.  A company that\ngets software written faster and better will, all other things\nbeing equal, put its competitors out of business.  And when you're\nstarting a startup, you feel this very keenly.  Startups tend to\nbe an all or nothing proposition.  You either get rich, or you get\nnothing.  In a startup, if you bet on the wrong technology, your\ncompetitors will crush you.Robert and I both knew Lisp well, and we couldn't see any reason\nnot to trust our instincts and go with Lisp.  We knew that everyone\nelse was writing their software in C++ or Perl.  But we also knew\nthat that didn't mean anything.  If you chose technology that way,\nyou'd be running Windows.  When you choose technology, you have to\nignore what other people are doing, and consider only what will\nwork the best.This is especially true in a startup.  In a big company, you can\ndo what all the other big companies are doing.  But a startup can't\ndo what all the other startups do.  I don't think a lot of people\nrealize this, even in startups.The average big company grows at about ten percent a year.  So if\nyou're running a big company and you do everything the way the\naverage big company does it, you can expect to do as well as the\naverage big company-- that is, to grow about ten percent a year.The same thing will happen if you're running a startup, of course.\nIf you do everything the way the average startup does it, you should\nexpect average performance.  The problem here is, average performance\nmeans that you'll go out of business.  The survival rate for startups\nis way less than fifty percent.  So if you're running a startup,\nyou had better be doing something odd.  If not, you're in trouble.Back in 1995, we knew something that I don't think our competitors\nunderstood, and few understand even now:  when you're writing\nsoftware that only has to run on your own servers, you can use\nany language you want.  When you're writing desktop software,\nthere's a strong bias toward writing applications in the same\nlanguage as the operating system.  Ten years ago, writing applications\nmeant writing applications in C.  But with Web-based software,\nespecially when you have the source code of both the language and\nthe operating system, you can use whatever language you want.This new freedom is a double-edged sword, however.  Now that you\ncan use any language, you have to think about which one to use.\nCompanies that try to pretend nothing has changed risk finding that\ntheir competitors do not.If you can use any language, which do you use?  We chose Lisp.\nFor one thing, it was obvious that rapid development would be\nimportant in this market.  We were all starting from scratch, so\na company that could get new features done before its competitors\nwould have a big advantage.  We knew Lisp was a really good language\nfor writing software quickly, and server-based applications magnify\nthe effect of rapid development, because you can release software\nthe minute it's done.If other companies didn't want to use Lisp, so much the better.\nIt might give us a technological edge, and we needed all the help\nwe could get.  When we started Viaweb, we had no experience in\nbusiness.  We didn't know anything about marketing, or hiring\npeople, or raising money, or getting customers.  Neither of us had\never even had what you would call a real job.  The only thing we\nwere good at was writing software.  We hoped that would save us.\nAny advantage we could get in the software department, we would\ntake.So you could say that using Lisp was an experiment.  Our hypothesis\nwas that if we wrote our software in Lisp, we'd be able to get\nfeatures done faster than our competitors, and also to do things\nin our software that they couldn't do.  And because Lisp was so\nhigh-level, we wouldn't need a big development team, so our costs\nwould be lower.  If this were so, we could offer a better product\nfor less money, and still make a profit.  We would end up getting\nall the users, and our competitors would get none, and eventually\ngo out of business.  That was what we hoped would happen, anyway.What were the results of this experiment?  Somewhat surprisingly,\nit worked.  We eventually had many competitors, on the order of\ntwenty to thirty of them, but none of their software could compete\nwith ours.  We had a wysiwyg online store builder that ran on the\nserver and yet felt like a desktop application.  Our competitors\nhad cgi scripts.  And we were always far ahead of them in features.\nSometimes, in desperation, competitors would try to introduce\nfeatures that we didn't have.  But with Lisp our development cycle\nwas so fast that we could sometimes duplicate a new feature within\na day or two of a competitor announcing it in a press release.  By\nthe time journalists covering the press release got round to calling\nus, we would have the new feature too.It must have seemed to our competitors that we had some kind of\nsecret weapon-- that we were decoding their Enigma traffic or\nsomething.  In fact we did have a secret weapon, but it was simpler\nthan they realized.  No one was leaking news of their features to\nus.   We were just able to develop software faster than anyone\nthought possible.When I was about nine I happened to get hold of a copy of The Day\nof the Jackal, by Frederick Forsyth.  The main character is an\nassassin who is hired to kill the president of France.  The assassin\nhas to get past the police to get up to an apartment that overlooks\nthe president's route.  He walks right by them, dressed up as an\nold man on crutches, and they never suspect him.Our secret weapon was similar.  We wrote our software in a weird\nAI language, with a bizarre syntax full of parentheses.  For years\nit had annoyed me to hear Lisp described that way.  But now it\nworked to our advantage.  In business, there is nothing more valuable\nthan a technical advantage your competitors don't understand.  In\nbusiness, as in war, surprise is worth as much as force.And so, I'm a little embarrassed to say, I never said anything\npublicly about Lisp while we were working on Viaweb.  We never\nmentioned it to the press, and if you searched for Lisp on our Web\nsite, all you'd find were the titles of two books in my bio.  This\nwas no accident.  A startup should give its competitors as little\ninformation as possible.  If they didn't know what language our\nsoftware was written in, or didn't care, I wanted to keep it that\nway.[2]The people who understood our technology best were the customers.\nThey didn't care what language Viaweb was written in either, but\nthey noticed that it worked really well.  It let them build great\nlooking online stores literally in minutes.  And so, by word of\nmouth mostly, we got more and more users.  By the end of 1996 we\nhad about 70 stores online.  At the end of 1997 we had 500.  Six\nmonths later, when Yahoo bought us, we had 1070 users.  Today, as\nYahoo Store, this software continues to dominate its market.  It's\none of the more profitable pieces of Yahoo, and the stores built\nwith it are the foundation of Yahoo Shopping.  I left Yahoo in\n1999, so I don't know exactly how many users they have now, but\nthe last I heard there were about 20,000.\nThe Blub ParadoxWhat's so great about Lisp?  And if Lisp is so great, why doesn't\neveryone use it?  These sound like rhetorical questions, but actually\nthey have straightforward answers.  Lisp is so great not because\nof some magic quality visible only to devotees, but because it is\nsimply the most powerful language available.  And the reason everyone\ndoesn't use it is that programming languages are not merely\ntechnologies, but habits of mind as well, and nothing changes\nslower.  Of course, both these answers need explaining.I'll begin with a shockingly controversial statement:  programming\nlanguages vary in power.Few would dispute, at least, that high level languages are more\npowerful than machine language.  Most programmers today would agree\nthat you do not, ordinarily, want to program in machine language.\nInstead, you should program in a high-level language, and have a\ncompiler translate it into machine language for you.  This idea is\neven built into the hardware now: since the 1980s, instruction sets\nhave been designed for compilers rather than human programmers.Everyone knows it's a mistake to write your whole program by hand\nin machine language.  What's less often understood is that there\nis a more general principle here: that if you have a choice of\nseveral languages, it is, all other things being equal, a mistake\nto program in anything but the most powerful one. [3]There are many exceptions to this rule.  If you're writing a program\nthat has to work very closely with a program written in a certain\nlanguage, it might be a good idea to write the new program in the\nsame language.  If you're writing a program that only has to do\nsomething very simple, like number crunching or bit manipulation,\nyou may as well use a less abstract language, especially since it\nmay be slightly faster.  And if you're writing a short, throwaway\nprogram, you may be better off just using whatever language has\nthe best library functions for the task.  But in general, for\napplication software, you want to be using the most powerful\n(reasonably efficient) language you can get, and using anything\nelse is a mistake, of exactly the same kind, though possibly in a\nlesser degree, as programming in machine language.You can see that machine language is very low level.  But, at least\nas a kind of social convention, high-level languages are often all\ntreated as equivalent.  They're not.  Technically the term \"high-level\nlanguage\" doesn't mean anything very definite.  There's no dividing\nline with machine languages on one side and all the high-level\nlanguages on the other.  Languages fall along a continuum [4] of\nabstractness, from the most powerful all the way down to machine\nlanguages, which themselves vary in power.Consider Cobol.  Cobol is a high-level language, in the sense that\nit gets compiled into machine language.  Would anyone seriously\nargue that Cobol is equivalent in power to, say, Python?  It's\nprobably closer to machine language than Python.Or how about Perl 4?  Between Perl 4 and Perl 5, lexical closures\ngot added to the language.  Most Perl hackers would agree that Perl\n5 is more powerful than Perl 4.  But once you've admitted that,\nyou've admitted that one high level language can be more powerful\nthan another.  And it follows inexorably that, except in special\ncases, you ought to use the most powerful you can get.This idea is rarely followed to its conclusion, though.  After a\ncertain age, programmers rarely switch languages voluntarily.\nWhatever language people happen to be used to, they tend to consider\njust good enough.Programmers get very attached to their favorite languages, and I\ndon't want to hurt anyone's feelings, so to explain this point I'm\ngoing to use a hypothetical language called Blub.  Blub falls right\nin the middle of the abstractness continuum.  It is not the most\npowerful language, but it is more powerful than Cobol or machine\nlanguage.And in fact, our hypothetical Blub programmer wouldn't use either\nof them.  Of course he wouldn't program in machine language.  That's\nwhat compilers are for.  And as for Cobol, he doesn't know how\nanyone can get anything done with it.  It doesn't even have x (Blub\nfeature of your choice).As long as our hypothetical Blub programmer is looking down the\npower continuum, he knows he's looking down.  Languages less powerful\nthan Blub are obviously less powerful, because they're missing some\nfeature he's used to.  But when our hypothetical Blub programmer\nlooks in the other direction, up the power continuum, he doesn't\nrealize he's looking up.  What he sees are merely weird languages.\nHe probably considers them about equivalent in power to Blub, but\nwith all this other hairy stuff thrown in as well.  Blub is good\nenough for him, because he thinks in Blub.When we switch to the point of view of a programmer using any of\nthe languages higher up the power continuum, however, we find that\nhe in turn looks down upon Blub.  How can you get anything done in\nBlub? It doesn't even have y.By induction, the only programmers in a position to see all the\ndifferences in power between the various languages are those who\nunderstand the most powerful one.  (This is probably what Eric\nRaymond meant about Lisp making you a better programmer.) You can't\ntrust the opinions of the others, because of the Blub paradox:\nthey're satisfied with whatever language they happen to use, because\nit dictates the way they think about programs.I know this from my own experience, as a high school kid writing\nprograms in Basic.  That language didn't even support recursion.\nIt's hard to imagine writing programs without using recursion, but\nI didn't miss it at the time.  I thought in Basic.  And I was a\nwhiz at it.  Master of all I surveyed.The five languages that Eric Raymond recommends to hackers fall at\nvarious points on the power continuum.  Where they fall relative\nto one another is a sensitive topic.  What I will say is that I\nthink Lisp is at the top.  And to support this claim I'll tell you\nabout one of the things I find missing when I look at the other\nfour languages.  How can you get anything done in them, I think,\nwithout macros? [5]Many languages have something called a macro.  But Lisp macros are\nunique.  And believe it or not, what they do is related to the\nparentheses.  The designers of Lisp didn't put all those parentheses\nin the language just to be different.  To the Blub programmer, Lisp\ncode looks weird.  But those parentheses are there for a reason.\nThey are the outward evidence of a fundamental difference between\nLisp and other languages.Lisp code is made out of Lisp data objects.  And not in the trivial\nsense that the source files contain characters, and strings are\none of the data types supported by the language.  Lisp code, after\nit's read by the parser, is made of data structures that you can\ntraverse.If you understand how compilers work, what's really going on is\nnot so much that Lisp has a strange syntax as that Lisp has no\nsyntax.  You write programs in the parse trees that get generated\nwithin the compiler when other languages are parsed.  But these\nparse trees are fully accessible to your programs.  You can write\nprograms that manipulate them.  In Lisp, these programs are called\nmacros.  They are programs that write programs.Programs that write programs?  When would you ever want to do that?\nNot very often, if you think in Cobol.  All the time, if you think\nin Lisp.  It would be convenient here if I could give an example\nof a powerful macro, and say there! how about that?  But if I did,\nit would just look like gibberish to someone who didn't know Lisp;\nthere isn't room here to explain everything you'd need to know to\nunderstand what it meant.  In \nAnsi Common Lisp I tried to move\nthings along as fast as I could, and even so I didn't get to macros\nuntil page 160.But I think I can give a kind of argument that might be convincing.\nThe source code of the Viaweb editor was probably about 20-25%\nmacros.  Macros are harder to write than ordinary Lisp functions,\nand it's considered to be bad style to use them when they're not\nnecessary.  So every macro in that code is there because it has to\nbe.  What that means is that at least 20-25% of the code in this\nprogram is doing things that you can't easily do in any other\nlanguage.  However skeptical the Blub programmer might be about my\nclaims for the mysterious powers of Lisp, this ought to make him\ncurious.  We weren't writing this code for our own amusement.  We\nwere a tiny startup, programming as hard as we could in order to\nput technical barriers between us and our competitors.A suspicious person might begin to wonder if there was some\ncorrelation here.  A big chunk of our code was doing things that\nare very hard to do in other languages.  The resulting software\ndid things our competitors' software couldn't do.  Maybe there was\nsome kind of connection.  I encourage you to follow that thread.\nThere may be more to that old man hobbling along on his crutches\nthan meets the eye.Aikido for StartupsBut I don't expect to convince anyone \n(over 25) \nto go out and learn\nLisp.  The purpose of this article is not to change anyone's mind,\nbut to reassure people already interested in using Lisp-- people\nwho know that Lisp is a powerful language, but worry because it\nisn't widely used.  In a competitive situation, that's an advantage.\nLisp's power is multiplied by the fact that your competitors don't\nget it.If you think of using Lisp in a startup, you shouldn't worry that\nit isn't widely understood.  You should hope that it stays that\nway. And it's likely to.  It's the nature of programming languages\nto make most people satisfied with whatever they currently use.\nComputer hardware changes so much faster than personal habits that\nprogramming practice is usually ten to twenty years behind the\nprocessor.  At places like MIT they were writing programs in\nhigh-level languages in the early 1960s, but many companies continued\nto write code in machine language well into the 1980s.  I bet a\nlot of people continued to write machine language until the processor,\nlike a bartender eager to close up and go home, finally kicked them\nout by switching to a risc instruction set.Ordinarily technology changes fast.  But programming languages are\ndifferent: programming languages are not just technology, but what\nprogrammers think in.  They're half technology and half religion.[6]\nAnd so the median language, meaning whatever language the median\nprogrammer uses, moves as slow as an iceberg.  Garbage collection,\nintroduced by Lisp in about 1960, is now widely considered to be\na good thing.  Runtime typing, ditto, is growing in popularity.\nLexical closures, introduced by Lisp in the early 1970s, are now,\njust barely, on the radar screen.  Macros, introduced by Lisp in the\nmid 1960s, are still terra incognita.Obviously, the median language has enormous momentum.  I'm not\nproposing that you can fight this powerful force.  What I'm proposing\nis exactly the opposite: that, like a practitioner of Aikido, you\ncan use it against your opponents.If you work for a big company, this may not be easy.  You will have\na hard time convincing the pointy-haired boss to let you build\nthings in Lisp, when he has just read in the paper that some other\nlanguage is poised, like Ada was twenty years ago, to take over\nthe world.  But if you work for a startup that doesn't have\npointy-haired bosses yet, you can, like we did, turn the Blub\nparadox to your advantage:  you can use technology that your\ncompetitors, glued immovably to the median language, will never be\nable to match.If you ever do find yourself working for a startup, here's a handy\ntip for evaluating competitors.  Read their job listings.  Everything\nelse on their site may be stock photos or the prose equivalent,\nbut the job listings have to be specific about what they want, or\nthey'll get the wrong candidates.During the years we worked on Viaweb I read a lot of job descriptions.\nA new competitor seemed to emerge out of the woodwork every month\nor so.  The first thing I would do, after checking to see if they\nhad a live online demo, was look at their job listings.  After a\ncouple years of this I could tell which companies to worry about\nand which not to.  The more of an IT flavor the job descriptions\nhad, the less dangerous the company was.  The safest kind were the\nones that wanted Oracle experience.  You never had to worry about\nthose.  You were also safe if they said they wanted C++ or Java\ndevelopers.  If they wanted Perl or Python programmers, that would\nbe a bit frightening-- that's starting to sound like a company\nwhere the technical side, at least, is run by real hackers.  If I\nhad ever seen a job posting looking for Lisp hackers, I would have\nbeen really worried.\nNotes[1] Viaweb at first had two parts: the editor, written in Lisp,\nwhich people used to build their sites, and the ordering system,\nwritten in C, which handled orders.  The first version was mostly\nLisp, because the ordering system was small.  Later we added two\nmore modules, an image generator written in C, and a back-office\nmanager written mostly in Perl.In January 2003, Yahoo released a new version of the editor \nwritten in C++ and Perl.  It's hard to say whether the program is no\nlonger written in Lisp, though, because to translate this program\ninto C++ they literally had to write a Lisp interpreter: the source\nfiles of all the page-generating templates are still, as far as I\nknow,  Lisp code.  (See Greenspun's Tenth Rule.)[2] Robert Morris says that I didn't need to be secretive, because\neven if our competitors had known we were using Lisp, they wouldn't\nhave understood why:  \"If they were that smart they'd already be\nprogramming in Lisp.\"[3] All languages are equally powerful in the sense of being Turing\nequivalent, but that's not the sense of the word programmers care\nabout. (No one wants to program a Turing machine.)  The kind of\npower programmers care about may not be formally definable, but\none way to explain it would be to say that it refers to features\nyou could only get in the less powerful language by writing an\ninterpreter for the more powerful language in it. If language A\nhas an operator for removing spaces from strings and language B\ndoesn't, that probably doesn't make A more powerful, because you\ncan probably write a subroutine to do it in B.  But if A supports,\nsay, recursion, and B doesn't, that's not likely to be something\nyou can fix by writing library functions.[4] Note to nerds: or possibly a lattice, narrowing toward the top;\nit's not the shape that matters here but the idea that there is at\nleast a partial order.[5] It is a bit misleading to treat macros as a separate feature.\nIn practice their usefulness is greatly enhanced by other Lisp\nfeatures like lexical closures and rest parameters.[6] As a result, comparisons of programming languages either take\nthe form of religious wars or undergraduate textbooks so determinedly\nneutral that they're really works of anthropology.  People who\nvalue their peace, or want tenure, avoid the topic.  But the question\nis only half a religious one; there is something there worth\nstudying, especially if you want to design new languages.\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nOctober 2014(This essay is derived from a guest lecture in Sam Altman's startup class at\nStanford.  It's intended for college students, but much of it is\napplicable to potential founders at other ages.)One of the advantages of having kids is that when you have to give\nadvice, you can ask yourself \"what would I tell my own kids?\"  My\nkids are little, but I can imagine what I'd tell them about startups\nif they were in college, and that's what I'm going to tell you.Startups are very counterintuitive.  I'm not sure why.  Maybe it's\njust because knowledge about them hasn't permeated our culture yet.\nBut whatever the reason, starting a startup is a task where you\ncan't always trust your instincts.It's like skiing in that way.  When you first try skiing and you\nwant to slow down, your instinct is to lean back.  But if you lean\nback on skis you fly down the hill out of control.  So part of\nlearning to ski is learning to suppress that impulse.  Eventually\nyou get new habits, but at first it takes a conscious effort.  At\nfirst there's a list of things you're trying to remember as you\nstart down the hill.Startups are as unnatural as skiing, so there's a similar list for\nstartups. Here I'm going to give you the first part of it \u2014 the things\nto remember if you want to prepare yourself to start a startup.\nCounterintuitiveThe first item on it is the fact I already mentioned: that startups\nare so weird that if you trust your instincts, you'll make a lot\nof mistakes.  If you know nothing more than this, you may at least\npause before making them.When I was running Y Combinator I used to joke that our function\nwas to tell founders things they would ignore.  It's really true.\nBatch after batch, the YC partners warn founders about mistakes\nthey're about to make, and the founders ignore them, and then come\nback a year later and say \"I wish we'd listened.\"Why do the founders ignore the partners' advice?  Well, that's the\nthing about counterintuitive ideas: they contradict your intuitions.\nThey seem wrong.  So of course your first impulse is to disregard\nthem.  And in fact my joking description is not merely the curse\nof Y Combinator but part of its raison d'etre. If founders' instincts\nalready gave them the right answers, they wouldn't need us.  You\nonly need other people to give you advice that surprises you. That's\nwhy there are a lot of ski instructors and not many running\ninstructors.\n[1]You can, however, trust your instincts about people.  And in fact\none of the most common mistakes young founders make is not to\ndo that enough.  They get involved with people who seem impressive,\nbut about whom they feel some misgivings personally.  Later when\nthings blow up they say \"I knew there was something off about him,\nbut I ignored it because he seemed so impressive.\"If you're thinking about getting involved with someone \u2014 as a\ncofounder, an employee, an investor, or an acquirer \u2014 and you\nhave misgivings about them, trust your gut.  If someone seems\nslippery, or bogus, or a jerk, don't ignore it.This is one case where it pays to be self-indulgent. Work with\npeople you genuinely like, and you've known long enough to be sure.\nExpertiseThe second counterintuitive point is that it's not that important\nto know a lot about startups.  The way to succeed in a startup is\nnot to be an expert on startups, but to be an expert on your users\nand the problem you're solving for them.\nMark Zuckerberg didn't succeed because he was an expert on startups.\nHe succeeded despite being a complete noob at startups, because he\nunderstood his users really well.If you don't know anything about, say, how to raise an angel round,\ndon't feel bad on that account.  That sort of thing you can learn\nwhen you need to, and forget after you've done it.In fact, I worry it's not merely unnecessary to learn in great\ndetail about the mechanics of startups, but possibly somewhat\ndangerous.  If I met an undergrad who knew all about convertible\nnotes and employee agreements and (God forbid) class FF stock, I\nwouldn't think \"here is someone who is way ahead of their peers.\"\nIt would set off alarms.  Because another of the characteristic\nmistakes of young founders is to go through the motions of starting\na startup.  They make up some plausible-sounding idea, raise money\nat a good valuation, rent a cool office, hire a bunch of people.\nFrom the outside that seems like what startups do.  But the next\nstep after rent a cool office and hire a bunch of people is: gradually\nrealize how completely fucked they are, because while imitating all\nthe outward forms of a startup they have neglected the one thing\nthat's actually essential: making something people want.\nGameWe saw this happen so often that we made up a name for it: playing\nhouse.  Eventually I realized why it was happening.  The reason\nyoung founders go through the motions of starting a startup is\nbecause that's what they've been trained to do for their whole lives\nup to that point.  Think about what you have to do to get into\ncollege, for example.  Extracurricular activities, check.  Even in\ncollege classes most of the work is as artificial as running laps.I'm not attacking the educational system for being this way. There\nwill always be a certain amount of fakeness in the work you do when\nyou're being taught something, and if you measure their performance\nit's inevitable that people will exploit the difference to the point\nwhere much of what you're measuring is artifacts of the fakeness.I confess I did it myself in college. I found that in a lot of\nclasses there might only be 20 or 30 ideas that were the right shape\nto make good exam questions.  The way I studied for exams in these\nclasses was not (except incidentally) to master the material taught\nin the class, but to make a list of potential exam questions and\nwork out the answers in advance. When I walked into the final, the\nmain thing I'd be feeling was curiosity about which of my questions\nwould turn up on the exam.  It was like a game.It's not surprising that after being trained for their whole lives\nto play such games, young founders' first impulse on starting a\nstartup is to try to figure out the tricks for winning at this new\ngame. Since fundraising appears to be the measure of success for\nstartups (another classic noob mistake), they always want to know what the\ntricks are for convincing investors.  We tell them the best way to\nconvince investors is to make a startup\nthat's actually doing well, meaning growing fast, and then simply\ntell investors so.  Then they want to know what the tricks are for\ngrowing fast.  And we have to tell them the best way to do that is\nsimply to make something people want.So many of the conversations YC partners have with young founders\nbegin with the founder asking \"How do we...\" and the partner replying\n\"Just...\"Why do the founders always make things so complicated?  The reason,\nI realized, is that they're looking for the trick.So this is the third counterintuitive thing to remember about\nstartups: starting a startup is where gaming the system stops\nworking.  Gaming the system may continue to work if you go to work\nfor a big company. Depending on how broken the company is, you can\nsucceed by sucking up to the right people, giving the impression\nof productivity, and so on. \n[2]\nBut that doesn't work with startups.\nThere is no boss to trick, only users, and all users care about is\nwhether your product does what they want. Startups are as impersonal\nas physics.  You have to make something people want, and you prosper\nonly to the extent you do.The dangerous thing is, faking does work to some degree on investors.\nIf you're super good at sounding like you know what you're talking\nabout, you can fool investors for at least one and perhaps even two\nrounds of funding.  But it's not in your interest to.  The company\nis ultimately doomed.  All you're doing is wasting your own time\nriding it down.So stop looking for the trick. There are tricks in startups, as\nthere are in any domain, but they are an order of magnitude less\nimportant than solving the real problem. A founder who knows nothing\nabout fundraising but has made something users love will have an\neasier time raising money than one who knows every trick in the\nbook but has a flat usage graph. And more importantly, the founder\nwho has made something users love is the one who will go on to\nsucceed after raising the money.Though in a sense it's bad news in that you're deprived of one of\nyour most powerful weapons, I think it's exciting that gaming the\nsystem stops working when you start a startup.  It's exciting that\nthere even exist parts of the world where you win by doing good\nwork.  Imagine how depressing the world would be if it were all\nlike school and big companies, where you either have to spend a lot\nof time on bullshit things or lose to people who do.\n[3]\nI would\nhave been delighted if I'd realized in college that there were parts\nof the real world where gaming the system mattered less than others,\nand a few where it hardly mattered at all.  But there are, and this\nvariation is one of the most important things to consider when\nyou're thinking about your future.  How do you win in each type of\nwork, and what would you like to win by doing?\n[4]\nAll-ConsumingThat brings us to our fourth counterintuitive point: startups are\nall-consuming.  If you start a startup, it will take over your life\nto a degree you cannot imagine.  And if your startup succeeds, it\nwill take over your life for a long time: for several years at the\nvery least, maybe for a decade, maybe for the rest of your working\nlife.  So there is a real opportunity cost here.Larry Page may seem to have an enviable life, but there are aspects\nof it that are unenviable.  Basically at 25 he started running as\nfast as he could and it must seem to him that he hasn't stopped to\ncatch his breath since.  Every day new shit happens in the Google\nempire that only the CEO can deal with, and he, as CEO, has to deal\nwith it.  If he goes on vacation for even a week, a whole week's\nbacklog of shit accumulates.  And he has to bear this uncomplainingly,\npartly because as the company's daddy he can never show fear or\nweakness, and partly because billionaires get less than zero sympathy\nif they talk about having difficult lives.  Which has the strange\nside effect that the difficulty of being a successful startup founder\nis concealed from almost everyone except those who've done it.Y Combinator has now funded several companies that can be called\nbig successes, and in every single case the founders say the same\nthing.  It never gets any easier.  The nature of the problems change.\nYou're worrying about construction delays at your London office\ninstead of the broken air conditioner in your studio apartment.\nBut the total volume of worry never decreases; if anything it\nincreases.Starting a successful startup is similar to having kids in that\nit's like a button you push that changes your life irrevocably.\nAnd while it's truly wonderful having kids, there are a lot of\nthings that are easier to do before you have them than after.  Many\nof which will make you a better parent when you do have kids. And\nsince you can delay pushing the button for a while, most people in\nrich countries do.Yet when it comes to startups, a lot of people seem to think they're\nsupposed to start them while they're still in college.  Are you\ncrazy?  And what are the universities thinking?  They go out of\ntheir way to ensure their students are well supplied with contraceptives,\nand yet they're setting up entrepreneurship programs and startup\nincubators left and right.To be fair, the universities have their hand forced here.  A lot\nof incoming students are interested in startups.  Universities are,\nat least de facto, expected to prepare them for their careers.  So\nstudents who want to start startups hope universities can teach\nthem about startups.  And whether universities can do this or not,\nthere's some pressure to claim they can, lest they lose applicants\nto other universities that do.Can universities teach students about startups?  Yes and no.  They\ncan teach students about startups, but as I explained before, this\nis not what you need to know.  What you need to learn about are the\nneeds of your own users, and you can't do that until you actually\nstart the company.\n[5]\nSo starting a startup is intrinsically\nsomething you can only really learn by doing it.  And it's impossible\nto do that in college, for the reason I just explained: startups\ntake over your life.  You can't start a startup for real as a\nstudent, because if you start a startup for real you're not a student\nanymore. You may be nominally a student for a bit, but you won't even\nbe that for long.\n[6]Given this dichotomy, which of the two paths should you take?  Be\na real student and not start a startup, or start a real startup and\nnot be a student?  I can answer that one for you. Do not start a\nstartup in college.  How to start a startup is just a subset of a\nbigger problem you're trying to solve: how to have a good life.\nAnd though starting a startup can be part of a good life for a lot\nof ambitious people, age 20 is not the optimal time to do it.\nStarting a startup is like a brutally fast depth-first search.  Most\npeople should still be searching breadth-first at 20.You can do things in your early 20s that you can't do as well before\nor after, like plunge deeply into projects on a whim and travel\nsuper cheaply with no sense of a deadline.  For unambitious people,\nthis sort of thing is the dreaded \"failure to launch,\" but for the\nambitious ones it can be an incomparably valuable sort of exploration.\nIf you start a startup at 20 and you're sufficiently successful,\nyou'll never get to do it.\n[7]Mark Zuckerberg will never get to bum around a foreign country.  He\ncan do other things most people can't, like charter jets to fly him\nto foreign countries. But success has taken a lot of the serendipity\nout of his life. Facebook is running him as much as he's running\nFacebook. And while it can be very cool to be in the grip of a\nproject you consider your life's work, there are advantages to\nserendipity too, especially early in life.  Among other things it\ngives you more options to choose your life's work from.There's not even a tradeoff here. You're not sacrificing anything\nif you forgo starting a startup at 20, because you're more likely\nto succeed if you wait.  In the unlikely case that you're 20 and\none of your side projects takes off like Facebook did, you'll face\na choice of running with it or not, and it may be reasonable to run\nwith it.  But the usual way startups take off is for the founders\nto make them take off, and it's gratuitously\nstupid to do that at 20.\nTryShould you do it at any age?  I realize I've made startups sound\npretty hard.  If I haven't, let me try again: starting a startup\nis really hard.  What if it's too hard?  How can you tell if you're\nup to this challenge?The answer is the fifth counterintuitive point: you can't tell. Your\nlife so far may have given you some idea what your prospects might\nbe if you tried to become a mathematician, or a professional football\nplayer.  But unless you've had a very strange life you haven't done\nmuch that was like being a startup founder.\nStarting a startup will change you a lot.  So what you're trying\nto estimate is not just what you are, but what you could grow into,\nand who can do that?For the past 9 years it was my job to predict whether people would\nhave what it took to start successful startups.  It was easy to\ntell how smart they were, and most people reading this will be over\nthat threshold.  The hard part was predicting how tough and ambitious they would become.  There\nmay be no one who has more experience at trying to predict that,\nso I can tell you how much an expert can know about it, and the\nanswer is: not much.  I learned to keep a completely open mind about\nwhich of the startups in each batch would turn out to be the stars.The founders sometimes think they know. Some arrive feeling sure\nthey will ace Y Combinator just as they've aced every one of the (few,\nartificial, easy) tests they've faced in life so far.  Others arrive\nwondering how they got in, and hoping YC doesn't discover whatever\nmistake caused it to accept them.  But there is little correlation\nbetween founders' initial attitudes and how well their companies\ndo.I've read that the same is true in the military \u2014 that the\nswaggering recruits are no more likely to turn out to be really\ntough than the quiet ones. And probably for the same reason: that\nthe tests involved are so different from the ones in their previous\nlives.If you're absolutely terrified of starting a startup, you probably\nshouldn't do it.  But if you're merely unsure whether you're up to\nit, the only way to find out is to try.  Just not now.\nIdeasSo if you want to start a startup one day, what should you do in\ncollege?  There are only two things you need initially: an idea and\ncofounders.  And the m.o. for getting both is the same.  Which leads\nto our sixth and last counterintuitive point: that the way to get\nstartup ideas is not to try to think of startup ideas.I've written a whole essay on this,\nso I won't repeat it all here.  But the short version is that if\nyou make a conscious effort to think of startup ideas, the ideas\nyou come up with will not merely be bad, but bad and plausible-sounding,\nmeaning you'll waste a lot of time on them before realizing they're\nbad.The way to come up with good startup ideas is to take a step back.\nInstead of making a conscious effort to think of startup ideas,\nturn your mind into the type that startup ideas form in without any\nconscious effort.  In fact, so unconsciously that you don't even\nrealize at first that they're startup ideas.This is not only possible, it's how Apple, Yahoo, Google, and\nFacebook all got started.  None of these companies were even meant\nto be companies at first.  They were all just side projects.  The\nbest startups almost have to start as side projects, because great\nideas tend to be such outliers that your conscious mind would reject\nthem as ideas for companies.Ok, so how do you turn your mind into the type that startup ideas\nform in unconsciously?  (1) Learn a lot about things that matter,\nthen (2) work on problems that interest you (3) with people you\nlike and respect.  The third part, incidentally, is how you get\ncofounders at the same time as the idea.The first time I wrote that paragraph, instead of \"learn a lot about\nthings that matter,\" I wrote \"become good at some technology.\" But\nthat prescription, though sufficient, is too narrow.  What was\nspecial about Brian Chesky and Joe Gebbia was not that they were\nexperts in technology.  They were good at design, and perhaps even\nmore importantly, they were good at organizing groups and making\nprojects happen.  So you don't have to work on technology per se,\nso long as you work on problems demanding enough to stretch you.What kind of problems are those?  That is very hard to answer in\nthe general case.  History is full of examples of young people who\nwere working on important problems that no\none else at the time thought were important, and in particular\nthat their parents didn't think were important.  On the other hand,\nhistory is even fuller of examples of parents who thought their\nkids were wasting their time and who were right.  So how do you\nknow when you're working on real stuff?\n[8]I know how I know.  Real problems are interesting, and I am\nself-indulgent in the sense that I always want to work on interesting\nthings, even if no one else cares about them (in fact, especially\nif no one else cares about them), and find it very hard to make\nmyself work on boring things, even if they're supposed to be\nimportant.My life is full of case after case where I worked on something just\nbecause it seemed interesting, and it turned out later to be useful\nin some worldly way.  Y\nCombinator itself was something I only did because it seemed\ninteresting. So I seem to have some sort of internal compass that\nhelps me out.  But I don't know what other people have in their\nheads. Maybe if I think more about this I can come up with heuristics\nfor recognizing genuinely interesting problems, but for the moment\nthe best I can offer is the hopelessly question-begging advice that\nif you have a taste for genuinely interesting problems, indulging\nit energetically is the best way to prepare yourself for a startup.\nAnd indeed, probably also the best way to live.\n[9]But although I can't explain in the general case what counts as an\ninteresting problem, I can tell you about a large subset of them.\nIf you think of technology as something that's spreading like a\nsort of fractal stain, every moving point on the edge represents\nan interesting problem.  So one guaranteed way to turn your mind\ninto the type that has good startup ideas is to get yourself to the\nleading edge of some technology \u2014 to cause yourself, as Paul\nBuchheit put it, to \"live in the future.\" When you reach that point,\nideas that will seem to other people uncannily prescient will seem\nobvious to you.  You may not realize they're startup ideas, but\nyou'll know they're something that ought to exist.For example, back at Harvard in the mid 90s a fellow grad student\nof my friends Robert and Trevor wrote his own voice over IP software.\nHe didn't mean it to be a startup, and he never tried to turn it\ninto one.  He just wanted to talk to his girlfriend in Taiwan without\npaying for long distance calls, and since he was an expert on\nnetworks it seemed obvious to him that the way to do it was turn\nthe sound into packets and ship it over the Internet. He never did\nany more with his software than talk to his girlfriend, but this\nis exactly the way the best startups get started.So strangely enough the optimal thing to do in college if you want\nto be a successful startup founder is not some sort of new, vocational\nversion of college focused on \"entrepreneurship.\" It's the classic\nversion of college as education for its own sake. If you want to\nstart a startup after college, what you should do in college is\nlearn powerful things.  And if you have genuine intellectual\ncuriosity, that's what you'll naturally tend to do if you just\nfollow your own inclinations.\n[10]The component of entrepreneurship that really matters is domain\nexpertise.  The way to become Larry Page was to become an expert\non search. And the way to become an expert on search was to be\ndriven by genuine curiosity, not some ulterior motive.At its best, starting a startup is merely an ulterior motive for\ncuriosity.  And you'll do it best if you introduce the ulterior\nmotive toward the end of the process.So here is the ultimate advice for young would-be startup founders,\nboiled down to two words: just learn.\nNotes[1]\nSome founders listen more than others, and this tends to be a\npredictor of success. One of the things I\nremember about the Airbnbs during YC is how intently they listened.[2]\nIn fact, this is one of the reasons startups are possible.  If\nbig companies weren't plagued by internal inefficiencies, they'd\nbe proportionately more effective, leaving less room for startups.[3]\nIn a startup you have to spend a lot of time on schleps, but this sort of work is merely\nunglamorous, not bogus.[4]\nWhat should you do if your true calling is gaming the system?\nManagement consulting.[5]\nThe company may not be incorporated, but if you start to get\nsignificant numbers of users, you've started it, whether you realize\nit yet or not.[6]\nIt shouldn't be that surprising that colleges can't teach\nstudents how to be good startup founders, because they can't teach\nthem how to be good employees either.The way universities \"teach\" students how to be employees is to\nhand off the task to companies via internship programs.  But you\ncouldn't do the equivalent thing for startups, because by definition\nif the students did well they would never come back.[7]\nCharles Darwin was 22 when he received an invitation to travel\naboard the HMS Beagle as a naturalist.  It was only because he was\notherwise unoccupied, to a degree that alarmed his family, that he\ncould accept it. And yet if he hadn't we probably would not know\nhis name.[8]\nParents can sometimes be especially conservative in this\ndepartment.  There are some whose definition of important problems\nincludes only those on the critical path to med school.[9]\nI did manage to think of a heuristic for detecting whether you\nhave a taste for interesting ideas: whether you find known boring\nideas intolerable.  Could you endure studying literary theory, or\nworking in middle management at a large company?[10]\nIn fact, if your goal is to start a startup, you can stick\neven more closely to the ideal of a liberal education than past\ngenerations have. Back when students focused mainly on getting a\njob after college, they thought at least a little about how the\ncourses they took might look to an employer.  And perhaps even\nworse, they might shy away from taking a difficult class lest they\nget a low grade, which would harm their all-important GPA.  Good\nnews: users don't care what your GPA\nwas.  And I've never heard of investors caring either.  Y Combinator\ncertainly never asks what classes you took in college or what grades\nyou got in them.\nThanks to Sam Altman, Paul Buchheit, John Collison, Patrick\nCollison, Jessica Livingston, Robert Morris, Geoff Ralston, and\nFred Wilson for reading drafts of this.October 2015This will come as a surprise to a lot of people, but in some cases\nit's possible to detect bias in a selection process without knowing\nanything about the applicant pool.  Which is exciting because among\nother things it means third parties can use this technique to detect\nbias whether those doing the selecting want them to or not.You can use this technique whenever (a) you have at least\na random sample of the applicants that were selected, (b) their\nsubsequent performance is measured, and (c) the groups of\napplicants you're comparing have roughly equal distribution of ability.How does it work?  Think about what it means to be biased.  What\nit means for a selection process to be biased against applicants\nof type x is that it's harder for them to make it through.  Which\nmeans applicants of type x have to be better to get selected than\napplicants not of type x.\n[1]\nWhich means applicants of type x\nwho do make it through the selection process will outperform other\nsuccessful applicants.  And if the performance of all the successful\napplicants is measured, you'll know if they do.Of course, the test you use to measure performance must be a valid\none.  And in particular it must not be invalidated by the bias you're\ntrying to measure.\nBut there are some domains where performance can be measured, and\nin those detecting bias is straightforward. Want to know if the\nselection process was biased against some type of applicant?  Check\nwhether they outperform the others.  This is not just a heuristic\nfor detecting bias.  It's what bias means.For example, many suspect that venture capital firms are biased\nagainst female founders. This would be easy to detect: among their\nportfolio companies, do startups with female founders outperform\nthose without?  A couple months ago, one VC firm (almost certainly\nunintentionally) published a study showing bias of this type. First\nRound Capital found that among its portfolio companies, startups\nwith female founders outperformed\nthose without by 63%. \n[2]The reason I began by saying that this technique would come as a\nsurprise to many people is that we so rarely see analyses of this\ntype.  I'm sure it will come as a surprise to First Round that they\nperformed one. I doubt anyone there realized that by limiting their\nsample to their own portfolio, they were producing a study not of\nstartup trends but of their own biases when selecting companies.I predict we'll see this technique used more in the future.  The\ninformation needed to conduct such studies is increasingly available.\nData about who applies for things is usually closely guarded by the\norganizations selecting them, but nowadays data about who gets\nselected is often publicly available to anyone who takes the trouble\nto aggregate it.\nNotes[1]\nThis technique wouldn't work if the selection process looked\nfor different things from different types of applicants\u2014for\nexample, if an employer hired men based on their ability but women\nbased on their appearance.[2]\nAs Paul Buchheit points out, First Round excluded their most \nsuccessful investment, Uber, from the study.  And while it \nmakes sense to exclude outliers from some types of studies, \nstudies of returns from startup investing, which is all about \nhitting outliers, are not one of them.\nThanks to Sam Altman, Jessica Livingston, and Geoff Ralston for reading\ndrafts of this.\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nMarch 2008, rev. June 2008Technology tends to separate normal from natural.  Our bodies\nweren't designed to eat the foods that people in rich countries eat, or\nto get so little exercise.  \nThere may be a similar problem with the way we work: \na normal job may be as bad for us intellectually as white flour\nor sugar is for us physically.I began to suspect this after spending several years working \nwith startup founders.  I've now worked with over 200 of them, and I've\nnoticed a definite difference between programmers working on their\nown startups and those working for large organizations.\nI wouldn't say founders seem happier, necessarily;\nstarting a startup can be very stressful. Maybe the best way to put\nit is to say that they're happier in the sense that your body is\nhappier during a long run than sitting on a sofa eating\ndoughnuts.Though they're statistically abnormal, startup founders seem to be\nworking in a way that's more natural for humans.I was in Africa last year and saw a lot of animals in the wild that\nI'd only seen in zoos before. It was remarkable how different they\nseemed. Particularly lions. Lions in the wild seem about ten times\nmore alive. They're like different animals. I suspect that working\nfor oneself feels better to humans in much the same way that living\nin the wild must feel better to a wide-ranging predator like a lion.\nLife in a zoo is easier, but it isn't the life they were designed\nfor.\nTreesWhat's so unnatural about working for a big company?  The root of\nthe problem is that humans weren't meant to work in such large\ngroups.Another thing you notice when you see animals in the wild is that\neach species thrives in groups of a certain size.  A herd of impalas\nmight have 100 adults; baboons maybe 20; lions rarely 10.  Humans\nalso seem designed to work in groups, and what I've read about\nhunter-gatherers accords with research on organizations and my own\nexperience to suggest roughly what the ideal size is: groups of 8\nwork well; by 20 they're getting hard to manage; and a group of 50\nis really unwieldy.\n[1]\nWhatever the upper limit is, we are clearly not meant to work in\ngroups of several hundred.  And yet\u2014for reasons having more\nto do with technology than human nature\u2014a great many people\nwork for companies with hundreds or thousands of employees.Companies know groups that large wouldn't work, so they divide\nthemselves into units small enough to work together.  But to\ncoordinate these they have to introduce something new: bosses.These smaller groups are always arranged in a tree structure.  Your\nboss is the point where your group attaches to the tree.  But when\nyou use this trick for dividing a large group into smaller ones,\nsomething strange happens that I've never heard anyone mention\nexplicitly.  In the group one level up from yours, your boss\nrepresents your entire group.  A group of 10 managers is not merely\na group of 10 people working together in the usual way.  It's really\na group of groups.  Which means for a group of 10 managers to work\ntogether as if they were simply a group of 10 individuals, the group\nworking for each manager would have to work as if they were a single\nperson\u2014the workers and manager would each share only one\nperson's worth of freedom between them.In practice a group of people are never able to act as if they were\none person.  But in a large organization divided into groups in\nthis way, the pressure is always in that direction.  Each group\ntries its best to work as if it were the small group of individuals\nthat humans were designed to work in.  That was the point of creating\nit.  And when you propagate that constraint, the result is that\neach person gets freedom of action in inverse proportion to the\nsize of the entire tree.\n[2]Anyone who's worked for a large organization has felt this.  You\ncan feel the difference between working for a company with 100\nemployees and one with 10,000, even if your group has only 10 people.\nCorn SyrupA group of 10 people within a large organization is a kind of fake\ntribe.  The number of people you interact with is about right.  But\nsomething is missing: individual initiative.  Tribes of hunter-gatherers\nhave much more freedom.  The leaders have a little more power than other\nmembers of the tribe, but they don't generally tell them what to\ndo and when the way a boss can.It's not your boss's fault.  The real problem is that in the group\nabove you in the hierarchy, your entire group is one virtual person.\nYour boss is just the way that constraint is imparted to you.So working in a group of 10 people within a large organization feels\nboth right and wrong at the same time.   On the surface it feels\nlike the kind of group you're meant to work in, but something major\nis missing.  A job at a big company is like high fructose corn\nsyrup: it has some of the qualities of things you're meant to like,\nbut is disastrously lacking in others.Indeed, food is an excellent metaphor to explain what's wrong with\nthe usual sort of job.For example, working for a big company is the default thing to do,\nat least for programmers.  How bad could it be?  Well, food shows\nthat pretty clearly.  If you were dropped at a random point in\nAmerica today, nearly all the food around you would be bad for you.\nHumans were not designed to eat white flour, refined sugar, high\nfructose corn syrup, and hydrogenated vegetable oil.  And yet if\nyou analyzed the contents of the average grocery store you'd probably\nfind these four ingredients accounted for most of the calories.\n\"Normal\" food is terribly bad for you.  The only people who eat\nwhat humans were actually designed to eat are a few Birkenstock-wearing\nweirdos in Berkeley.If \"normal\" food is so bad for us, why is it so common?  There are\ntwo main reasons. One is that it has more immediate appeal.  You\nmay feel lousy an hour after eating that pizza, but eating the first\ncouple bites feels great.  The other is economies of scale.\nProducing junk food scales; producing fresh vegetables doesn't.\nWhich means (a) junk food can be very cheap, and (b) it's worth\nspending a lot to market it.If people have to choose between something that's cheap, heavily\nmarketed, and appealing in the short term, and something that's\nexpensive, obscure, and appealing in the long term, which do you\nthink most will choose?It's the same with work.  The average MIT graduate wants to work\nat Google or Microsoft, because it's a recognized brand, it's safe,\nand they'll get paid a good salary right away.  It's the job\nequivalent of the pizza they had for lunch.  The drawbacks will\nonly become apparent later, and then only in a vague sense of\nmalaise.And founders and early employees of startups, meanwhile, are like\nthe Birkenstock-wearing weirdos of Berkeley:  though a tiny minority\nof the population, they're the ones living as humans are meant to.\nIn an artificial world, only extremists live naturally.\nProgrammersThe restrictiveness of big company jobs is particularly hard on\nprogrammers, because the essence of programming is to build new\nthings.  Sales people make much the same pitches every day; support\npeople answer much the same questions; but once you've written a\npiece of code you don't need to write it again.  So a programmer\nworking as programmers are meant to is always making new things.\nAnd when you're part of an organization whose structure gives each\nperson freedom in inverse proportion to the size of the tree, you're\ngoing to face resistance when you do something new.This seems an inevitable consequence of bigness.  It's true even\nin the smartest companies.  I was talking recently to a founder who\nconsidered starting a startup right out of college, but went to\nwork for Google instead because he thought he'd learn more there.\nHe didn't learn as much as he expected.  Programmers learn by doing,\nand most of the things he wanted to do, he couldn't\u2014sometimes\nbecause the company wouldn't let him, but often because the company's\ncode wouldn't let him.  Between the drag of legacy code, the overhead\nof doing development in such a large organization, and the restrictions\nimposed by interfaces owned by other groups, he could only try a\nfraction of the things he would have liked to.  He said he has\nlearned much more in his own startup, despite the fact that he has\nto do all the company's errands as well as programming, because at\nleast when he's programming he can do whatever he wants.An obstacle downstream propagates upstream.  If you're not allowed\nto implement new ideas, you stop having them.  And vice versa: when\nyou can do whatever you want, you have more ideas about what to do.\nSo working for yourself makes your brain more powerful in the same\nway a low-restriction exhaust system makes an engine more powerful.Working for yourself doesn't have to mean starting a startup, of\ncourse.  But a programmer deciding between a regular job at a big\ncompany and their own startup is probably going to learn more doing\nthe startup.You can adjust the amount of freedom you get by scaling the size\nof company you work for.  If you start the company, you'll have the\nmost freedom.  If you become one of the first 10 employees you'll\nhave almost as much freedom as the founders.  Even a company with\n100 people will feel different from one with 1000.Working for a small company doesn't ensure freedom.  The tree\nstructure of large organizations sets an upper bound on freedom,\nnot a lower bound.  The head of a small company may still choose\nto be a tyrant.  The point is that a large organization is compelled\nby its structure to be one.\nConsequencesThat has real consequences for both organizations and individuals.\nOne is that companies will inevitably slow down as they grow larger,\nno matter how hard they try to keep their startup mojo.  It's a\nconsequence of the tree structure that every large organization is\nforced to adopt.Or rather, a large organization could only avoid slowing down if\nthey avoided tree structure.  And since human nature limits the\nsize of group that can work together, the only way I can imagine\nfor larger groups to avoid tree structure would be to have no\nstructure: to have each group actually be independent, and to work\ntogether the way components of a market economy do.That might be worth exploring.  I suspect there are already some\nhighly partitionable businesses that lean this way.  But I don't\nknow any technology companies that have done it.There is one thing companies can do short of structuring themselves\nas sponges:  they can stay small.  If I'm right, then it really\npays to keep a company as small as it can be at every stage.\nParticularly a technology company.  Which means it's doubly important\nto hire the best people.  Mediocre hires hurt you twice: they get\nless done, but they also make you big, because you need more of\nthem to solve a given problem.For individuals the upshot is the same: aim small.  It will always\nsuck to work for large organizations, and the larger the organization,\nthe more it will suck.In an essay I wrote a couple years ago \nI advised graduating seniors\nto work for a couple years for another company before starting their\nown.  I'd modify that now.  Work for another company if you want\nto, but only for a small one, and if you want to start your own\nstartup, go ahead.The reason I suggested college graduates not start startups immediately\nwas that I felt most would fail.  And they will.  But ambitious\nprogrammers are better off doing their own thing and failing than\ngoing to work at a big company.  Certainly they'll learn more.  They\nmight even be better off financially.  A lot of people in their\nearly twenties get into debt, because their expenses grow even\nfaster than the salary that seemed so high when they left school.\nAt least if you start a startup and fail your net worth will be\nzero rather than negative.  \n[3]We've now funded so many different types of founders that we have\nenough data to see patterns, and there seems to be no benefit from\nworking for a big company.  The people who've worked for a few years\ndo seem better than the ones straight out of college, but only\nbecause they're that much older.The people who come to us from big companies often seem kind of\nconservative.  It's hard to say how much is because big companies\nmade them that way, and how much is the natural conservatism that\nmade them work for the big companies in the first place.  But\ncertainly a large part of it is learned.  I know because I've seen\nit burn off.Having seen that happen so many times is one of the things that\nconvinces me that working for oneself, or at least for a small\ngroup, is the natural way for programmers to live.  Founders arriving\nat Y Combinator often have the downtrodden air of refugees.  Three\nmonths later they're transformed: they have so much more \nconfidence\nthat they seem as if they've grown several inches taller. \n[4]\nStrange as this sounds, they seem both more worried and happier at the same\ntime.  Which is exactly how I'd describe the way lions seem in the\nwild.Watching employees get transformed into founders makes it clear\nthat the difference between the two is due mostly to environment\u2014and\nin particular that the environment in big companies is toxic to\nprogrammers.   In the first couple weeks of working on their own\nstartup they seem to come to life, because finally they're working\nthe way people are meant to.Notes[1]\nWhen I talk about humans being meant or designed to live a\ncertain way, I mean by evolution.[2]\nIt's not only the leaves who suffer.  The constraint propagates\nup as well as down.  So managers are constrained too; instead of\njust doing things, they have to act through subordinates.[3]\nDo not finance your startup with credit cards.  Financing a\nstartup with debt is usually a stupid move, and credit card debt\nstupidest of all.  Credit card debt is a bad idea, period.  It is\na trap set by evil companies for the desperate and the foolish.[4]\nThe founders we fund used to be younger (initially we encouraged\nundergrads to apply), and the first couple times I saw this I used\nto wonder if they were actually getting physically taller.Thanks to Trevor Blackwell, Ross Boucher, Aaron Iba, Abby\nKirigin, Ivan Kirigin, Jessica Livingston, and Robert Morris for\nreading drafts of this.July 2006\nWhen I was in high school I spent a lot of time imitating bad\nwriters.  What we studied in English classes was mostly fiction,\nso I assumed that was the highest form of writing.  Mistake number\none.  The stories that seemed to be most admired were ones in which\npeople suffered in complicated ways.  Anything funny or\ngripping was ipso facto suspect, unless it was old enough to be hard to\nunderstand, like Shakespeare or Chaucer.  Mistake number two.  The\nideal medium seemed the short story, which I've since learned had\nquite a brief life, roughly coincident with the peak of magazine\npublishing.  But since their size made them perfect for use in\nhigh school classes, we read a lot of them, which gave us the\nimpression the short story was flourishing.  Mistake number three.\nAnd because they were so short, nothing really had to happen; you\ncould just show a randomly truncated slice of life, and that was\nconsidered advanced.  Mistake number four.  The result was that I\nwrote a lot of stories in which nothing happened except that someone\nwas unhappy in a way that seemed deep.For most of college I was a philosophy major.  I was very impressed\nby the papers published in philosophy journals.  They were so\nbeautifully typeset, and their tone was just captivating\u2014alternately\ncasual and buffer-overflowingly technical.  A fellow would be walking\nalong a street and suddenly modality qua modality would spring upon\nhim.  I didn't ever quite understand these papers, but I figured\nI'd get around to that later, when I had time to reread them more\nclosely.  In the meantime I tried my best to imitate them.  This\nwas, I can now see, a doomed undertaking, because they weren't\nreally saying anything.  No philosopher ever refuted another, for\nexample, because no one said anything definite enough to refute.\nNeedless to say, my imitations didn't say anything either.In grad school I was still wasting time imitating the wrong things.\nThere was then a fashionable type of program called an expert system,\nat the core of which was something called an inference engine.  I\nlooked at what these things did and thought \"I could write that in\na thousand lines of code.\"  And yet eminent professors were writing\nbooks about them, and startups were selling them for a year's salary\na copy.  What an opportunity, I thought; these impressive things\nseem easy to me; I must be pretty sharp.  Wrong.  It was simply a\nfad.  The books the professors wrote about expert systems are now\nignored.  They were not even on a path to anything interesting.\nAnd the customers paying so much for them were largely the same\ngovernment agencies that paid thousands for screwdrivers and toilet\nseats.How do you avoid copying the wrong things?  Copy only what you\ngenuinely like.  That would have saved me in all three cases.  I\ndidn't enjoy the short stories we had to read in English classes;\nI didn't learn anything from philosophy papers; I didn't use expert\nsystems myself.  I believed these things were good because they\nwere admired.It can be hard to separate the things you like from the things\nyou're impressed with.  One trick is to ignore presentation.  Whenever\nI see a painting impressively hung in a museum, I ask myself: how\nmuch would I pay for this if I found it at a garage sale, dirty and\nframeless, and with no idea who painted it?  If you walk around a\nmuseum trying this experiment, you'll find you get some truly\nstartling results.  Don't ignore this data point just because it's\nan outlier.Another way to figure out what you like is to look at what you enjoy\nas guilty pleasures.  Many things people like, especially if they're\nyoung and ambitious, they like largely for the feeling of virtue\nin liking them.  99% of people reading Ulysses are thinking\n\"I'm reading Ulysses\" as they do it. A guilty pleasure is\nat least a pure one.  What do you read when you don't feel up to being\nvirtuous?  What kind of book do you read and feel sad that there's\nonly half of it left, instead of being impressed that you're half\nway through?  That's what you really like.Even when you find genuinely good things to copy, there's another\npitfall to be avoided.  Be careful to copy what makes them good,\nrather than their flaws.  It's easy to be drawn into imitating\nflaws, because they're easier to see, and of course easier to copy\ntoo.  For example, most painters in the eighteenth and nineteenth\ncenturies used brownish colors.  They were imitating the great\npainters of the Renaissance, whose paintings by that time were brown\nwith dirt.  Those paintings have since been cleaned, revealing\nbrilliant colors; their imitators are of course still brown.It was painting, incidentally, that cured me of copying the wrong\nthings.  Halfway through grad school I decided I wanted to try being\na painter, and the art world was so manifestly corrupt that it\nsnapped the leash of credulity.  These people made philosophy\nprofessors seem as scrupulous as mathematicians.  It was so clearly\na choice of doing good work xor being an insider that I was forced\nto see the distinction.  It's there to some degree in almost every\nfield, but I had till then managed to avoid facing it.That was one of the most valuable things I learned from painting:\nyou have to figure out for yourself what's \ngood.  You can't trust\nauthorities. They'll lie to you on this one.\n\nComment on this essay.January 2015Corporate Development, aka corp dev, is the group within companies\nthat buys other companies. If you're talking to someone from corp\ndev, that's why, whether you realize it yet or not.It's usually a mistake to talk to corp dev unless (a) you want to\nsell your company right now and (b) you're sufficiently likely to\nget an offer at an acceptable price.  In practice that means startups\nshould only talk to corp dev when they're either doing really well\nor really badly.  If you're doing really badly, meaning the company\nis about to die, you may as well talk to them, because you have\nnothing to lose. And if you're doing really well, you can safely\ntalk to them, because you both know the price will have to be high,\nand if they show the slightest sign of wasting your time, you'll\nbe confident enough to tell them to get lost.The danger is to companies in the middle.  Particularly to young\ncompanies that are growing fast, but haven't been doing it for long\nenough to have grown big yet.  It's usually a mistake for a promising\ncompany less than a year old even to talk to corp dev.But it's a mistake founders constantly make.  When someone from\ncorp dev wants to meet, the founders tell themselves they should\nat least find out what they want.  Besides, they don't want to\noffend Big Company by refusing to meet.Well, I'll tell you what they want.  They want to talk about buying\nyou.  That's what the title \"corp dev\" means.   So before agreeing\nto meet with someone from corp dev, ask yourselves, \"Do we want to\nsell the company right now?\"  And if the answer is no, tell them\n\"Sorry, but we're focusing on growing the company.\"  They won't be\noffended.  And certainly the founders of Big Company won't be\noffended. If anything they'll think more highly of you.  You'll\nremind them of themselves.  They didn't sell either; that's why\nthey're in a position now to buy other companies.\n[1]Most founders who get contacted by corp dev already know what it\nmeans.  And yet even when they know what corp dev does and know\nthey don't want to sell, they take the meeting.  Why do they do it?\nThe same mix of denial and wishful thinking that underlies most\nmistakes founders make. It's flattering to talk to someone who wants\nto buy you.  And who knows, maybe their offer will be surprisingly\nhigh.  You should at least see what it is, right?No.  If they were going to send you an offer immediately by email,\nsure, you might as well open it.  But that is not how conversations\nwith corp dev work.  If you get an offer at all, it will be at the\nend of a long and unbelievably distracting process.  And if the\noffer is surprising, it will be surprisingly low.Distractions are the thing you can least afford in a startup.  And\nconversations with corp dev are the worst sort of distraction,\nbecause as well as consuming your attention they undermine your\nmorale.  One of the tricks to surviving a grueling process is not\nto stop and think how tired you are.  Instead you get into a sort\nof flow. \n[2]\nImagine what it would do to you if at mile 20 of a\nmarathon, someone ran up beside you and said \"You must feel really\ntired.  Would you like to stop and take a rest?\"  Conversations\nwith corp dev are like that but worse, because the suggestion of\nstopping gets combined in your mind with the imaginary high price\nyou think they'll offer.And then you're really in trouble.  If they can, corp dev people\nlike to turn the tables on you. They like to get you to the point\nwhere you're trying to convince them to buy instead of them trying\nto convince you to sell.  And surprisingly often they succeed.This is a very slippery slope, greased with some of the most powerful\nforces that can work on founders' minds, and attended by an experienced\nprofessional whose full time job is to push you down it.Their tactics in pushing you down that slope are usually fairly\nbrutal. Corp dev people's whole job is to buy companies, and they\ndon't even get to choose which.  The only way their performance is\nmeasured is by how cheaply they can buy you, and the more ambitious\nones will stop at nothing to achieve that. For example, they'll\nalmost always start with a lowball offer, just to see if you'll\ntake it. Even if you don't, a low initial offer will demoralize you\nand make you easier to manipulate.And that is the most innocent of their tactics. Just wait till\nyou've agreed on a price and think you have a done deal, and then\nthey come back and say their boss has vetoed the deal and won't do\nit for more than half the agreed upon price. Happens all the time.\nIf you think investors can behave badly, it's nothing compared to\nwhat corp dev people can do.  Even corp dev people at companies\nthat are otherwise benevolent.I remember once complaining to a\nfriend at Google about some nasty trick their corp dev people had\npulled on a YC startup.\"What happened to Don't be Evil?\" I asked.\"I don't think corp dev got the memo,\" he replied.The tactics you encounter in M&A conversations can be like nothing\nyou've experienced in the otherwise comparatively \nupstanding world\nof Silicon Valley.  It's as if a chunk of genetic material from the\nold-fashioned robber baron business world got incorporated into the\nstartup world.\n[3]The simplest way to protect yourself is to use the trick that John\nD. Rockefeller, whose grandfather was an alcoholic, used to protect\nhimself from becoming one.  He once told a Sunday school class\n\n  Boys, do you know why I never became a drunkard?  Because I never\n  took the first drink.\n\nDo you want to sell your company right now?  Not eventually, right\nnow.  If not, just don't take the first meeting.  They won't be\noffended.  And you in turn will be guaranteed to be spared one of\nthe worst experiences that can happen to a startup.If you do want to sell, there's another set of \ntechniques\n for doing\nthat.  But the biggest mistake founders make in dealing with corp\ndev is not doing a bad job of talking to them when they're ready\nto, but talking to them before they are.  So if you remember only\nthe title of this essay, you already know most of what you need to\nknow about M&A in the first year.Notes[1]\nI'm not saying you should never sell.  I'm saying you should\nbe clear in your own mind about whether you want to sell or not,\nand not be led by manipulation or wishful thinking into trying to\nsell earlier than you otherwise would have.[2]\nIn a startup, as in most competitive sports, the task at hand\nalmost does this for you; you're too busy to feel tired.  But when\nyou lose that protection, e.g. at the final whistle, the fatigue\nhits you like a wave.  To talk to corp dev is to let yourself feel\nit mid-game.[3]\nTo be fair, the apparent misdeeds of corp dev people are magnified\nby the fact that they function as the face of a large organization\nthat often doesn't know its own mind.  Acquirers can be surprisingly\nindecisive about acquisitions, and their flakiness is indistinguishable\nfrom dishonesty by the time it filters down to you.Thanks to Marc Andreessen, Jessica Livingston, Geoff\nRalston, and Qasar Younis for reading drafts of this.January 2003(This article is derived from a keynote talk at the fall 2002 meeting\nof NEPLS.)Visitors to this country are often surprised to find that\nAmericans like to begin a conversation by asking \"what do you do?\"\nI've never liked this question.  I've rarely had a\nneat answer to it.  But I think I have finally solved the problem.\nNow, when someone asks me what I do, I look them straight\nin the eye and say \"I'm designing a \nnew dialect of Lisp.\"   \nI recommend this answer to anyone who doesn't like being asked what\nthey do.  The conversation will turn immediately to other topics.I don't consider myself to be doing research on programming languages.\nI'm just designing one, in the same way that someone might design\na building or a chair or a new typeface.\nI'm not trying to discover anything new.  I just want\nto make a language that will be good to program in.  In some ways,\nthis assumption makes life a lot easier.The difference between design and research seems to be a question\nof new versus good.  Design doesn't have to be new, but it has to  \nbe good.  Research doesn't have to be good, but it has to be new.\nI think these two paths converge at the top: the best design\nsurpasses its predecessors by using new ideas, and the best research\nsolves problems that are not only new, but actually worth solving.\nSo ultimately we're aiming for the same destination, just approaching\nit from different directions.What I'm going to talk about today is what your target looks like\nfrom the back.  What do you do differently when you treat\nprogramming languages as a design problem instead of a research topic?The biggest difference is that you focus more on the user.\nDesign begins by asking, who is this\nfor and what do they need from it?  A good architect,\nfor example, does not begin by creating a design that he then\nimposes on the users, but by studying the intended users and figuring\nout what they need.Notice I said \"what they need,\" not \"what they want.\"  I don't mean\nto give the impression that working as a designer means working as \na sort of short-order cook, making whatever the client tells you\nto.  This varies from field to field in the arts, but\nI don't think there is any field in which the best work is done by\nthe people who just make exactly what the customers tell them to.The customer is always right in\nthe sense that the measure of good design is how well it works\nfor the user.  If you make a novel that bores everyone, or a chair\nthat's horribly uncomfortable to sit in, then you've done a bad\njob, period.  It's no defense to say that the novel or the chair  \nis designed according to the most advanced theoretical principles.And yet, making what works for the user doesn't mean simply making\nwhat the user tells you to.  Users don't know what all the choices\nare, and are often mistaken about what they really want.The answer to the paradox, I think, is that you have to design\nfor the user, but you have to design what the user needs, not simply  \nwhat he says he wants.\nIt's much like being a doctor.  You can't just treat a patient's\nsymptoms.  When a patient tells you his symptoms, you have to figure\nout what's actually wrong with him, and treat that.This focus on the user is a kind of axiom from which most of the\npractice of good design can be derived, and around which most design\nissues center.If good design must do what the user needs, who is the user?  When\nI say that design must be for users, I don't mean to imply that good \ndesign aims at some kind of  \nlowest common denominator.  You can pick any group of users you\nwant.  If you're designing a tool, for example, you can design it\nfor anyone from beginners to experts, and what's good design\nfor one group might be bad for another.  The point\nis, you have to pick some group of users.  I don't think you can\neven talk about good or bad design except with\nreference to some intended user.You're most likely to get good design if the intended users include\nthe designer himself.  When you design something\nfor a group that doesn't include you, it tends to be for people\nyou consider to be less sophisticated than you, not more sophisticated.That's a problem, because looking down on the user, however benevolently,\nseems inevitably to corrupt the designer.\nI suspect that very few housing\nprojects in the US were designed by architects who expected to live\nin them.   You can see the same thing\nin programming languages.  C, Lisp, and Smalltalk were created for\ntheir own designers to use.  Cobol, Ada, and Java, were created   \nfor other people to use.If you think you're designing something for idiots, the odds are\nthat you're not designing something good, even for idiots.\nEven if you're designing something for the most sophisticated\nusers, though, you're still designing for humans.  It's different \nin research.  In math you\ndon't choose abstractions because they're\neasy for humans to understand; you choose whichever make the\nproof shorter.  I think this is true for the sciences generally.\nScientific ideas are not meant to be ergonomic.Over in the arts, things are very different.  Design is\nall about people.  The human body is a strange\nthing, but when you're designing a chair,\nthat's what you're designing for, and there's no way around it.\nAll the arts have to pander to the interests and limitations\nof humans.   In painting, for example, all other things being\nequal a painting with people in it will be more interesting than\none without.  It is not merely an accident of history that\nthe great paintings of the Renaissance are all full of people.\nIf they hadn't been, painting as a medium wouldn't have the prestige\nthat it does.Like it or not, programming languages are also for people,\nand I suspect the human brain is just as lumpy and idiosyncratic\nas the human body.  Some ideas are easy for people to grasp\nand some aren't.  For example, we seem to have a very limited\ncapacity for dealing with detail.  It's this fact that makes\nprograming languages a good idea in the first place; if we\ncould handle the detail, we could just program in machine\nlanguage.Remember, too, that languages are not\nprimarily a form for finished programs, but something that\nprograms have to be developed in.  Anyone in the arts could\ntell you that you might want different mediums for the\ntwo situations.  Marble, for example, is a nice, durable\nmedium for finished ideas, but a hopelessly inflexible one\nfor developing new ideas.A program, like a proof,\nis a pruned version of a tree that in the past has had\nfalse starts branching off all over it.  So the test of\na language is not simply how clean the finished program looks\nin it, but how clean the path to the finished program was.\nA design choice that gives you elegant finished programs\nmay not give you an elegant design process.  For example, \nI've written a few macro-defining macros full of nested\nbackquotes that look now like little gems, but writing them\ntook hours of the ugliest trial and error, and frankly, I'm still\nnot entirely sure they're correct.We often act as if the test of a language were how good\nfinished programs look in it.\nIt seems so convincing when you see the same program\nwritten in two languages, and one version is much shorter.\nWhen you approach the problem from the direction of the\narts, you're less likely to depend on this sort of\ntest.  You don't want to end up with a programming\nlanguage like marble.For example, it is a huge win in developing software to\nhave an interactive toplevel, what in Lisp is called a\nread-eval-print loop.  And when you have one this has\nreal effects on the design of the language.  It would not\nwork well for a language where you have to declare\nvariables before using them, for example.  When you're\njust typing expressions into the toplevel, you want to be \nable to set x to some value and then start doing things\nto x.  You don't want to have to declare the type of x\nfirst.  You may dispute either of the premises, but if\na language has to have a toplevel to be convenient, and\nmandatory type declarations are incompatible with a\ntoplevel, then no language that makes type declarations  \nmandatory could be convenient to program in.In practice, to get good design you have to get close, and stay\nclose, to your users.  You have to calibrate your ideas on actual\nusers constantly, especially in the beginning.  One of the reasons\nJane Austen's novels are so good is that she read them out loud to\nher family.  That's why she never sinks into self-indulgently arty\ndescriptions of landscapes,\nor pretentious philosophizing.  (The philosophy's there, but it's\nwoven into the story instead of being pasted onto it like a label.)\nIf you open an average \"literary\" novel and imagine reading it out loud\nto your friends as something you'd written, you'll feel all too\nkeenly what an imposition that kind of thing is upon the reader.In the software world, this idea is known as Worse is Better.\nActually, there are several ideas mixed together in the concept of\nWorse is Better, which is why people are still arguing about\nwhether worse\nis actually better or not.  But one of the main ideas in that\nmix is that if you're building something new, you should get a\nprototype in front of users as soon as possible.The alternative approach might be called the Hail Mary strategy.\nInstead of getting a prototype out quickly and gradually refining\nit, you try to create the complete, finished, product in one long\ntouchdown pass.  As far as I know, this is a\nrecipe for disaster.  Countless startups destroyed themselves this\nway during the Internet bubble.  I've never heard of a case\nwhere it worked.What people outside the software world may not realize is that\nWorse is Better is found throughout the arts.\nIn drawing, for example, the idea was discovered during the\nRenaissance.  Now almost every drawing teacher will tell you that\nthe right way to get an accurate drawing is not to\nwork your way slowly around the contour of an object, because errors will\naccumulate and you'll find at the end that the lines don't meet.\nInstead you should draw a few quick lines in roughly the right place,\nand then gradually refine this initial sketch.In most fields, prototypes\nhave traditionally been made out of different materials.\nTypefaces to be cut in metal were initially designed  \nwith a brush on paper.  Statues to be cast in bronze   \nwere modelled in wax.  Patterns to be embroidered on tapestries\nwere drawn on paper with ink wash.  Buildings to be\nconstructed from stone were tested on a smaller scale in wood.What made oil paint so exciting, when it\nfirst became popular in the fifteenth century, was that you\ncould actually make the finished work from the prototype.\nYou could make a preliminary drawing if you wanted to, but you\nweren't held to it; you could work out all the details, and\neven make major changes, as you finished the painting.You can do this in software too.  A prototype doesn't have to\nbe just a model; you can refine it into the finished product.\nI think you should always do this when you can.  It lets you\ntake advantage of new insights you have along the way.  But\nperhaps even more important, it's good for morale.Morale is key in design.  I'm surprised people\ndon't talk more about it.  One of my first\ndrawing teachers told me: if you're bored when you're\ndrawing something, the drawing will look boring.\nFor example, suppose you have to draw a building, and you\ndecide to draw each brick individually.  You can do this\nif you want, but if you get bored halfway through and start\nmaking the bricks mechanically instead of observing each one,   \nthe drawing will look worse than if you had merely suggested\nthe bricks.Building something by gradually refining a prototype is good\nfor morale because it keeps you engaged.  In software, my  \nrule is: always have working code.  If you're writing\nsomething that you'll be able to test in an hour, then you\nhave the prospect of an immediate reward to motivate you.\nThe same is true in the arts, and particularly in oil painting.\nMost painters start with a blurry sketch and gradually\nrefine it.\nIf you work this way, then in principle\nyou never have to end the day with something that actually\nlooks unfinished.  Indeed, there is even a saying among\npainters: \"A painting is never finished, you just stop\nworking on it.\"  This idea will be familiar to anyone who\nhas worked on software.Morale is another reason that it's hard to design something\nfor an unsophisticated user.   It's hard to stay interested in\nsomething you don't like yourself.  To make something  \ngood, you have to be thinking, \"wow, this is really great,\"\nnot \"what a piece of shit; those fools will love it.\"Design means making things for humans.  But it's not just the\nuser who's human.  The designer is human too.Notice all this time I've been talking about \"the designer.\"\nDesign usually has to be under the control of a single person to\nbe any good.   And yet it seems to be possible for several people\nto collaborate on a research project.  This seems to\nme one of the most interesting differences between research and\ndesign.There have been famous instances of collaboration in the arts,\nbut most of them seem to have been cases of molecular bonding rather\nthan nuclear fusion.  In an opera it's common for one person to\nwrite the libretto and another to write the music.   And during the Renaissance, \njourneymen from northern\nEurope were often employed to do the landscapes in the\nbackgrounds of Italian paintings.  But these aren't true collaborations.\nThey're more like examples of Robert Frost's\n\"good fences make good neighbors.\"  You can stick instances\nof good design together, but within each individual project,\none person has to be in control.I'm not saying that good design requires that one person think\nof everything.  There's nothing more valuable than the advice\nof someone whose judgement you trust.  But after the talking is\ndone, the decision about what to do has to rest with one person.Why is it that research can be done by collaborators and  \ndesign can't?  This is an interesting question.  I don't \nknow the answer.  Perhaps,\nif design and research converge, the best research is also\ngood design, and in fact can't be done by collaborators.\nA lot of the most famous scientists seem to have worked alone.\nBut I don't know enough to say whether there\nis a pattern here.  It could be simply that many famous scientists\nworked when collaboration was less common.Whatever the story is in the sciences, true collaboration\nseems to be vanishingly rare in the arts.  Design by committee is a\nsynonym for bad design.  Why is that so?  Is there some way to\nbeat this limitation?I'm inclined to think there isn't-- that good design requires\na dictator.  One reason is that good design has to   \nbe all of a piece.  Design is not just for humans, but\nfor individual humans.  If a design represents an idea that  \nfits in one person's head, then the idea will fit in the user's\nhead too.Related:December 2001 (rev. May 2002)\n\n(This article came about in response to some questions on\nthe LL1 mailing list.  It is now\nincorporated in Revenge of the Nerds.)When McCarthy designed Lisp in the late 1950s, it was\na radical departure from existing languages,\nthe most important of which was Fortran.Lisp embodied nine new ideas:\n1. Conditionals.  A conditional is an if-then-else\nconstruct.  We take these for granted now.  They were \ninvented\nby McCarthy in the course of developing Lisp. \n(Fortran at that time only had a conditional\ngoto, closely based on the branch instruction in the \nunderlying hardware.)  McCarthy, who was on the Algol committee, got\nconditionals into Algol, whence they spread to most other\nlanguages.2. A function type. In Lisp, functions are first class \nobjects-- they're a data type just like integers, strings,\netc, and have a literal representation, can be stored in variables,\ncan be passed as arguments, and so on.3. Recursion.  Recursion existed as a mathematical concept\nbefore Lisp of course, but Lisp was the first programming language to support\nit.  (It's arguably implicit in making functions first class\nobjects.)4. A new concept of variables.  In Lisp, all variables\nare effectively pointers. Values are what\nhave types, not variables, and assigning or binding\nvariables means copying pointers, not what they point to.5. Garbage-collection.6. Programs composed of expressions. Lisp programs are \ntrees of expressions, each of which returns a value.  \n(In some Lisps expressions\ncan return multiple values.)  This is in contrast to Fortran\nand most succeeding languages, which distinguish between\nexpressions and statements.It was natural to have this\ndistinction in Fortran because (not surprisingly in a language\nwhere the input format was punched cards) the language was\nline-oriented.  You could not nest statements.  And\nso while you needed expressions for math to work, there was\nno point in making anything else return a value, because\nthere could not be anything waiting for it.This limitation\nwent away with the arrival of block-structured languages,\nbut by then it was too late. The distinction between\nexpressions and statements was entrenched.  It spread from \nFortran into Algol and thence to both their descendants.When a language is made entirely of expressions, you can\ncompose expressions however you want.  You can say either\n(using Arc syntax)(if foo (= x 1) (= x 2))or(= x (if foo 1 2))7. A symbol type.  Symbols differ from strings in that\nyou can test equality by comparing a pointer.8. A notation for code using trees of symbols.9. The whole language always available.  \nThere is\nno real distinction between read-time, compile-time, and runtime.\nYou can compile or run code while reading, read or run code\nwhile compiling, and read or compile code at runtime.Running code at read-time lets users reprogram Lisp's syntax;\nrunning code at compile-time is the basis of macros; compiling\nat runtime is the basis of Lisp's use as an extension\nlanguage in programs like Emacs; and reading at runtime\nenables programs to communicate using s-expressions, an\nidea recently reinvented as XML.\nWhen Lisp was first invented, all these ideas were far\nremoved from ordinary programming practice, which was\ndictated largely by the hardware available in the late 1950s.Over time, the default language, embodied\nin a succession of popular languages, has\ngradually evolved toward Lisp.  1-5 are now widespread.\n6 is starting to appear in the mainstream.\nPython has a form of 7, though there doesn't seem to be\nany syntax for it.  \n8, which (with 9) is what makes Lisp macros\npossible, is so far still unique to Lisp,\nperhaps because (a) it requires those parens, or something \njust as bad, and (b) if you add that final increment of power, \nyou can no \nlonger claim to have invented a new language, but only\nto have designed a new dialect of Lisp ; -)Though useful to present-day programmers, it's\nstrange to describe Lisp in terms of its\nvariation from the random expedients other languages\nadopted.  That was not, probably, how McCarthy\nthought of it.  Lisp wasn't designed to fix the mistakes\nin Fortran; it came about more as the byproduct of an\nattempt to axiomatize computation.December 2014If the world were static, we could have monotonically increasing\nconfidence in our beliefs.  The more (and more varied) experience\na belief survived, the less likely it would be false.  Most people\nimplicitly believe something like this about their opinions.  And\nthey're justified in doing so with opinions about things that don't\nchange much, like human nature.  But you can't trust your opinions\nin the same way about things that change, which could include\npractically everything else.When experts are wrong, it's often because they're experts on an\nearlier version of the world.Is it possible to avoid that?  Can you protect yourself against\nobsolete beliefs?  To some extent, yes. I spent almost a decade\ninvesting in early stage startups, and curiously enough protecting\nyourself against obsolete beliefs is exactly what you have to do\nto succeed as a startup investor.  Most really good startup ideas\nlook like bad ideas at first, and many of those look bad specifically\nbecause some change in the world just switched them from bad to\ngood.  I spent a lot of time learning to recognize such ideas, and\nthe techniques I used may be applicable to ideas in general.The first step is to have an explicit belief in change.  People who\nfall victim to a monotonically increasing confidence in their\nopinions are implicitly concluding the world is static.  If you\nconsciously remind yourself it isn't, you start to look for change.Where should one look for it?  Beyond the moderately useful\ngeneralization that human nature doesn't change much, the unfortunate\nfact is that change is hard to predict.  This is largely a tautology\nbut worth remembering all the same: change that matters usually\ncomes from an unforeseen quarter.So I don't even try to predict it.  When I get asked in interviews\nto predict the future, I always have to struggle to come up with\nsomething plausible-sounding on the fly, like a student who hasn't\nprepared for an exam.\n[1]\nBut it's not out of laziness that I haven't\nprepared.  It seems to me that beliefs about the future are so\nrarely correct that they usually aren't worth the extra rigidity\nthey impose, and that the best strategy is simply to be aggressively\nopen-minded.  Instead of trying to point yourself in the right\ndirection, admit you have no idea what the right direction is, and\ntry instead to be super sensitive to the winds of change.It's ok to have working hypotheses, even though they may constrain\nyou a bit, because they also motivate you.  It's exciting to chase\nthings and exciting to try to guess answers.  But you have to be\ndisciplined about not letting your hypotheses harden into anything\nmore.\n[2]I believe this passive m.o. works not just for evaluating new ideas\nbut also for having them.  The way to come up with new ideas is not\nto try explicitly to, but to try to solve problems and simply not\ndiscount weird hunches you have in the process.The winds of change originate in the unconscious minds of domain\nexperts.  If you're sufficiently expert in a field, any weird idea\nor apparently irrelevant question that occurs to you is ipso facto\nworth exploring. \n[3]\n Within Y Combinator, when an idea is described\nas crazy, it's a compliment\u2014in fact, on average probably a\nhigher compliment than when an idea is described as good.Startup investors have extraordinary incentives for correcting\nobsolete beliefs.  If they can realize before other investors that\nsome apparently unpromising startup isn't, they can make a huge\namount of money.  But the incentives are more than just financial.\nInvestors' opinions are explicitly tested: startups come to them\nand they have to say yes or no, and then, fairly quickly, they learn\nwhether they guessed right.  The investors who say no to a Google\n(and there were several) will remember it for the rest of their\nlives.Anyone who must in some sense bet on ideas rather than merely\ncommenting on them has similar incentives.  Which means anyone who\nwants such incentives can have them, by turning their comments into\nbets: if you write about a topic in some fairly durable and public\nform, you'll find you worry much more about getting things right\nthan most people would in a casual conversation.\n[4]Another trick I've found to protect myself against obsolete beliefs\nis to focus initially on people rather than ideas. Though the nature\nof future discoveries is hard to predict, I've found I can predict\nquite well what sort of people will make them.  Good new ideas come\nfrom earnest, energetic, independent-minded people.Betting on people over ideas saved me countless times as an investor.\nWe thought Airbnb was a bad idea, for example. But we could tell\nthe founders were earnest, energetic, and independent-minded.\n(Indeed, almost pathologically so.)  So we suspended disbelief and\nfunded them.This too seems a technique that should be generally applicable.\nSurround yourself with the sort of people new ideas come from.  If\nyou want to notice quickly when your beliefs become obsolete, you\ncan't do better than to be friends with the people whose discoveries\nwill make them so.It's hard enough already not to become the prisoner of your own\nexpertise, but it will only get harder, because change is accelerating.\nThat's not a recent trend; change has been accelerating since the\npaleolithic era.  Ideas beget ideas.  I don't expect that to change.\nBut I could be wrong.\nNotes[1]\nMy usual trick is to talk about aspects of the present that\nmost people haven't noticed yet.[2]\nEspecially if they become well enough known that people start\nto identify them with you.  You have to be extra skeptical about\nthings you want to believe, and once a hypothesis starts to be\nidentified with you, it will almost certainly start to be in that\ncategory.[3]\nIn practice \"sufficiently expert\" doesn't require one to be\nrecognized as an expert\u2014which is a trailing indicator in any\ncase.  In many fields a year of focused work plus caring a lot would\nbe enough.[4]\nThough they are public and persist indefinitely, comments on\ne.g. forums and places like Twitter seem empirically to work like\ncasual conversation.  The threshold may be whether what you write\nhas a title.\nThanks to Sam Altman, Patrick Collison, and Robert Morris\nfor reading drafts of this.\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nOctober 2010\n\n(I wrote this for Forbes, who asked me to write something\nabout the qualities we look for in founders.  In print they had to cut\nthe last item because they didn't have room.)1. DeterminationThis has turned out to be the most important quality in startup\nfounders.  We thought when we started Y Combinator that the most\nimportant quality would be intelligence.  That's the myth in the\nValley. And certainly you don't want founders to be stupid.  But\nas long as you're over a certain threshold of intelligence, what\nmatters most is determination.  You're going to hit a lot of\nobstacles.  You can't be the sort of person who gets demoralized\neasily.Bill Clerico and Rich Aberman of WePay \nare a good example.  They're\ndoing a finance startup, which means endless negotiations with big,\nbureaucratic companies.  When you're starting a startup that depends\non deals with big companies to exist, it often feels like they're\ntrying to ignore you out of existence.  But when Bill Clerico starts\ncalling you, you may as well do what he asks, because he is not\ngoing away.\n2. FlexibilityYou do not however want the sort of determination implied by phrases\nlike \"don't give up on your dreams.\"  The world of startups is so\nunpredictable that you need to be able to modify your dreams on the\nfly.  The best metaphor I've found for the combination of determination\nand flexibility you need is a running back.  \nHe's determined to get\ndownfield, but at any given moment he may need to go sideways or\neven backwards to get there.The current record holder for flexibility may be Daniel Gross of\nGreplin.  He applied to YC with \nsome bad ecommerce idea.  We told\nhim we'd fund him if he did something else.  He thought for a second,\nand said ok.  He then went through two more ideas before settling\non Greplin.  He'd only been working on it for a couple days when\nhe presented to investors at Demo Day, but he got a lot of interest.\nHe always seems to land on his feet.\n3. ImaginationIntelligence does matter a lot of course.  It seems like the type\nthat matters most is imagination.  It's not so important to be able\nto solve predefined problems quickly as to be able to come up with\nsurprising new ideas.  In the startup world, most good ideas \nseem\nbad initially.  If they were obviously good, someone would already\nbe doing them.  So you need the kind of intelligence that produces\nideas with just the right level of craziness.Airbnb is that kind of idea.  \nIn fact, when we funded Airbnb, we\nthought it was too crazy.  We couldn't believe large numbers of\npeople would want to stay in other people's places.  We funded them\nbecause we liked the founders so much.  As soon as we heard they'd\nbeen supporting themselves by selling Obama and McCain branded\nbreakfast cereal, they were in.  And it turned out the idea was on\nthe right side of crazy after all.\n4. NaughtinessThough the most successful founders are usually good people, they\ntend to have a piratical gleam in their eye.  They're not Goody\nTwo-Shoes type good.  Morally, they care about getting the big\nquestions right, but not about observing proprieties.  That's why\nI'd use the word naughty rather than evil.  They delight in \nbreaking\nrules, but not rules that matter.  This quality may be redundant\nthough; it may be implied by imagination.Sam Altman of Loopt \nis one of the most successful alumni, so we\nasked him what question we could put on the Y Combinator application\nthat would help us discover more people like him.  He said to ask\nabout a time when they'd hacked something to their advantage\u2014hacked in the sense of beating the system, not breaking into\ncomputers.  It has become one of the questions we pay most attention\nto when judging applications.\n5. FriendshipEmpirically it seems to be hard to start a startup with just \none\nfounder.  Most of the big successes have two or three.  And the\nrelationship between the founders has to be strong.  They must\ngenuinely like one another, and work well together.  Startups do\nto the relationship between the founders what a dog does to a sock:\nif it can be pulled apart, it will be.Emmett Shear and Justin Kan of Justin.tv \nare a good example of close\nfriends who work well together.  They've known each other since\nsecond grade.  They can practically read one another's minds.  I'm\nsure they argue, like all founders, but I have never once sensed\nany unresolved tension between them.Thanks to Jessica Livingston and Chris Steiner for reading drafts of this.\n\nApril 2009I usually avoid politics, but since we now seem to have an administration that's open to suggestions, I'm going to risk making one.  The single biggest thing the government could do to increase the number of startups in this country is a policy that would cost nothing: establish a new class of visa for startup founders.The biggest constraint on the number of new startups that get created in the US is not tax policy or employment law or even Sarbanes-Oxley.  It's that we won't let the people who want to start them into the country.Letting just 10,000 startup founders into the country each year could have a visible effect on the economy.  If we assume 4 people per startup, which is probably an overestimate, that's 2500 new companies.  Each year.  They wouldn't all grow as big as Google, but out of 2500 some would come close.By definition these 10,000 founders wouldn't be taking jobs from Americans: it could be part of the terms of the visa that they couldn't work for existing companies, only new ones they'd founded.  In fact they'd cause there to be \nmore jobs for Americans, because the companies they started would hire more employees as they grew.The tricky part might seem to be how one defined a startup. But that could be solved quite easily: let the market decide.  Startup investors work hard to find the best startups.  The government could not do better than to piggyback on their expertise, and use investment by recognized startup investors as the test of whether a company was a real startup.How would the government decide who's a startup investor?  The same way they decide what counts as a university for student visas. We'll establish our own accreditation procedure. We know who one another are.10,000 people is a drop in the bucket by immigration standards, but would represent a huge increase in the pool of startup founders.  I think this would have such a visible effect on the economy that it would make the legislator who introduced the bill famous.  The only way to know for sure would be to try it, and that would cost practically nothing.\nThanks to Trevor Blackwell, Paul Buchheit, Jeff Clavier, David Hornik, Jessica Livingston, Greg Mcadoo, Aydin Senkut, and Fred Wilson for reading drafts of this.Related:May 2004When people care enough about something to do it well, those who\ndo it best tend to be far better than everyone else.  There's a\nhuge gap between Leonardo and second-rate contemporaries like\nBorgognone.  You see the same gap between Raymond Chandler and the\naverage writer of detective novels.  A top-ranked professional chess\nplayer could play ten thousand games against an ordinary club player\nwithout losing once.Like chess or painting or writing novels, making money is a very\nspecialized skill.   But for some reason we treat this skill\ndifferently.  No one complains when a few people surpass all the\nrest at playing chess or writing novels, but when a few people make\nmore money than the rest, we get editorials saying this is wrong.Why?  The pattern of variation seems no different than for any other\nskill.  What causes people to react so strongly when the skill is\nmaking money?I think there are three reasons we treat making money as different:\nthe misleading model of wealth we learn as children; the disreputable\nway in which, till recently, most fortunes were accumulated; and\nthe worry that great variations in income are somehow bad for\nsociety.  As far as I can tell, the first is mistaken, the second\noutdated, and the third empirically false.  Could it be that, in a\nmodern democracy, variation in income is actually a sign of health?The Daddy Model of WealthWhen I was five I thought electricity was created by electric\nsockets.  I didn't realize there were power plants out there\ngenerating it.  Likewise, it doesn't occur to most kids that wealth\nis something that has to be generated.  It seems to be something\nthat flows from parents.Because of the circumstances in which they encounter it, children\ntend to misunderstand wealth.  They confuse it with money.  They\nthink that there is a fixed amount of it.  And they think of it as\nsomething that's distributed by authorities (and so should be\ndistributed equally), rather than something that has to be created\n(and might be created unequally).In fact, wealth is not money.  Money is just a convenient way of\ntrading one form of wealth for another.  Wealth is the underlying\nstuff\u2014the goods and services we buy.  When you travel to a\nrich or poor country, you don't have to look at people's bank\naccounts to tell which kind you're in.  You can see\nwealth\u2014in buildings and streets, in the clothes and the health\nof the people.Where does wealth come from?  People make it.  This was easier to\ngrasp when most people lived on farms, and made many of the things\nthey wanted with their own hands.  Then you could see in the house,\nthe herds, and the granary the wealth that each family created.  It\nwas obvious then too that the wealth of the world was not a fixed\nquantity that had to be shared out, like slices of a pie.  If you\nwanted more wealth, you could make it.This is just as true today, though few of us create wealth directly\nfor ourselves (except for a few vestigial domestic tasks).  Mostly\nwe create wealth for other people in exchange for money, which we\nthen trade for the forms of wealth we want. \n[1]Because kids are unable to create wealth, whatever they have has\nto be given to them.  And when wealth is something you're given,\nthen of course it seems that it should be distributed equally.\n[2]\nAs in most families it is.  The kids see to that.  \"Unfair,\" they\ncry, when one sibling gets more than another.In the real world, you can't keep living off your parents.  If you\nwant something, you either have to make it, or do something of\nequivalent value for someone else, in order to get them to give you\nenough money to buy it.  In the real world, wealth is (except for\na few specialists like thieves and speculators) something you have\nto create, not something that's distributed by Daddy.  And since\nthe ability and desire to create it vary from person to person,\nit's not made equally.You get paid by doing or making something people want, and those\nwho make more money are often simply better at doing what people\nwant.  Top actors make a lot more money than B-list actors.  The\nB-list actors might be almost as charismatic, but when people go\nto the theater and look at the list of movies playing, they want\nthat extra oomph that the big stars have.Doing what people want is not the only way to get money, of course.\nYou could also rob banks, or solicit bribes, or establish a monopoly.\nSuch tricks account for some variation in wealth, and indeed for\nsome of the biggest individual fortunes, but they are not the root\ncause of variation in income.  The root cause of variation in income,\nas Occam's Razor implies, is the same as the root cause of variation\nin every other human skill.In the United States, the CEO of a large public company makes about\n100 times as much as the average person. \n[3]\nBasketball players\nmake about 128 times as much, and baseball players 72 times as much.\nEditorials quote this kind of statistic with horror.  But I have\nno trouble imagining that one person could be 100 times as productive\nas another.  In ancient Rome the price of slaves varied by\na factor of 50 depending on their skills. \n[4]\nAnd that's without\nconsidering motivation, or the extra leverage in productivity that\nyou can get from modern technology.Editorials about athletes' or CEOs' salaries remind me of early\nChristian writers, arguing from first principles about whether the\nEarth was round, when they could just walk outside and check.\n[5]\nHow much someone's work is worth is not a policy question.  It's\nsomething the market already determines.\"Are they really worth 100 of us?\" editorialists ask.  Depends on\nwhat you mean by worth.  If you mean worth in the sense of what\npeople will pay for their skills, the answer is yes, apparently.A few CEOs' incomes reflect some kind of wrongdoing.  But are there\nnot others whose incomes really do reflect the wealth they generate?\nSteve Jobs saved a company that was in a terminal decline.  And not\nmerely in the way a turnaround specialist does, by cutting costs;\nhe had to decide what Apple's next products should be.  Few others\ncould have done it.  And regardless of the case with CEOs, it's\nhard to see how anyone could argue that the salaries of professional\nbasketball players don't reflect supply and demand.It may seem unlikely in principle that one individual could really\ngenerate so much more wealth than another.  The key to this mystery\nis to revisit that question, are they really worth 100 of us?\nWould a basketball team trade one of their players for 100\nrandom people?  What would Apple's next product look like if you\nreplaced Steve Jobs with a committee of 100 random people? \n[6]\nThese\nthings don't scale linearly.  Perhaps the CEO or the professional\nathlete has only ten times (whatever that means) the skill and\ndetermination of an ordinary person.  But it makes all the difference\nthat it's concentrated in one individual.When we say that one kind of work is overpaid and another underpaid,\nwhat are we really saying?  In a free market, prices are determined\nby what buyers want.  People like baseball more than  poetry, so\nbaseball players make more than poets.  To say that a certain kind\nof work is underpaid is thus identical with saying that people want\nthe wrong things.Well, of course people want the wrong things.  It seems odd to be\nsurprised by that.  And it seems even odder to say that it's\nunjust that certain kinds of work are underpaid. \n[7]\nThen\nyou're saying that it's unjust that people want the wrong things.\nIt's  lamentable that people prefer reality TV and corndogs to\nShakespeare and steamed vegetables, but unjust?  That seems like\nsaying that blue is heavy, or that up is circular.The appearance of the word \"unjust\" here is the unmistakable spectral\nsignature of the Daddy Model.  Why else would this idea occur in\nthis odd context?  Whereas if the speaker were still operating on\nthe Daddy Model, and saw wealth as something that flowed from a\ncommon source and had to be shared out, rather than something\ngenerated by doing what other people wanted, this is exactly what\nyou'd get on noticing that some people made much more than others.When we talk about \"unequal distribution of income,\" we should\nalso ask, where does that income come from?\n[8]\nWho made the wealth\nit represents?  Because to the extent that income varies simply\naccording to how much wealth people create, the distribution may\nbe unequal, but it's hardly unjust.Stealing ItThe second reason we tend to find great disparities of wealth\nalarming is that for most of human history the usual way to accumulate\na fortune was to steal it: in pastoral societies by cattle raiding;\nin agricultural societies by appropriating others' estates in times\nof war, and taxing them in times of peace.In conflicts, those on the winning side would receive the estates\nconfiscated from the losers.  In England in the 1060s, when William\nthe Conqueror distributed the estates of the defeated Anglo-Saxon\nnobles to his followers, the conflict was military.  By the 1530s,\nwhen Henry VIII distributed the estates of the monasteries to his\nfollowers, it was mostly political. \n[9]\nBut the principle was the\nsame.  Indeed, the same principle is at work now in Zimbabwe.In more organized societies, like China, the ruler and his officials\nused taxation instead of confiscation.  But here too we see the\nsame principle: the way to get rich was not to create wealth, but\nto serve a ruler powerful enough to appropriate it.This started to change in Europe with the rise of the middle class.\nNow we think of the middle class as people who are neither rich nor\npoor, but originally they were a distinct group.  In a feudal\nsociety, there are just two classes: a warrior aristocracy, and the\nserfs who work their estates.  The middle class were a new, third\ngroup who lived in towns and supported themselves by manufacturing\nand trade.Starting in the tenth and eleventh centuries, petty nobles and\nformer serfs banded together in towns that gradually became powerful\nenough to ignore the local feudal lords. \n[10]\nLike serfs, the middle\nclass made a living largely by creating wealth.  (In port cities\nlike Genoa and Pisa, they also engaged in piracy.) But unlike serfs\nthey had an incentive to create a lot of it.  Any wealth a serf\ncreated belonged to his master.  There was not much point in making\nmore than you could hide.  Whereas the independence of the townsmen\nallowed them to keep whatever wealth they created.Once it became possible to get rich by creating wealth, society as\na whole started to get richer very rapidly.  Nearly everything we\nhave was created by the middle class.  Indeed, the other two classes\nhave effectively disappeared in industrial societies, and their\nnames been given to either end of the middle class.  (In the original\nsense of the word, Bill Gates is middle class.)But it was not till the Industrial Revolution that wealth creation\ndefinitively replaced corruption as the best way to get rich.  In\nEngland, at least, corruption only became unfashionable (and in\nfact only started to be called \"corruption\") when there started to\nbe other, faster ways to get rich.Seventeenth-century England was much like the third world today,\nin that government office was a recognized route to wealth.  The\ngreat fortunes of that time still derived more from what we would\nnow call corruption than from commerce. \n[11]\nBy the nineteenth\ncentury that had changed.  There continued to be bribes, as there\nstill are everywhere, but politics had by then been left to men who\nwere driven more by vanity than greed.  Technology had made it\npossible to create wealth faster than you could steal it.  The\nprototypical rich man of the nineteenth century was not a courtier\nbut an industrialist.With the rise of the middle class, wealth stopped being a zero-sum\ngame.  Jobs and Wozniak didn't have to make us poor to make themselves\nrich.  Quite the opposite: they created things that made our lives\nmaterially richer.  They had to, or we wouldn't have paid for them.But since for most of the world's history the main route to wealth\nwas to steal it, we tend to be suspicious of rich people.  Idealistic\nundergraduates find their unconsciously preserved child's model of\nwealth confirmed by eminent writers of the past.  It is a case of\nthe mistaken meeting the outdated.\"Behind every great fortune, there is a crime,\" Balzac wrote.  Except\nhe didn't.  What he actually said was that a great fortune with no\napparent cause was probably due to a crime well enough executed\nthat it had been forgotten.  If we were talking about Europe in\n1000, or most of the third world today, the standard misquotation\nwould be spot on.  But Balzac lived in nineteenth-century France,\nwhere the Industrial Revolution was well advanced.  He knew you\ncould make a fortune without stealing it.  After all, he did himself,\nas a popular novelist.\n[12]Only a few countries (by no coincidence, the richest ones) have\nreached this stage.  In most, corruption still has the upper hand.\nIn most, the fastest way to get wealth is by stealing it.  And so\nwhen we see increasing differences in income in a rich country,\nthere is a tendency to worry that it's sliding back toward becoming\nanother Venezuela.  I think the opposite is happening. I think\nyou're seeing a country a full step ahead of Venezuela.The Lever of TechnologyWill technology increase the gap between rich and poor?  It will\ncertainly increase the gap between the productive and the unproductive.\nThat's the whole point of technology.   With a tractor an energetic\nfarmer could plow six times as much land in a day as he could with\na team of horses.  But only if he mastered a new kind of farming.I've seen the lever of technology grow visibly in my own time.  In\nhigh school I made money by mowing lawns and scooping ice cream at\nBaskin-Robbins.  This was the only kind of work available at the\ntime.  Now high school kids could write software or design web\nsites.  But only some of them will; the rest will still be scooping\nice cream.I remember very vividly when in 1985 improved technology made it\npossible for me to buy a computer of my own.  Within months I was\nusing it to make money as a freelance programmer.  A few years\nbefore, I couldn't have done this.  A few years before, there was\nno such thing as a freelance programmer.  But Apple created\nwealth, in the form of powerful, inexpensive computers, and programmers\nimmediately set to work using it to create more.As this example suggests, the rate at which technology increases\nour productive capacity is probably exponential, rather than linear.\nSo we should expect to see ever-increasing variation in individual\nproductivity as time goes on.   Will that increase the gap between\nrich and the poor?  Depends which gap you mean.Technology should increase the gap in income, but it seems to\ndecrease other gaps.  A hundred years ago, the rich led a different\nkind of life from ordinary people.  They lived in houses\nfull of servants, wore elaborately uncomfortable clothes, and\ntravelled about in carriages drawn by teams of horses which themselves\nrequired their own houses and servants.  Now, thanks to technology,\nthe rich live more like the average person.Cars are a good example of why.  It's possible to buy expensive,\nhandmade cars that cost hundreds of thousands of dollars.  But there\nis not much point.  Companies make more money by building a large\nnumber of ordinary cars than a small number of expensive ones.  So\na company making a mass-produced car can afford to spend a lot more\non its design.  If you buy a custom-made car, something will always\nbe breaking.  The only point of buying one now is to advertise that\nyou can.Or consider watches.  Fifty years ago, by spending a lot of money\non a watch you could get better performance.  When watches had\nmechanical movements, expensive watches kept better time.  Not any\nmore.  Since the invention of the quartz movement, an ordinary Timex\nis more accurate than a Patek Philippe costing hundreds of thousands\nof dollars.\n[13]\nIndeed, as with expensive cars, if you're determined\nto spend a lot of money on a watch, you have to put up with some\ninconvenience to do it: as well as keeping worse time, mechanical\nwatches have to be wound.The only thing technology can't cheapen is brand.  Which is precisely\nwhy we hear ever more about it.  Brand is the residue left as the\nsubstantive differences between rich and poor evaporate.  But what\nlabel you have on your stuff is a much smaller matter than having\nit versus not having it.  In 1900, if you kept a carriage, no one\nasked what year or brand it was.  If you had one, you were rich.\nAnd if you weren't rich, you took the omnibus or walked.  Now even\nthe poorest Americans drive cars, and it is only because we're so\nwell trained by advertising that we can even recognize the especially\nexpensive ones.\n[14]The same pattern has played out in industry after industry.  If\nthere is enough demand for something, technology will make it cheap\nenough to sell in large volumes, and the mass-produced versions\nwill be, if not better, at least more convenient.\n[15]\nAnd there\nis nothing the rich like more than convenience.  The rich people I\nknow drive the same cars, wear the same clothes, have the same kind\nof furniture, and eat the same foods as my other friends.  Their\nhouses are in different neighborhoods, or if in the same neighborhood\nare different sizes, but within them life is similar.  The houses\nare made using the same construction techniques and contain much\nthe same objects.  It's inconvenient to do something expensive and\ncustom.The rich spend their time more like everyone else too.  Bertie\nWooster seems long gone.  Now, most people who are rich enough not\nto work do anyway.  It's not just social pressure that makes them;\nidleness is lonely and demoralizing.Nor do we have the social distinctions there were a hundred years\nago.   The novels and etiquette manuals of that period read now\nlike descriptions of some strange tribal society.  \"With respect\nto the continuance of friendships...\" hints Mrs. Beeton's Book\nof Household Management (1880), \"it may be found necessary, in\nsome cases, for a mistress to relinquish, on assuming the responsibility\nof a household, many of those commenced in the earlier part of her\nlife.\" A woman who married a rich man was expected to drop friends\nwho didn't.  You'd seem a barbarian if you behaved that way today.\nYou'd also have a very boring life.  People still tend to segregate\nthemselves somewhat, but much more on the basis of education than\nwealth.\n[16]Materially and socially, technology seems to be decreasing the gap\nbetween the rich and the poor, not increasing it.  If Lenin walked\naround the offices of a company like Yahoo or Intel or Cisco, he'd\nthink communism had won.  Everyone would be wearing the same clothes,\nhave the same kind of office (or rather, cubicle) with the same\nfurnishings, and address one another by their first names instead\nof by honorifics.  Everything would seem exactly as he'd predicted,\nuntil he looked at their bank accounts.  Oops.Is it a problem if technology increases that gap?  It doesn't seem\nto be so far.  As it increases the gap in income, it seems to\ndecrease most other gaps.Alternative to an AxiomOne often hears a policy criticized on the grounds that it would\nincrease the income gap between rich and poor.  As if it were an\naxiom that this would be bad.  It might be true that increased\nvariation in income would be bad, but I don't see how we can say\nit's axiomatic.Indeed, it may even be false, in industrial democracies.  In a\nsociety of serfs and warlords, certainly, variation in income is a\nsign of an underlying problem.  But serfdom is not the only cause\nof variation in income.  A 747 pilot doesn't make 40 times as much\nas a checkout clerk because he is a warlord who somehow holds her\nin thrall.  His skills are simply much more valuable.I'd like to propose an alternative idea: that in a modern society,\nincreasing variation in income is a sign of health.  Technology\nseems to increase the variation in productivity at faster than\nlinear rates.  If we don't see corresponding variation in income,\nthere are three possible explanations: (a) that technical innovation\nhas stopped, (b) that the people who would create the most wealth\naren't doing it, or (c) that they aren't getting paid for it.I think we can safely say that (a) and (b) would be bad.  If you\ndisagree, try living for a year using only the resources available\nto the average Frankish nobleman in 800, and report back to us.\n(I'll be generous and not send you back to the stone age.)The only option, if you're going to have an increasingly prosperous\nsociety without increasing variation in income, seems to be (c),\nthat people will create a lot of wealth without being paid for it.\nThat Jobs and Wozniak, for example, will cheerfully work 20-hour\ndays to produce the Apple computer for a society that allows them,\nafter taxes, to keep just enough of their income to match what they\nwould have made working 9 to 5 at a big company.Will people create wealth if they can't get paid for it?  Only if\nit's fun.  People will write operating systems for free.  But they\nwon't install them, or take support calls, or train customers to\nuse them.  And at least 90% of the work that even the highest tech\ncompanies do is of this second, unedifying kind.All the unfun kinds of wealth creation slow dramatically in a society\nthat confiscates private fortunes.  We can confirm this empirically.\nSuppose you hear a strange noise that you think may be due to a\nnearby fan.  You turn the fan off, and the noise stops.  You turn\nthe fan back on, and the noise starts again.  Off, quiet.  On,\nnoise.  In the absence of other information, it would seem the noise\nis caused by the fan.At various times and places in history, whether you could accumulate\na fortune by creating wealth has been turned on and off.  Northern\nItaly in 800, off (warlords would steal it).  Northern Italy in\n1100, on.  Central France in 1100, off (still feudal).  England in\n1800, on.  England in 1974, off (98% tax on investment income).\nUnited States in 1974, on.  We've even had a twin study: West\nGermany, on;  East Germany, off.  In every case, the creation of\nwealth seems to appear and disappear like the noise of a fan as you\nswitch on and off the prospect of keeping it.There is some momentum involved.  It probably takes at least a\ngeneration to turn people into East Germans (luckily for England).\nBut if it were merely a fan we were studying, without all the extra\nbaggage that comes from the controversial topic of wealth, no one\nwould have any doubt that the fan was causing the noise.If you suppress variations in income, whether by stealing private\nfortunes, as feudal rulers used to do, or by taxing them away, as\nsome modern governments have done, the result always seems to be\nthe same.    Society as a whole ends up poorer.If I had a choice of living in a society where I was materially\nmuch better off than I am now, but was among the poorest, or in one\nwhere I was the richest, but much worse off than I am now, I'd take\nthe first option.  If I had children, it would arguably be immoral\nnot to.  It's absolute poverty you want to avoid, not relative\npoverty.  If, as the evidence so far implies, you have to have one\nor the other in your society, take relative poverty.You need rich people in your society not so much because in spending\ntheir money they create jobs, but because of what they have to do\nto get rich.  I'm not talking about the trickle-down effect\nhere.  I'm not saying that if you let Henry Ford get rich, he'll\nhire you as a waiter at his next party.  I'm saying that he'll make\nyou a tractor to replace your horse.Notes[1]\nPart of the reason this subject is so contentious is that some\nof those most vocal on the subject of wealth\u2014university\nstudents, heirs, professors, politicians, and journalists\u2014have\nthe least experience creating it.  (This phenomenon will be familiar\nto anyone who has overheard conversations about sports in a bar.)Students are mostly still on the parental dole, and have not stopped\nto think about where that money comes from.  Heirs will be on the\nparental dole for life.  Professors and politicians live within\nsocialist eddies of the economy, at one remove from the creation\nof wealth, and are paid a flat rate regardless of how hard they\nwork.  And journalists as part of their professional code segregate\nthemselves from the revenue-collecting half of the businesses they\nwork for (the ad sales department).  Many of these people never\ncome face to face with the fact that the money they receive represents\nwealth\u2014wealth that, except in the case of journalists, someone\nelse created earlier.  They live in a world in which income is\ndoled out by a central authority according to some abstract notion\nof fairness (or randomly, in the case of heirs), rather than given\nby other people in return for something they wanted, so it may seem\nto them unfair that things don't work the same in the rest of the\neconomy.(Some professors do create a great deal of wealth for\nsociety.  But the money they're paid isn't a quid pro quo.\nIt's more in the nature of an investment.)[2]\nWhen one reads about the origins of the Fabian Society, it\nsounds like something cooked up by the high-minded Edwardian\nchild-heroes of Edith Nesbit's The Wouldbegoods.[3]\nAccording to a study by the Corporate Library, the median total\ncompensation, including salary, bonus, stock grants, and the exercise\nof stock options, of S&P 500 CEOs in 2002 was $3.65 million.\nAccording to Sports Illustrated, the average NBA player's\nsalary during the 2002-03 season was $4.54 million, and the average\nmajor league baseball player's salary at the start of the 2003\nseason was $2.56 million.  According to the Bureau of Labor\nStatistics, the mean annual wage in the US in 2002 was $35,560.[4]\nIn the early empire the price of an ordinary adult slave seems\nto have been about 2,000 sestertii (e.g. Horace, Sat. ii.7.43).\nA servant girl cost 600 (Martial vi.66), while Columella (iii.3.8)\nsays that a skilled vine-dresser was worth 8,000.  A doctor, P.\nDecimus Eros Merula, paid 50,000 sestertii for his freedom (Dessau,\nInscriptiones 7812).  Seneca (Ep. xxvii.7) reports\nthat one Calvisius Sabinus paid 100,000 sestertii apiece for slaves\nlearned in the Greek classics.  Pliny (Hist. Nat. vii.39)\nsays that the highest price paid for a slave up to his time was\n700,000 sestertii, for the linguist (and presumably teacher) Daphnis,\nbut that this had since been exceeded by actors buying their own\nfreedom.Classical Athens saw a similar variation in prices.  An ordinary\nlaborer was worth about 125 to 150 drachmae.  Xenophon (Mem.\nii.5) mentions prices ranging from 50 to 6,000 drachmae (for the\nmanager of a silver mine).For more on the economics of ancient slavery see:Jones, A. H. M., \"Slavery in the Ancient World,\" Economic History\nReview, 2:9 (1956), 185-199, reprinted in Finley, M. I. (ed.),\nSlavery in Classical Antiquity, Heffer, 1964.[5]\nEratosthenes (276\u2014195 BC) used shadow lengths in different\ncities to estimate the Earth's circumference.  He was off by only\nabout 2%.[6]\nNo, and Windows, respectively.[7]\nOne of the biggest divergences between the Daddy Model and\nreality is the valuation of hard work.  In the Daddy Model, hard\nwork is in itself deserving.  In reality, wealth is measured by\nwhat one delivers, not how much effort it costs.  If I paint someone's\nhouse, the owner shouldn't pay me extra for doing it with a toothbrush.It will seem to someone still implicitly operating on the Daddy\nModel that it is unfair when someone works hard and doesn't get\npaid much.  To help clarify the matter, get rid of everyone else\nand put our worker on a desert island, hunting and gathering fruit.\nIf he's bad at it he'll work very hard and not end up with much\nfood.  Is this unfair?  Who is being unfair to him?[8]\nPart of the reason for the tenacity of the Daddy Model may be\nthe dual meaning of \"distribution.\" When economists talk about\n\"distribution of income,\" they mean statistical distribution.  But\nwhen you use the phrase frequently, you can't help associating it\nwith the other sense of the word (as in e.g. \"distribution of alms\"),\nand thereby subconsciously seeing wealth as something that flows\nfrom some central tap.  The word \"regressive\" as applied to tax\nrates has a similar effect, at least on me; how can anything\nregressive be good?[9]\n\"From the beginning of the reign Thomas Lord Roos was an assiduous\ncourtier of the young Henry VIII and was soon to reap the rewards.\nIn 1525 he was made a Knight of the Garter and given the Earldom\nof Rutland.  In the thirties his support of the breach with Rome,\nhis zeal in crushing the Pilgrimage of Grace, and his readiness to\nvote the death-penalty in the succession of spectacular treason\ntrials that punctuated Henry's erratic matrimonial progress made\nhim an obvious candidate for grants of monastic property.\"Stone, Lawrence, Family and Fortune: Studies in Aristocratic\nFinance in the Sixteenth and Seventeenth Centuries, Oxford\nUniversity Press, 1973, p. 166.[10]\nThere is archaeological evidence for large settlements earlier,\nbut it's hard to say what was happening in them.Hodges, Richard and David Whitehouse, Mohammed, Charlemagne and\nthe Origins of Europe, Cornell University Press, 1983.[11]\nWilliam Cecil and his son Robert were each in turn the most\npowerful minister of the crown, and both used their position to\namass fortunes among the largest of their times.  Robert in particular\ntook bribery to the point of treason.  \"As Secretary of State and\nthe leading advisor to King James on foreign policy, [he] was a\nspecial recipient of favour, being offered large bribes by the Dutch\nnot to make peace with Spain, and large bribes by Spain to make\npeace.\" (Stone, op. cit., p. 17.)[12]\nThough Balzac made a lot of money from writing, he was notoriously\nimprovident and was troubled by debts all his life.[13]\nA Timex will gain or lose about .5 seconds per day.  The most\naccurate mechanical watch, the Patek Philippe 10 Day Tourbillon,\nis rated at -1.5 to +2 seconds.  Its retail price is about $220,000.[14]\nIf asked to choose which was more expensive, a well-preserved\n1989 Lincoln Town Car ten-passenger limousine ($5,000) or a 2004\nMercedes S600 sedan ($122,000), the average Edwardian might well\nguess wrong.[15]\nTo say anything meaningful about income trends, you have to\ntalk about real income, or income as measured in what it can buy.\nBut the usual way of calculating real income ignores much of the\ngrowth in wealth over time, because it depends on a consumer price\nindex created by bolting end to end a series of numbers that are\nonly locally accurate, and that don't include the prices of new\ninventions until they become so common that their prices stabilize.So while we might think it was very much better to live in a world\nwith antibiotics or air travel or an electric power grid than\nwithout, real income statistics calculated in the usual way will\nprove to us that we are only slightly richer for having these things.Another approach would be to ask, if you were going back to the\nyear x in a time machine, how much would you have to spend on trade\ngoods to make your fortune?  For example, if you were going back\nto 1970 it would certainly be less than $500, because the processing\npower you can get for $500 today would have been worth at least\n$150 million in 1970.  The function goes asymptotic fairly quickly,\nbecause for times over a hundred years or so you could get all you\nneeded in present-day trash.  In 1800 an empty plastic drink bottle\nwith a screw top would have seemed a miracle of workmanship.[16]\nSome will say this amounts to the same thing, because the rich\nhave better opportunities for education.  That's a valid point.  It\nis still possible, to a degree, to buy your kids' way into top\ncolleges by sending them to private schools that in effect hack the\ncollege admissions process.According to a 2002 report by the National Center for Education\nStatistics, about 1.7% of American kids attend private, non-sectarian\nschools.  At Princeton, 36% of the class of 2007 came from such\nschools.  (Interestingly, the number at Harvard is significantly\nlower, about 28%.)  Obviously this is a huge loophole.  It does at\nleast seem to be closing, not widening.Perhaps the designers of admissions processes should take a lesson\nfrom the example of computer security, and instead of just assuming\nthat their system can't be hacked, measure the degree to which it\nis.April 2004To the popular press, \"hacker\" means someone who breaks\ninto computers.  Among programmers it means a good programmer.\nBut the two meanings are connected.  To programmers,\n\"hacker\" connotes mastery in the most literal sense: someone\nwho can make a computer do what he wants\u2014whether the computer\nwants to or not.To add to the confusion, the noun \"hack\" also has two senses.  It can\nbe either a compliment or an insult.  It's called a hack when\nyou do something in an ugly way.  But when you do something\nso clever that you somehow beat the system, that's also\ncalled a hack.  The word is used more often in the former than\nthe latter sense, probably because ugly solutions are more\ncommon than brilliant ones.Believe it or not, the two senses of \"hack\" are also\nconnected.  Ugly and imaginative solutions have something in\ncommon: they both break the rules.  And there is a gradual\ncontinuum between rule breaking that's merely ugly (using\nduct tape to attach something to your bike) and rule breaking\nthat is brilliantly imaginative (discarding Euclidean space).Hacking predates computers.  When he\nwas working on the Manhattan Project, Richard Feynman used to\namuse himself by breaking into safes containing secret documents.\nThis tradition continues today.\nWhen we were in grad school, a hacker friend of mine who spent too much\ntime around MIT had\nhis own lock picking kit.\n(He now runs a hedge fund, a not unrelated enterprise.)It is sometimes hard to explain to authorities why one would\nwant to do such things.\nAnother friend of mine once got in trouble with the government for\nbreaking into computers.  This had only recently been declared\na crime, and the FBI found that their usual investigative\ntechnique didn't work.  Police investigation apparently begins with\na motive.  The usual motives are few: drugs, money, sex,\nrevenge.  Intellectual curiosity was not one of the motives on\nthe FBI's list.  Indeed, the whole concept seemed foreign to\nthem.Those in authority tend to be annoyed by hackers'\ngeneral attitude of disobedience.  But that disobedience is\na byproduct of the qualities that make them good programmers.\nThey may laugh at the CEO when he talks in generic corporate\nnewspeech, but they also laugh at someone who tells them\na certain problem can't be solved.\nSuppress one, and you suppress the other.This attitude is sometimes affected.  Sometimes young programmers\nnotice the eccentricities of eminent hackers and decide to\nadopt some of their own in order to seem smarter.\nThe fake version is not merely\nannoying; the prickly attitude of these posers\ncan actually slow the process of innovation.But even factoring in their annoying eccentricities,\nthe disobedient attitude of hackers is a net win.  I wish its\nadvantages were better understood.For example, I suspect people in Hollywood are\nsimply mystified by\nhackers' attitudes toward copyrights.  They are a perennial\ntopic of heated discussion on Slashdot.\nBut why should people who program computers\nbe so concerned about copyrights, of all things?Partly because some companies use mechanisms to prevent\ncopying.  Show any hacker a lock and his first thought is\nhow to pick it.  But there is a deeper reason that\nhackers are alarmed by measures like copyrights and patents.\nThey see increasingly aggressive measures to protect\n\"intellectual property\"\nas a threat to the intellectual\nfreedom they need to do their job.\nAnd they are right.It is by poking about inside current technology that\nhackers get ideas for the next generation.  No thanks,\nintellectual homeowners may say, we don't need any\noutside help.  But they're wrong.\nThe next generation of computer technology has\noften\u2014perhaps more often than not\u2014been developed by outsiders.In 1977 there was no doubt some group within IBM developing\nwhat they expected to be\nthe next generation of business computer.  They were mistaken.\nThe next generation of business computer was\nbeing developed on entirely different lines by two long-haired\nguys called Steve in a garage in Los Altos.  At about the\nsame time, the powers that be\nwere cooperating to develop the\nofficial next generation operating system, Multics.\nBut two guys who thought Multics excessively complex went off\nand wrote their own.  They gave it a name that\nwas a joking reference to Multics: Unix.The latest intellectual property laws impose\nunprecedented restrictions on the sort of poking around that\nleads to new ideas. In the past, a competitor might use patents\nto prevent you from selling a copy of something they\nmade, but they couldn't prevent you from\ntaking one apart to see how it worked.   The latest\nlaws make this a crime.  How are we\nto develop new technology if we can't study current\ntechnology to figure out how to improve it?Ironically, hackers have brought this on themselves.\nComputers are responsible for the problem.  The control systems\ninside machines used to be physical: gears and levers and cams.\nIncreasingly, the brains (and thus the value) of products is\nin software. And by this I mean software in the general sense:\ni.e. data.  A song on an LP is physically stamped into the\nplastic.  A song on an iPod's disk is merely stored on it.Data is by definition easy to copy.  And the Internet\nmakes copies easy to distribute.  So it is no wonder\ncompanies are afraid.  But, as so often happens, fear has\nclouded their judgement.  The government has responded\nwith draconian laws to protect intellectual property.\nThey probably mean well. But\nthey may not realize that such laws will do more harm\nthan good.Why are programmers so violently opposed to these laws?\nIf I were a legislator, I'd be interested in this\nmystery\u2014for the same reason that, if I were a farmer and suddenly\nheard a lot of squawking coming from my hen house one night,\nI'd want to go out and investigate.  Hackers are not stupid,\nand unanimity is very rare in this world.\nSo if they're all squawking,   \nperhaps there is something amiss.Could it be that such laws, though intended to protect America,\nwill actually harm it?  Think about it.  There is something\nvery American about Feynman breaking into safes during\nthe Manhattan Project.  It's hard to imagine the authorities\nhaving a sense of humor about such things over\nin Germany at that time.  Maybe it's not a coincidence.Hackers are unruly.  That is the essence of hacking.  And it\nis also the essence of Americanness.  It is no accident\nthat Silicon Valley\nis in America, and not France, or Germany,\nor England, or Japan. In those countries, people color inside\nthe lines.I lived for a while in Florence.  But after I'd been there\na few months I realized that what I'd been unconsciously hoping\nto find there was back in the place I'd just left.\nThe reason Florence is famous is that in 1450, it was New York.\nIn 1450 it was filled with the kind of turbulent and ambitious\npeople you find now in America.  (So I went back to America.)It is greatly to America's advantage that it is\na congenial atmosphere for the right sort of unruliness\u2014that\nit is a home not just for the smart, but for smart-alecks.\nAnd hackers are invariably smart-alecks.  If we had a national\nholiday, it would be April 1st.  It says a great deal about\nour work that we use the same word for a brilliant or a\nhorribly cheesy solution.   When we cook one up we're not\nalways 100% sure which kind it is.  But as long as it has\nthe right sort of wrongness, that's a promising sign.\nIt's odd that people\nthink of programming as precise and methodical.  Computers\nare precise and methodical.  Hacking is something you do\nwith a gleeful laugh.In our world some of the most characteristic solutions\nare not far removed from practical\njokes.  IBM was no doubt rather surprised by the consequences\nof the licensing deal for DOS, just as the hypothetical\n\"adversary\" must be when Michael Rabin solves a problem by\nredefining it as one that's easier to solve.Smart-alecks have to develop a keen sense of how much they\ncan get away with.  And lately hackers \nhave sensed a change\nin the atmosphere.\nLately hackerliness seems rather frowned upon.To hackers the recent contraction in civil liberties seems\nespecially ominous.  That must also mystify outsiders. \nWhy should we care especially about civil\nliberties?  Why programmers, more than\ndentists or salesmen or landscapers?Let me put the case in terms a government official would appreciate.\nCivil liberties are not just an ornament, or a quaint\nAmerican tradition.  Civil liberties make countries rich.\nIf you made a graph of\nGNP per capita vs. civil liberties, you'd notice a definite\ntrend.  Could civil liberties really be a cause, rather\nthan just an effect?  I think so.  I think a society in which\npeople can do and say what they want will also tend to\nbe one in which the most efficient solutions win, rather than\nthose sponsored by the most influential people.\nAuthoritarian countries become corrupt;\ncorrupt countries become poor; and poor countries are weak. \nIt seems to me there is\na Laffer curve for government power, just as for\ntax revenues.  At least, it seems likely enough that it\nwould be stupid to try the experiment and find out.  Unlike\nhigh tax rates, you can't repeal totalitarianism if it\nturns out to be a mistake.This is why hackers worry.  The government spying on people doesn't\nliterally make programmers write worse code.  It just leads\neventually to a world in which bad ideas win.  And because\nthis is so important to hackers, they're especially sensitive\nto it.  They can sense totalitarianism approaching from a\ndistance, as animals can sense an approaching  \nthunderstorm.It would be ironic if, as hackers fear, recent measures\nintended to protect national security and intellectual property\nturned out to be a missile aimed right at what makes   \nAmerica successful.  But it would not be the first time that\nmeasures taken in an atmosphere of panic had\nthe opposite of the intended effect.There is such a thing as Americanness.\nThere's nothing like living abroad to teach you that.   \nAnd if you want to know whether something will nurture or squash\nthis quality, it would be hard to find a better focus\ngroup than hackers, because they come closest of any group\nI know to embodying it.  Closer, probably,  than\nthe men running our government,\nwho for all their talk of patriotism\nremind me more of Richelieu or Mazarin\nthan Thomas Jefferson or George Washington.When you read what the founding fathers had to say for\nthemselves, they sound more like hackers.\n\"The spirit of resistance to government,\"\nJefferson wrote, \"is so valuable on certain occasions, that I wish\nit always to be kept alive.\"Imagine an American president saying that today.\nLike the remarks of an outspoken old grandmother, the sayings of\nthe founding fathers have embarrassed generations of\ntheir less confident successors.  They remind us where we come from.\nThey remind us that it is the people who break rules that are\nthe source of America's wealth and power.Those in a position to impose rules naturally want them to be\nobeyed.  But be careful what you ask for. You might get it.Thanks to Ken Anderson, Trevor Blackwell, Daniel Giffin, \nSarah Harlin,  Shiro Kawai, Jessica Livingston, Matz, \nJackie McDonough, Robert Morris, Eric Raymond, Guido van Rossum,\nDavid Weinberger, and\nSteven Wolfram for reading drafts of this essay.\n(The image shows Steves Jobs and Wozniak \nwith a \"blue box.\"\nPhoto by Margret Wozniak. Reproduced by permission of Steve\nWozniak.)\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nJuly 2004(This essay is derived from a talk at Oscon 2004.)\nA few months ago I finished a new \nbook, \nand in reviews I keep\nnoticing words like \"provocative'' and \"controversial.'' To say\nnothing of \"idiotic.''I didn't mean to make the book controversial.  I was trying to make\nit efficient.  I didn't want to waste people's time telling them\nthings they already knew.  It's more efficient just to give them\nthe diffs.  But I suppose that's bound to yield an alarming book.EdisonsThere's no controversy about which idea is most controversial:\nthe suggestion that variation in wealth might not be as big a\nproblem as we think.I didn't say in the book that variation in wealth was in itself a\ngood thing.  I said in some situations it might be a sign of good\nthings.  A throbbing headache is not a good thing, but it can be\na sign of a good thing-- for example, that you're recovering\nconsciousness after being hit on the head.Variation in wealth can be a sign of variation in productivity.\n(In a society of one, they're identical.) And that\nis almost certainly a good thing: if your society has no variation\nin productivity, it's probably not because everyone is Thomas\nEdison.  It's probably because you have no Thomas Edisons.In a low-tech society you don't see much variation in productivity.\nIf you have a tribe of nomads collecting sticks for a fire, how\nmuch more productive is the best stick gatherer going to be than\nthe worst?  A factor of two?  Whereas when you hand people a complex tool\nlike a computer, the variation in what they can do with\nit is enormous.That's not a new idea.  Fred Brooks wrote about it in 1974, and\nthe study he quoted was published in 1968.  But I think he\nunderestimated the variation between programmers.  He wrote about productivity in lines\nof code:  the best programmers can solve a given problem in a tenth\nthe time.  But what if the problem isn't given? In programming, as\nin many fields, the hard part isn't solving problems, but deciding\nwhat problems to solve.  Imagination is hard to measure, but\nin practice it dominates the kind of productivity that's measured\nin lines of code.Productivity varies in any field, but there are few in which it\nvaries so much.  The variation between programmers\nis so great that it becomes a difference in kind.  I don't\nthink this is something intrinsic to programming, though.  In every field,\ntechnology magnifies differences in productivity.  I think what's\nhappening in programming is just that we have a lot of technological\nleverage.  But in every field the lever is getting longer, so the\nvariation we see is something that more and more fields will see\nas time goes on.  And the success of companies, and countries, will\ndepend increasingly on how they deal with it.If variation in productivity increases with technology, then the\ncontribution of the most productive individuals will not only be\ndisproportionately large, but will actually grow with time.  When\nyou reach the point where 90% of a group's output is created by 1%\nof its members, you lose big if something (whether Viking raids,\nor central planning) drags their productivity down to the average.If we want to get the most out of them, we need to understand these\nespecially productive people.  What motivates them?  What do they\nneed to do their jobs?  How do you recognize them? How do you\nget them to come and work for you?  And then of course there's the\nquestion, how do you become one?More than MoneyI know a handful of super-hackers, so I sat down and thought about\nwhat they have in common.  Their defining quality is probably that\nthey really love to program.  Ordinary programmers write code to pay\nthe bills.  Great hackers think of it as something they do for fun,\nand which they're delighted to find people will pay them for.Great programmers are sometimes said to be indifferent to money.\nThis isn't quite true.  It is true that all they really care about\nis doing interesting work.  But if you make enough money, you get\nto work on whatever you want, and for that reason hackers are\nattracted by the idea of making really large amounts of money.\nBut as long as they still have to show up for work every day, they\ncare more about what they do there than how much they get paid for\nit.Economically, this is a fact of the greatest importance, because\nit means you don't have to pay great hackers anything like what\nthey're worth.  A great programmer might be ten or a hundred times\nas productive as an ordinary one, but he'll consider himself lucky\nto get paid three times as much.  As I'll explain later, this is\npartly because great hackers don't know how good they are.  But\nit's also because money is not the main thing they want.What do hackers want?  Like all craftsmen, hackers like good tools.\nIn fact, that's an understatement.  Good hackers find it unbearable\nto use bad tools.  They'll simply refuse to work on projects with\nthe wrong infrastructure.At a startup I once worked for, one of the things pinned up on our\nbulletin board was an ad from IBM.  It was a picture of an AS400,\nand the headline read, I think, \"hackers despise\nit.'' [1]When you decide what infrastructure to use for a project, you're\nnot just making a technical decision.  You're also making a social\ndecision, and this may be the more important of the two.  For\nexample, if your company wants to write some software, it might\nseem a prudent choice to write it in Java.  But when you choose a\nlanguage, you're also choosing a community.  The programmers you'll\nbe able to hire to work on a Java project won't be as\nsmart as the\nones you could get to work on a project written in Python.\nAnd the quality of your hackers probably matters more than the\nlanguage you choose.  Though, frankly, the fact that good hackers\nprefer Python to Java should tell you something about the relative\nmerits of those languages.Business types prefer the most popular languages because they view\nlanguages as standards. They don't want to bet the company on\nBetamax.  The thing about languages, though, is that they're not\njust standards.  If you have to move bits over a network, by all\nmeans use TCP/IP.  But a programming language isn't just a format.\nA programming language is a medium of expression.I've read that Java has just overtaken Cobol as the most popular\nlanguage.  As a standard, you couldn't wish for more.  But as a\nmedium of expression, you could do a lot better.  Of all the great\nprogrammers I can think of, I know of only one who would voluntarily\nprogram in Java.  And of all the great programmers I can think of\nwho don't work for Sun, on Java, I know of zero.Great hackers also generally insist on using open source software.\nNot just because it's better, but because it gives them more control.\nGood hackers insist on control.  This is part of what makes them\ngood hackers:  when something's broken, they need to fix it.  You\nwant them to feel this way about the software they're writing for\nyou.  You shouldn't be surprised when they feel the same way about\nthe operating system.A couple years ago a venture capitalist friend told me about a new\nstartup he was involved with.  It sounded promising.  But the next\ntime I talked to him, he said they'd decided to build their software\non Windows NT, and had just hired a very experienced NT developer\nto be their chief technical officer.  When I heard this, I thought,\nthese guys are doomed.  One, the CTO couldn't be a first rate\nhacker, because to become an eminent NT developer he would have\nhad to use NT voluntarily, multiple times, and I couldn't imagine\na great hacker doing that; and two, even if he was good, he'd have\na hard time hiring anyone good to work for him if the project had\nto be built on NT. [2]The Final FrontierAfter software, the most important tool to a hacker is probably\nhis office.  Big companies think the function of office space is to express\nrank.  But hackers use their offices for more than that: they\nuse their office as a place to think in.  And if you're a technology\ncompany, their thoughts are your product.  So making hackers work\nin a noisy, distracting environment is like having a paint factory\nwhere the air is full of soot.The cartoon strip Dilbert has a lot to say about cubicles, and with\ngood reason.  All the hackers I know despise them.  The mere prospect\nof being interrupted is enough to prevent hackers from working on\nhard problems.  If you want to get real work done in an office with\ncubicles, you have two options: work at home, or come in early or\nlate or on a weekend, when no one else is there.  Don't companies\nrealize this is a sign that something is broken?  An office\nenvironment is supposed to be something that helps\nyou work, not something you work despite.Companies like Cisco are proud that everyone there has a cubicle,\neven the CEO.  But they're not so advanced as they think; obviously\nthey still view office space as a badge of rank.  Note too that\nCisco is famous for doing very little product development in house.\nThey get new technology by buying the startups that created it-- where\npresumably the hackers did have somewhere quiet to work.One big company that understands what hackers need is Microsoft.\nI once saw a recruiting ad for Microsoft with a big picture of a\ndoor.  Work for us, the premise was, and we'll give you a place to\nwork where you can actually get work done.   And you know, Microsoft\nis remarkable among big companies in that they are able to develop\nsoftware in house.  Not well, perhaps, but well enough.If companies want hackers to be productive, they should look at\nwhat they do at home.  At home, hackers can arrange things themselves\nso they can get the most done.  And when they work at home, hackers\ndon't work in noisy, open spaces; they work in rooms with doors.  They\nwork in cosy, neighborhoody places with people around and somewhere\nto walk when they need to mull something over, instead of in glass\nboxes set in acres of parking lots.  They have a sofa they can take\na nap on when they feel tired, instead of sitting in a coma at\ntheir desk, pretending to work.  There's no crew of people with\nvacuum cleaners that roars through every evening during the prime\nhacking hours.  There are no meetings or, God forbid, corporate\nretreats or team-building exercises.  And when you look at what\nthey're doing on that computer, you'll find it reinforces what I\nsaid earlier about tools.  They may have to use Java and Windows\nat work, but at home, where they can choose for themselves, you're\nmore likely to find them using Perl and Linux.Indeed, these statistics about Cobol or Java being the most popular\nlanguage can be misleading.  What we ought to look at, if we want\nto know what tools are best, is what hackers choose when they can\nchoose freely-- that is, in projects of their own.  When you ask\nthat question, you find that open source operating systems already\nhave a dominant market share, and the number one language is probably\nPerl.InterestingAlong with good tools, hackers want interesting projects.  What\nmakes a project interesting?  Well, obviously overtly sexy\napplications like stealth planes or special effects software would\nbe interesting to work on.  But any application can be interesting\nif it poses novel technical challenges.  So it's hard to predict\nwhich problems hackers will like, because some become\ninteresting only when the people working on them discover a new\nkind of solution.  Before ITA\n(who wrote the software inside Orbitz),\nthe people working on airline fare searches probably thought it\nwas one of the most boring applications imaginable.  But ITA made\nit interesting by \nredefining the problem in a more ambitious way.I think the same thing happened at Google.  When Google was founded,\nthe conventional wisdom among the so-called portals was that search\nwas boring and unimportant.  But the guys at Google didn't think\nsearch was boring, and that's why they do it so well.This is an area where managers can make a difference.  Like a parent\nsaying to a child, I bet you can't clean up your whole room in\nten minutes, a good manager can sometimes redefine a problem as a\nmore interesting one.  Steve Jobs seems to be particularly good at\nthis, in part simply by having high standards.  There were a lot\nof small, inexpensive computers before the Mac.  He redefined the\nproblem as: make one that's beautiful.  And that probably drove\nthe developers harder than any carrot or stick could.They certainly delivered.  When the Mac first appeared, you didn't\neven have to turn it on to know it would be good; you could tell\nfrom the case.  A few weeks ago I was walking along the street in\nCambridge, and in someone's trash I saw what appeared to be a Mac\ncarrying case.  I looked inside, and there was a Mac SE.  I carried\nit home and plugged it in, and it booted.  The happy Macintosh\nface, and then the finder.  My God, it was so simple.  It was just\nlike ... Google.Hackers like to work for people with high standards.  But it's not\nenough just to be exacting.  You have to insist on the right things.\nWhich usually means that you have to be a hacker yourself.  I've\nseen occasional articles about how to manage programmers.  Really\nthere should be two articles: one about what to do if\nyou are yourself a programmer, and one about what to do if you're not.  And the \nsecond could probably be condensed into two words:  give up.The problem is not so much the day to day management.  Really good\nhackers are practically self-managing.  The problem is, if you're\nnot a hacker, you can't tell who the good hackers are.  A similar\nproblem explains why American cars are so ugly.  I call it the\ndesign paradox.  You might think that you could make your products\nbeautiful just by hiring a great designer to design them.  But if\nyou yourself don't have good taste, \nhow are you going to recognize\na good designer?  By definition you can't tell from his portfolio.\nAnd you can't go by the awards he's won or the jobs he's had,\nbecause in design, as in most fields, those tend to be driven by\nfashion and schmoozing, with actual ability a distant third.\nThere's no way around it:  you can't manage a process intended to\nproduce beautiful things without knowing what beautiful is.  American\ncars are ugly because American car companies are run by people with\nbad taste.Many people in this country think of taste as something elusive,\nor even frivolous.  It is neither.  To drive design, a manager must\nbe the most demanding user of a company's products.  And if you\nhave really good taste, you can, as Steve Jobs does, make satisfying\nyou the kind of problem that good people like to work on.Nasty Little ProblemsIt's pretty easy to say what kinds of problems are not interesting:\nthose where instead of solving a few big, clear, problems, you have\nto solve a lot of nasty little ones.  One of the worst kinds of\nprojects is writing an interface to a piece of software that's\nfull of bugs.  Another is when you have to customize\nsomething for an individual client's complex and ill-defined needs.\nTo hackers these kinds of projects are the death of a thousand\ncuts.The distinguishing feature of nasty little problems is that you\ndon't learn anything from them.   Writing a compiler is interesting\nbecause it teaches you what a compiler is.  But writing an interface\nto a buggy piece of software doesn't teach you anything, because the\nbugs are random.  [3] So it's not just fastidiousness that makes good\nhackers avoid nasty little problems.  It's more a question of\nself-preservation.  Working on nasty little problems makes you\nstupid.  Good hackers avoid it for the same reason models avoid\ncheeseburgers.Of course some problems inherently have this character.  And because\nof supply and demand, they pay especially well.  So a company that\nfound a way to get great hackers to work on tedious problems would\nbe very successful.  How would you do it?One place this happens is in startups.  At our startup we had \nRobert Morris working as a system administrator.  That's like having the\nRolling Stones play at a bar mitzvah.  You can't hire that kind of\ntalent.  But people will do any amount of drudgery for companies\nof which they're the founders.  [4]Bigger companies solve the problem by partitioning the company.\nThey get smart people to work for them by establishing a separate\nR&D department where employees don't have to work directly on\ncustomers' nasty little problems. [5] In this model, the research\ndepartment functions like a mine. They produce new ideas; maybe\nthe rest of the company will be able to use them.You may not have to go to this extreme.  \nBottom-up programming\nsuggests another way to partition the company: have the smart people\nwork as toolmakers.  If your company makes software to do x, have\none group that builds tools for writing software of that type, and\nanother that uses these tools to write the applications.  This way\nyou might be able to get smart people to write 99% of your code,\nbut still keep them almost as insulated from users as they would\nbe in a traditional research department.  The toolmakers would have\nusers, but they'd only be the company's own developers.  [6]If Microsoft used this approach, their software wouldn't be so full\nof security holes, because the less smart people writing the actual\napplications wouldn't be doing low-level stuff like allocating\nmemory.  Instead of writing Word directly in C, they'd be plugging\ntogether big Lego blocks of Word-language.  (Duplo, I believe, is\nthe technical term.)ClumpingAlong with interesting problems, what good hackers like is other\ngood hackers.  Great hackers tend to clump together-- sometimes\nspectacularly so, as at Xerox Parc.   So you won't attract good\nhackers in linear proportion to how good an environment you create\nfor them.  The tendency to clump means it's more like the square\nof the environment.  So it's winner take all.  At any given time,\nthere are only about ten or twenty places where hackers most want to\nwork, and if you aren't one of them, you won't just have fewer\ngreat hackers, you'll have zero.Having great hackers is not, by itself, enough to make a company\nsuccessful.  It works well for Google and ITA, which are two of\nthe hot spots right now, but it didn't help Thinking Machines or\nXerox.  Sun had a good run for a while, but their business model\nis a down elevator.  In that situation, even the best hackers can't\nsave you.I think, though, that all other things being equal, a company that\ncan attract great hackers will have a huge advantage.  There are\npeople who would disagree with this.  When we were making the rounds\nof venture capital firms in the 1990s, several told us that software\ncompanies didn't win by writing great software, but through brand,\nand dominating channels, and doing the right deals.They really seemed to believe this, and I think I know why.  I\nthink what a lot of VCs are looking for, at least unconsciously,\nis the next Microsoft.  And of course if Microsoft is your model,\nyou shouldn't be looking for companies that hope to win by writing\ngreat software.  But VCs are mistaken to look for the next Microsoft,\nbecause no startup can be the next Microsoft unless some other\ncompany is prepared to bend over at just the right moment and be\nthe next IBM.It's a mistake to use Microsoft as a model, because their whole\nculture derives from that one lucky break.  Microsoft is a bad data\npoint.  If you throw them out, you find that good products do tend\nto win in the market.  What VCs should be looking for is the next\nApple, or the next Google.I think Bill Gates knows this.  What worries him about Google is\nnot the power of their brand, but the fact that they have\nbetter hackers. [7]\nRecognitionSo who are the great hackers?  How do you know when you meet one?\nThat turns out to be very hard.  Even hackers can't tell.  I'm\npretty sure now that my friend Trevor Blackwell is a great hacker.\nYou may have read on Slashdot how he made his \nown Segway.  The\nremarkable thing about this project was that he wrote all the\nsoftware in one day (in Python, incidentally).For Trevor, that's\npar for the course.  But when I first met him, I thought he was a\ncomplete idiot.  He was standing in Robert Morris's office babbling\nat him about something or other, and I remember standing behind\nhim making frantic gestures at Robert to shoo this nut out of his\noffice so we could go to lunch.  Robert says he misjudged Trevor\nat first too.  Apparently when Robert first met him, Trevor had\njust begun a new scheme that involved writing down everything about\nevery aspect of his life on a stack of index cards, which he carried\nwith him everywhere.  He'd also just arrived from Canada, and had\na strong Canadian accent and a mullet.The problem is compounded by the fact that hackers, despite their\nreputation for social obliviousness, sometimes put a good deal of\neffort into seeming smart.  When I was in grad school I used to\nhang around the MIT AI Lab occasionally. It was kind of intimidating\nat first.  Everyone there spoke so fast.  But after a while I\nlearned the trick of speaking fast.  You don't have to think any\nfaster; just use twice as many words to say everything.  With this amount of noise in the signal, it's hard to tell good\nhackers when you meet them.  I can't tell, even now.  You also\ncan't tell from their resumes.  It seems like the only way to judge\na hacker is to work with him on something.And this is the reason that high-tech areas \nonly happen around universities.  The active ingredient\nhere is not so much the professors as the students.  Startups grow up\naround universities because universities bring together promising young\npeople and make them work on the same projects.  The\nsmart ones learn who the other smart ones are, and together\nthey cook up new projects of their own.Because you can't tell a great hacker except by working with him,\nhackers themselves can't tell how good they are.  This is true to\na degree in most fields.  I've found that people who\nare great at something are not so much convinced of their own\ngreatness as mystified at why everyone else seems so incompetent.\nBut it's particularly hard for hackers to know how good they are,\nbecause it's hard to compare their work.  This is easier in most\nother fields.  In the hundred meters, you know in 10 seconds who's\nfastest.  Even in math there seems to be a general consensus about\nwhich problems are hard to solve, and what constitutes a good\nsolution.  But hacking is like writing.  Who can say which of two\nnovels is better?  Certainly not the authors.With hackers, at least, other hackers can tell.  That's because,\nunlike novelists, hackers collaborate on projects.  When you get\nto hit a few difficult problems over the net at someone, you learn\npretty quickly how hard they hit them back.  But hackers can't\nwatch themselves at work.  So if you ask a great hacker how good\nhe is, he's almost certain to reply, I don't know.  He's not just\nbeing modest.  He really doesn't know.And none of us know, except about people we've actually worked\nwith.  Which puts us in a weird situation: we don't know who our\nheroes should be.  The hackers who become famous tend to become\nfamous by random accidents of PR.  Occasionally I need to give an\nexample of a great hacker, and I never know who to use.  The first\nnames that come to mind always tend to be people I know personally,\nbut it seems lame to use them.  So, I think, maybe I should say\nRichard Stallman, or Linus Torvalds, or Alan Kay, or someone famous\nlike that.  But I have no idea if these guys are great hackers.\nI've never worked with them on anything.If there is a Michael Jordan of hacking, no one knows, including\nhim.CultivationFinally, the question the hackers have all been wondering about:\nhow do you become a great hacker?  I don't know if it's possible\nto make yourself into one.  But it's certainly possible to do things\nthat make you stupid, and if you can make yourself stupid, you\ncan probably make yourself smart too.The key to being a good hacker may be to work on what you like.\nWhen I think about the great hackers I know, one thing they have\nin common is the extreme \ndifficulty of making them work \non anything they\ndon't want to.  I don't know if this is cause or effect; it may be\nboth.To do something well you have to love it.  \nSo to the extent you\ncan preserve hacking as something you love, you're likely to do it\nwell.  Try to keep the sense of wonder you had about programming at\nage 14.  If you're worried that your current job is rotting your\nbrain, it probably is.The best hackers tend to be smart, of course, but that's true in\na lot of fields.  Is there some quality that's unique to hackers?\nI asked some friends, and the number one thing they mentioned was\ncuriosity.  \nI'd always supposed that all smart people were curious--\nthat curiosity was simply the first derivative of knowledge.  But\napparently hackers are particularly curious, especially about how\nthings work.  That makes sense, because programs are in effect\ngiant descriptions of how things work.Several friends mentioned hackers' ability to concentrate-- their\nability, as one put it, to \"tune out everything outside their own\nheads.''  I've certainly noticed this.  And I've heard several \nhackers say that after drinking even half a beer they can't program at\nall.   So maybe hacking does require some special ability to focus.\nPerhaps great hackers can load a large amount of context into their\nhead, so that when they look at a line of code, they see not just\nthat line but the whole program around it.  John McPhee\nwrote that Bill Bradley's success as a basketball player was due\npartly to his extraordinary peripheral vision.  \"Perfect'' eyesight\nmeans about 47 degrees of vertical peripheral vision.  Bill Bradley\nhad 70; he could see the basket when he was looking at the floor.\nMaybe great hackers have some similar inborn ability.  (I cheat by\nusing a very dense language, \nwhich shrinks the court.)This could explain the disconnect over cubicles.  Maybe the people\nin charge of facilities, not having any concentration to shatter,\nhave no idea that working in a cubicle feels to a hacker like having\none's brain in a blender.  (Whereas Bill, if the rumors of autism\nare true, knows all too well.)One difference I've noticed between great hackers and smart people\nin general is that hackers are more \npolitically incorrect.  To the\nextent there is a secret handshake among good hackers, it's when they\nknow one another well enough to express opinions that would get\nthem stoned to death by the general public.  And I can see why\npolitical incorrectness would be a useful quality in programming.\nPrograms are very complex and, at least in the hands of good\nprogrammers, very fluid.  In such situations it's helpful to have\na habit of questioning assumptions.Can you cultivate these qualities?  I don't know.  But you can at\nleast not repress them.  So here is my best shot at a recipe.  If\nit is possible to make yourself into a great hacker, the way to do\nit may be to make the following deal with yourself: you never have\nto work on boring projects (unless your family will starve otherwise),\nand in return, you'll never allow yourself to do a half-assed job.\nAll the great hackers I know seem to have made that deal, though\nperhaps none of them had any choice in the matter.Notes\n[1] In fairness, I have to say that IBM makes decent hardware.  I\nwrote this on an IBM laptop.[2] They did turn out to be doomed.  They shut down a few months\nlater.[3] I think this is what people mean when they talk\nabout the \"meaning of life.\"  On the face of it, this seems an \nodd idea.  Life isn't an expression; how could it have meaning?\nBut it can have a quality that feels a lot like meaning.  In a project\nlike a compiler, you have to solve a lot of problems, but the problems\nall fall into a pattern, as in a signal.  Whereas when the problems\nyou have to solve are random, they seem like noise.\n[4] Einstein at one point worked designing refrigerators. (He had equity.)[5] It's hard to say exactly what constitutes research in the\ncomputer world, but as a first approximation, it's software that\ndoesn't have users.I don't think it's publication that makes the best hackers want to work\nin research departments.  I think it's mainly not having to have a\nthree hour meeting with a product manager about problems integrating\nthe Korean version of Word 13.27 with the talking paperclip.[6] Something similar has been happening for a long time in the\nconstruction industry. When you had a house built a couple hundred\nyears ago, the local builders built everything in it.  But increasingly\nwhat builders do is assemble components designed and manufactured\nby someone else.  This has, like the arrival of desktop publishing,\ngiven people the freedom to experiment in disastrous ways, but it\nis certainly more efficient.[7] Google is much more dangerous to Microsoft than Netscape was.\nProbably more dangerous than any other company has ever been.  Not\nleast because they're determined to fight.  On their job listing\npage, they say that one of their \"core values'' is \"Don't be evil.''\nFrom a company selling soybean oil or mining equipment, such a\nstatement would merely be eccentric.  But I think all of us in the\ncomputer world recognize who that is a declaration of war on.Thanks to Jessica Livingston, Robert Morris, and Sarah Harlin\nfor reading earlier versions of this talk.November 2021(This essay is derived from a talk at the Cambridge Union.)When I was a kid, I'd have said there wasn't. My father told me so.\nSome people like some things, and other people like other things,\nand who's to say who's right?It seemed so obvious that there was no such thing as good taste\nthat it was only through indirect evidence that I realized my father\nwas wrong. And that's what I'm going to give you here: a proof by\nreductio ad absurdum. If we start from the premise that there's no\nsuch thing as good taste, we end up with conclusions that are\nobviously false, and therefore the premise must be wrong.We'd better start by saying what good taste is. There's a narrow\nsense in which it refers to aesthetic judgements and a broader one\nin which it refers to preferences of any kind. The strongest proof\nwould be to show that taste exists in the narrowest sense, so I'm\ngoing to talk about taste in art. You have better taste than me if\nthe art you like is better than the art I like.If there's no such thing as good taste, then there's no such thing\nas good art. Because if there is such a\nthing as good art, it's\neasy to tell which of two people has better taste. Show them a lot\nof works by artists they've never seen before and ask them to\nchoose the best, and whoever chooses the better art has better\ntaste.So if you want to discard the concept of good taste, you also have\nto discard the concept of good art. And that means you have to\ndiscard the possibility of people being good at making it. Which\nmeans there's no way for artists to be good at their jobs. And not\njust visual artists, but anyone who is in any sense an artist. You\ncan't have good actors, or novelists, or composers, or dancers\neither. You can have popular novelists, but not good ones.We don't realize how far we'd have to go if we discarded the concept\nof good taste, because we don't even debate the most obvious cases.\nBut it doesn't just mean we can't say which of two famous painters\nis better. It means we can't say that any painter is better than a\nrandomly chosen eight year old.That was how I realized my father was wrong. I started studying\npainting. And it was just like other kinds of work I'd done: you\ncould do it well, or badly, and if you tried hard, you could get\nbetter at it. And it was obvious that Leonardo and Bellini were\nmuch better at it than me. That gap between us was not imaginary.\nThey were so good. And if they could be good, then art could be\ngood, and there was such a thing as good taste after all.Now that I've explained how to show there is such a thing as good\ntaste, I should also explain why people think there isn't. There\nare two reasons. One is that there's always so much disagreement\nabout taste. Most people's response to art is a tangle of unexamined\nimpulses. Is the artist famous? Is the subject attractive? Is this\nthe sort of art they're supposed to like? Is it hanging in a famous\nmuseum, or reproduced in a big, expensive book? In practice most\npeople's response to art is dominated by such extraneous factors.And the people who do claim to have good taste are so often mistaken.\nThe paintings admired by the so-called experts in one generation\nare often so different from those admired a few generations later.\nIt's easy to conclude there's nothing real there at all. It's only\nwhen you isolate this force, for example by trying to paint and\ncomparing your work to Bellini's, that you can see that it does in\nfact exist.The other reason people doubt that art can be good is that there\ndoesn't seem to be any room in the art for this goodness. The\nargument goes like this. Imagine several people looking at a work\nof art and judging how good it is. If being good art really is a\nproperty of objects, it should be in the object somehow. But it\ndoesn't seem to be; it seems to be something happening in the heads\nof each of the observers. And if they disagree, how do you choose\nbetween them?The solution to this puzzle is to realize that the purpose of art\nis to work on its human audience, and humans have a lot in common.\nAnd to the extent the things an object acts upon respond in the\nsame way, that's arguably what it means for the object to have the\ncorresponding property. If everything a particle interacts with\nbehaves as if the particle had a mass of m, then it has a mass of\nm. So the distinction between \"objective\" and \"subjective\" is not\nbinary, but a matter of degree, depending on how much the subjects\nhave in common. Particles interacting with one another are at one\npole, but people interacting with art are not all the way at the\nother; their reactions aren't random.Because people's responses to art aren't random, art can be designed\nto operate on people, and be good or bad depending on how effectively\nit does so. Much as a vaccine can be. If someone were talking about\nthe ability of a vaccine to confer immunity, it would seem very\nfrivolous to object that conferring immunity wasn't really a property\nof vaccines, because acquiring immunity is something that happens\nin the immune system of each individual person. Sure, people's\nimmune systems vary, and a vaccine that worked on one might not\nwork on another, but that doesn't make it meaningless to talk about\nthe effectiveness of a vaccine.The situation with art is messier, of course. You can't measure\neffectiveness by simply taking a vote, as you do with vaccines.\nYou have to imagine the responses of subjects with a deep knowledge\nof art, and enough clarity of mind to be able to ignore extraneous\ninfluences like the fame of the artist. And even then you'd still\nsee some disagreement. People do vary, and judging art is hard,\nespecially recent art. There is definitely not a total order either\nof works or of people's ability to judge them. But there is equally\ndefinitely a partial order of both. So while it's not possible to\nhave perfect taste, it is possible to have good taste.\nThanks to the Cambridge Union for inviting me, and to Trevor\nBlackwell, Jessica Livingston, and Robert Morris for reading drafts\nof this.\n\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nOctober 2011If you look at a list of US cities sorted by population, the number\nof successful startups per capita varies by orders of magnitude.\nSomehow it's as if most places were sprayed with startupicide.I wondered about this for years.  I could see the average town was\nlike a roach motel for startup ambitions: smart, ambitious people\nwent in, but no startups came out.  But I was never able to figure\nout exactly what happened inside the motel\u2014exactly what was\nkilling all the potential startups.\n[1]A couple weeks ago I finally figured it out. I was framing the\nquestion wrong.  The problem is not that most towns kill startups.\nIt's that death is the default for startups,\nand most towns don't save them.  Instead of thinking of most places\nas being sprayed with startupicide, it's more accurate to think of\nstartups as all being poisoned, and a few places being sprayed with\nthe antidote.Startups in other places are just doing what startups naturally do:\nfail.  The real question is, what's saving startups in places\nlike Silicon Valley?\n[2]EnvironmentI think there are two components to the antidote: being in a place\nwhere startups are the cool thing to do, and chance meetings with\npeople who can help you.  And what drives them both is the number\nof startup people around you.The first component is particularly helpful in the first stage of\na startup's life, when you go from merely having an interest in\nstarting a company to actually doing it.  It's quite a leap to start\na startup.  It's an unusual thing to do. But in Silicon Valley it\nseems normal.\n[3]In most places, if you start a startup, people treat you as if\nyou're unemployed.  People in the Valley aren't automatically\nimpressed with you just because you're starting a company, but they\npay attention.  Anyone who's been here any amount of time knows not\nto default to skepticism, no matter how inexperienced you seem or\nhow unpromising your idea sounds at first, because they've all seen\ninexperienced founders with unpromising sounding ideas who a few\nyears later were billionaires.Having people around you care about what you're doing is an\nextraordinarily powerful force.  Even the\nmost willful people are susceptible to it.  About a year after we\nstarted Y Combinator I said something to a partner at a well known\nVC firm that gave him the (mistaken) impression I was considering\nstarting another startup.  He responded so eagerly that for about\nhalf a second I found myself considering doing it.In most other cities, the prospect of starting a startup just doesn't\nseem real.  In the Valley it's not only real but fashionable.  That\nno doubt causes a lot of people to start startups who shouldn't.\nBut I think that's ok.  Few people are suited to running a startup,\nand it's very hard to predict beforehand which are (as I know all\ntoo well from being in the business of trying to predict beforehand),\nso lots of people starting startups who shouldn't is probably the\noptimal state of affairs.  As long as you're at a point in your\nlife when you can bear the risk of failure, the best way to find\nout if you're suited to running a startup is to try\nit.ChanceThe second component of the antidote is chance meetings with people\nwho can help you.  This force works in both phases: both in the\ntransition from the desire to start a startup to starting one, and\nthe transition from starting a company to succeeding.  The power\nof chance meetings is more variable than people around you caring\nabout startups, which is like a sort of background radiation that\naffects everyone equally, but at its strongest it is far stronger.Chance meetings produce miracles to compensate for the disasters\nthat characteristically befall startups.  In the Valley, terrible\nthings happen to startups all the time, just like they do to startups\neverywhere.  The reason startups are more likely to make it here\nis that great things happen to them too.  In the Valley, lightning\nhas a sign bit.For example, you start a site for college students and you decide\nto move to the Valley for the summer to work on it.  And then on a\nrandom suburban street in Palo Alto you happen to run into Sean\nParker, who understands the domain really well because he started\na similar startup himself, and also knows all the investors.  And\nmoreover has advanced views, for 2004, on founders retaining control of their companies.You can't say precisely what the miracle will be, or even for sure\nthat one will happen.  The best one can say is: if you're in a\nstartup hub, unexpected good things will probably happen to you,\nespecially if you deserve them.I bet this is true even for startups we fund.  Even with us working\nto make things happen for them on purpose rather than by accident,\nthe frequency of helpful chance meetings in the Valley is so high\nthat it's still a significant increment on what we can deliver.Chance meetings play a role like the role relaxation plays in having\nideas.  Most people have had the experience of working hard on some\nproblem, not being able to solve it, giving up and going to bed,\nand then thinking of the answer in the shower in the morning.  What\nmakes the answer appear is letting your thoughts drift a bit\u2014and thus drift off the wrong\npath you'd been pursuing last night and onto the right one adjacent\nto it.Chance meetings let your acquaintance drift in the same way taking\na shower lets your thoughts drift. The critical thing in both cases\nis that they drift just the right amount.  The meeting between Larry\nPage and Sergey Brin was a good example.  They let their acquaintance\ndrift, but only a little; they were both meeting someone they had\na lot in common with.For Larry Page the most important component of the antidote was\nSergey Brin, and vice versa.  The antidote is \npeople.  It's not the\nphysical infrastructure of Silicon Valley that makes it work, or\nthe weather, or anything like that.  Those helped get it started,\nbut now that the reaction is self-sustaining what drives it is the\npeople.Many observers have noticed that one of the most distinctive things\nabout startup hubs is the degree to which people help one another\nout, with no expectation of getting anything in return.  I'm not\nsure why this is so.  Perhaps it's because startups are less of a\nzero sum game than most types of business; they are rarely killed\nby competitors.  Or perhaps it's because so many startup founders\nhave backgrounds in the sciences, where collaboration is encouraged.A large part of YC's function is to accelerate that process.  We're\na sort of Valley within the Valley, where the density of people\nworking on startups and their willingness to help one another are\nboth artificially amplified.NumbersBoth components of the antidote\u2014an environment that encourages\nstartups, and chance meetings with people who help you\u2014are\ndriven by the same underlying cause: the number of startup people\naround you.  To make a startup hub, you need a lot of people\ninterested in startups.There are three reasons. The first, obviously, is that if you don't\nhave enough density, the chance meetings don't happen.\n[4]\nThe second is that different startups need such different things, so\nyou need a lot of people to supply each startup with what they need\nmost.  Sean Parker was exactly what Facebook needed in 2004.  Another\nstartup might have needed a database guy, or someone with connections\nin the movie business.This is one of the reasons we fund such a large number of companies,\nincidentally.  The bigger the community, the greater the chance it\nwill contain the person who has that one thing you need most.The third reason you need a lot of people to make a startup hub is\nthat once you have enough people interested in the same problem,\nthey start to set the social norms.  And it is a particularly\nvaluable thing when the atmosphere around you encourages you to do\nsomething that would otherwise seem too ambitious.  In most places\nthe atmosphere pulls you back toward the mean.I flew into the Bay Area a few days ago.  I notice this every time\nI fly over the Valley: somehow you can sense something is going on.  \nObviously you can sense prosperity in how well kept a\nplace looks.  But there are different kinds of prosperity.  Silicon\nValley doesn't look like Boston, or New York, or LA, or DC.  I tried\nasking myself what word I'd use to describe the feeling the Valley\nradiated, and the word that came to mind was optimism.Notes[1]\nI'm not saying it's impossible to succeed in a city with few\nother startups, just harder.  If you're sufficiently good at\ngenerating your own morale, you can survive without external\nencouragement.  Wufoo was based in Tampa and they succeeded.  But\nthe Wufoos are exceptionally disciplined.[2]\nIncidentally, this phenomenon is not limited to startups.  Most\nunusual ambitions fail, unless the person who has them manages to\nfind the right sort of community.[3]\nStarting a company is common, but starting a startup is rare.\nI've talked about the distinction between the two elsewhere, but\nessentially a startup is a new business designed for scale.  Most\nnew businesses are service businesses and except in rare cases those\ndon't scale.[4]\nAs I was writing this, I had a demonstration of the density of\nstartup people in the Valley.  Jessica and I bicycled to University\nAve in Palo Alto to have lunch at the fabulous Oren's Hummus.  As\nwe walked in, we met Charlie Cheever sitting near the door.  Selina\nTobaccowala stopped to say hello on her way out.  Then Josh Wilson\ncame in to pick up a take out order.  After lunch we went to get\nfrozen yogurt.  On the way we met Rajat Suri.  When we got to the\nyogurt place, we found Dave Shen there, and as we walked out we ran\ninto Yuri Sagalov.  We walked with him for a block or so and we ran\ninto Muzzammil Zaveri, and then a block later we met Aydin Senkut.\nThis is everyday life in Palo Alto.  I wasn't trying to meet people;\nI was just having lunch.  And I'm sure for every startup founder\nor investor I saw that I knew, there were 5 more I didn't.  If Ron\nConway had been with us he would have met 30 people he knew.Thanks to Sam Altman, Paul Buchheit, Jessica Livingston, and\nHarj Taggar for reading drafts of this.May 2003If Lisp is so great, why don't more people use it?  I was    \nasked this question by a student in the audience at a \ntalk I gave recently.  Not for the first time, either.In languages, as in so many things, there's not much     \ncorrelation between popularity and quality.  Why does   \nJohn Grisham (King of Torts sales rank, 44) outsell\nJane Austen (Pride and Prejudice sales rank, 6191)?\nWould even Grisham claim that it's because he's a better\nwriter?Here's the first sentence of Pride and Prejudice:\n\nIt is a truth universally acknowledged, that a single man \nin possession of a good fortune must be in want of a\nwife.\n\n\"It is a truth universally acknowledged?\"  Long words for\nthe first sentence of a love story.Like Jane Austen, Lisp looks hard.  Its syntax, or lack\nof syntax, makes it look completely unlike \nthe languages\nmost people are used to.  Before I learned Lisp, I was afraid\nof it too.  I recently came across a notebook from 1983\nin which I'd written:\n\nI suppose I should learn Lisp, but it seems so foreign.\n\nFortunately, I was 19 at the time and not too resistant to learning\nnew things.  I was so ignorant that learning\nalmost anything meant learning new things.People frightened by Lisp make up other reasons for not\nusing it.  The standard\nexcuse, back when C was the default language, was that Lisp\nwas too slow.  Now that Lisp dialects are among\nthe faster\nlanguages available, that excuse has gone away.\nNow the standard excuse is openly circular: that other languages\nare more popular.(Beware of such reasoning.  It gets you Windows.)Popularity is always self-perpetuating, but it's especially\nso in programming languages. More libraries\nget written for popular languages, which makes them still\nmore popular.  Programs often have to work with existing programs,\nand this is easier if they're written in the same language,\nso languages spread from program to program like a virus.\nAnd managers prefer popular languages, because they give them \nmore leverage over developers, who can more easily be replaced.Indeed, if programming languages were all more or less equivalent,\nthere would be little justification for using any but the most\npopular.  But they aren't all equivalent, not by a long\nshot.  And that's why less popular languages, like Jane Austen's \nnovels, continue to survive at all.  When everyone else is reading \nthe latest John Grisham novel, there will always be a few people \nreading Jane Austen instead.July 2006I've discovered a handy test for figuring out what you're addicted\nto.  Imagine you were going to spend the weekend at a friend's house\non a little island off the coast of Maine.  There are no shops on\nthe island and you won't be able to leave while you're there.  Also,\nyou've never been to this house before, so you can't assume it will\nhave more than any house might.What, besides clothes and toiletries, do you make a point of packing?\nThat's what you're addicted to.  For example, if you find yourself\npacking a bottle of vodka (just in case), you may want to stop and\nthink about that.For me the list is four things: books, earplugs, a notebook, and a\npen.There are other things I might bring if I thought of it, like music,\nor tea, but I can live without them.  I'm not so addicted to caffeine\nthat I wouldn't risk the house not having any tea, just for a\nweekend.Quiet is another matter.  I realize it seems a bit eccentric to\ntake earplugs on a trip to an island off the coast of Maine.  If\nanywhere should be quiet, that should.  But what if the person in\nthe next room snored?  What if there was a kid playing basketball?\n(Thump, thump, thump... thump.)  Why risk it?  Earplugs are small.Sometimes I can think with noise.  If I already have momentum on\nsome project, I can work in noisy places.  I can edit an essay or\ndebug code in an airport.  But airports are not so bad: most of the\nnoise is whitish.  I couldn't work with the sound of a sitcom coming\nthrough the wall, or a car in the street playing thump-thump music.And of course there's another kind of thinking, when you're starting\nsomething new, that requires complete quiet.   You never\nknow when this will strike. It's just as well to carry plugs.The notebook and pen are professional equipment, as it were.  Though\nactually there is something druglike about them, in the sense that\ntheir main purpose is to make me feel better.  I hardly ever go\nback and read stuff I write down in notebooks.  It's just that if\nI can't write things down, worrying about remembering one idea gets\nin the way of having the next.  Pen and paper wick ideas.The best notebooks I've found are made by a company called Miquelrius.\nI use their smallest size, which is about 2.5 x 4 in.\nThe secret to writing on such\nnarrow pages is to break words only when you run out of space, like\na Latin inscription.  I use the cheapest plastic Bic ballpoints,\npartly because their gluey ink doesn't seep through pages, and\npartly so I don't worry about losing them.I only started carrying a notebook about three years ago.  Before\nthat I used whatever scraps of paper I could find.  But the problem\nwith scraps of paper is that they're not ordered.  In a notebook\nyou can guess what a scribble means by looking at the pages\naround it.  In the scrap era I was constantly finding notes I'd\nwritten years before that might say something I needed to remember,\nif I could only figure out what.As for books, I know the house would probably have something to\nread.  On the average trip I bring four books and only read one of\nthem, because I find new books to read en route.  Really bringing\nbooks is insurance.I realize this dependence on books is not entirely good\u2014that what\nI need them for is distraction.  The books I bring on trips are\noften quite virtuous, the sort of stuff that might be assigned\nreading in a college class.  But I know my motives aren't virtuous.\nI bring books because if the world gets boring I need to be able\nto slip into another distilled by some writer.  It's like eating\njam when you know you should be eating fruit.There is a point where I'll do without books.  I was walking in\nsome steep mountains once, and decided I'd rather just think, if I\nwas bored, rather than carry a single unnecessary ounce.  It wasn't\nso bad.  I found I could entertain myself by having ideas instead\nof reading other people's.  If you stop eating jam, fruit starts\nto taste better.So maybe I'll try not bringing books on some future trip.  They're\ngoing to have to pry the plugs out of my cold, dead ears, however.December 2014I've read Villehardouin's chronicle of the Fourth Crusade at least\ntwo times, maybe three.  And yet if I had to write down everything\nI remember from it, I doubt it would amount to much more than a\npage.  Multiply this times several hundred, and I get an uneasy\nfeeling when I look at my bookshelves. What use is it to read all\nthese books if I remember so little from them?A few months ago, as I was reading Constance Reid's excellent\nbiography of Hilbert, I figured out if not the answer to this\nquestion, at least something that made me feel better about it.\nShe writes:\n\n  Hilbert had no patience with mathematical lectures which filled\n  the students with facts but did not teach them how to frame a\n  problem and solve it. He often used to tell them that \"a perfect\n  formulation of a problem is already half its solution.\"\n\nThat has always seemed to me an important point, and I was even\nmore convinced of it after hearing it confirmed by Hilbert.But how had I come to believe in this idea in the first place?  A\ncombination of my own experience and other things I'd read.  None\nof which I could at that moment remember!  And eventually I'd forget\nthat Hilbert had confirmed it too.  But my increased belief in the\nimportance of this idea would remain something I'd learned from\nthis book, even after I'd forgotten I'd learned it.Reading and experience train your model of the world.  And even if\nyou forget the experience or what you read, its effect on your model\nof the world persists.  Your mind is like a compiled program you've\nlost the source of.  It works, but you don't know why.The place to look for what I learned from Villehardouin's chronicle\nis not what I remember from it, but my mental models of the crusades,\nVenice, medieval culture, siege warfare, and so on.  Which doesn't\nmean I couldn't have read more attentively, but at least the harvest\nof reading is not so miserably small as it might seem.This is one of those things that seem obvious in retrospect.  But\nit was a surprise to me and presumably would be to anyone else who\nfelt uneasy about (apparently) forgetting so much they'd read.Realizing it does more than make you feel a little better about\nforgetting, though.  There are specific implications.For example, reading and experience are usually \"compiled\" at the\ntime they happen, using the state of your brain at that time.  The\nsame book would get compiled differently at different points in\nyour life.  Which means it is very much worth reading important\nbooks multiple times.  I always used to feel some misgivings about\nrereading books.  I unconsciously lumped reading together with work\nlike carpentry, where having to do something again is a sign you\ndid it wrong the first time.  Whereas now the phrase \"already read\"\nseems almost ill-formed.Intriguingly, this implication isn't limited to books.  Technology\nwill increasingly make it possible to relive our experiences.  When\npeople do that today it's usually to enjoy them again (e.g. when\nlooking at pictures of a trip) or to find the origin of some bug in\ntheir compiled code (e.g. when Stephen Fry succeeded in remembering\nthe childhood trauma that prevented him from singing).  But as\ntechnologies for recording and playing back your life improve, it\nmay become common for people to relive experiences without any goal\nin mind, simply to learn from them again as one might when rereading\na book.Eventually we may be able not just to play back experiences but\nalso to index and even edit them. So although not knowing how you\nknow things may seem part of being human, it may not be.\nThanks to Sam Altman, Jessica Livingston, and Robert Morris for reading \ndrafts of this.May 2001\n\n(These are some notes I made\nfor a panel discussion on programming language design\nat MIT on May 10, 2001.)1. Programming Languages Are for People.Programming languages\nare how people talk to computers.  The computer would be just as\nhappy speaking any language that was unambiguous.  The reason we\nhave high level languages is because people can't deal with\nmachine language.  The point of programming\nlanguages is to prevent our poor frail human brains from being \noverwhelmed by a mass of detail.Architects know that some kinds of design problems are more personal\nthan others.  One of the cleanest, most abstract design problems\nis designing bridges.  There your job is largely a matter of spanning\na given distance with the least material.  The other end of the\nspectrum is designing chairs.  Chair designers have to spend their\ntime thinking about human butts.Software varies in the same way. Designing algorithms for routing\ndata through a network is a nice, abstract problem, like designing\nbridges.  Whereas designing programming languages is like designing\nchairs: it's all about dealing with human weaknesses.Most of us hate to acknowledge this.  Designing systems of great\nmathematical elegance sounds a lot more appealing to most of us\nthan pandering to human weaknesses.  And there is a role for mathematical\nelegance: some kinds of elegance make programs easier to understand.\nBut elegance is not an end in itself.And when I say languages have to be designed to suit human weaknesses,\nI don't mean that languages have to be designed for bad programmers.\nIn fact I think you ought to design for the \nbest programmers, but\neven the best programmers have limitations.  I don't think anyone\nwould like programming in a language where all the variables were\nthe letter x with integer subscripts.2. Design for Yourself and Your Friends.If you look at the history of programming languages, a lot of the best\nones were languages designed for their own authors to use, and a\nlot of the worst ones were designed for other people to use.When languages are designed for other people, it's always a specific\ngroup of other people: people not as smart as the language designer.\nSo you get a language that talks down to you.  Cobol is the most\nextreme case, but a lot of languages are pervaded by this spirit.It has nothing to do with how abstract the language is.  C is pretty\nlow-level, but it was designed for its authors to use, and that's\nwhy hackers like it.The argument for designing languages for bad programmers is that\nthere are more bad programmers than good programmers.  That may be\nso.  But those few good programmers write a disproportionately\nlarge percentage of the software.I'm interested in the question, how do you design a language that\nthe very best hackers will like?  I happen to think this is\nidentical to the question, how do you design a good programming\nlanguage?, but even if it isn't, it is at least an interesting\nquestion.3. Give the Programmer as Much Control as Possible.Many languages\n(especially the ones designed for other people) have the attitude\nof a governess: they try to prevent you from\ndoing things that they think aren't good for you.  I like the   \nopposite approach: give the programmer as much\ncontrol as you can.When I first learned Lisp, what I liked most about it was\nthat it considered me an equal partner.  In the other languages\nI had learned up till then, there was the language and there was my   \nprogram, written in the language, and the two were very separate.\nBut in Lisp the functions and macros I wrote were just like those\nthat made up the language itself.  I could rewrite the language\nif I wanted.  It had the same appeal as open-source software.4. Aim for Brevity.Brevity is underestimated and even scorned.\nBut if you look into the hearts of hackers, you'll see that they\nreally love it.  How many times have you heard hackers speak fondly\nof how in, say, APL, they could do amazing things with just a couple\nlines of code?  I think anything that really smart people really\nlove is worth paying attention to.I think almost anything\nyou can do to make programs shorter is good.  There should be lots\nof library functions; anything that can be implicit should be;\nthe syntax should be terse to a fault; even the names of things\nshould be short.And it's not only programs that should be short.  The manual should\nbe thin as well.  A good part of manuals is taken up with clarifications\nand reservations and warnings and special cases.  If you force  \nyourself to shorten the manual, in the best case you do it by fixing\nthe things in the language that required so much explanation.5. Admit What Hacking Is.A lot of people wish that hacking was\nmathematics, or at least something like a natural science.  I think\nhacking is more like architecture.  Architecture is\nrelated to physics, in the sense that architects have to design\nbuildings that don't fall down, but the actual goal of architects\nis to make great buildings, not to make discoveries about statics.What hackers like to do is make great programs.\nAnd I think, at least in our own minds, we have to remember that it's\nan admirable thing to write great programs, even when this work \ndoesn't translate easily into the conventional intellectual\ncurrency of research papers.  Intellectually, it is just as\nworthwhile to design a language programmers will love as it is to design a\nhorrible one that embodies some idea you can publish a paper\nabout.1. How to Organize Big Libraries?Libraries are becoming an\nincreasingly important component of programming languages.  They're\nalso getting bigger, and this can be dangerous.  If it takes longer\nto find the library function that will do what you want than it\nwould take to write it yourself, then all that code is doing nothing\nbut make your manual thick.  (The Symbolics manuals were a case in \npoint.)  So I think we will have to work on ways to organize\nlibraries.  The ideal would be to design them so that the programmer\ncould guess what library call would do the right thing.2. Are People Really Scared of Prefix Syntax?This is an open\nproblem in the sense that I have wondered about it for years and\nstill don't know the answer.  Prefix syntax seems perfectly natural\nto me, except possibly for math.  But it could be that a lot of \nLisp's unpopularity is simply due to having an unfamiliar syntax.   \nWhether to do anything about it, if it is true, is another question. \n\n3. What Do You Need for Server-Based Software?\n\nI think a lot of the most exciting new applications that get written\nin the next twenty years will be Web-based applications, meaning\nprograms that sit on the server and talk to you through a Web\nbrowser.  And to write these kinds of programs we may need some\nnew things.One thing we'll need is support for the new way that server-based \napps get released.  Instead of having one or two big releases a\nyear, like desktop software, server-based apps get released as a\nseries of small changes.  You may have as many as five or ten\nreleases a day.  And as a rule everyone will always use the latest\nversion.You know how you can design programs to be debuggable?\nWell, server-based software likewise has to be designed to be\nchangeable.  You have to be able to change it easily, or at least\nto know what is a small change and what is a momentous one.Another thing that might turn out to be useful for server based\nsoftware, surprisingly, is continuations.  In Web-based software\nyou can use something like continuation-passing style to get the\neffect of subroutines in the inherently \nstateless world of a Web\nsession.  Maybe it would be worthwhile having actual continuations,\nif it was not too expensive.4. What New Abstractions Are Left to Discover?I'm not sure how\nreasonable a hope this is, but one thing I would really love to    \ndo, personally, is discover a new abstraction-- something that would\nmake as much of a difference as having first class functions or\nrecursion or even keyword parameters.  This may be an impossible\ndream.  These things don't get discovered that often.  But I am always\nlooking.1. You Can Use Whatever Language You Want.Writing application\nprograms used to mean writing desktop software.  And in desktop\nsoftware there is a big bias toward writing the application in the\nsame language as the operating system.  And so ten years ago,\nwriting software pretty much meant writing software in C.\nEventually a tradition evolved:\napplication programs must not be written in unusual languages.  \nAnd this tradition had so long to develop that nontechnical people\nlike managers and venture capitalists also learned it.Server-based software blows away this whole model.  With server-based\nsoftware you can use any language you want.  Almost nobody understands\nthis yet (especially not managers and venture capitalists).\nA few hackers understand it, and that's why we even hear\nabout new, indy languages like Perl and Python.  We're not hearing\nabout Perl and Python because people are using them to write Windows\napps.What this means for us, as people interested in designing programming\nlanguages, is that there is now potentially an actual audience for\nour work.2. Speed Comes from Profilers.Language designers, or at least\nlanguage implementors, like to write compilers that generate fast\ncode.  But I don't think this is what makes languages fast for users.\nKnuth pointed out long ago that speed only matters in a few critical\nbottlenecks.  And anyone who's tried it knows that you can't guess\nwhere these bottlenecks are.  Profilers are the answer.Language designers are solving the wrong problem.  Users don't need\nbenchmarks to run fast.  What they need is a language that can show\nthem what parts of their own programs need to be rewritten.  That's\nwhere speed comes from in practice.  So maybe it would be a net \nwin if language implementors took half the time they would\nhave spent doing compiler optimizations and spent it writing a\ngood profiler instead.3. You Need an Application to Drive the Design of a Language.This may not be an absolute rule, but it seems like the best languages\nall evolved together with some application they were being used to\nwrite.  C was written by people who needed it for systems programming.\nLisp was developed partly to do symbolic differentiation, and\nMcCarthy was so eager to get started that he was writing differentiation\nprograms even in the first paper on Lisp, in 1960.It's especially good if your application solves some new problem.\nThat will tend to drive your language to have new features that   \nprogrammers need.  I personally am interested in writing\na language that will be good for writing server-based applications.[During the panel, Guy Steele also made this point, with the\nadditional suggestion that the application should not consist of\nwriting the compiler for your language, unless your language\nhappens to be intended for writing compilers.]4. A Language Has to Be Good for Writing Throwaway Programs.You know what a throwaway program is: something you write quickly for\nsome limited task.  I think if you looked around you'd find that  \na lot of big, serious programs started as throwaway programs.  I\nwould not be surprised if most programs started as throwaway\nprograms.  And so if you want to make a language that's good for\nwriting software in general, it has to be good for writing throwaway\nprograms, because that is the larval stage of most software.5. Syntax Is Connected to Semantics.It's traditional to think of\nsyntax and semantics as being completely separate.  This will\nsound shocking, but it may be that they aren't.\nI think that what you want in your language may be related\nto how you express it.I was talking recently to Robert Morris, and he pointed out that\noperator overloading is a bigger win in languages with infix\nsyntax.  In a language with prefix syntax, any function you define\nis effectively an operator.  If you want to define a plus for a\nnew type of number you've made up, you can just define a new function\nto add them.  If you do that in a language with infix syntax,\nthere's a big difference in appearance between the use of an\noverloaded operator and a function call.1. New Programming Languages.Back in the 1970s\nit was fashionable to design new programming languages.  Recently\nit hasn't been.  But I think server-based software will make new  \nlanguages fashionable again.  With server-based software, you can\nuse any language you want, so if someone does design a language that\nactually seems better than others that are available, there will be\npeople who take a risk and use it.2. Time-Sharing.Richard Kelsey gave this as an idea whose time\nhas come again in the last panel, and I completely agree with him.\nMy guess (and Microsoft's guess, it seems) is that much computing\nwill move from the desktop onto remote servers.  In other words,  \ntime-sharing is back.  And I think there will need to be support\nfor it at the language level.  For example, I know that Richard\nand Jonathan Rees have done a lot of work implementing process  \nscheduling within Scheme 48.3. Efficiency.Recently it was starting to seem that computers\nwere finally fast enough.  More and more we were starting to hear\nabout byte code, which implies to me at least that we feel we have\ncycles to spare.  But I don't think we will, with server-based\nsoftware.   Someone is going to have to pay for the servers that\nthe software runs on, and the number of users they can support per\nmachine will be the divisor of their capital cost.So I think efficiency will matter, at least in computational\nbottlenecks.  It will be especially important to do i/o fast,\nbecause server-based applications do a lot of i/o.It may turn out that byte code is not a win, in the end.  Sun and\nMicrosoft seem to be facing off in a kind of a battle of the byte\ncodes at the moment.  But they're doing it because byte code is a\nconvenient place to insert themselves into the process, not because\nbyte code is in itself a good idea.  It may turn out that this\nwhole battleground gets bypassed.  That would be kind of amusing.1. Clients.This is just a guess, but my guess is that\nthe winning model for most applications will be purely server-based.\nDesigning software that works on the assumption that everyone will \nhave your client is like designing a society on the assumption that\neveryone will just be honest.  It would certainly be convenient, but\nyou have to assume it will never happen.I think there will be a proliferation of devices that have some\nkind of Web access, and all you'll be able to assume about them is\nthat they can support simple html and forms.  Will you have a\nbrowser on your cell phone?  Will there be a phone in your palm  \npilot?  Will your blackberry get a bigger screen? Will you be able\nto browse the Web on your gameboy?  Your watch?  I don't know.  \nAnd I don't have to know if I bet on\neverything just being on the server.  It's\njust so much more robust to have all the \nbrains on the server.2. Object-Oriented Programming.I realize this is a\ncontroversial one, but I don't think object-oriented programming\nis such a big deal.  I think it is a fine model for certain kinds\nof applications that need that specific kind of data structure,   \nlike window systems, simulations, and cad programs.  But I don't\nsee why it ought to be the model for all programming.I think part of the reason people in big companies like object-oriented\nprogramming is because it yields a lot of what looks like work.\nSomething that might naturally be represented as, say, a list of\nintegers, can now be represented as a class with all kinds of\nscaffolding and hustle and bustle.Another attraction of\nobject-oriented programming is that methods give you some of the\neffect of first class functions.  But this is old news to Lisp\nprogrammers.  When you have actual first class functions, you can\njust use them in whatever way is appropriate to the task at hand,\ninstead of forcing everything into a mold of classes and methods.What this means for language design, I think, is that you shouldn't\nbuild object-oriented programming in too deeply.  Maybe the\nanswer is to offer more general, underlying stuff, and let people design\nwhatever object systems they want as libraries.3. Design by Committee.Having your language designed by a committee is a big pitfall,  \nand not just for the reasons everyone knows about.  Everyone\nknows that committees tend to yield lumpy, inconsistent designs.  \nBut I think a greater danger is that they won't take risks.\nWhen one person is in charge he can take risks\nthat a committee would never agree on.Is it necessary to take risks to design a good language though?\nMany people might suspect\nthat language design is something where you should stick fairly\nclose to the conventional wisdom.  I bet this isn't true.\nIn everything else people do, reward is proportionate to risk.\nWhy should language design be any different?October 2004\nAs E. B. White said, \"good writing is rewriting.\"  I didn't\nrealize this when I was in school.  In writing, as in math and \nscience, they only show you the finished product.\nYou don't see all the false starts.  This gives students a\nmisleading view of how things get made.Part of the reason it happens is that writers don't want   \npeople to see their mistakes.  But I'm willing to let people\nsee an early draft if it will show how much you have\nto rewrite to beat an essay into shape.Below is the oldest version I can find of\nThe Age of the Essay   \n(probably the second or third day), with\ntext that ultimately survived in \nred and text that later\ngot deleted in gray.\nThere seem to be several categories of cuts: things I got wrong,\nthings that seem like bragging, flames,\ndigressions, stretches of awkward prose, and unnecessary words.I discarded more from the beginning.  That's\nnot surprising; it takes a while to hit your stride.  There\nare more digressions at the start, because I'm not sure where\nI'm heading.The amount of cutting is about average.  I probably write\nthree to four words for every one that appears in the final\nversion of an essay.(Before anyone gets mad at me for opinions expressed here, remember\nthat anything you see here that's not in the final version is obviously\nsomething I chose not to publish, often because I disagree\nwith it.)\nRecently a friend said that what he liked about\nmy essays was that they weren't written the way\nwe'd been taught to write essays in school.  You\nremember: topic sentence, introductory paragraph,\nsupporting paragraphs, conclusion.  It hadn't\noccurred to me till then that those horrible things\nwe had to write in school were even connected to\nwhat I was doing now.  But sure enough, I thought,\nthey did call them \"essays,\" didn't they?Well, they're not.  Those things you have to write\nin school are not only not essays, they're one of the\nmost pointless of all the pointless hoops you have\nto jump through in school.  And I worry that they\nnot only teach students the wrong things about writing,\nbut put them off writing entirely.So I'm going to give the other side of the story: what\nan essay really is, and how you write one.  Or at least,\nhow I write one.  Students be forewarned: if you actually write\nthe kind of essay I describe, you'll probably get bad\ngrades.  But knowing how it's really done should\nat least help you to understand the feeling of futility\nyou have when you're writing the things they tell you to.\nThe most obvious difference between real essays and\nthe things one has to write in school is that real\nessays are not exclusively about English literature.\nIt's a fine thing for schools to\n\nteach students how to\nwrite.  But for some bizarre reason (actually, a very specific bizarre\nreason that I'll explain in a moment),\n\nthe teaching of\nwriting has gotten mixed together with the study\nof literature.  And so all over the country, students are\nwriting not about how a baseball team with a small budget \nmight compete with the Yankees, or the role of color in\nfashion, or what constitutes a good dessert, but about\nsymbolism in Dickens.With obvious \nresults.  Only a few people really\n\ncare about\nsymbolism in Dickens.  The teacher doesn't.\nThe students don't.  Most of the people who've had to write PhD\ndisserations about Dickens don't.  And certainly\n\nDickens himself would be more interested in an essay\nabout color or baseball.How did things get this way?  To answer that we have to go back\nalmost a thousand years.  Between about 500 and 1000, life was\nnot very good in Europe.  The term \"dark ages\" is presently\nout of fashion as too judgemental (the period wasn't dark; \nit was just different), but if this label didn't already\nexist, it would seem an inspired metaphor.  What little\noriginal thought there was took place in lulls between\nconstant wars and had something of the character of\nthe thoughts of parents with a new baby.\nThe most amusing thing written during this\nperiod, Liudprand of Cremona's Embassy to Constantinople, is,\nI suspect, mostly inadvertantly so.Around 1000 Europe began to catch its breath.\nAnd once they\nhad the luxury of curiosity, one of the first things they discovered\nwas what we call \"the classics.\"\nImagine if we were visited  \nby aliens.  If they could even get here they'd presumably know a\nfew things we don't.  Immediately Alien Studies would become\nthe most dynamic field of scholarship: instead of painstakingly\ndiscovering things for ourselves, we could simply suck up\neverything they'd discovered.  So it was in Europe in 1200.\nWhen classical texts began to circulate in Europe, they contained\nnot just new answers, but new questions.  (If anyone proved\na theorem in christian Europe before 1200, for example, there\nis no record of it.)For a couple centuries, some of the most important work\nbeing done was intellectual archaelogy.  Those were also\nthe centuries during which schools were first established.\nAnd since reading ancient texts was the essence of what\nscholars did then, it became the basis of the curriculum.By 1700, someone who wanted to learn about\nphysics didn't need to start by mastering Greek in order to read Aristotle.  But schools\nchange slower than scholarship: the study of\nancient texts\nhad such prestige that it remained the backbone of \neducation\nuntil the late 19th century.  By then it was merely a tradition.\nIt did serve some purposes: reading a foreign language was difficult,\nand thus taught discipline, or at least, kept students busy;\nit introduced students to\ncultures quite different from their own; and its very uselessness\nmade it function (like white gloves) as a social bulwark.\nBut it certainly wasn't\ntrue, and hadn't been true for centuries, that students were\nserving apprenticeships in the hottest area of scholarship.Classical scholarship had also changed.  In the early era, philology\nactually mattered.  The texts that filtered into Europe were\nall corrupted to some degree by the errors of translators and\ncopyists.  Scholars had to figure out what Aristotle said\nbefore they could figure out what he meant.  But by the modern\nera such questions were answered as well as they were ever\ngoing to be.  And so the study of ancient texts became less\nabout ancientness and more about texts.The time was then ripe for the question: if the study of\nancient texts is a valid field for scholarship, why not modern\ntexts?  The answer, of course, is that the raison d'etre\nof classical scholarship was a kind of intellectual archaelogy that\ndoes not need to be done in the case of contemporary authors.\nBut for obvious reasons no one wanted to give that answer.\nThe archaeological work being mostly done, it implied that\nthe people studying the classics were, if not wasting their\ntime, at least working on problems of minor importance.And so began the study of modern literature. There was some\ninitial resistance, but it didn't last long.\nThe limiting\nreagent in the growth of university departments is what\nparents will let undergraduates study.  If parents will let\ntheir children major in x, the rest follows straightforwardly.\nThere will be jobs teaching x, and professors to fill them.\nThe professors will establish scholarly journals and publish\none another's papers.  Universities with x departments will\nsubscribe to the journals.  Graduate students who want jobs\nas professors of x will write dissertations about it.  It may\ntake a good long while for the more prestigious universities\nto cave in and establish departments in cheesier xes,  but\nat the other end of the scale there are so many universities\ncompeting to attract students that the mere establishment of\na discipline requires little more than the desire to do it.High schools imitate universities.\nAnd so once university\nEnglish departments were established in the late nineteenth century,\nthe 'riting component of the 3 Rs \nwas morphed into English.\nWith the bizarre consequence that high school students now\nhad to write about English literature-- to write, without\neven realizing it, imitations of whatever\nEnglish professors had been publishing in their journals a\nfew decades before.   It's no wonder if this seems to the\nstudent a pointless exercise, because we're now three steps\nremoved from real work: the students are imitating English\nprofessors, who are imitating classical scholars, who are\nmerely the inheritors of a tradition growing out of what\nwas, 700 years ago, fascinating and urgently needed work.Perhaps high schools should drop English and just teach writing.\nThe valuable part of English classes is learning to write, and\nthat could be taught better by itself.  Students learn better\nwhen they're interested in what they're doing, and it's hard\nto imagine a topic less interesting than symbolism in Dickens.\nMost of the people who write about that sort of thing professionally\nare not really interested in it.  (Though indeed, it's been a\nwhile since they were writing about symbolism; now they're\nwriting about gender.)I have no illusions about how eagerly this suggestion will  \nbe adopted.  Public schools probably couldn't stop teaching\nEnglish even if they wanted to; they're probably required to by\nlaw.  But here's a related suggestion that goes with the grain\ninstead of against it: that universities establish a\nwriting major.  Many of the students who now major in English\nwould major in writing if they could, and most would\nbe better off.It will be argued that it is a good thing for students to be\nexposed to their literary heritage.  Certainly.  But is that\nmore important than that they learn to write well?  And are\nEnglish classes even the place to do it?  After all,\nthe average public high school student gets zero exposure to  \nhis artistic heritage.  No disaster results.\nThe people who are interested in art learn about it for\nthemselves, and those who aren't don't.  I find that American\nadults are no better or worse informed about literature than\nart, despite the fact that they spent years studying literature\nin high school and no time at all studying art.  Which presumably\nmeans that what they're taught in school is rounding error \ncompared to what they pick up on their own.Indeed, English classes may even be harmful.  In my case they\nwere effectively aversion therapy.  Want to make someone dislike\na book?  Force him to read it and write an essay about it.\nAnd make the topic so intellectually bogus that you\ncould not, if asked, explain why one ought to write about it.\nI love to read more than anything, but by the end of high school\nI never read the books we were assigned.  I was so disgusted with\nwhat we were doing that it became a point of honor\nwith me to write nonsense at least as good at the other students'\nwithout having more than glanced over the book to learn the names\nof the characters and a few random events in it.I hoped this might be fixed in college, but I found the same\nproblem there.  It was not the teachers.  It was English.   \nWe were supposed to read novels and write essays about them.\nAbout what, and why?  That no one seemed to be able to explain.\nEventually by trial and error I found that what the teacher  \nwanted us to do was pretend that the story had really taken\nplace, and to analyze based on what the characters said and did (the\nsubtler clues, the better) what their motives must have been.\nOne got extra credit for motives having to do with class,\nas I suspect one must now for those involving gender and  \nsexuality.  I learned how to churn out such stuff well enough\nto get an A, but I never took another English class.And the books we did these disgusting things to, like those\nwe mishandled in high school, I find still have black marks\nagainst them in my mind.  The one saving grace was that   \nEnglish courses tend to favor pompous, dull writers like\nHenry James, who deserve black marks against their names anyway.\nOne of the principles the IRS uses in deciding whether to\nallow deductions is that, if something is fun, it isn't work.\nFields that are intellectually unsure of themselves rely on\na similar principle.  Reading P.G. Wodehouse or Evelyn Waugh or\nRaymond Chandler is too obviously pleasing to seem like\nserious work, as reading Shakespeare would have been before \nEnglish evolved enough to make it an effort to understand him. [sh]\nAnd so good writers (just you wait and see who's still in\nprint in 300 years) are less likely to have readers turned   \nagainst them by clumsy, self-appointed tour guides.\nThe other big difference between a real essay and the \nthings\nthey make you write in school is that a real essay doesn't \ntake a position and then defend it.  That principle,\nlike the idea that we ought to be writing about literature,   \nturns out to be another intellectual hangover of long\nforgotten origins.  It's often mistakenly believed that\nmedieval universities were mostly seminaries.  In fact they\nwere more law schools.  And at least in our tradition\nlawyers are advocates: they are\ntrained to be able to\ntake\neither side of an argument and make as good a case for it  \nas they can. Whether or not this is a good idea (in the case of prosecutors,\nit probably isn't), it tended to pervade\nthe atmosphere of\nearly universities.  After the lecture the most common form\nof discussion was the disputation.  This idea\nis at least\nnominally preserved in our present-day thesis defense-- indeed,\nin the very word thesis.  Most people treat the words \nthesis\nand dissertation as interchangeable, but originally, at least,\na thesis was a position one took and the dissertation was\nthe argument by which one defended it.I'm not complaining that we blur these two words together.\nAs far as I'm concerned, the sooner we lose the original\nsense of the word thesis, the better.  For many, perhaps most,  \ngraduate students, it is stuffing a square peg into a round\nhole to try to recast one's work as a single thesis.  And\nas for the disputation, that seems clearly a net lose.\nArguing two sides of a case may be a necessary evil in a\nlegal dispute, but it's not the best way to get at the truth,\nas I think lawyers would be the first to admit.\nAnd yet this principle is built into the very structure of  \nthe essays\nthey teach you to write in high school.  The topic\nsentence is your thesis, chosen in advance, the supporting \nparagraphs the blows you strike in the conflict, and the\nconclusion--- uh, what it the conclusion?  I was never sure  \nabout that in high school.  If your thesis was well expressed,\nwhat need was there to restate it?  In theory it seemed that\nthe conclusion of a really good essay ought not to need to   \nsay any more than QED.\nBut when you understand the origins\nof this sort of \"essay\", you can see where the\nconclusion comes from.  It's the concluding remarks to the \njury.\nWhat other alternative is there?  To answer that\nwe have to\nreach back into history again, though this time not so far.\nTo Michel de Montaigne, inventor of the essay.\nHe was\ndoing something quite different from what a\nlawyer does,\nand\nthe difference is embodied in the name.  Essayer is the French\nverb meaning \"to try\" (the cousin of our word assay),\n\nand an \"essai\" is an effort.\nAn essay is something you\nwrite in order\nto figure something out.Figure out what?  You don't know yet.  And so you can't begin with a\nthesis, because you don't have one, and may never have \none.  An essay doesn't begin with a statement, but with a  \nquestion.  In a real essay, you don't take a position and\ndefend it.  You see a door that's ajar, and you open it and\nwalk in to see what's inside.If all you want to do is figure things out, why do you need\nto write anything, though?  Why not just sit and think?  Well,\nthere precisely is Montaigne's great discovery.  Expressing\nideas helps to form them.  Indeed, helps is far too weak a\nword.  90%\nof what ends up in my essays was stuff\nI only\nthought of when I sat down to write them.  That's why I\nwrite them.So there's another difference between essays and\nthe things\nyou have to write in school.   In school\n\nyou are, in theory,\nexplaining yourself to someone else.  In the best case---if\nyou're really organized---you're just writing it down.\nIn a real essay you're writing for yourself.  You're\nthinking out loud.But not quite.  Just as inviting people over forces you to\nclean up your apartment, writing something that you know\n\nother people will read forces you to think well.  So it\ndoes matter to have an audience.  The things I've written\njust for myself are no good.  Indeed, they're bad in\na particular way:\nthey tend to peter out.  When I run into\ndifficulties, I notice that I\ntend to conclude with a few vague\nquestions and then drift off to get a cup of tea.This seems a common problem.\nIt's practically the standard\nending in blog entries--- with the addition of a \"heh\" or an \nemoticon, prompted by the all too accurate sense that\nsomething is missing.And indeed, a lot of\npublished essays peter out in this\nsame way.\nParticularly the sort written by the staff writers of newsmagazines.  Outside writers tend to supply\neditorials of the defend-a-position variety, which\nmake a beeline toward a rousing (and\nforeordained) conclusion.   But the staff writers feel\nobliged to write something more\nbalanced, which in\npractice ends up meaning blurry.\nSince they're\nwriting for a popular magazine, they start with the\nmost radioactively controversial questions, from which\n(because they're writing for a popular magazine)\nthey then proceed to recoil from\nin terror.\nGay marriage, for or\nagainst?  This group says one thing.  That group says\nanother.  One thing is certain: the question is a\ncomplex one.  (But don't get mad at us.  We didn't\ndraw any conclusions.)Questions aren't enough.  An essay has to come up with answers.\nThey don't always, of course.  Sometimes you start with a  \npromising question and get nowhere.  But those you don't\npublish.  Those are like experiments that get inconclusive\nresults.   Something you publish ought to tell the reader  \nsomething he didn't already know.\nBut what you tell him doesn't matter, so long as   \nit's interesting.  I'm sometimes accused of meandering.\nIn defend-a-position writing that would be a flaw.\nThere you're not concerned with truth.  You already\nknow where you're going, and you want to go straight there,\nblustering through obstacles, and hand-waving\nyour way across swampy ground.  But that's not what\nyou're trying to do in an essay.  An essay is supposed to\nbe a search for truth.  It would be suspicious if it didn't\nmeander.The Meander is a river in Asia Minor (aka\nTurkey).\nAs you might expect, it winds all over the place.\nBut does it\ndo this out of frivolity?   Quite the opposite.\nLike all rivers, it's rigorously following the laws of physics.\nThe path it has discovered,\nwinding as it is, represents\nthe most economical route to the sea.The river's algorithm is simple.  At each step, flow down.\nFor the essayist this translates to: flow interesting.\nOf all the places to go next, choose\nwhichever seems\nmost interesting.I'm pushing this metaphor a bit.  An essayist\ncan't have\nquite as little foresight as a river.  In fact what you do\n(or what I do) is somewhere between a river and a roman\nroad-builder.  I have a general idea of the direction\nI want to go in, and\nI choose the next topic with that in mind.  This essay is\nabout writing, so I do occasionally yank it back in that\ndirection, but it is not all the sort of essay I\nthought I was going to write about writing.Note too that hill-climbing (which is what this algorithm is\ncalled) can get you in trouble.\nSometimes, just\nlike a river,\nyou\nrun up against a blank wall.  What\nI do then is just \nwhat the river does: backtrack.\nAt one point in this essay\nI found that after following a certain thread I ran out\nof ideas.  I had to go back n\nparagraphs and start over\nin another direction.  For illustrative purposes I've left\nthe abandoned branch as a footnote.\nErr on the side of the river.  An essay is not a reference\nwork.  It's not something you read looking for a specific\nanswer, and feel cheated if you don't find it.  I'd much\nrather read an essay that went off in an unexpected but\ninteresting direction than one that plodded dutifully along\na prescribed course.So what's interesting?  For me, interesting means surprise.\nDesign, as Matz\nhas said, should follow the principle of\nleast surprise.\nA button that looks like it will make a\nmachine stop should make it stop, not speed up.  Essays\nshould do the opposite.  Essays should aim for maximum\nsurprise.I was afraid of flying for a long time and could only travel\nvicariously.  When friends came back from faraway places,\nit wasn't just out of politeness that I asked them about\ntheir trip.\nI really wanted to know.  And I found that\nthe best way to get information out of them was to ask\nwhat surprised them.  How was the place different from what\nthey expected?  This is an extremely useful question.\nYou can ask it of even\nthe most unobservant people, and it will\nextract information they didn't even know they were\nrecording. Indeed, you can ask it in real time.  Now when I go somewhere\nnew, I make a note of what surprises me about it.  Sometimes I\neven make a conscious effort to visualize the place beforehand,\nso I'll have a detailed image to diff with reality.\nSurprises are facts\nyou didn't already \nknow.\nBut they're\nmore than that.  They're facts\nthat contradict things you\nthought you knew.  And so they're the most valuable sort of\nfact you can get.  They're like a food that's not merely\nhealthy, but counteracts the unhealthy effects of things\nyou've already eaten.\nHow do you find surprises?  Well, therein lies half\nthe work of essay writing.  (The other half is expressing\nyourself well.)   You can at least\nuse yourself as a\nproxy for the reader.  You should only write about things\nyou've thought about a lot.  And anything you come across\nthat surprises you, who've thought about the topic a lot,\nwill probably surprise most readers.For example, in a recent essay I pointed out that because\nyou can only judge computer programmers by working with\nthem, no one knows in programming who the heroes should\nbe.\nI\ncertainly\ndidn't realize this when I started writing\nthe \nessay, and even now I find it kind of weird.  That's\nwhat you're looking for.So if you want to write essays, you need two ingredients:\nyou need\na few topics that you think about a lot, and you\nneed some ability to ferret out the unexpected.What should you think about?  My guess is that it\ndoesn't matter.  Almost everything is\ninteresting if you get deeply\nenough into it.  The one possible exception\nare\nthings\nlike working in fast food, which\nhave deliberately had all\nthe variation sucked out of them.\nIn retrospect, was there\nanything interesting about working in Baskin-Robbins?\nWell, it was interesting to notice\nhow important color was\nto the customers.  Kids a certain age would point into\nthe case and say that they wanted yellow.  Did they want\nFrench Vanilla or Lemon?  They would just look at you\nblankly.  They wanted yellow.  And then there was the\nmystery of why the perennial favorite Pralines n' Cream\nwas so appealing. I'm inclined now to\nthink it was the salt.\nAnd the mystery of why Passion Fruit tasted so disgusting.\nPeople would order it because of the name, and were always\ndisappointed.  It should have been called In-sink-erator\nFruit.\nAnd there was\nthe difference in the way fathers and\nmothers bought ice cream for their kids.\nFathers tended to\nadopt the attitude of\nbenevolent kings bestowing largesse,\nand mothers that of\nharried bureaucrats,\ngiving in to\npressure against their better judgement.\nSo, yes, there does seem to be material, even in\nfast food.What about the other half, ferreting out the unexpected?\nThat may require some natural ability.  I've noticed for\na long time that I'm pathologically observant.  ....[That was as far as I'd gotten at the time.]Notes[sh] In Shakespeare's own time, serious writing meant theological\ndiscourses, not the bawdy plays acted over on the other  \nside of the river among the bear gardens and whorehouses.The other extreme, the work that seems formidable from the moment\nit's created (indeed, is deliberately intended to be)\nis represented by Milton.  Like the Aeneid, Paradise Lost is a\nrock imitating a butterfly that happened to get fossilized.\nEven Samuel Johnson seems to have balked at this, on the one  \nhand paying Milton the compliment of an extensive biography,\nand on the other writing of Paradise Lost that \"none who read it\never wished it longer.\"\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nJanuary 2006To do something well you have to like it.   That idea is not exactly\nnovel.  We've got it down to four words: \"Do what you love.\"  But\nit's not enough just to tell people that.  Doing what you love is\ncomplicated.The very idea is foreign to what most of us learn as kids.  When I\nwas a kid, it seemed as if work and fun were opposites by definition.\nLife had two states: some of the time adults were making you do\nthings, and that was called work; the rest of the time you could\ndo what you wanted, and that was called playing.  Occasionally the\nthings adults made you do were fun, just as, occasionally, playing\nwasn't\u2014for example, if you fell and hurt yourself.  But except\nfor these few anomalous cases, work was pretty much defined as\nnot-fun.And it did not seem to be an accident. School, it was implied, was\ntedious because it was preparation for grownup work.The world then was divided into two groups, grownups and kids.\nGrownups, like some kind of cursed race, had to work.  Kids didn't,\nbut they did have to go to school, which was a dilute version of\nwork meant to prepare us for the real thing.  Much as we disliked\nschool, the grownups all agreed that grownup work was worse, and\nthat we had it easy.Teachers in particular all seemed to believe implicitly that work\nwas not fun.  Which is not surprising: work wasn't fun for most of\nthem.  Why did we have to memorize state capitals instead of playing\ndodgeball?  For the same reason they had to watch over a bunch of\nkids instead of lying on a beach.  You couldn't just do what you\nwanted.I'm not saying we should let little kids do whatever they want.\nThey may have to be made to work on certain things.  But if we make\nkids work on dull stuff, it might be wise to tell them that tediousness\nis not the defining quality of work, and indeed that the reason\nthey have to work on dull stuff now is so they can work on more\ninteresting stuff later.\n[1]Once, when I was about 9 or 10, my father told me I could be whatever\nI wanted when I grew up, so long as I enjoyed it.  I remember that\nprecisely because it seemed so anomalous.  It was like being told\nto use dry water.  Whatever I thought he meant, I didn't think he\nmeant work could literally be fun\u2014fun like playing.  It\ntook me years to grasp that.JobsBy high school, the prospect of an actual job was on the horizon.\nAdults would sometimes come to speak to us about their work, or we\nwould go to see them at work.  It was always understood that they\nenjoyed what they did.  In retrospect I think one may have: the\nprivate jet pilot.  But I don't think the bank manager really did.The main reason they all acted as if they enjoyed their work was\npresumably the upper-middle class convention that you're supposed\nto.  It would not merely be bad for your career to say that you\ndespised your job, but a social faux-pas.Why is it conventional to pretend to like what you do?  The first\nsentence of this essay explains that.  If you have to like something\nto do it well, then the most successful people will all like what\nthey do.  That's where the upper-middle class tradition comes from.\nJust as houses all over America are full of \nchairs\nthat are, without\nthe owners even knowing it, nth-degree imitations of chairs designed\n250 years ago for French kings, conventional attitudes about work\nare, without the owners even knowing it, nth-degree imitations of\nthe attitudes of people who've done great things.What a recipe for alienation.  By the time they reach an age to\nthink about what they'd like to do, most kids have been thoroughly\nmisled about the idea of loving one's work.  School has trained\nthem to regard work as an unpleasant duty.  Having a job is said\nto be even more onerous than schoolwork.  And yet all the adults\nclaim to like what they do.  You can't blame kids for thinking \"I\nam not like these people; I am not suited to this world.\"Actually they've been told three lies: the stuff they've been taught\nto regard as work in school is not real work; grownup work is not\n(necessarily) worse than schoolwork; and many of the adults around\nthem are lying when they say they like what they do.The most dangerous liars can be the kids' own parents.  If you take\na boring job to give your family a high standard of living, as so\nmany people do, you risk infecting your kids with the idea that\nwork is boring. \n[2]\nMaybe it would be better for kids in this one\ncase if parents were not so unselfish.  A parent who set an example\nof loving their work might help their kids more than an expensive\nhouse.\n[3]It was not till I was in college that the idea of work finally broke\nfree from the idea of making a living.  Then the important question\nbecame not how to make money, but what to work on.  Ideally these\ncoincided, but some spectacular boundary cases (like Einstein in\nthe patent office) proved they weren't identical.The definition of work was now to make some original contribution\nto the world, and in the process not to starve.  But after the habit\nof so many years my idea of work still included a large component\nof pain.  Work still seemed to require discipline, because only\nhard problems yielded grand results, and hard problems couldn't\nliterally be fun.   Surely one had to force oneself to work on them.If you think something's supposed to hurt, you're less likely to\nnotice if you're doing it wrong.  That about sums up my experience\nof graduate school.BoundsHow much are you supposed to like what you do?  Unless you\nknow that, you don't know when to stop searching. And if, like most\npeople, you underestimate it, you'll tend to stop searching too\nearly.  You'll end up doing something chosen for you by your parents,\nor the desire to make money, or prestige\u2014or sheer inertia.Here's an upper bound: Do what you love doesn't mean, do what you\nwould like to do most this second.  Even Einstein probably\nhad moments when he wanted to have a cup of coffee, but told himself\nhe ought to finish what he was working on first.It used to perplex me when I read about people who liked what they\ndid so much that there was nothing they'd rather do.  There didn't\nseem to be any sort of work I liked that much.  If I had a\nchoice of (a) spending the next hour working on something or (b)\nbe teleported to Rome and spend the next hour wandering about, was\nthere any sort of work I'd prefer?  Honestly, no.But the fact is, almost anyone would rather, at any given moment,\nfloat about in the Carribbean, or have sex, or eat some delicious\nfood, than work on hard problems.  The rule about doing what you\nlove assumes a certain length of time.  It doesn't mean, do what\nwill make you happiest this second, but what will make you happiest\nover some longer period, like a week or a month.Unproductive pleasures pall eventually.  After a while you get tired\nof lying on the beach.  If you want to stay happy, you have to do\nsomething.As a lower bound, you have to like your work more than any unproductive\npleasure.  You have to like what you do enough that the concept of\n\"spare time\" seems mistaken.  Which is not to say you have to spend\nall your time working.  You can only work so much before you get\ntired and start to screw up.  Then you want to do something else\u2014even something mindless.  But you don't regard this time as the\nprize and the time you spend working as the pain you endure to earn\nit.I put the lower bound there for practical reasons.  If your work\nis not your favorite thing to do, you'll have terrible problems\nwith procrastination.  You'll have to force yourself to work,  and\nwhen you resort to that the results are distinctly inferior.To be happy I think you have to be doing something you not only\nenjoy, but admire.  You have to be able to say, at the end, wow,\nthat's pretty cool.  This doesn't mean you have to make something.\nIf you learn how to hang glide, or to speak a foreign language\nfluently, that will be enough to make you say, for a while at least,\nwow, that's pretty cool.  What there has to be is a test.So one thing that falls just short of the standard, I think, is\nreading books.  Except for some books in math and the hard sciences,\nthere's no test of how well you've read a book, and that's why\nmerely reading books doesn't quite feel like work.  You have to do\nsomething with what you've read to feel productive.I think the best test is one Gino Lee taught me: to try to do things\nthat would make your friends say wow.  But it probably wouldn't\nstart to work properly till about age 22, because most people haven't\nhad a big enough sample to pick friends from before then.SirensWhat you should not do, I think, is worry about the opinion of\nanyone beyond your friends.  You shouldn't worry about prestige.\nPrestige is the opinion of the rest of the world.  When you can ask\nthe opinions of people whose judgement you respect, what does it\nadd to consider the opinions of people you don't even know? \n[4]This is easy advice to give.  It's hard to follow, especially when\nyou're young.  \n[5]\nPrestige is like a powerful magnet that warps\neven your beliefs about what you enjoy.  It causes you to work not\non what you like, but what you'd like to like.That's what leads people to try to write novels, for example.  They\nlike reading novels.  They notice that people who write them win\nNobel prizes.  What could be more wonderful, they think, than to\nbe a novelist?  But liking the idea of being a novelist is not\nenough; you have to like the actual work of novel-writing if you're\ngoing to be good at it; you have to like making up elaborate lies.Prestige is just fossilized inspiration.  If you do anything well\nenough, you'll make it prestigious.  Plenty of things we now\nconsider prestigious were anything but at first.  Jazz comes to\nmind\u2014though almost any established art form would do.   So just\ndo what you like, and let prestige take care of itself.Prestige is especially dangerous to the ambitious.  If you want to\nmake ambitious people waste their time on errands, the way to do\nit is to bait the hook with prestige.  That's the recipe for getting\npeople to give talks, write forewords, serve on committees, be\ndepartment heads, and so on.  It might be a good rule simply to\navoid any prestigious task. If it didn't suck, they wouldn't have\nhad to make it prestigious.Similarly, if you admire two kinds of work equally, but one is more\nprestigious, you should probably choose the other.  Your opinions\nabout what's admirable are always going to be slightly influenced\nby prestige, so if the two seem equal to you, you probably have\nmore genuine admiration for the less prestigious one.The other big force leading people astray is money.  Money by itself\nis not that dangerous.  When something pays well but is regarded\nwith contempt, like telemarketing, or prostitution, or personal\ninjury litigation, ambitious people aren't tempted by it.  That\nkind of work ends up being done by people who are \"just trying to\nmake a living.\"  (Tip: avoid any field whose practitioners say\nthis.)  The danger is when money is combined with prestige, as in,\nsay, corporate law, or medicine.  A comparatively safe and prosperous\ncareer with some automatic baseline prestige is dangerously tempting\nto someone young, who hasn't thought much about what they really\nlike.The test of whether people love what they do is whether they'd do\nit even if they weren't paid for it\u2014even if they had to work at\nanother job to make a living.  How many corporate lawyers would do\ntheir current work if they had to do it for free, in their spare\ntime, and take day jobs as waiters to support themselves?This test is especially helpful in deciding between different kinds\nof academic work, because fields vary greatly in this respect.  Most\ngood mathematicians would work on math even if there were no jobs\nas math professors, whereas in the departments at the other end of\nthe spectrum, the availability of teaching jobs is the driver:\npeople would rather be English professors than work in ad agencies,\nand publishing papers is the way you compete for such jobs.  Math\nwould happen without math departments, but it is the existence of\nEnglish majors, and therefore jobs teaching them, that calls into\nbeing all those thousands of dreary papers about gender and identity\nin the novels of Conrad.  No one does \nthat \nkind of thing for fun.The advice of parents will tend to err on the side of money.  It\nseems safe to say there are more undergrads who want to be novelists\nand whose parents want them to be doctors than who want to be doctors\nand whose parents want them to be novelists.  The kids think their\nparents are \"materialistic.\" Not necessarily.  All parents tend to\nbe more conservative for their kids than they would for themselves,\nsimply because, as parents, they share risks more than rewards.  If\nyour eight year old son decides to climb a tall tree, or your teenage\ndaughter decides to date the local bad boy, you won't get a share\nin the excitement, but if your son falls, or your daughter gets\npregnant, you'll have to deal with the consequences.DisciplineWith such powerful forces leading us astray, it's not surprising\nwe find it so hard to discover what we like to work on.  Most people\nare doomed in childhood by accepting the axiom that work = pain.\nThose who escape this are nearly all lured onto the rocks by prestige\nor money.  How many even discover something they love to work on?\nA few hundred thousand, perhaps, out of billions.It's hard to find work you love; it must be, if so few do.  So don't\nunderestimate this task.  And don't feel bad if you haven't succeeded\nyet.  In fact, if you admit to yourself that you're discontented,\nyou're a step ahead of most people, who are still in denial.  If\nyou're surrounded by colleagues who claim to enjoy work that you\nfind contemptible, odds are they're lying to themselves.  Not\nnecessarily, but probably.Although doing great work takes less discipline than people think\u2014because the way to do great work is to find something you like so\nmuch that you don't have to force yourself to do it\u2014finding\nwork you love does usually require discipline.   Some people are\nlucky enough to know what they want to do when they're 12, and just\nglide along as if they were on railroad tracks.  But this seems the\nexception.  More often people who do great things have careers with\nthe trajectory of a ping-pong ball.  They go to school to study A,\ndrop out and get a job doing B, and then become famous for C after\ntaking it up on the side.Sometimes jumping from one sort of work to another is a sign of\nenergy, and sometimes it's a sign of laziness.  Are you dropping\nout, or boldly carving a new path?  You often can't tell yourself.\nPlenty of people who will later do great things seem to be disappointments\nearly on, when they're trying to find their niche.Is there some test you can use to keep yourself honest?  One is to\ntry to do a good job at whatever you're doing, even if you don't\nlike it.  Then at least you'll know you're not using dissatisfaction\nas an excuse for being lazy.  Perhaps more importantly, you'll get\ninto the habit of doing things well.Another test you can use is: always produce.  For example, if you\nhave a day job you don't take seriously because you plan to be a\nnovelist, are you producing?  Are you writing pages of fiction,\nhowever bad?  As long as you're producing, you'll know you're not\nmerely using the hazy vision of the grand novel you plan to write\none day as an opiate.  The view of it will be obstructed by the all\ntoo palpably flawed one you're actually writing.\"Always produce\" is also a heuristic for finding the work you love.\nIf you subject yourself to that constraint, it will automatically\npush you away from things you think you're supposed to work on,\ntoward things you actually like.  \"Always produce\" will discover\nyour life's work the way water, with the aid of gravity, finds the\nhole in your roof.Of course, figuring out what you like to work on doesn't mean you\nget to work on it.  That's a separate question.  And if you're\nambitious you have to keep them separate: you have to make a conscious\neffort to keep your ideas about what you want from being contaminated\nby what seems possible. \n[6]It's painful to keep them apart, because it's painful to observe\nthe gap between them. So most people pre-emptively lower their\nexpectations.  For example, if you asked random people on the street\nif they'd like to be able to draw like Leonardo, you'd find most\nwould say something like \"Oh, I can't draw.\"  This is more a statement\nof intention than fact; it means, I'm not going to try.  Because\nthe fact is, if you took a random person off the street and somehow\ngot them to work as hard as they possibly could at drawing for the\nnext twenty years, they'd get surprisingly far.  But it would require\na great moral effort; it would mean staring failure in the eye every\nday for years.  And so to protect themselves people say \"I can't.\"Another related line you often hear is that not everyone can do\nwork they love\u2014that someone has to do the unpleasant jobs.  Really?\nHow do you make them?  In the US the only mechanism for forcing\npeople to do unpleasant jobs is the draft, and that hasn't been\ninvoked for over 30 years.  All we can do is encourage people to\ndo unpleasant work, with money and prestige.If there's something people still won't do, it seems as if society\njust has to make do without.  That's what happened with domestic\nservants.  For millennia that was the canonical example of a job\n\"someone had to do.\"  And yet in the mid twentieth century servants\npractically disappeared in rich countries, and the rich have just\nhad to do without.So while there may be some things someone has to do, there's a good\nchance anyone saying that about any particular job is mistaken.\nMost unpleasant jobs would either get automated or go undone if no\none were willing to do them.Two RoutesThere's another sense of \"not everyone can do work they love\"\nthat's all too true, however.  One has to make a living, and it's\nhard to get paid for doing work you love.  There are two routes to\nthat destination:\n\n  The organic route: as you become more eminent, gradually to\n  increase the parts of your job that you like at the expense of\n  those you don't.The two-job route: to work at things you don't like to get money\n  to work on things you do.\n\nThe organic route is more common.  It happens naturally to anyone\nwho does good work.  A young architect has to take whatever work\nhe can get, but if he does well he'll gradually be in a position\nto pick and choose among projects.  The disadvantage of this route\nis that it's slow and uncertain.  Even tenure is not real freedom.The two-job route has several variants depending on how long you\nwork for money at a time.  At one extreme is the \"day job,\" where\nyou work regular hours at one job to make money, and work on what\nyou love in your spare time.  At the other extreme you work at\nsomething till you make enough not to \nhave to work for money again.The two-job route is less common than the organic route, because\nit requires a deliberate choice.  It's also more dangerous.  Life\ntends to get more expensive as you get older, so it's easy to get\nsucked into working longer than you expected at the money job.\nWorse still, anything you work on changes you.  If you work too\nlong on tedious stuff, it will rot your brain.  And the best paying\njobs are most dangerous, because they require your full attention.The advantage of the two-job route is that it lets you jump over\nobstacles.  The landscape of possible jobs isn't flat; there are\nwalls of varying heights between different kinds of work. \n[7]\nThe trick of maximizing the parts of your job that you like can get you\nfrom architecture to product design, but not, probably, to music.\nIf you make money doing one thing and then work on another, you\nhave more freedom of choice.Which route should you take?  That depends on how sure you are of\nwhat you want to do, how good you are at taking orders, how much\nrisk you can stand, and the odds that anyone will pay (in your\nlifetime) for what you want to do.  If you're sure of the general\narea you want to work in and it's something people are likely to\npay you for, then you should probably take the organic route.  But\nif you don't know what you want to work on, or don't like to take\norders, you may want to take the two-job route, if you can stand\nthe risk.Don't decide too soon.  Kids who know early what they want to do\nseem impressive, as if they got the answer to some math question\nbefore the other kids.  They have an answer, certainly, but odds\nare it's wrong.A friend of mine who is a quite successful doctor complains constantly\nabout her job.  When people applying to medical school ask her for\nadvice, she wants to shake them and yell \"Don't do it!\"  (But she\nnever does.) How did she get into this fix?  In high school she\nalready wanted to be a doctor.  And she is so ambitious and determined\nthat she overcame every obstacle along the way\u2014including,\nunfortunately, not liking it.Now she has a life chosen for her by a high-school kid.When you're young, you're given the impression that you'll get\nenough information to make each choice before you need to make it.\nBut this is certainly not so with work.  When you're deciding what\nto do, you have to operate on ridiculously incomplete information.\nEven in college you get little idea what various types of work are\nlike.  At best you may have a couple internships, but not all jobs\noffer internships, and those that do don't teach you much more about\nthe work than being a batboy teaches you about playing baseball.In the design of lives, as in the design of most other things, you\nget better results if you use flexible media.  So unless you're\nfairly sure what you want to do, your best bet may be to choose a\ntype of work that could turn into either an organic or two-job\ncareer.  That was probably part of the reason I chose computers.\nYou can be a professor, or make a lot of money, or morph it into\nany number of other kinds of work.It's also wise, early on, to seek jobs that let you do many different\nthings, so you can learn faster what various kinds of work are like.\nConversely, the extreme version of the two-job route is dangerous\nbecause it teaches you so little about what you like.  If you work\nhard at being a bond trader for ten years, thinking that you'll\nquit and write novels when you have enough money, what happens when\nyou quit and then discover that you don't actually like writing\nnovels?Most people would say, I'd take that problem.  Give me a million\ndollars and I'll figure out what to do.  But it's harder than it\nlooks.  Constraints give your life shape.  Remove them and most\npeople have no idea what to do: look at what happens to those who\nwin lotteries or inherit money.  Much as everyone thinks they want\nfinancial security, the happiest people are not those who have it,\nbut those who like what they do.  So a plan that promises freedom\nat the expense of knowing what to do with it may not be as good as\nit seems.Whichever route you take, expect a struggle.  Finding work you love\nis very difficult.  Most people fail.  Even if you succeed, it's\nrare to be free to work on what you want till your thirties or\nforties.  But if you have the destination in sight you'll be more\nlikely to arrive at it.  If you know you can love work, you're in\nthe home stretch, and if you know what work you love, you're\npractically there.Notes[1]\nCurrently we do the opposite: when we make kids do boring work,\nlike arithmetic drills, instead of admitting frankly that it's\nboring, we try to disguise it with superficial decorations.[2]\nOne father told me about a related phenomenon: he found himself\nconcealing from his family how much he liked his work.  When he\nwanted to go to work on a saturday, he found it easier to say that\nit was because he \"had to\" for some reason, rather than admitting\nhe preferred to work than stay home with them.[3]\nSomething similar happens with suburbs.  Parents move to suburbs\nto raise their kids in a safe environment, but suburbs are so dull\nand artificial that by the time they're fifteen the kids are convinced\nthe whole world is boring.[4]\nI'm not saying friends should be the only audience for your\nwork.  The more people you can help, the better.  But friends should\nbe your compass.[5]\nDonald Hall said young would-be poets were mistaken to be so\nobsessed with being published.  But you can imagine what it would\ndo for a 24 year old to get a poem published in The New Yorker.\nNow to people he meets at parties he's a real poet.  Actually he's\nno better or worse than he was before, but to a clueless audience\nlike that, the approval of an official authority makes all the\ndifference.   So it's a harder problem than Hall realizes.  The\nreason the young care so much about prestige is that the people\nthey want to impress are not very discerning.[6]\nThis is isomorphic to the principle that you should prevent\nyour beliefs about how things are from being contaminated by how\nyou wish they were.  Most people let them mix pretty promiscuously.\nThe continuing popularity of religion is the most visible index of\nthat.[7]\nA more accurate metaphor would be to say that the graph of jobs\nis not very well connected.Thanks to Trevor Blackwell, Dan Friedman, Sarah Harlin,\nJessica Livingston, Jackie McDonough, Robert Morris, Peter Norvig, \nDavid Sloo, and Aaron Swartz\nfor reading drafts of this.December 2019There are two distinct ways to be politically moderate: on purpose\nand by accident. Intentional moderates are trimmers, deliberately\nchoosing a position mid-way between the extremes of right and left.\nAccidental moderates end up in the middle, on average, because they\nmake up their own minds about each question, and the far right and\nfar left are roughly equally wrong.You can distinguish intentional from accidental moderates by the\ndistribution of their opinions. If the far left opinion on some\nmatter is 0 and the far right opinion 100, an intentional moderate's\nopinion on every question will be near 50. Whereas an accidental\nmoderate's opinions will be scattered over a broad range, but will,\nlike those of the intentional moderate, average to about 50.Intentional moderates are similar to those on the far left and the\nfar right in that their opinions are, in a sense, not their own.\nThe defining quality of an ideologue, whether on the left or the\nright, is to acquire one's opinions in bulk. You don't get to pick\nand choose. Your opinions about taxation can be predicted from your\nopinions about sex. And although intentional moderates\nmight seem to be the opposite of ideologues, their beliefs (though\nin their case the word \"positions\" might be more accurate) are also\nacquired in bulk. If the median opinion shifts to the right or left,\nthe intentional moderate must shift with it. Otherwise they stop\nbeing moderate.Accidental moderates, on the other hand, not only choose their own\nanswers, but choose their own questions. They may not care at all\nabout questions that the left and right both think are terribly\nimportant. So you can only even measure the politics of an accidental\nmoderate from the intersection of the questions they care about and\nthose the left and right care about, and this can\nsometimes be vanishingly small.It is not merely a manipulative rhetorical trick to say \"if you're\nnot with us, you're against us,\" but often simply false.Moderates are sometimes derided as cowards, particularly by \nthe extreme left. But while it may be accurate to call intentional\nmoderates cowards, openly being an accidental moderate requires the\nmost courage of all, because you get attacked from both right and\nleft, and you don't have the comfort of being an orthodox member\nof a large group to sustain you.Nearly all the most impressive people I know are accidental moderates.\nIf I knew a lot of professional athletes, or people in the entertainment\nbusiness, that might be different. Being on the far left or far\nright doesn't affect how fast you run or how well you sing. But\nsomeone who works with ideas has to be independent-minded to do it\nwell.Or more precisely, you have to be independent-minded about the ideas\nyou work with. You could be mindlessly doctrinaire in your politics\nand still be a good mathematician. In the 20th century, a lot of\nvery smart people were Marxists \u0097 just no one who was smart about\nthe subjects Marxism involves. But if the ideas you use in your\nwork intersect with the politics of your time, you have two choices:\nbe an accidental moderate, or be mediocre.Notes[1] It's possible in theory for one side to be entirely right and\nthe other to be entirely wrong. Indeed, ideologues must always\nbelieve this is the case. But historically it rarely has been.[2] For some reason the far right tend to ignore moderates rather\nthan despise them as backsliders. I'm not sure why. Perhaps it\nmeans that the far right is less ideological than the far left. Or\nperhaps that they are more confident, or more resigned, or simply\nmore disorganized. I just don't know.[3] Having heretical opinions doesn't mean you have to express\nthem openly. It may be\neasier to have them if you don't.\nThanks to Austen Allred, Trevor Blackwell, Patrick Collison, Jessica Livingston,\nAmjad Masad, Ryan Petersen, and Harj Taggar for reading drafts of this.May 2021There's one kind of opinion I'd be very afraid to express publicly.\nIf someone I knew to be both a domain expert and a reasonable person\nproposed an idea that sounded preposterous, I'd be very reluctant\nto say \"That will never work.\"Anyone who has studied the history of ideas, and especially the\nhistory of science, knows that's how big things start. Someone\nproposes an idea that sounds crazy, most people dismiss it, then\nit gradually takes over the world.Most implausible-sounding ideas are in fact bad and could be safely\ndismissed. But not when they're proposed by reasonable domain\nexperts. If the person proposing the idea is reasonable, then they\nknow how implausible it sounds. And yet they're proposing it anyway.\nThat suggests they know something you don't. And if they have deep\ndomain expertise, that's probably the source of it.\n[1]Such ideas are not merely unsafe to dismiss, but disproportionately\nlikely to be interesting. When the average person proposes an\nimplausible-sounding idea, its implausibility is evidence of their\nincompetence. But when a reasonable domain expert does it, the\nsituation is reversed. There's something like an efficient market\nhere: on average the ideas that seem craziest will, if correct,\nhave the biggest effect. So if you can eliminate the theory that\nthe person proposing an implausible-sounding idea is incompetent,\nits implausibility switches from evidence that it's boring to\nevidence that it's exciting.\n[2]Such ideas are not guaranteed to work. But they don't have to be.\nThey just have to be sufficiently good bets \u2014 to have sufficiently\nhigh expected value. And I think on average they do. I think if you\nbet on the entire set of implausible-sounding ideas proposed by\nreasonable domain experts, you'd end up net ahead.The reason is that everyone is too conservative. The word \"paradigm\"\nis overused, but this is a case where it's warranted. Everyone is\ntoo much in the grip of the current paradigm. Even the people who\nhave the new ideas undervalue them initially. Which means that\nbefore they reach the stage of proposing them publicly, they've\nalready subjected them to an excessively strict filter.\n[3]The wise response to such an idea is not to make statements, but\nto ask questions, because there's a real mystery here. Why has this\nsmart and reasonable person proposed an idea that seems so wrong?\nAre they mistaken, or are you? One of you has to be. If you're the\none who's mistaken, that would be good to know, because it means\nthere's a hole in your model of the world. But even if they're\nmistaken, it should be interesting to learn why. A trap that an\nexpert falls into is one you have to worry about too.This all seems pretty obvious. And yet there are clearly a lot of\npeople who don't share my fear of dismissing new ideas. Why do they\ndo it? Why risk looking like a jerk now and a fool later, instead\nof just reserving judgement?One reason they do it is envy. If you propose a radical new idea\nand it succeeds, your reputation (and perhaps also your wealth)\nwill increase proportionally. Some people would be envious if that\nhappened, and this potential envy propagates back into a conviction\nthat you must be wrong.Another reason people dismiss new ideas is that it's an easy way\nto seem sophisticated. When a new idea first emerges, it usually\nseems pretty feeble. It's a mere hatchling. Received wisdom is a\nfull-grown eagle by comparison. So it's easy to launch a devastating\nattack on a new idea, and anyone who does will seem clever to those\nwho don't understand this asymmetry.This phenomenon is exacerbated by the difference between how those\nworking on new ideas and those attacking them are rewarded. The\nrewards for working on new ideas are weighted by the value of the\noutcome. So it's worth working on something that only has a 10%\nchance of succeeding if it would make things more than 10x better.\nWhereas the rewards for attacking new ideas are roughly constant;\nsuch attacks seem roughly equally clever regardless of the target.People will also attack new ideas when they have a vested interest\nin the old ones. It's not surprising, for example, that some of\nDarwin's harshest critics were churchmen. People build whole careers\non some ideas. When someone claims they're false or obsolete, they\nfeel threatened.The lowest form of dismissal is mere factionalism: to automatically\ndismiss any idea associated with the opposing faction. The lowest\nform of all is to dismiss an idea because of who proposed it.But the main thing that leads reasonable people to dismiss new ideas\nis the same thing that holds people back from proposing them: the\nsheer pervasiveness of the current paradigm. It doesn't just affect\nthe way we think; it is the Lego blocks we build thoughts out of.\nPopping out of the current paradigm is something only a few people\ncan do. And even they usually have to suppress their intuitions at\nfirst, like a pilot flying through cloud who has to trust his\ninstruments over his sense of balance.\n[4]Paradigms don't just define our present thinking. They also vacuum\nup the trail of crumbs that led to them, making our standards for\nnew ideas impossibly high. The current paradigm seems so perfect\nto us, its offspring, that we imagine it must have been accepted\ncompletely as soon as it was discovered \u2014 that whatever the church thought\nof the heliocentric model, astronomers must have been convinced as\nsoon as Copernicus proposed it. Far, in fact, from it. Copernicus\npublished the heliocentric model in 1532, but it wasn't till the\nmid seventeenth century that the balance of scientific opinion\nshifted in its favor.\n[5]Few understand how feeble new ideas look when they first appear.\nSo if you want to have new ideas yourself, one of the most valuable\nthings you can do is to learn what they look like when they're born.\nRead about how new ideas happened, and try to get yourself into the\nheads of people at the time. How did things look to them, when the\nnew idea was only half-finished, and even the person who had it was\nonly half-convinced it was right?But you don't have to stop at history. You can observe big new ideas\nbeing born all around you right now. Just look for a reasonable\ndomain expert proposing something that sounds wrong.If you're nice, as well as wise, you won't merely resist attacking\nsuch people, but encourage them. Having new ideas is a lonely\nbusiness. Only those who've tried it know how lonely. These people\nneed your help. And if you help them, you'll probably learn something\nin the process.Notes[1]\nThis domain expertise could be in another field. Indeed,\nsuch crossovers tend to be particularly promising.[2]\nI'm not claiming this principle extends much beyond math,\nengineering, and the hard sciences. In politics, for example,\ncrazy-sounding ideas generally are as bad as they sound. Though\narguably this is not an exception, because the people who propose\nthem are not in fact domain experts; politicians are domain experts\nin political tactics, like how to get elected and how to get\nlegislation passed, but not in the world that policy acts upon.\nPerhaps no one could be.[3]\nThis sense of \"paradigm\" was defined by Thomas Kuhn in his\nStructure of Scientific Revolutions, but I also recommend his\nCopernican Revolution, where you can see him at work developing the\nidea.[4]\nThis is one reason people with a touch of Asperger's may have\nan advantage in discovering new ideas. They're always flying on\ninstruments.[5]\nHall, Rupert. From Galileo to Newton. Collins, 1963. This\nbook is particularly good at getting into contemporaries' heads.Thanks to Trevor Blackwell, Patrick Collison, Suhail Doshi, Daniel\nGackle, Jessica Livingston, and Robert Morris for reading drafts of this.May 2021Noora Health, a nonprofit I've \nsupported for years, just launched\na new NFT. It has a dramatic name, Save Thousands of Lives,\nbecause that's what the proceeds will do.Noora has been saving lives for 7 years. They run programs in\nhospitals in South Asia to teach new mothers how to take care of\ntheir babies once they get home. They're in 165 hospitals now. And\nbecause they know the numbers before and after they start at a new\nhospital, they can measure the impact they have. It is massive.\nFor every 1000 live births, they save 9 babies.This number comes from a study\nof 133,733 families at 28 different\nhospitals that Noora conducted in collaboration with the Better\nBirth team at Ariadne Labs, a joint center for health systems\ninnovation at Brigham and Women\u0092s Hospital and Harvard T.H. Chan\nSchool of Public Health.Noora is so effective that even if you measure their costs in the\nmost conservative way, by dividing their entire budget by the number\nof lives saved, the cost of saving a life is the lowest I've seen.\n$1,235.For this NFT, they're going to issue a public report tracking how\nthis specific tranche of money is spent, and estimating the number\nof lives saved as a result.NFTs are a new territory, and this way of using them is especially\nnew, but I'm excited about its potential. And I'm excited to see\nwhat happens with this particular auction, because unlike an NFT\nrepresenting something that has already happened,\nthis NFT gets better as the price gets higher.The reserve price was about $2.5 million, because that's what it\ntakes for the name to be accurate: that's what it costs to save\n2000 lives. But the higher the price of this NFT goes, the more\nlives will be saved. What a sentence to be able to write.September 2007In high school I decided I was going to study philosophy in college.\nI had several motives, some more honorable than others.  One of the\nless honorable was to shock people.  College was regarded as job\ntraining where I grew up, so studying philosophy seemed an impressively\nimpractical thing to do.  Sort of like slashing holes in your clothes\nor putting a safety pin through your ear, which were other forms\nof impressive impracticality then just coming into fashion.But I had some more honest motives as well.  I thought studying\nphilosophy would be a shortcut straight to wisdom.  All the people\nmajoring in other things would just end up with a bunch of domain\nknowledge.  I would be learning what was really what.I'd tried to read a few philosophy books.  Not recent ones; you\nwouldn't find those in our high school library.  But I tried to\nread Plato and Aristotle.  I doubt I believed I understood them,\nbut they sounded like they were talking about something important.\nI assumed I'd learn what in college.The summer before senior year I took some college classes.  I learned\na lot in the calculus class, but I didn't learn much in Philosophy\n101.  And yet my plan to study philosophy remained intact.  It was\nmy fault I hadn't learned anything.  I hadn't read the books we\nwere assigned carefully enough.  I'd give Berkeley's Principles\nof Human Knowledge another shot in college.  Anything so admired\nand so difficult to read must have something in it, if one could\nonly figure out what.Twenty-six years later, I still don't understand Berkeley.  I have\na nice edition of his collected works.  Will I ever read it?  Seems\nunlikely.The difference between then and now is that now I understand why\nBerkeley is probably not worth trying to understand.  I think I see\nnow what went wrong with philosophy, and how we might fix it.WordsI did end up being a philosophy major for most of college.  It\ndidn't work out as I'd hoped.  I didn't learn any magical truths\ncompared to which everything else was mere domain knowledge.  But\nI do at least know now why I didn't.  Philosophy doesn't really\nhave a subject matter in the way math or history or most other\nuniversity subjects do.  There is no core of knowledge one must\nmaster.  The closest you come to that is a knowledge of what various\nindividual philosophers have said about different topics over the\nyears.  Few were sufficiently correct that people have forgotten\nwho discovered what they discovered.Formal logic has some subject matter. I took several classes in\nlogic.  I don't know if I learned anything from them.\n[1]\nIt does seem to me very important to be able to flip ideas around in\none's head: to see when two ideas don't fully cover the space of\npossibilities, or when one idea is the same as another but with a\ncouple things changed.  But did studying logic teach me the importance\nof thinking this way, or make me any better at it?  I don't know.There are things I know I learned from studying philosophy.  The\nmost dramatic I learned immediately, in the first semester of\nfreshman year, in a class taught by Sydney Shoemaker.  I learned\nthat I don't exist.  I am (and you are) a collection of cells that\nlurches around driven by various forces, and calls itself I.  But\nthere's no central, indivisible thing that your identity goes with.\nYou could conceivably lose half your brain and live.  Which means\nyour brain could conceivably be split into two halves and each\ntransplanted into different bodies.  Imagine waking up after such\nan operation.  You have to imagine being two people.The real lesson here is that the concepts we use in everyday life\nare fuzzy, and break down if pushed too hard.  Even a concept as\ndear to us as I.  It took me a while to grasp this, but when I\ndid it was fairly sudden, like someone in the nineteenth century\ngrasping evolution and realizing the story of creation they'd been\ntold as a child was all wrong. \n[2]\nOutside of math there's a limit\nto how far you can push words; in fact, it would not be a bad\ndefinition of math to call it the study of terms that have precise\nmeanings.  Everyday words are inherently imprecise.  They work well\nenough in everyday life that you don't notice.  Words seem to work,\njust as Newtonian physics seems to.  But you can always make them\nbreak if you push them far enough.I would say that this has been, unfortunately for philosophy, the\ncentral fact of philosophy.  Most philosophical debates are not\nmerely afflicted by but driven by confusions over words.  Do we\nhave free will?  Depends what you mean by \"free.\" Do abstract ideas\nexist?  Depends what you mean by \"exist.\"Wittgenstein is popularly credited with the idea that most philosophical\ncontroversies are due to confusions over language.  I'm not sure\nhow much credit to give him.  I suspect a lot of people realized\nthis, but reacted simply by not studying philosophy, rather than\nbecoming philosophy professors.How did things get this way?  Can something people have spent\nthousands of years studying really be a waste of time?  Those are\ninteresting questions.  In fact, some of the most interesting\nquestions you can ask about philosophy.  The most valuable way to\napproach the current philosophical tradition may be neither to get\nlost in pointless speculations like Berkeley, nor to shut them down\nlike Wittgenstein, but to study it as an example of reason gone\nwrong.HistoryWestern philosophy really begins with Socrates, Plato, and Aristotle.\nWhat we know of their predecessors comes from fragments and references\nin later works; their doctrines could be described as speculative\ncosmology that occasionally strays into analysis.  Presumably they\nwere driven by whatever makes people in every other society invent\ncosmologies.\n[3]With Socrates, Plato, and particularly Aristotle, this tradition\nturned a corner.  There started to be a lot more analysis.  I suspect\nPlato and Aristotle were encouraged in this by progress in math.\nMathematicians had by then shown that you could figure things out\nin a much more conclusive way than by making up fine sounding stories\nabout them.  \n[4]People talk so much about abstractions now that we don't realize\nwhat a leap it must have been when they first started to.  It was\npresumably many thousands of years between when people first started\ndescribing things as hot or cold and when someone asked \"what is\nheat?\"  No doubt it was a very gradual process.  We don't know if\nPlato or Aristotle were the first to ask any of the questions they\ndid.  But their works are the oldest we have that do this on a large\nscale, and there is a freshness (not to say naivete) about them\nthat suggests some of the questions they asked were new to them,\nat least.Aristotle in particular reminds me of the phenomenon that happens\nwhen people discover something new, and are so excited by it that\nthey race through a huge percentage of the newly discovered territory\nin one lifetime.  If so, that's evidence of how new this kind of\nthinking was. \n[5]This is all to explain how Plato and Aristotle can be very impressive\nand yet naive and mistaken.  It was impressive even to ask the\nquestions they did.  That doesn't mean they always came up with\ngood answers.  It's not considered insulting to say that ancient\nGreek mathematicians were naive in some respects, or at least lacked\nsome concepts that would have made their lives easier.  So I hope\npeople will not be too offended if I propose that ancient philosophers\nwere similarly naive.  In particular, they don't seem to have fully\ngrasped what I earlier called the central fact of philosophy: that\nwords break if you push them too far.\"Much to the surprise of the builders of the first digital computers,\"\nRod Brooks wrote, \"programs written for them usually did not work.\"\n[6]\nSomething similar happened when people first started trying\nto talk about abstractions.  Much to their surprise, they didn't\narrive at answers they agreed upon.  In fact, they rarely seemed\nto arrive at answers at all.They were in effect arguing about artifacts induced by sampling at\ntoo low a resolution.The proof of how useless some of their answers turned out to be is\nhow little effect they have.  No one after reading Aristotle's\nMetaphysics does anything differently as a result.\n[7]Surely I'm not claiming that ideas have to have practical applications\nto be interesting?  No, they may not have to.  Hardy's boast that\nnumber theory had no use whatsoever wouldn't disqualify it.  But\nhe turned out to be mistaken.  In fact, it's suspiciously hard to\nfind a field of math that truly has no practical use.  And Aristotle's\nexplanation of the ultimate goal of philosophy in Book A of the\nMetaphysics implies that philosophy should be useful too.Theoretical KnowledgeAristotle's goal was to find the most general of general principles.\nThe examples he gives are convincing: an ordinary worker builds\nthings a certain way out of habit; a master craftsman can do more\nbecause he grasps the underlying principles.  The trend is clear:\nthe more general the knowledge, the more admirable it is.  But then\nhe makes a mistake\u2014possibly the most important mistake in the\nhistory of philosophy.  He has noticed that theoretical knowledge\nis often acquired for its own sake, out of curiosity, rather than\nfor any practical need.  So he proposes there are two kinds of\ntheoretical knowledge: some that's useful in practical matters and\nsome that isn't.  Since people interested in the latter are interested\nin it for its own sake, it must be more noble.  So he sets as his\ngoal in the Metaphysics the exploration of knowledge that has no\npractical use.  Which means no alarms go off when he takes on grand\nbut vaguely understood questions and ends up getting lost in a sea\nof words.His mistake was to confuse motive and result.  Certainly, people\nwho want a deep understanding of something are often driven by\ncuriosity rather than any practical need.  But that doesn't mean\nwhat they end up learning is useless.  It's very valuable in practice\nto have a deep understanding of what you're doing; even if you're\nnever called on to solve advanced problems, you can see shortcuts\nin the solution of simple ones, and your knowledge won't break down\nin edge cases, as it would if you were relying on formulas you\ndidn't understand.  Knowledge is power.  That's what makes theoretical\nknowledge prestigious.  It's also what causes smart people to be\ncurious about certain things and not others; our DNA is not so\ndisinterested as we might think.So while ideas don't have to have immediate practical applications\nto be interesting, the kinds of things we find interesting will\nsurprisingly often turn out to have practical applications.The reason Aristotle didn't get anywhere in the Metaphysics was\npartly that he set off with contradictory aims: to explore the most\nabstract ideas, guided by the assumption that they were useless.\nHe was like an explorer looking for a territory to the north of\nhim, starting with the assumption that it was located to the south.And since his work became the map used by generations of future\nexplorers, he sent them off in the wrong direction as well. \n[8]\nPerhaps worst of all, he protected them from both the criticism of\noutsiders and the promptings of their own inner compass by establishing\nthe principle that the most noble sort of theoretical knowledge had\nto be useless.The Metaphysics is mostly a failed experiment.  A few ideas from\nit turned out to be worth keeping; the bulk of it has had no effect\nat all.  The Metaphysics is among the least read of all famous\nbooks.  It's not hard to understand the way Newton's Principia\nis, but the way a garbled message is.Arguably it's an interesting failed experiment.  But unfortunately\nthat was not the conclusion Aristotle's successors derived from\nworks like the Metaphysics. \n[9]\nSoon after, the western world\nfell on intellectual hard times.  Instead of version 1s to be\nsuperseded, the works of Plato and Aristotle became revered texts\nto be mastered and discussed.  And so things remained for a shockingly\nlong time.  It was not till around 1600 (in Europe, where the center\nof gravity had shifted by then) that one found people confident\nenough to treat Aristotle's work as a catalog of mistakes.  And\neven then they rarely said so outright.If it seems surprising that the gap was so long, consider how little\nprogress there was in math between Hellenistic times and the\nRenaissance.In the intervening years an unfortunate idea took hold:  that it\nwas not only acceptable to produce works like the Metaphysics,\nbut that it was a particularly prestigious line of work, done by a\nclass of people called philosophers.  No one thought to go back and\ndebug Aristotle's motivating argument.  And so instead of correcting\nthe problem Aristotle discovered by falling into it\u2014that you can\neasily get lost if you talk too loosely about very abstract ideas\u2014they \ncontinued to fall into it.The SingularityCuriously, however, the works they produced continued to attract\nnew readers.  Traditional philosophy occupies a kind of singularity\nin this respect.  If you write in an unclear way about big ideas,\nyou produce something that seems tantalizingly attractive to\ninexperienced but intellectually ambitious students.  Till one knows\nbetter, it's hard to distinguish something that's hard to understand\nbecause the writer was unclear in his own mind from something like\na mathematical proof that's hard to understand because the ideas\nit represents are hard to understand.  To someone who hasn't learned\nthe difference, traditional philosophy seems extremely attractive:\nas hard (and therefore impressive) as math, yet broader in scope.\nThat was what lured me in as a high school student.This singularity is even more singular in having its own defense\nbuilt in.  When things are hard to understand, people who suspect\nthey're nonsense generally keep quiet.  There's no way to prove a\ntext is meaningless.  The closest you can get is to show that the\nofficial judges of some class of texts can't distinguish them from\nplacebos. \n[10]And so instead of denouncing philosophy, most people who suspected\nit was a waste of time just studied other things.  That alone is\nfairly damning evidence, considering philosophy's claims.  It's\nsupposed to be about the ultimate truths. Surely all smart people\nwould be interested in it, if it delivered on that promise.Because philosophy's flaws turned away the sort of people who might\nhave corrected them, they tended to be self-perpetuating.  Bertrand\nRussell wrote in a letter in 1912:\n\n  Hitherto the people attracted to philosophy have been mostly those\n  who loved the big generalizations, which were all wrong, so that\n  few people with exact minds have taken up the subject.\n[11]\n\nHis response was to launch Wittgenstein at it, with dramatic results.I think Wittgenstein deserves to be famous not for the discovery\nthat most previous philosophy was a waste of time, which judging\nfrom the circumstantial evidence must have been made by every smart\nperson who studied a little philosophy and declined to pursue it\nfurther, but for how he acted in response.\n[12]\nInstead of quietly\nswitching to another field, he made a fuss, from inside.  He was\nGorbachev.The field of philosophy is still shaken from the fright Wittgenstein\ngave it. \n[13]\nLater in life he spent a lot of time talking about\nhow words worked.  Since that seems to be allowed, that's what a\nlot of philosophers do now.  Meanwhile, sensing a vacuum in the\nmetaphysical speculation department, the people who used to do\nliterary criticism have been edging Kantward, under new names like\n\"literary theory,\" \"critical theory,\" and when they're feeling\nambitious, plain \"theory.\"  The writing is the familiar word salad:\n\n  Gender is not like some of the other grammatical modes which\n  express precisely a mode of conception without any reality that\n  corresponds to the conceptual mode, and consequently do not express\n  precisely something in reality by which the intellect could be\n  moved to conceive a thing the way it does, even where that motive\n  is not something in the thing as such.\n  [14]\n\nThe singularity I've described is not going away.  There's a market\nfor writing that sounds impressive and can't be disproven. There\nwill always be both supply and demand.  So if one group abandons\nthis territory, there will always be others ready to occupy it.A ProposalWe may be able to do better.  Here's an intriguing possibility.\nPerhaps we should do what Aristotle meant to do, instead of what\nhe did.  The goal he announces in the Metaphysics seems one worth\npursuing: to discover the most general truths.  That sounds good.\nBut instead of trying to discover them because they're useless,\nlet's try to discover them because they're useful.I propose we try again, but that we use that heretofore despised\ncriterion, applicability, as a guide to keep us from wondering\noff into a swamp of abstractions.  Instead of trying to answer the\nquestion:\n\n  What are the most general truths?\n\nlet's try to answer the question\n\n  Of all the useful things we can say, which are the most general?\n\nThe test of utility I propose is whether we cause people who read\nwhat we've written to do anything differently afterward.  Knowing\nwe have to give definite (if implicit) advice will keep us from\nstraying beyond the resolution of the words we're using.The goal is the same as Aristotle's; we just approach it from a\ndifferent direction.As an example of a useful, general idea, consider that of the\ncontrolled experiment.  There's an idea that has turned out to be\nwidely applicable.  Some might say it's part of science, but it's\nnot part of any specific science; it's literally meta-physics (in\nour sense of \"meta\").   The idea of evolution is another. It turns\nout to have quite broad applications\u2014for example, in genetic\nalgorithms and even product design.  Frankfurt's distinction between\nlying and bullshitting seems a promising recent example.\n[15]These seem to me what philosophy should look like: quite general\nobservations that would cause someone who understood them to do\nsomething differently.Such observations will necessarily be about things that are imprecisely\ndefined.  Once you start using words with precise meanings, you're\ndoing math.  So starting from utility won't entirely solve the\nproblem I described above\u2014it won't flush out the metaphysical\nsingularity.  But it should help.  It gives people with good\nintentions a new roadmap into abstraction.  And they may thereby\nproduce things that make the writing of the people with bad intentions\nlook bad by comparison.One drawback of this approach is that it won't produce the sort of\nwriting that gets you tenure.  And not just because it's not currently\nthe fashion.  In order to get tenure in any field you must not\narrive at conclusions that members of tenure committees can disagree\nwith.  In practice there are two kinds of solutions to this problem.\nIn math and the sciences, you can prove what you're saying, or at\nany rate adjust your conclusions so you're not claiming anything\nfalse (\"6 of 8 subjects had lower blood pressure after the treatment\").\nIn the humanities you can either avoid drawing any definite conclusions\n(e.g. conclude that an issue is a complex one), or draw conclusions\nso narrow that no one cares enough to disagree with you.The kind of philosophy I'm advocating won't be able to take either\nof these routes.  At best you'll be able to achieve the essayist's\nstandard of proof, not the mathematician's or the experimentalist's.\nAnd yet you won't be able to meet the usefulness test without\nimplying definite and fairly broadly applicable conclusions.  Worse\nstill, the usefulness test will tend to produce results that annoy\npeople: there's no use in telling people things they already believe,\nand people are often upset to be told things they don't.Here's the exciting thing, though.  Anyone can do this.  Getting\nto general plus useful by starting with useful and cranking up the\ngenerality may be unsuitable for junior professors trying to get\ntenure, but it's better for everyone else, including professors who\nalready have it.  This side of the mountain is a nice gradual slope.\nYou can start by writing things that are useful but very specific,\nand then gradually make them more general.  Joe's has good burritos.\nWhat makes a good burrito?  What makes good food?  What makes\nanything good?  You can take as long as you want.  You don't have\nto get all the way to the top of the mountain.  You don't have to\ntell anyone you're doing philosophy.If it seems like a daunting task to do philosophy, here's an\nencouraging thought.  The field is a lot younger than it seems.\nThough the first philosophers in the western tradition lived about\n2500 years ago, it would be misleading to say the field is 2500\nyears old, because for most of that time the leading practitioners\nweren't doing much more than writing commentaries on Plato or\nAristotle while watching over their shoulders for the next invading\narmy.  In the times when they weren't, philosophy was hopelessly\nintermingled with religion.  It didn't shake itself free till a\ncouple hundred years ago, and even then was afflicted by the\nstructural problems I've described above.  If I say this, some will\nsay it's a ridiculously overbroad and uncharitable generalization,\nand others will say it's old news, but here goes: judging from their\nworks, most philosophers up to the present have been wasting their\ntime.  So in a sense the field is still at the first step. \n[16]That sounds a preposterous claim to make.  It won't seem so\npreposterous in 10,000 years.  Civilization always seems old, because\nit's always the oldest it's ever been.  The only way to say whether\nsomething is really old or not is by looking at structural evidence,\nand structurally philosophy is young; it's still reeling from the\nunexpected breakdown of words.Philosophy is as young now as math was in 1500.  There is a lot\nmore to discover.Notes\n[1]\nIn practice formal logic is not much use, because despite\nsome progress in the last 150 years we're still only able to formalize\na small percentage of statements.  We may never do that much better,\nfor the same reason 1980s-style \"knowledge representation\" could\nnever have worked; many statements may have no representation more\nconcise than a huge, analog brain state.[2]\nIt was harder for Darwin's contemporaries to grasp this than\nwe can easily imagine.  The story of creation in the Bible is not\njust a Judeo-Christian concept; it's roughly what everyone must\nhave believed since before people were people.  The hard part of\ngrasping evolution was to realize that species weren't, as they\nseem to be, unchanging, but had instead evolved from different,\nsimpler organisms over unimaginably long periods of time.Now we don't have to make that leap.  No one in an industrialized\ncountry encounters the idea of evolution for the first time as an\nadult.  Everyone's taught about it as a child, either as truth or\nheresy.[3]\nGreek philosophers before Plato wrote in verse.  This must\nhave affected what they said.  If you try to write about the nature\nof the world in verse, it inevitably turns into incantation.  Prose\nlets you be more precise, and more tentative.[4]\nPhilosophy is like math's\nne'er-do-well brother.  It was born when Plato and Aristotle looked\nat the works of their predecessors and said in effect \"why can't\nyou be more like your brother?\"  Russell was still saying the same\nthing 2300 years later.Math is the precise half of the most abstract ideas, and philosophy\nthe imprecise half.  It's probably inevitable that philosophy will\nsuffer by comparison, because there's no lower bound to its precision.\nBad math is merely boring, whereas bad philosophy is nonsense.  And\nyet there are some good ideas in the imprecise half.[5]\nAristotle's best work was in logic and zoology, both of which\nhe can  be said to have invented.  But the most dramatic departure\nfrom his predecessors was a new, much more analytical style of\nthinking.  He was arguably the first scientist.[6]\nBrooks, Rodney, Programming in Common Lisp, Wiley, 1985, p.\n94.[7]\nSome would say we depend on Aristotle more than we realize,\nbecause his ideas were one of the ingredients in our common culture.\nCertainly a lot of the words we use have a connection with Aristotle,\nbut it seems a bit much to suggest that we wouldn't have the concept\nof the essence of something or the distinction between matter and\nform if Aristotle hadn't written about them.One way to see how much we really depend on Aristotle would be to\ndiff European culture with Chinese: what ideas did European culture\nhave in 1800 that Chinese culture didn't, in virtue of Aristotle's\ncontribution?[8]\nThe meaning of the word \"philosophy\" has changed over time.\nIn ancient times it covered a broad range of topics, comparable in\nscope to our \"scholarship\" (though without the methodological\nimplications).  Even as late as Newton's time it included what we\nnow call \"science.\"  But core of the subject today is still what\nseemed to Aristotle the core: the attempt to discover the most\ngeneral truths.Aristotle didn't call this \"metaphysics.\"  That name got assigned\nto it because the books we now call the Metaphysics came after\n(meta = after) the Physics in the standard edition of Aristotle's\nworks compiled by Andronicus of Rhodes three centuries later.  What\nwe call \"metaphysics\" Aristotle called \"first philosophy.\"[9]\nSome of Aristotle's immediate successors may have realized\nthis, but it's hard to say because most of their works are lost.[10]\nSokal, Alan, \"Transgressing the Boundaries: Toward a Transformative\nHermeneutics of Quantum Gravity,\" Social Text 46/47, pp. 217-252.Abstract-sounding nonsense seems to be most attractive when it's\naligned with some axe the audience already has to grind.  If this\nis so we should find it's most popular with groups that are (or\nfeel) weak.  The powerful don't need its reassurance.[11]\nLetter to Ottoline Morrell, December 1912.  Quoted in:Monk, Ray, Ludwig Wittgenstein: The Duty of Genius, Penguin, 1991,\np. 75.[12]\nA preliminary result, that all metaphysics between Aristotle\nand 1783 had been a waste of time, is due to I. Kant.[13]\nWittgenstein asserted a sort of mastery to which the inhabitants\nof early 20th century Cambridge seem to have been peculiarly\nvulnerable\u2014perhaps partly because so many had been raised religious\nand then stopped believing, so had a vacant space in their heads\nfor someone to tell them what to do (others chose Marx or Cardinal\nNewman), and partly because a quiet, earnest place like Cambridge\nin that era had no natural immunity to messianic figures, just as\nEuropean politics then had no natural immunity to dictators.[14]\nThis is actually from the Ordinatio of Duns Scotus (ca.\n1300), with \"number\" replaced by \"gender.\"  Plus ca change.Wolter, Allan (trans), Duns Scotus: Philosophical Writings, Nelson,\n1963, p. 92.[15]\nFrankfurt, Harry, On Bullshit,  Princeton University Press,\n2005.[16]\nSome introductions to philosophy now take the line that\nphilosophy is worth studying as a process rather than for any\nparticular truths you'll learn.  The philosophers whose works they\ncover would be rolling in their graves at that.  They hoped they\nwere doing more than serving as examples of how to argue: they hoped\nthey were getting results.  Most were wrong, but it doesn't seem\nan impossible hope.This argument seems to me like someone in 1500 looking at the lack\nof results achieved by alchemy and saying its value was as a process.\nNo, they were going about it wrong.  It turns out it is possible\nto transmute lead into gold (though not economically at current\nenergy prices), but the route to that knowledge was to\nbacktrack and try another approach.Thanks to Trevor Blackwell, Paul Buchheit, Jessica Livingston, \nRobert Morris, Mark Nitzberg, and Peter Norvig for reading drafts of this.May 2001(This article was written as a kind of business plan for a\nnew language.\nSo it is missing (because it takes for granted) the most important\nfeature of a good programming language: very powerful abstractions.)A friend of mine once told an eminent operating systems\nexpert that he wanted to design a really good\nprogramming language.  The expert told him that it would be a\nwaste of time, that programming languages don't become popular\nor unpopular based on their merits, and so no matter how\ngood his language was, no one would use it.  At least, that\nwas what had happened to the language he had designed.What does make a language popular?  Do popular\nlanguages deserve their popularity?  Is it worth trying to\ndefine a good programming language?  How would you do it?I think the answers to these questions can be found by looking \nat hackers, and learning what they want.  Programming\nlanguages are for hackers, and a programming language\nis good as a programming language (rather than, say, an\nexercise in denotational semantics or compiler design)\nif and only if hackers like it.1 The Mechanics of PopularityIt's true, certainly, that most people don't choose programming\nlanguages simply based on their merits.  Most programmers are told\nwhat language to use by someone else.  And yet I think the effect\nof such external factors on the popularity of programming languages\nis not as great as it's sometimes thought to be. I think a bigger\nproblem is that a hacker's idea of a good programming language is\nnot the same as most language designers'.Between the two, the hacker's opinion is the one that matters.\nProgramming languages are not theorems. They're tools, designed\nfor people, and they have to be designed to suit human strengths\nand weaknesses as much as shoes have to be designed for human feet.\nIf a shoe pinches when you put it on, it's a bad shoe, however\nelegant it may be as a piece of sculpture.It may be that the majority of programmers can't tell a good language\nfrom a bad one. But that's no different with any other tool. It\ndoesn't mean that it's a waste of time to try designing a good\nlanguage. Expert hackers \ncan tell a good language when they see\none, and they'll use it. Expert hackers are a tiny minority,\nadmittedly, but that tiny minority write all the good software,\nand their influence is such that the rest of the programmers will\ntend to use whatever language they use. Often, indeed, it is not\nmerely influence but command: often the expert hackers are the very\npeople who, as their bosses or faculty advisors, tell the other\nprogrammers what language to use.The opinion of expert hackers is not the only force that determines\nthe relative popularity of programming languages \u2014 legacy software\n(Cobol) and hype (Ada, Java) also play a role \u2014 but I think it is\nthe most powerful force over the long term. Given an initial critical\nmass and enough time, a programming language probably becomes about\nas popular as it deserves to be. And popularity further separates\ngood languages from bad ones, because feedback from real live users\nalways leads to improvements. Look at how much any popular language\nhas changed during its life. Perl and Fortran are extreme cases,\nbut even Lisp has changed a lot. Lisp 1.5 didn't have macros, for\nexample; these evolved later, after hackers at MIT had spent a\ncouple years using Lisp to write real programs. [1]So whether or not a language has to be good to be popular, I think\na language has to be popular to be good. And it has to stay popular\nto stay good. The state of the art in programming languages doesn't\nstand still. And yet the Lisps we have today are still pretty much\nwhat they had at MIT in the mid-1980s, because that's the last time\nLisp had a sufficiently large and demanding user base.Of course, hackers have to know about a language before they can\nuse it. How are they to hear? From other hackers. But there has to\nbe some initial group of hackers using the language for others even\nto hear about it. I wonder how large this group has to be; how many\nusers make a critical mass? Off the top of my head, I'd say twenty.\nIf a language had twenty separate users, meaning twenty users who\ndecided on their own to use it, I'd consider it to be real.Getting there can't be easy. I would not be surprised if it is\nharder to get from zero to twenty than from twenty to a thousand.\nThe best way to get those initial twenty users is probably to use\na trojan horse: to give people an application they want, which\nhappens to be written in the new language.2 External FactorsLet's start by acknowledging one external factor that does affect\nthe popularity of a programming language. To become popular, a\nprogramming language has to be the scripting language of a popular\nsystem. Fortran and Cobol were the scripting languages of early\nIBM mainframes. C was the scripting language of Unix, and so, later,\nwas Perl. Tcl is the scripting language of Tk. Java and Javascript\nare intended to be the scripting languages of web browsers.Lisp is not a massively popular language because it is not the\nscripting language of a massively popular system. What popularity\nit retains dates back to the 1960s and 1970s, when it was the\nscripting language of MIT. A lot of the great programmers of the\nday were associated with MIT at some point. And in the early 1970s,\nbefore C, MIT's dialect of Lisp, called MacLisp, was one of the\nonly programming languages a serious hacker would want to use.Today Lisp is the scripting language of two moderately popular\nsystems, Emacs and Autocad, and for that reason I suspect that most\nof the Lisp programming done today is done in Emacs Lisp or AutoLisp.Programming languages don't exist in isolation. To hack is a\ntransitive verb \u2014 hackers are usually hacking something \u2014 and in\npractice languages are judged relative to whatever they're used to\nhack. So if you want to design a popular language, you either have\nto supply more than a language, or you have to design your language\nto replace the scripting language of some existing system.Common Lisp is unpopular partly because it's an orphan. It did\noriginally come with a system to hack: the Lisp Machine. But Lisp\nMachines (along with parallel computers) were steamrollered by the\nincreasing power of general purpose processors in the 1980s. Common\nLisp might have remained popular if it had been a good scripting\nlanguage for Unix. It is, alas, an atrociously bad one.One way to describe this situation is to say that a language isn't\njudged on its own merits. Another view is that a programming language\nreally isn't a programming language unless it's also the scripting\nlanguage of something. This only seems unfair if it comes as a\nsurprise. I think it's no more unfair than expecting a programming\nlanguage to have, say, an implementation. It's just part of what\na programming language is.A programming language does need a good implementation, of course,\nand this must be free. Companies will pay for software, but individual\nhackers won't, and it's the hackers you need to attract.A language also needs to have a book about it. The book should be\nthin, well-written, and full of good examples. K&R is the ideal\nhere. At the moment I'd almost say that a language has to have a\nbook published by O'Reilly. That's becoming the test of mattering\nto hackers.There should be online documentation as well. In fact, the book\ncan start as online documentation. But I don't think that physical\nbooks are outmoded yet. Their format is convenient, and the de\nfacto censorship imposed by publishers is a useful if imperfect\nfilter. Bookstores are one of the most important places for learning\nabout new languages.3 BrevityGiven that you can supply the three things any language needs \u2014 a\nfree implementation, a book, and something to hack \u2014 how do you\nmake a language that hackers will like?One thing hackers like is brevity. Hackers are lazy, in the same\nway that mathematicians and modernist architects are lazy: they\nhate anything extraneous. It would not be far from the truth to\nsay that a hacker about to write a program decides what language\nto use, at least subconsciously, based on the total number of\ncharacters he'll have to type. If this isn't precisely how hackers\nthink, a language designer would do well to act as if it were.It is a mistake to try to baby the user with long-winded expressions\nthat are meant to resemble English. Cobol is notorious for this\nflaw. A hacker would consider being asked to writeadd x to y giving zinstead ofz = x+yas something between an insult to his intelligence and a sin against\nGod.It has sometimes been said that Lisp should use first and rest\ninstead of car and cdr, because it would make programs easier to\nread. Maybe for the first couple hours. But a hacker can learn\nquickly enough that car means the first element of a list and cdr\nmeans the rest. Using first and rest means 50% more typing. And\nthey are also different lengths, meaning that the arguments won't\nline up when they're called, as car and cdr often are, in successive\nlines. I've found that it matters a lot how code lines up on the\npage. I can barely read Lisp code when it is set in a variable-width\nfont, and friends say this is true for other languages too.Brevity is one place where strongly typed languages lose. All other\nthings being equal, no one wants to begin a program with a bunch\nof declarations. Anything that can be implicit, should be.The individual tokens should be short as well. Perl and Common Lisp\noccupy opposite poles on this question. Perl programs can be almost\ncryptically dense, while the names of built-in Common Lisp operators\nare comically long. The designers of Common Lisp probably expected\nusers to have text editors that would type these long names for\nthem. But the cost of a long name is not just the cost of typing\nit. There is also the cost of reading it, and the cost of the space\nit takes up on your screen.4 HackabilityThere is one thing more important than brevity to a hacker: being\nable to do what you want. In the history of programming languages\na surprising amount of effort has gone into preventing programmers\nfrom doing things considered to be improper. This is a dangerously\npresumptuous plan. How can the language designer know what the\nprogrammer is going to need to do? I think language designers would\ndo better to consider their target user to be a genius who will\nneed to do things they never anticipated, rather than a bumbler\nwho needs to be protected from himself. The bumbler will shoot\nhimself in the foot anyway. You may save him from referring to\nvariables in another package, but you can't save him from writing\na badly designed program to solve the wrong problem, and taking\nforever to do it.Good programmers often want to do dangerous and unsavory things.\nBy unsavory I mean things that go behind whatever semantic facade\nthe language is trying to present: getting hold of the internal\nrepresentation of some high-level abstraction, for example. Hackers\nlike to hack, and hacking means getting inside things and second\nguessing the original designer.Let yourself be second guessed. When you make any tool, people use\nit in ways you didn't intend, and this is especially true of a\nhighly articulated tool like a programming language. Many a hacker\nwill want to tweak your semantic model in a way that you never\nimagined. I say, let them; give the programmer access to as much\ninternal stuff as you can without endangering runtime systems like\nthe garbage collector.In Common Lisp I have often wanted to iterate through the fields\nof a struct \u2014 to comb out references to a deleted object, for example,\nor find fields that are uninitialized. I know the structs are just\nvectors underneath. And yet I can't write a general purpose function\nthat I can call on any struct. I can only access the fields by\nname, because that's what a struct is supposed to mean.A hacker may only want to subvert the intended model of things once\nor twice in a big program. But what a difference it makes to be\nable to. And it may be more than a question of just solving a\nproblem. There is a kind of pleasure here too. Hackers share the\nsurgeon's secret pleasure in poking about in gross innards, the\nteenager's secret pleasure in popping zits. [2] For boys, at least,\ncertain kinds of horrors are fascinating. Maxim magazine publishes\nan annual volume of photographs, containing a mix of pin-ups and\ngrisly accidents. They know their audience.Historically, Lisp has been good at letting hackers have their way.\nThe political correctness of Common Lisp is an aberration. Early\nLisps let you get your hands on everything. A good deal of that\nspirit is, fortunately, preserved in macros. What a wonderful thing,\nto be able to make arbitrary transformations on the source code.Classic macros are a real hacker's tool \u2014 simple, powerful, and\ndangerous. It's so easy to understand what they do: you call a\nfunction on the macro's arguments, and whatever it returns gets\ninserted in place of the macro call. Hygienic macros embody the\nopposite principle. They try to protect you from understanding what\nthey're doing. I have never heard hygienic macros explained in one\nsentence. And they are a classic example of the dangers of deciding\nwhat programmers are allowed to want. Hygienic macros are intended\nto protect me from variable capture, among other things, but variable\ncapture is exactly what I want in some macros.A really good language should be both clean and dirty: cleanly\ndesigned, with a small core of well understood and highly orthogonal\noperators, but dirty in the sense that it lets hackers have their\nway with it. C is like this. So were the early Lisps. A real hacker's\nlanguage will always have a slightly raffish character.A good programming language should have features that make the kind\nof people who use the phrase \"software engineering\" shake their\nheads disapprovingly. At the other end of the continuum are languages\nlike Ada and Pascal, models of propriety that are good for teaching\nand not much else.5 Throwaway ProgramsTo be attractive to hackers, a language must be good for writing\nthe kinds of programs they want to write. And that means, perhaps\nsurprisingly, that it has to be good for writing throwaway programs.A throwaway program is a program you write quickly for some limited\ntask: a program to automate some system administration task, or\ngenerate test data for a simulation, or convert data from one format\nto another. The surprising thing about throwaway programs is that,\nlike the \"temporary\" buildings built at so many American universities\nduring World War II, they often don't get thrown away. Many evolve\ninto real programs, with real features and real users.I have a hunch that the best big programs begin life this way,\nrather than being designed big from the start, like the Hoover Dam.\nIt's terrifying to build something big from scratch. When people\ntake on a project that's too big, they become overwhelmed. The\nproject either gets bogged down, or the result is sterile and\nwooden: a shopping mall rather than a real downtown, Brasilia rather\nthan Rome, Ada rather than C.Another way to get a big program is to start with a throwaway\nprogram and keep improving it. This approach is less daunting, and\nthe design of the program benefits from evolution. I think, if one\nlooked, that this would turn out to be the way most big programs\nwere developed. And those that did evolve this way are probably\nstill written in whatever language they were first written in,\nbecause it's rare for a program to be ported, except for political\nreasons. And so, paradoxically, if you want to make a language that\nis used for big systems, you have to make it good for writing\nthrowaway programs, because that's where big systems come from.Perl is a striking example of this idea. It was not only designed\nfor writing throwaway programs, but was pretty much a throwaway\nprogram itself. Perl began life as a collection of utilities for\ngenerating reports, and only evolved into a programming language\nas the throwaway programs people wrote in it grew larger. It was\nnot until Perl 5 (if then) that the language was suitable for\nwriting serious programs, and yet it was already massively popular.What makes a language good for throwaway programs? To start with,\nit must be readily available. A throwaway program is something that\nyou expect to write in an hour. So the language probably must\nalready be installed on the computer you're using. It can't be\nsomething you have to install before you use it. It has to be there.\nC was there because it came with the operating system. Perl was\nthere because it was originally a tool for system administrators,\nand yours had already installed it.Being available means more than being installed, though. An\ninteractive language, with a command-line interface, is more\navailable than one that you have to compile and run separately. A\npopular programming language should be interactive, and start up\nfast.Another thing you want in a throwaway program is brevity. Brevity\nis always attractive to hackers, and never more so than in a program\nthey expect to turn out in an hour.6 LibrariesOf course the ultimate in brevity is to have the program already\nwritten for you, and merely to call it. And this brings us to what\nI think will be an increasingly important feature of programming\nlanguages: library functions. Perl wins because it has large\nlibraries for manipulating strings. This class of library functions\nare especially important for throwaway programs, which are often\noriginally written for converting or extracting data.  Many Perl\nprograms probably begin as just a couple library calls stuck\ntogether.I think a lot of the advances that happen in programming languages\nin the next fifty years will have to do with library functions. I\nthink future programming languages will have libraries that are as\ncarefully designed as the core language. Programming language design\nwill not be about whether to make your language strongly or weakly\ntyped, or object oriented, or functional, or whatever, but about\nhow to design great libraries. The kind of language designers who\nlike to think about how to design type systems may shudder at this.\nIt's almost like writing applications! Too bad. Languages are for\nprogrammers, and libraries are what programmers need.It's hard to design good libraries. It's not simply a matter of\nwriting a lot of code. Once the libraries get too big, it can\nsometimes take longer to find the function you need than to write\nthe code yourself. Libraries need to be designed using a small set\nof orthogonal operators, just like the core language. It ought to\nbe possible for the programmer to guess what library call will do\nwhat he needs.Libraries are one place Common Lisp falls short. There are only\nrudimentary libraries for manipulating strings, and almost none\nfor talking to the operating system. For historical reasons, Common\nLisp tries to pretend that the OS doesn't exist. And because you\ncan't talk to the OS, you're unlikely to be able to write a serious\nprogram using only the built-in operators in Common Lisp. You have\nto use some implementation-specific hacks as well, and in practice\nthese tend not to give you everything you want. Hackers would think\na lot more highly of Lisp if Common Lisp had powerful string\nlibraries and good OS support.7 SyntaxCould a language with Lisp's syntax, or more precisely, lack of\nsyntax, ever become popular? I don't know the answer to this\nquestion. I do think that syntax is not the main reason Lisp isn't\ncurrently popular. Common Lisp has worse problems than unfamiliar\nsyntax. I know several programmers who are comfortable with prefix\nsyntax and yet use Perl by default, because it has powerful string\nlibraries and can talk to the os.There are two possible problems with prefix notation: that it is\nunfamiliar to programmers, and that it is not dense enough. The\nconventional wisdom in the Lisp world is that the first problem is\nthe real one. I'm not so sure. Yes, prefix notation makes ordinary\nprogrammers panic. But I don't think ordinary programmers' opinions\nmatter. Languages become popular or unpopular based on what expert\nhackers think of them, and I think expert hackers might be able to\ndeal with prefix notation. Perl syntax can be pretty incomprehensible,\nbut that has not stood in the way of Perl's popularity. If anything\nit may have helped foster a Perl cult.A more serious problem is the diffuseness of prefix notation. For\nexpert hackers, that really is a problem. No one wants to write\n(aref a x y) when they could write a[x,y].In this particular case there is a way to finesse our way out of\nthe problem. If we treat data structures as if they were functions\non indexes, we could write (a x y) instead, which is even shorter\nthan the Perl form. Similar tricks may shorten other types of\nexpressions.We can get rid of (or make optional) a lot of parentheses by making\nindentation significant. That's how programmers read code anyway:\nwhen indentation says one thing and delimiters say another, we go\nby the indentation. Treating indentation as significant would\neliminate this common source of bugs as well as making programs\nshorter.Sometimes infix syntax is easier to read. This is especially true\nfor math expressions. I've used Lisp my whole programming life and\nI still don't find prefix math expressions natural. And yet it is\nconvenient, especially when you're generating code, to have operators\nthat take any number of arguments. So if we do have infix syntax,\nit should probably be implemented as some kind of read-macro.I don't think we should be religiously opposed to introducing syntax\ninto Lisp, as long as it translates in a well-understood way into\nunderlying s-expressions. There is already a good deal of syntax\nin Lisp. It's not necessarily bad to introduce more, as long as no\none is forced to use it. In Common Lisp, some delimiters are reserved\nfor the language, suggesting that at least some of the designers\nintended to have more syntax in the future.One of the most egregiously unlispy pieces of syntax in Common Lisp\noccurs in format strings; format is a language in its own right,\nand that language is not Lisp. If there were a plan for introducing\nmore syntax into Lisp, format specifiers might be able to be included\nin it. It would be a good thing if macros could generate format\nspecifiers the way they generate any other kind of code.An eminent Lisp hacker told me that his copy of CLTL falls open to\nthe section format. Mine too. This probably indicates room for\nimprovement. It may also mean that programs do a lot of I/O.8 EfficiencyA good language, as everyone knows, should generate fast code. But\nin practice I don't think fast code comes primarily from things\nyou do in the design of the language. As Knuth pointed out long\nago, speed only matters in certain critical bottlenecks.  And as\nmany programmers have observed since, one is very often mistaken\nabout where these bottlenecks are.So, in practice, the way to get fast code is to have a very good\nprofiler, rather than by, say, making the language strongly typed.\nYou don't need to know the type of every argument in every call in\nthe program. You do need to be able to declare the types of arguments\nin the bottlenecks. And even more, you need to be able to find out\nwhere the bottlenecks are.One complaint people have had with Lisp is that it's hard to tell\nwhat's expensive. This might be true. It might also be inevitable,\nif you want to have a very abstract language. And in any case I\nthink good profiling would go a long way toward fixing the problem:\nyou'd soon learn what was expensive.Part of the problem here is social. Language designers like to\nwrite fast compilers. That's how they measure their skill. They\nthink of the profiler as an add-on, at best. But in practice a good\nprofiler may do more to improve the speed of actual programs written\nin the language than a compiler that generates fast code. Here,\nagain, language designers are somewhat out of touch with their\nusers. They do a really good job of solving slightly the wrong\nproblem.It might be a good idea to have an active profiler \u2014 to push\nperformance data to the programmer instead of waiting for him to\ncome asking for it. For example, the editor could display bottlenecks\nin red when the programmer edits the source code. Another approach\nwould be to somehow represent what's happening in running programs.\nThis would be an especially big win in server-based applications,\nwhere you have lots of running programs to look at. An active\nprofiler could show graphically what's happening in memory as a\nprogram's running, or even make sounds that tell what's happening.Sound is a good cue to problems. In one place I worked, we had a\nbig board of dials showing what was happening to our web servers.\nThe hands were moved by little servomotors that made a slight noise\nwhen they turned. I couldn't see the board from my desk, but I\nfound that I could tell immediately, by the sound, when there was\na problem with a server.It might even be possible to write a profiler that would automatically\ndetect inefficient algorithms. I would not be surprised if certain\npatterns of memory access turned out to be sure signs of bad\nalgorithms. If there were a little guy running around inside the\ncomputer executing our programs, he would probably have as long\nand plaintive a tale to tell about his job as a federal government\nemployee. I often have a feeling that I'm sending the processor on\na lot of wild goose chases, but I've never had a good way to look\nat what it's doing.A number of Lisps now compile into byte code, which is then executed\nby an interpreter. This is usually done to make the implementation\neasier to port, but it could be a useful language feature. It might\nbe a good idea to make the byte code an official part of the\nlanguage, and to allow programmers to use inline byte code in\nbottlenecks. Then such optimizations would be portable too.The nature of speed, as perceived by the end-user, may be changing.\nWith the rise of server-based applications, more and more programs\nmay turn out to be i/o-bound. It will be worth making i/o fast.\nThe language can help with straightforward measures like simple,\nfast, formatted output functions, and also with deep structural\nchanges like caching and persistent objects.Users are interested in response time. But another kind of efficiency\nwill be increasingly important: the number of simultaneous users\nyou can support per processor. Many of the interesting applications\nwritten in the near future will be server-based, and the number of\nusers per server is the critical question for anyone hosting such\napplications. In the capital cost of a business offering a server-based\napplication, this is the divisor.For years, efficiency hasn't mattered much in most end-user\napplications. Developers have been able to assume that each user\nwould have an increasingly powerful processor sitting on their\ndesk. And by Parkinson's Law, software has expanded to use the\nresources available. That will change with server-based applications.\nIn that world, the hardware and software will be supplied together.\nFor companies that offer server-based applications, it will make\na very big difference to the bottom line how many users they can\nsupport per server.In some applications, the processor will be the limiting factor,\nand execution speed will be the most important thing to optimize.\nBut often memory will be the limit; the number of simultaneous\nusers will be determined by the amount of memory you need for each\nuser's data. The language can help here too. Good support for\nthreads will enable all the users to share a single heap. It may\nalso help to have persistent objects and/or language level support\nfor lazy loading.9 TimeThe last ingredient a popular language needs is time. No one wants\nto write programs in a language that might go away, as so many\nprogramming languages do. So most hackers will tend to wait until\na language has been around for a couple years before even considering\nusing it.Inventors of wonderful new things are often surprised to discover\nthis, but you need time to get any message through to people. A\nfriend of mine rarely does anything the first time someone asks\nhim. He knows that people sometimes ask for things that they turn\nout not to want. To avoid wasting his time, he waits till the third\nor fourth time he's asked to do something; by then, whoever's asking\nhim may be fairly annoyed, but at least they probably really do\nwant whatever they're asking for.Most people have learned to do a similar sort of filtering on new\nthings they hear about. They don't even start paying attention\nuntil they've heard about something ten times. They're perfectly\njustified: the majority of hot new whatevers do turn out to be a\nwaste of time, and eventually go away. By delaying learning VRML,\nI avoided having to learn it at all.So anyone who invents something new has to expect to keep repeating\ntheir message for years before people will start to get it. We\nwrote what was, as far as I know, the first web-server based\napplication, and it took us years to get it through to people that\nit didn't have to be downloaded. It wasn't that they were stupid.\nThey just had us tuned out.The good news is, simple repetition solves the problem. All you\nhave to do is keep telling your story, and eventually people will\nstart to hear. It's not when people notice you're there that they\npay attention; it's when they notice you're still there.It's just as well that it usually takes a while to gain momentum.\nMost technologies evolve a good deal even after they're first\nlaunched \u2014 programming languages especially. Nothing could be better,\nfor a new techology, than a few years of being used only by a small\nnumber of early adopters. Early adopters are sophisticated and\ndemanding, and quickly flush out whatever flaws remain in your\ntechnology. When you only have a few users you can be in close\ncontact with all of them. And early adopters are forgiving when\nyou improve your system, even if this causes some breakage.There are two ways new technology gets introduced: the organic\ngrowth method, and the big bang method. The organic growth method\nis exemplified by the classic seat-of-the-pants underfunded garage\nstartup. A couple guys, working in obscurity, develop some new\ntechnology. They launch it with no marketing and initially have\nonly a few (fanatically devoted) users. They continue to improve\nthe technology, and meanwhile their user base grows by word of\nmouth. Before they know it, they're big.The other approach, the big bang method, is exemplified by the\nVC-backed, heavily marketed startup. They rush to develop a product,\nlaunch it with great publicity, and immediately (they hope) have\na large user base.Generally, the garage guys envy the big bang guys. The big bang\nguys are smooth and confident and respected by the VCs. They can\nafford the best of everything, and the PR campaign surrounding the\nlaunch has the side effect of making them celebrities. The organic\ngrowth guys, sitting in their garage, feel poor and unloved. And\nyet I think they are often mistaken to feel sorry for themselves.\nOrganic growth seems to yield better technology and richer founders\nthan the big bang method. If you look at the dominant technologies\ntoday, you'll find that most of them grew organically.This pattern doesn't only apply to companies. You see it in sponsored\nresearch too. Multics and Common Lisp were big-bang projects, and\nUnix and MacLisp were organic growth projects.10 Redesign\"The best writing is rewriting,\" wrote E. B. White.  Every good\nwriter knows this, and it's true for software too. The most important\npart of design is redesign. Programming languages, especially,\ndon't get redesigned enough.To write good software you must simultaneously keep two opposing\nideas in your head. You need the young hacker's naive faith in\nhis abilities, and at the same time the veteran's skepticism. You\nhave to be able to think \nhow hard can it be? with one half of\nyour brain while thinking \nit will never work with the other.The trick is to realize that there's no real contradiction here.\nYou want to be optimistic and skeptical about two different things.\nYou have to be optimistic about the possibility of solving the\nproblem, but skeptical about the value of whatever solution you've\ngot so far.People who do good work often think that whatever they're working\non is no good. Others see what they've done and are full of wonder,\nbut the creator is full of worry. This pattern is no coincidence:\nit is the worry that made the work good.If you can keep hope and worry balanced, they will drive a project\nforward the same way your two legs drive a bicycle forward. In the\nfirst phase of the two-cycle innovation engine, you work furiously\non some problem, inspired by your confidence that you'll be able\nto solve it. In the second phase, you look at what you've done in\nthe cold light of morning, and see all its flaws very clearly. But\nas long as your critical spirit doesn't outweigh your hope, you'll\nbe able to look at your admittedly incomplete system, and think,\nhow hard can it be to get the rest of the way?, thereby continuing\nthe cycle.It's tricky to keep the two forces balanced. In young hackers,\noptimism predominates. They produce something, are convinced it's\ngreat, and never improve it. In old hackers, skepticism predominates,\nand they won't even dare to take on ambitious projects.Anything you can do to keep the redesign cycle going is good. Prose\ncan be rewritten over and over until you're happy with it. But\nsoftware, as a rule, doesn't get redesigned enough. Prose has\nreaders, but software has users. If a writer rewrites an essay,\npeople who read the old version are unlikely to complain that their\nthoughts have been broken by some newly introduced incompatibility.Users are a double-edged sword. They can help you improve your\nlanguage, but they can also deter you from improving it. So choose\nyour users carefully, and be slow to grow their number. Having\nusers is like optimization: the wise course is to delay it. Also,\nas a general rule, you can at any given time get away with changing\nmore than you think. Introducing change is like pulling off a\nbandage: the pain is a memory almost as soon as you feel it.Everyone knows that it's not a good idea to have a language designed\nby a committee. Committees yield bad design. But I think the worst\ndanger of committees is that they interfere with redesign. It is\nso much work to introduce changes that no one wants to bother.\nWhatever a committee decides tends to stay that way, even if most\nof the members don't like it.Even a committee of two gets in the way of redesign. This happens\nparticularly in the interfaces between pieces of software written\nby two different people. To change the interface both have to agree\nto change it at once. And so interfaces tend not to change at all,\nwhich is a problem because they tend to be one of the most ad hoc\nparts of any system.One solution here might be to design systems so that interfaces\nare horizontal instead of vertical \u2014 so that modules are always\nvertically stacked strata of abstraction. Then the interface will\ntend to be owned by one of them. The lower of two levels will either\nbe a language in which the upper is written, in which case the\nlower level will own the interface, or it will be a slave, in which\ncase the interface can be dictated by the upper level.11 LispWhat all this implies is that there is hope for a new Lisp.  There\nis hope for any language that gives hackers what they want, including\nLisp. I think we may have made a mistake in thinking that hackers\nare turned off by Lisp's strangeness. This comforting illusion may\nhave prevented us from seeing the real problem with Lisp, or at\nleast Common Lisp, which is that it sucks for doing what hackers\nwant to do. A hacker's language needs powerful libraries and\nsomething to hack. Common Lisp has neither. A hacker's language is\nterse and hackable. Common Lisp is not.The good news is, it's not Lisp that sucks, but Common Lisp. If we\ncan develop a new Lisp that is a real hacker's language, I think\nhackers will use it. They will use whatever language does the job.\nAll we have to do is make sure this new Lisp does some important\njob better than other languages.History offers some encouragement. Over time, successive new\nprogramming languages have taken more and more features from Lisp.\nThere is no longer much left to copy before the language you've\nmade is Lisp. The latest hot language, Python, is a watered-down\nLisp with infix syntax and no macros. A new Lisp would be a natural\nstep in this progression.I sometimes think that it would be a good marketing trick to call\nit an improved version of Python. That sounds hipper than Lisp. To\nmany people, Lisp is a slow AI language with a lot of parentheses.\nFritz Kunze's official biography carefully avoids mentioning the\nL-word.  But my guess is that we shouldn't be afraid to call the\nnew Lisp Lisp. Lisp still has a lot of latent respect among the\nvery best hackers \u2014 the ones who took 6.001 and understood it, for\nexample. And those are the users you need to win.In \"How to Become a Hacker,\" Eric Raymond describes Lisp as something\nlike Latin or Greek \u2014 a language you should learn as an intellectual\nexercise, even though you won't actually use it:\n\n  Lisp is worth learning for the profound enlightenment experience\n  you will have when you finally get it; that experience will make\n  you a better programmer for the rest of your days, even if you\n  never actually use Lisp itself a lot.\n\nIf I didn't know Lisp, reading this would set me asking questions.\nA language that would make me a better programmer, if it means\nanything at all, means a language that would be better for programming.\nAnd that is in fact the implication of what Eric is saying.As long as that idea is still floating around, I think hackers will\nbe receptive enough to a new Lisp, even if it is called Lisp. But\nthis Lisp must be a hacker's language, like the classic Lisps of\nthe 1970s. It must be terse, simple, and hackable. And it must have\npowerful libraries for doing what hackers want to do now.In the matter of libraries I think there is room to beat languages\nlike Perl and Python at their own game. A lot of the new applications\nthat will need to be written in the coming years will be \nserver-based\napplications. There's no reason a new Lisp shouldn't have string\nlibraries as good as Perl, and if this new Lisp also had powerful\nlibraries for server-based applications, it could be very popular.\nReal hackers won't turn up their noses at a new tool that will let\nthem solve hard problems with a few library calls. Remember, hackers\nare lazy.It could be an even bigger win to have core language support for\nserver-based applications. For example, explicit support for programs\nwith multiple users, or data ownership at the level of type tags.Server-based applications also give us the answer to the question\nof what this new Lisp will be used to hack. It would not hurt to\nmake Lisp better as a scripting language for Unix. (It would be\nhard to make it worse.) But I think there are areas where existing\nlanguages would be easier to beat. I think it might be better to\nfollow the model of Tcl, and supply the Lisp together with a complete\nsystem for supporting server-based applications. Lisp is a natural\nfit for server-based applications. Lexical closures provide a way\nto get the effect of subroutines when the ui is just a series of\nweb pages. S-expressions map nicely onto html, and macros are good\nat generating it. There need to be better tools for writing\nserver-based applications, and there needs to be a new Lisp, and\nthe two would work very well together.12 The Dream LanguageBy way of summary, let's try describing the hacker's dream language.\nThe dream language is \nbeautiful, clean, and terse. It has an\ninteractive toplevel that starts up fast. You can write programs\nto solve common problems with very little code.  Nearly all the\ncode in any program you write is code that's specific to your\napplication. Everything else has been done for you.The syntax of the language is brief to a fault. You never have to\ntype an unnecessary character, or even to use the shift key much.Using big abstractions you can write the first version of a program\nvery quickly. Later, when you want to optimize, there's a really\ngood profiler that tells you where to focus your attention. You\ncan make inner loops blindingly fast, even writing inline byte code\nif you need to.There are lots of good examples to learn from, and the language is\nintuitive enough that you can learn how to use it from examples in\na couple minutes. You don't need to look in the manual much. The\nmanual is thin, and has few warnings and qualifications.The language has a small core, and powerful, highly orthogonal\nlibraries that are as carefully designed as the core language. The\nlibraries all work well together; everything in the language fits\ntogether like the parts in a fine camera. Nothing is deprecated,\nor retained for compatibility. The source code of all the libraries\nis readily available. It's easy to talk to the operating system\nand to applications written in other languages.The language is built in layers. The higher-level abstractions are\nbuilt in a very transparent way out of lower-level abstractions,\nwhich you can get hold of if you want.Nothing is hidden from you that doesn't absolutely have to be. The\nlanguage offers abstractions only as a way of saving you work,\nrather than as a way of telling you what to do. In fact, the language\nencourages you to be an equal participant in its design. You can\nchange everything about it, including even its syntax, and anything\nyou write has, as much as possible, the same status as what comes\npredefined.Notes[1]  Macros very close to the modern idea were proposed by Timothy\nHart in 1964, two years after Lisp 1.5 was released. What was\nmissing, initially, were ways to avoid variable capture and multiple\nevaluation; Hart's examples are subject to both.[2]  In When the Air Hits Your Brain, neurosurgeon Frank Vertosick\nrecounts a conversation in which his chief resident, Gary, talks\nabout the difference between surgeons and internists (\"fleas\"):\n\n  Gary and I ordered a large pizza and found an open booth. The\n  chief lit a cigarette. \"Look at those goddamn fleas, jabbering\n  about some disease they'll see once in their lifetimes. That's\n  the trouble with fleas, they only like the bizarre stuff. They\n  hate their bread and butter cases. That's the difference between\n  us and the fucking fleas. See, we love big juicy lumbar disc\n  herniations, but they hate hypertension....\"\n\nIt's hard to think of a lumbar disc herniation as juicy (except\nliterally). And yet I think I know what they mean. I've often had\na juicy bug to track down. Someone who's not a programmer would\nfind it hard to imagine that there could be pleasure in a bug.\nSurely it's better if everything just works. In one way, it is.\nAnd yet there is undeniably a grim satisfaction in hunting down\ncertain sorts of bugs.January 2017People who are powerful but uncharismatic will tend to be disliked.\nTheir power makes them a target for criticism that they don't have\nthe charisma to disarm. That was Hillary Clinton's problem. It also\ntends to be a problem for any CEO who is more of a builder than a\nschmoozer. And yet the builder-type CEO is (like Hillary) probably\nthe best person for the job.I don't think there is any solution to this problem. It's human\nnature. The best we can do is to recognize that it's happening, and\nto understand that being a magnet for criticism is sometimes a sign\nnot that someone is the wrong person for a job, but that they're\nthe right one.May 2001\n\n(I wrote this article to help myself understand exactly\nwhat McCarthy discovered.  You don't need to know this stuff\nto program in Lisp, but it should be helpful to \nanyone who wants to\nunderstand the essence of Lisp \u0097 both in the sense of its\norigins and its semantic core.  The fact that it has such a core\nis one of Lisp's distinguishing features, and the reason why,\nunlike other languages, Lisp has dialects.)In 1960, John \nMcCarthy published a remarkable paper in\nwhich he did for programming something like what Euclid did for\ngeometry. He showed how, given a handful of simple\noperators and a notation for functions, you can\nbuild a whole programming language.\nHe called this language Lisp, for \"List Processing,\"\nbecause one of his key ideas was to use a simple\ndata structure called a list for both\ncode and data.It's worth understanding what McCarthy discovered, not\njust as a landmark in the history of computers, but as\na model for what programming is tending to become in\nour own time.  It seems to me that there have been\ntwo really clean, consistent models of programming so\nfar: the C model and the Lisp model.\nThese two seem points of high ground, with swampy lowlands\nbetween them.  As computers have grown more powerful,\nthe new languages being developed have been moving\nsteadily toward the Lisp model.  A popular recipe\nfor new programming languages in the past 20 years \nhas been to take the C model of computing and add to\nit, piecemeal, parts taken from the Lisp model,\nlike runtime typing and garbage collection.In this article I'm going to try to explain in the\nsimplest possible terms what McCarthy discovered.\nThe point is not just to learn about an interesting\ntheoretical result someone figured out forty years ago,\nbut to show where languages are heading.\nThe unusual thing about Lisp \u0097 in fact, the defining\nquality of Lisp \u0097 is that it can be written in\nitself.  To understand what McCarthy meant by this,\nwe're going to retrace his steps, with his mathematical\nnotation translated into running Common Lisp code.Aaron Swartz created a scraped\nfeed\nof the essays page.May 2006(This essay is derived from a keynote at Xtech.)Could you reproduce Silicon Valley elsewhere, or is there something\nunique about it?It wouldn't be surprising if it were hard to reproduce in other\ncountries, because you couldn't reproduce it in most of the US\neither.  What does it take to make a silicon valley even here?What it takes is the right people.  If you could get the right ten\nthousand people to move from Silicon Valley to Buffalo, Buffalo\nwould become Silicon Valley.  \n[1]That's a striking departure from the past.  Up till a couple decades\nago, geography was destiny for cities.  All great cities were located\non waterways, because cities made money by trade, and water was the\nonly economical way to ship.Now you could make a great city anywhere, if you could get the right\npeople to move there.  So the question of how to make a silicon\nvalley becomes: who are the right people, and how do you get them\nto move?Two TypesI think you only need two kinds of people to create a technology\nhub: rich people and nerds.  They're the limiting reagents in the\nreaction that produces startups, because they're the only ones\npresent when startups get started.  Everyone else will move.Observation bears this out: within the US, towns have become startup\nhubs if and only if they have both rich people and nerds.  Few\nstartups happen in Miami, for example, because although it's full\nof rich people, it has few nerds.  It's not the kind of place nerds\nlike.Whereas Pittsburgh has the opposite problem: plenty of nerds, but\nno rich people.  The top US Computer Science departments are said\nto be MIT, Stanford, Berkeley, and Carnegie-Mellon.  MIT yielded\nRoute 128.  Stanford and Berkeley yielded Silicon Valley.  But\nCarnegie-Mellon?  The record skips at that point.  Lower down the\nlist, the University of Washington yielded a high-tech community\nin Seattle, and the University of Texas at Austin yielded one in\nAustin.  But what happened in Pittsburgh?  And in Ithaca, home of\nCornell, which is also high on the list?I grew up in Pittsburgh and went to college at Cornell, so I can\nanswer for both.  The weather is terrible,  particularly in winter,\nand there's no interesting old city to make up for it, as there is\nin Boston.  Rich people don't want to live in Pittsburgh or Ithaca.\nSo while there are plenty of hackers who could start startups,\nthere's no one to invest in them.Not BureaucratsDo you really need the rich people?  Wouldn't it work to have the\ngovernment invest in the nerds?  No, it would not.  Startup investors\nare a distinct type of rich people.  They tend to have a lot of\nexperience themselves in the technology business.  This (a) helps\nthem pick the right startups, and (b) means they can supply advice\nand connections as well as money.  And the fact that they have a\npersonal stake in the outcome makes them really pay attention.Bureaucrats by their nature are the exact opposite sort of people\nfrom startup investors. The idea of them making startup investments\nis comic.  It would be like mathematicians running Vogue-- or\nperhaps more accurately, Vogue editors running a math journal.\n[2]Though indeed, most things bureaucrats do, they do badly.   We just\ndon't notice usually, because they only have to compete against\nother bureaucrats.  But as startup investors they'd have to compete\nagainst pros with a great deal more experience and motivation.Even corporations that have in-house VC groups generally forbid\nthem to make their own investment decisions.  Most are only allowed\nto invest in deals where some reputable private VC firm is willing\nto act as lead investor.Not BuildingsIf you go to see Silicon Valley, what you'll see are buildings.\nBut it's the people that make it Silicon Valley, not the buildings.\nI read occasionally about attempts to set up \"technology\nparks\" in other places, as if the active ingredient of Silicon\nValley were the office space.  An article about Sophia Antipolis\nbragged that companies there included Cisco, Compaq, IBM, NCR, and\nNortel.  Don't the French realize these aren't startups?Building office buildings for technology companies won't get you a\nsilicon valley, because the key stage in the life of a startup\nhappens before they want that kind of space.  The key stage is when\nthey're three guys operating out of an apartment.  Wherever the\nstartup is when it gets funded, it will stay.  The defining quality\nof Silicon Valley is not that Intel or Apple or Google have offices\nthere, but that they were started there.So if you want to reproduce Silicon Valley, what you need to reproduce\nis those two or three founders sitting around a kitchen table\ndeciding to start a company.  And to reproduce that you need those\npeople.UniversitiesThe exciting thing is, all you need are the people.  If you could\nattract a critical mass of nerds and investors to live somewhere,\nyou could reproduce Silicon Valley.  And both groups are highly\nmobile.  They'll go where life is good.  So what makes a place good\nto them?What nerds like is other nerds.  Smart people will go wherever other\nsmart people are.  And in particular, to great universities.  In\ntheory there could be other ways to attract them, but so far\nuniversities seem to be indispensable.  Within the US, there are\nno technology hubs without first-rate universities-- or at least,\nfirst-rate computer science departments.So if you want to make a silicon valley, you not only need a\nuniversity, but one of the top handful in the world.  It has to be\ngood enough to act as a magnet, drawing the best people from thousands\nof miles away.  And that means it has to stand up to existing magnets\nlike MIT and Stanford.This sounds hard.  Actually it might be easy.  My professor friends,\nwhen they're deciding where they'd like to work, consider one thing\nabove all: the quality of the other faculty.  What attracts professors\nis good colleagues.  So if you managed to recruit, en masse, a\nsignificant number of the best young researchers, you could create\na first-rate university from nothing overnight.  And you could do\nthat for surprisingly little.  If you paid 200 people hiring bonuses\nof $3 million apiece, you could put together a faculty that would\nbear comparison with any in the world.  And from that point the\nchain reaction would be self-sustaining.  So whatever it costs to\nestablish a mediocre university, for an additional half billion or\nso you could have a great one.  \n[3]PersonalityHowever, merely creating a new university would not be enough to\nstart a silicon valley. The university is just the seed.  It has\nto be planted in the right soil, or it won't germinate.  Plant it\nin the wrong place, and you just create Carnegie-Mellon.To spawn startups, your university has to be in a town that has\nattractions other than the university.  It has to be a place where\ninvestors want to live, and students want to stay after they graduate.The two like much the same things, because most startup investors\nare nerds themselves.  So what do nerds look for in a town?  Their\ntastes aren't completely different from other people's, because a\nlot of the towns they like most in the US are also big tourist\ndestinations: San Francisco, Boston, Seattle.   But their tastes\ncan't be quite mainstream either, because they dislike other big\ntourist destinations, like New York, Los Angeles, and Las Vegas.There has been a lot written lately about the \"creative class.\" The\nthesis seems to be that as wealth derives increasingly from ideas,\ncities will prosper only if they attract those who have them.  That\nis certainly true; in fact it was the basis of Amsterdam's prosperity\n400 years ago.A lot of nerd tastes they share with the creative class in general.\nFor example, they like well-preserved old neighborhoods instead of\ncookie-cutter suburbs, and locally-owned shops and restaurants\ninstead of national chains.  Like the rest of the creative class,\nthey want to live somewhere with personality.What exactly is personality?  I think it's the feeling that each\nbuilding is the work of a distinct group of people.  A town with\npersonality is one that doesn't feel mass-produced.  So if you want\nto make a startup hub-- or any town to attract the \"creative class\"--\nyou probably have to ban large development projects.\nWhen a large tract has been developed by a single organization, you\ncan always tell. \n[4]Most towns with personality are old, but they don't have to be.\nOld towns have two advantages: they're denser, because they were\nlaid out before cars, and they're more varied, because they were\nbuilt one building at a time.  You could have both now.  Just have\nbuilding codes that ensure density, and ban large scale developments.A corollary is that you have to keep out the biggest developer of\nall: the government.  A government that asks \"How can we build a\nsilicon valley?\" has probably ensured failure by the way they framed\nthe question.  You don't build a silicon valley; you let one grow.NerdsIf you want to attract nerds, you need more than a town with\npersonality.  You need a town with the right personality.  Nerds\nare a distinct subset of the creative class, with different tastes\nfrom the rest.  You can see this most clearly in New York, which\nattracts a lot of creative people, but few nerds. \n[5]What nerds like is the kind of town where people walk around smiling.\nThis excludes LA, where no one walks at all, and also New York,\nwhere people walk, but not smiling. When I was in grad school in\nBoston, a friend came to visit from New York.  On the subway back\nfrom the airport she asked \"Why is everyone smiling?\"  I looked and\nthey weren't smiling.  They just looked like they were compared to\nthe facial expressions she was used to.If you've lived in New York, you know where these facial expressions\ncome from.  It's the kind of place where your mind may be excited,\nbut your body knows it's having a bad time.  People don't so much\nenjoy living there as endure it for the sake of the excitement.\nAnd if you like certain kinds of excitement, New York is incomparable.\nIt's a hub of glamour, a magnet for all the shorter half-life\nisotopes of style and fame.Nerds don't care about glamour, so to them the appeal of New York\nis a mystery.  People who like New York will pay a fortune for a\nsmall, dark, noisy apartment in order to live in a town where the\ncool people are really cool.  A nerd looks at that deal and sees\nonly: pay a fortune for a small, dark, noisy apartment.Nerds will pay a premium to live in a town where the smart people\nare really smart, but you don't have to pay as much for that.  It's\nsupply and demand: glamour is popular, so you have to pay a lot for\nit.Most nerds like quieter pleasures.  They like cafes instead of\nclubs; used bookshops instead of fashionable clothing shops; hiking\ninstead of dancing; sunlight instead of tall buildings.  A nerd's\nidea of paradise is Berkeley or Boulder.YouthIt's the young nerds who start startups, so it's those specifically\nthe city has to appeal to.  The startup hubs in the US are all\nyoung-feeling towns.  This doesn't mean they have to be new.\nCambridge has the oldest town plan in America, but it feels young\nbecause it's full of students.What you can't have, if you want to create a silicon valley, is a\nlarge, existing population of stodgy people.  It would be a waste\nof time to try to reverse the fortunes of a declining industrial town\nlike Detroit or Philadelphia by trying to encourage startups.  Those\nplaces have too much momentum in the wrong direction.  You're better\noff starting with a blank slate in the form of a small town.  Or\nbetter still, if there's a town young people already flock to, that\none.The Bay Area was a magnet for the young and optimistic for decades\nbefore it was associated with technology.  It was a place people\nwent in search of something new.  And so it became synonymous with\nCalifornia nuttiness.  There's still a lot of that there.  If you\nwanted to start a new fad-- a new way to focus one's \"energy,\" for\nexample, or a new category of things not to eat-- the Bay Area would\nbe the place to do it.  But a place that tolerates oddness in the\nsearch for the new is exactly what you want in a startup hub, because\neconomically that's what startups are.  Most good startup ideas\nseem a little crazy; if they were obviously good ideas, someone\nwould have done them already.(How many people are going to want computers in their houses?\nWhat, another search engine?)That's the connection between technology and liberalism.  Without\nexception the high-tech cities in the US are also the most liberal.\nBut it's not because liberals are smarter that this is so.  It's\nbecause liberal cities tolerate odd ideas, and smart people by\ndefinition have odd ideas.Conversely, a town that gets praised for being \"solid\" or representing\n\"traditional values\" may be a fine place to live, but it's never\ngoing to succeed as a startup hub.  The 2004 presidential election,\nthough a disaster in other respects, conveniently supplied us with\na county-by-county \nmap of such places.  \n[6]To attract the young, a town must have an intact center.  In most\nAmerican cities the center has been abandoned, and the growth, if\nany, is in the suburbs.  Most American cities have been turned\ninside out. But none of the startup hubs has: not San Francisco,\nor Boston, or Seattle.  They all have intact centers.\n[7]\nMy guess is that no city with a dead center could be turned into a\nstartup hub.  Young people don't want to live in the suburbs.Within the US, the two cities I think could most easily be turned\ninto new silicon valleys are Boulder and Portland.  Both have the\nkind of effervescent feel that attracts the young.  They're each\nonly a great university short of becoming a silicon valley, if they\nwanted to.TimeA great university near an attractive town.  Is that all it takes?\nThat was all it took to make the original Silicon Valley.  Silicon\nValley traces its origins to William Shockley, one of the inventors\nof the transistor.  He did the research that won him the Nobel Prize\nat Bell Labs, but when he started his own company in 1956 he moved\nto Palo Alto to do it.   At the time that was an odd thing to do.\nWhy did he?  Because he had grown up there and remembered how nice\nit was.  Now Palo Alto is suburbia, but then it was a charming\ncollege town-- a charming college town with perfect weather and San\nFrancisco only an hour away.The companies that rule Silicon Valley now are all descended in\nvarious ways from Shockley Semiconductor.  Shockley was a difficult\nman, and in 1957 his top people-- \"the traitorous eight\"-- left to\nstart a new company, Fairchild Semiconductor.  Among them were\nGordon Moore and Robert Noyce, who went on to found Intel, and\nEugene Kleiner, who founded the VC firm Kleiner Perkins.  Forty-two\nyears later, Kleiner Perkins funded Google, and the partner responsible\nfor the deal was John Doerr, who came to Silicon Valley in 1974 to\nwork for Intel.So although a lot of the newest companies in Silicon Valley don't\nmake anything out of silicon, there always seem to be multiple links\nback to Shockley.  There's a lesson here: startups beget startups.\nPeople who work for startups start their own.  People who get rich\nfrom startups fund new ones.  I suspect this kind of organic growth\nis the only way to produce a startup hub, because it's the only way\nto grow the expertise you need.That has two important implications.  The first is that you need\ntime to grow a silicon valley.  The university you could create in\na couple years, but the startup community around it has to grow\norganically.   The cycle time is limited by the time it takes a\ncompany to succeed, which probably averages about five years.The other implication of the organic growth hypothesis is that you\ncan't be somewhat of a startup hub.  You either have a self-sustaining\nchain reaction, or not.  Observation confirms this too: cities\neither have a startup scene, or they don't.  There is no middle\nground.  Chicago has the third largest metropolitan area in America.\nAs source of startups it's negligible compared to Seattle, number 15.The good news is that the initial seed can be quite small.  Shockley\nSemiconductor, though itself not very successful, was big enough.\nIt brought a critical mass of experts in an important new technology\ntogether in a place they liked enough to stay.CompetingOf course, a would-be silicon valley faces an obstacle the original\none didn't: it has to compete with Silicon Valley.  Can that be\ndone?  Probably.One of Silicon Valley's biggest advantages is its venture capital\nfirms.  This was not a factor in Shockley's day, because VC funds\ndidn't exist.  In fact, Shockley Semiconductor and Fairchild\nSemiconductor were not startups at all in our sense.  They were\nsubsidiaries-- of Beckman Instruments and Fairchild Camera and\nInstrument respectively.  Those companies were apparently willing\nto establish subsidiaries wherever the experts wanted to live.Venture investors, however, prefer to fund startups within an hour's\ndrive.  For one, they're more likely to notice startups nearby.\nBut when they do notice startups in other towns they prefer them\nto move.  They don't want to have to travel to attend board meetings,\nand in any case the odds of succeeding are higher in a startup hub.The centralizing effect of venture firms is a double one: they cause\nstartups to form around them, and those draw in more startups through\nacquisitions.  And although the first may be weakening because it's\nnow so cheap to start some startups, the second seems as strong as ever.\nThree of the most admired\n\"Web 2.0\" companies were started outside the usual startup hubs,\nbut two of them have already been reeled in through acquisitions.Such centralizing forces make it harder for new silicon valleys to\nget started.  But by no means impossible.  Ultimately power rests\nwith the founders.  A startup with the best people will beat one\nwith funding from famous VCs, and a startup that was sufficiently\nsuccessful would never have to move.  So a town that\ncould exert enough pull over the right people could resist and\nperhaps even surpass Silicon Valley.For all its power, Silicon Valley has a great weakness: the paradise\nShockley found in 1956 is now one giant parking lot.  San Francisco\nand Berkeley are great, but they're forty miles away.  Silicon\nValley proper is soul-crushing suburban sprawl.  It\nhas fabulous weather, which makes it significantly better than the\nsoul-crushing sprawl of most other American cities.  But a competitor\nthat managed to avoid sprawl would have real leverage.  All a city\nneeds is to be the kind of place the next traitorous eight look at\nand say \"I want to stay here,\" and that would be enough to get the\nchain reaction started.Notes[1]\nIt's interesting to consider how low this number could be\nmade.  I suspect five hundred would be enough, even if they could\nbring no assets with them.  Probably just thirty, if I could pick them, \nwould be enough to turn Buffalo into a significant startup hub.[2]\nBureaucrats manage to allocate research funding moderately\nwell, but only because (like an in-house VC fund) they outsource\nmost of the work of selection.  A professor at a famous university\nwho is highly regarded by his peers will get funding, pretty much\nregardless of the proposal.  That wouldn't work for startups, whose\nfounders aren't sponsored by organizations, and are often unknowns.[3]\nYou'd have to do it all at once, or at least a whole department\nat a time, because people would be more likely to come if they\nknew their friends were.  And you should probably start from scratch,\nrather than trying to upgrade an existing university, or much energy\nwould be lost in friction.[4]\nHypothesis: Any plan in which multiple independent buildings\nare gutted or demolished to be \"redeveloped\" as a single project\nis a net loss of personality for the city, with the exception of\nthe conversion of buildings not previously public, like warehouses.[5]\nA few startups get started in New York, but less\nthan a tenth as many per capita as in Boston, and mostly\nin less nerdy fields like finance and media.[6]\nSome blue counties are false positives (reflecting the\nremaining power of Democractic party machines), but there are no\nfalse negatives.  You can safely write off all the red counties.[7]\nSome \"urban renewal\" experts took a shot at destroying Boston's\nin the 1960s, leaving the area around city hall a bleak wasteland,\nbut most neighborhoods successfully resisted them.Thanks to Chris Anderson, Trevor Blackwell, Marc Hedlund,\nJessica Livingston, Robert Morris, Greg Mcadoo, Fred Wilson,\nand Stephen Wolfram for\nreading drafts of this, and to Ed Dumbill for inviting me to speak.(The second part of this talk became Why Startups\nCondense in America.)April 2006(This essay is derived from a talk at the 2006 \nStartup School.)The startups we've funded so far are pretty quick, but they seem\nquicker to learn some lessons than others.  I think it's because\nsome things about startups are kind of counterintuitive.We've now \ninvested \nin enough companies that I've learned a trick\nfor determining which points are the counterintuitive ones:\nthey're the ones I have to keep repeating.So I'm going to number these points, and maybe with future startups\nI'll be able to pull off a form of Huffman coding. I'll make them\nall read this, and then instead of nagging them in detail, I'll\njust be able to say: number four!\n1. Release Early.The thing I probably repeat most is this recipe for a startup: get\na version 1 out fast, then improve it based on users' reactions.By \"release early\" I don't mean you should release something full\nof bugs, but that you should release something minimal.  Users hate\nbugs, but they don't seem to mind a minimal version 1, if there's\nmore coming soon.There are several reasons it pays to get version 1 done fast.  One\nis that this is simply the right way to write software, whether for\na startup or not.  I've been repeating that since 1993, and I haven't seen much since to\ncontradict it.  I've seen a lot of startups die because they were\ntoo slow to release stuff, and none because they were too quick.\n[1]One of the things that will surprise you if you build something\npopular is that you won't know your users.  Reddit now has almost half a million\nunique visitors a month.  Who are all those people?  They have no\nidea.  No web startup does.  And since you don't know your users,\nit's dangerous to guess what they'll like.  Better to release\nsomething and let them tell you.Wufoo took this to heart and released\ntheir form-builder before the underlying database.  You can't even\ndrive the thing yet, but 83,000 people came to sit in the driver's\nseat and hold the steering wheel.  And Wufoo got valuable feedback\nfrom it: Linux users complained they used too much Flash, so they\nrewrote their software not to.  If they'd waited to release everything\nat once, they wouldn't have discovered this problem till it was\nmore deeply wired in.Even if you had no users, it would still be important to release\nquickly, because for a startup the initial release acts as a shakedown\ncruise.  If anything major is broken-- if the idea's no good,\nfor example, or the founders hate one another-- the stress of getting\nthat first version out will expose it.  And if you have such problems\nyou want to find them early.Perhaps the most important reason to release early, though, is that\nit makes you work harder.  When you're working on something that\nisn't released, problems are intriguing.  In something that's out\nthere, problems are alarming.  There is a lot more urgency once you\nrelease.  And I think that's precisely why people put it off.  They\nknow they'll have to work a lot harder once they do. \n[2]\n2. Keep Pumping Out Features.Of course, \"release early\" has a second component, without which\nit would be bad advice.  If you're going to start with something\nthat doesn't do much, you better improve it fast.What I find myself repeating is \"pump out features.\"  And this rule\nisn't just for the initial stages.  This is something all startups\nshould do for as long as they want to be considered startups.I don't mean, of course, that you should make your application ever\nmore complex.  By \"feature\" I mean one unit of hacking-- one quantum\nof making users' lives better.As with exercise, improvements beget improvements.  If you run every\nday, you'll probably feel like running tomorrow.  But if you skip\nrunning for a couple weeks, it will be an effort to drag yourself\nout.  So it is with hacking: the more ideas you implement, the more\nideas you'll have.  You should make your system better at least in\nsome small way every day or two.This is not just a good way to get development done; it is also a\nform of marketing.  Users love a site that's constantly improving.\nIn fact, users expect a site to improve.  Imagine if you visited a\nsite that seemed very good, and then returned two months later and\nnot one thing had changed.  Wouldn't it start to seem lame? \n[3]They'll like you even better when you improve in response to their\ncomments, because customers are used to companies ignoring them.\nIf you're the rare exception-- a company that actually listens--\nyou'll generate fanatical loyalty.  You won't need to advertise,\nbecause your users will do it for you.This seems obvious too, so why do I have to keep repeating it?  I\nthink the problem here is that people get used to how things are.\nOnce a product gets past the stage where it has glaring flaws, you\nstart to get used to it, and gradually whatever features it happens\nto have become its identity.  For example, I doubt many people at\nYahoo (or Google for that matter) realized how much better web mail\ncould be till Paul Buchheit showed them.I think the solution is to assume that anything you've made is far\nshort of what it could be.  Force yourself, as a sort of intellectual\nexercise, to keep thinking of improvements.  Ok, sure, what you\nhave is perfect.  But if you had to change something, what would\nit be?If your product seems finished, there are two possible explanations:\n(a) it is finished, or (b) you lack imagination.  Experience suggests\n(b) is a thousand times more likely.\n3. Make Users Happy.Improving constantly is an instance of a more general rule: make\nusers happy.  One thing all startups have in common is that they\ncan't force anyone to do anything.  They can't force anyone to use\ntheir software, and they can't force anyone to do deals with them.\nA startup has to sing for its supper.  That's why the successful\nones make great things.  They have to, or die.When you're running a startup you feel like a little bit of debris\nblown about by powerful winds.  The most powerful wind is users.\nThey can either catch you and loft you up into the sky, as they did\nwith Google, or leave you flat on the pavement, as they do with\nmost startups.  Users are a fickle wind, but more powerful than any\nother.  If they take you up, no competitor can keep you down.As a little piece of debris, the rational thing for you to do is\nnot to lie flat, but to curl yourself into a shape the wind will\ncatch.I like the wind metaphor because it reminds you how impersonal the\nstream of traffic is.  The vast majority of people who visit your\nsite will be casual visitors.  It's them you have to design your\nsite for.  The people who really care will find what they want by\nthemselves.The median visitor will arrive with their finger poised on the Back\nbutton.  Think about your own experience: most links you\nfollow lead to something lame.  Anyone who has used the web for\nmore than a couple weeks has been trained to click on Back after\nfollowing a link.  So your site has to say \"Wait!  Don't click on\nBack.  This site isn't lame.  Look at this, for example.\"There are two things you have to do to make people pause.  The most\nimportant is to explain, as concisely as possible, what the hell\nyour site is about.  How often have you visited a site that seemed\nto assume you already knew what they did?  For example, the corporate\nsite that says the\ncompany makes\n\n  enterprise content management solutions for business that enable\n  organizations to unify people, content and processes to minimize\n  business risk, accelerate time-to-value and sustain lower total\n  cost of ownership.\n\nAn established company may get away with such an opaque description,\nbut no startup can.  A startup\nshould be able to explain in one or two sentences exactly what it\ndoes. \n[4]\nAnd not just to users.  You need this for everyone:\ninvestors, acquirers, partners, reporters, potential employees, and\neven current employees.  You probably shouldn't even start a company\nto do something that can't be described compellingly in one or two\nsentences.The other thing I repeat is to give people everything you've got,\nright away.  If you have something impressive, try to put it on the\nfront page, because that's the only one most visitors will see.\nThough indeed there's a paradox here: the more you push the good\nstuff toward the front, the more likely visitors are to explore\nfurther. \n[5]In the best case these two suggestions get combined: you tell\nvisitors what your site is about by showing them.  One of the\nstandard pieces of advice in fiction writing is \"show, don't tell.\"\nDon't say that a character's angry; have him grind his teeth, or\nbreak his pencil in half.  Nothing will explain what your site does\nso well as using it.The industry term here is \"conversion.\"  The job of your site is\nto convert casual visitors into users-- whatever your definition\nof a user is.  You can measure this in your growth rate.  Either\nyour site is catching on, or it isn't, and you must know which.  If\nyou have decent growth, you'll win in the end, no matter how obscure\nyou are now.  And if you don't, you need to fix something.\n4. Fear the Right Things.Another thing I find myself saying a lot is \"don't worry.\"  Actually,\nit's more often \"don't worry about this; worry about that instead.\"\nStartups are right to be paranoid, but they sometimes fear the wrong\nthings.Most visible disasters are not so alarming as they seem.  Disasters\nare normal in a startup: a founder quits, you discover a patent\nthat covers what you're doing, your servers keep crashing, you run\ninto an insoluble technical problem, you have to change your name,\na deal falls through-- these are all par for the course.  They won't\nkill you unless you let them.Nor will most competitors.  A lot of startups worry \"what if Google\nbuilds something like us?\"  Actually big companies are not the ones\nyou have to worry about-- not even Google.  The people at Google\nare smart, but no smarter than you; they're not as motivated, because\nGoogle is not going to go out of business if this one product fails;\nand even at Google they have a lot of bureaucracy to slow them down.What you should fear, as a startup, is not the established players,\nbut other startups you don't know exist yet.  They're way more\ndangerous than Google because, like you, they're cornered animals.Looking just at existing competitors can give you a false sense of\nsecurity.  You should compete against what someone else could be\ndoing, not just what you can see people doing.  A corollary is that\nyou shouldn't relax just because you have no visible competitors\nyet.  No matter what your idea, there's someone else out there\nworking on the same thing.That's the downside of it being easier to start a startup: more people\nare doing it.  But I disagree with Caterina Fake when she says that\nmakes this a bad time to start a startup.  More people are starting\nstartups, but not as many more as could.  Most college graduates\nstill think they have to get a job.  The average person can't ignore\nsomething that's been beaten into their head since they were three\njust because serving web pages recently got a lot cheaper.And in any case, competitors are not the biggest threat.  Way more\nstartups hose themselves than get crushed by competitors.  There\nare a lot of ways to do it, but the three main ones are internal\ndisputes, inertia, and ignoring users.  Each is, by itself, enough\nto kill you.  But if I had to pick the worst, it would be ignoring\nusers.  If you want a recipe for a startup that's going to die,\nhere it is: a couple of founders who have some great idea they know\neveryone is going to love, and that's what they're going to build,\nno matter what.Almost everyone's initial plan is broken.  If companies stuck to\ntheir initial plans, Microsoft would be selling programming languages,\nand Apple would be selling printed circuit boards.  In both cases\ntheir customers told them what their business should be-- and they\nwere smart enough to listen.As Richard Feynman said, the imagination of nature is greater than\nthe imagination of man.  You'll find more interesting things by\nlooking at the world than you could ever produce just by thinking.\nThis principle is very powerful.  It's why the best abstract painting\nstill falls short of Leonardo, for example.  And it applies to\nstartups too.  No idea for a product could ever be so clever as the\nones you can discover by smashing a beam of prototypes into a beam\nof users.\n5. Commitment Is a Self-Fulfilling Prophecy.I now have enough experience with startups to be able to say what\nthe most important quality is in a startup founder, and it's not\nwhat you might think.  The most important quality in a startup\nfounder is determination.  Not intelligence-- determination.This is a little depressing.  I'd like to believe Viaweb succeeded\nbecause we were smart, not merely determined.  A lot of people in\nthe startup world want to believe that.  Not just founders, but\ninvestors too.  They like the idea of inhabiting a world ruled by\nintelligence.  And you can tell they really believe this, because\nit affects their investment decisions.Time after time VCs invest in startups founded by eminent professors.\nThis may work in biotech, where a lot of startups simply commercialize\nexisting research, but in software you want to invest in students,\nnot professors.  Microsoft, Yahoo, and Google were all founded by\npeople who dropped out of school to do it.  What students lack in\nexperience they more than make up in dedication.Of course, if you want to get rich, it's not enough merely to be\ndetermined.  You have to be smart too, right?  I'd like to think\nso, but I've had an experience that convinced me otherwise: I spent\nseveral years living in New York.You can lose quite a lot in the brains department and it won't kill\nyou.  But lose even a little bit in the commitment department, and\nthat will kill you very rapidly.Running a startup is like walking on your hands: it's possible, but\nit requires extraordinary effort.  If an ordinary employee were\nasked to do the things a startup founder has to, he'd be very\nindignant.  Imagine if you were hired at some big company, and in\naddition to writing software ten times faster than you'd ever had\nto before, they expected you to answer support calls, administer\nthe servers, design the web site, cold-call customers, find the\ncompany office space, and go out and get everyone lunch.And to do all this not in the calm, womb-like atmosphere of a big\ncompany, but against a backdrop of constant disasters.  That's the\npart that really demands determination.  In a startup, there's\nalways some disaster happening.  So if you're the least bit inclined\nto find an excuse to quit, there's always one right there.But if you lack commitment, chances are it will have been hurting\nyou long before you actually quit.  Everyone who deals with startups\nknows how important commitment is, so if they sense you're ambivalent,\nthey won't give you much attention.  If you lack commitment, you'll\njust find that for some mysterious reason good things happen to\nyour competitors but not to you.  If you lack commitment, it will\nseem to you that you're unlucky.Whereas if you're determined to stick around, people will pay\nattention to you, because odds are they'll have to deal with you\nlater.  You're a local, not just a tourist, so everyone has to come\nto terms with you.At Y Combinator we sometimes mistakenly fund teams who have the\nattitude that they're going to give this startup thing a shot for\nthree months, and if something great happens, they'll stick with\nit-- \"something great\" meaning either that someone wants to buy\nthem or invest millions of dollars in them.  But if this is your\nattitude, \"something great\" is very unlikely to happen to you,\nbecause both acquirers and investors judge you by your level of\ncommitment.If an acquirer thinks you're going to stick around no matter what,\nthey'll be more likely to buy you, because if they don't and you\nstick around, you'll probably grow, your price will go up, and\nthey'll be left wishing they'd bought you earlier.  Ditto for\ninvestors.  What really motivates investors, even big VCs, is not\nthe hope of good returns, but the fear of missing out. \n[6]\nSo if\nyou make it clear you're going to succeed no matter what, and the only\nreason you need them is to make it happen a little faster, you're\nmuch more likely to get money.You can't fake this.  The only way to convince everyone that you're\nready to fight to the death is actually to be ready to.You have to be the right kind of determined, though.  I carefully\nchose the word determined rather than stubborn, because stubbornness\nis a disastrous quality in a startup.  You have to be determined,\nbut flexible, like a running back.  A successful running back doesn't\njust put his head down and try to run through people.  He improvises:\nif someone appears in front of him, he runs around them; if someone\ntries to grab him, he spins out of their grip; he'll even run in\nthe wrong direction briefly if that will help.  The one thing he'll\nnever do is stand still. \n[7]\n6. There Is Always Room.I was talking recently to a startup founder about whether it might\nbe good to add a social component to their software.  He said he\ndidn't think so, because the whole social thing was tapped out.\nReally?  So in a hundred years the only social networking sites\nwill be the Facebook, MySpace, Flickr, and Del.icio.us?  Not likely.There is always room for new stuff.  At every point in history,\neven the darkest bits of the dark ages, people were discovering\nthings that made everyone say \"why didn't anyone think of that\nbefore?\"  We know this continued to be true up till 2004, when the\nFacebook was founded-- though strictly speaking someone else did\nthink of that.The reason we don't see the opportunities all around us is that we\nadjust to however things are, and assume that's how things have to\nbe.  For example, it would seem crazy to most people to try to make\na better search engine than Google.  Surely that field, at least,\nis tapped out.  Really?  In a hundred years-- or even twenty-- are\npeople still going to search for information using something like\nthe current Google?  Even Google probably doesn't think that.In particular, I don't think there's any limit to the number of\nstartups.  Sometimes you hear people saying \"All these guys starting\nstartups now are going to be disappointed. How many little startups\nare Google and Yahoo going to buy, after all?\" That sounds cleverly\nskeptical, but I can prove it's mistaken.  No one proposes that\nthere's some limit to the number of people who can be employed in\nan economy consisting of big, slow-moving companies with a couple\nthousand people each.  Why should there be any limit to the number\nwho could be employed by small, fast-moving companies with ten each?\nIt seems to me the only limit would be the number of people who\nwant to work that hard.The limit on the number of startups is not the number that can get\nacquired by Google and Yahoo-- though it seems even that should\nbe unlimited, if the startups were actually worth buying-- but the\namount of wealth that can be created.  And I don't think there's\nany limit on that, except cosmological ones.So for all practical purposes, there is no limit to the number of\nstartups.  Startups make wealth, which means they make things people\nwant, and if there's a limit on the number of things people want,\nwe are nowhere near it.  I still don't even have a flying car.\n7. Don't Get Your Hopes Up.This is another one I've been repeating since long before Y Combinator.\nIt was practically the corporate motto at Viaweb.Startup founders are naturally optimistic.  They wouldn't do it\notherwise.  But you should treat your optimism the way you'd treat\nthe core of a nuclear reactor: as a source of power that's also\nvery dangerous.  You have to build a shield around it, or it will\nfry you.The shielding of a reactor is not uniform; the reactor would be\nuseless if it were.  It's pierced in a few places to let pipes in.\nAn optimism shield has to be pierced too.  I think the place to\ndraw the line is between what you expect of yourself, and what you\nexpect of other people.  It's ok to be optimistic about what you\ncan do, but assume the worst about machines and other people.This is particularly necessary in a startup, because you tend to\nbe pushing the limits of whatever you're doing.  So things don't\nhappen in the smooth, predictable way they do in the rest of the\nworld.  Things change suddenly, and usually for the worse.Shielding your optimism is nowhere more important than with deals.\nIf your startup is doing a deal, just assume it's not going to\nhappen.  The VCs who say they're going to invest in you aren't.\nThe company that says they're going to buy you isn't.  The big\ncustomer who wants to use your system in their whole company won't.\nThen if things work out you can be pleasantly surprised.The reason I warn startups not to get their hopes up is not to save\nthem from being disappointed when things fall through.  It's\nfor a more practical reason: to prevent them from leaning their\ncompany against something that's going to fall over, taking them\nwith it.For example, if someone says they want to invest in you, there's a\nnatural tendency to stop looking for other investors.  That's why\npeople proposing deals seem so positive: they want you to\nstop looking.  And you want to stop too, because doing deals is a\npain.  Raising money, in particular, is a huge time sink.  So you\nhave to consciously force yourself to keep looking.Even if you ultimately do the first deal, it will be to your advantage\nto have kept looking, because you'll get better terms.  Deals are\ndynamic; unless you're negotiating with someone unusually honest,\nthere's not a single point where you shake hands and the deal's\ndone. There are usually a lot of subsidiary questions to be cleared\nup after the handshake, and if the other side senses weakness-- if\nthey sense you need this deal-- they will be very tempted to screw\nyou in the details.VCs and corp dev guys are professional negotiators.  They're trained\nto take advantage of weakness. \n[8]\nSo while they're often nice\nguys, they just can't help it.  And as pros they do this more than\nyou.  So don't even try to bluff them.  The only way a startup can\nhave any leverage in a deal is genuinely not to need it.  And if\nyou don't believe in a deal, you'll be less likely to depend on it.So I want to plant a hypnotic suggestion in your heads: when you\nhear someone say the words \"we want to invest in you\" or \"we want\nto acquire you,\" I want the following phrase to appear automatically\nin your head: don't get your hopes up.  Just continue running\nyour company as if this deal didn't exist.  Nothing is more likely\nto make it close.The way to succeed in a startup is to focus on the goal of getting\nlots of users, and keep walking swiftly toward it while investors\nand acquirers scurry alongside trying to wave money in your face.\nSpeed, not MoneyThe way I've described it, starting a startup sounds pretty stressful.\nIt is.  When I talk to the founders of the companies we've funded,\nthey all say the same thing: I knew it would be hard, but I didn't\nrealize it would be this hard.So why do it?  It would be worth enduring a lot of pain and stress\nto do something grand or heroic, but just to make money?  Is making\nmoney really that important?No, not really.  It seems ridiculous to me when people take business\ntoo seriously.  I regard making money as a boring errand to be got\nout of the way as soon as possible.  There is nothing grand or\nheroic about starting a startup per se.So why do I spend so much time thinking about startups?  I'll tell\nyou why.  Economically, a startup is best seen not as a way to get\nrich, but as a way to work faster.  You have to make a living, and\na startup is a way to get that done quickly, instead of letting it\ndrag on through your whole life.\n[9]We take it for granted most of the time, but human life is fairly\nmiraculous.  It is also palpably short.  You're given this marvellous\nthing, and then poof, it's taken away.  You can see why people\ninvent gods to explain it.  But even to people who don't believe\nin gods, life commands respect.  There are times in most of our\nlives when the days go by in a blur, and almost everyone has a\nsense, when this happens, of wasting something precious.  As Ben\nFranklin said, if you love life, don't waste time, because time is\nwhat life is made of.So no, there's nothing particularly grand about making money.  That's\nnot what makes startups worth the trouble.  What's important about\nstartups is the speed.  By compressing the dull but necessary task\nof making a living into the smallest possible time, you show respect\nfor life, and there is something grand about that.Notes[1]\nStartups can die from releasing something full of bugs, and not\nfixing them fast enough, but I don't know of any that died from\nreleasing something stable but minimal very early, then promptly\nimproving it.[2]\nI know this is why I haven't released Arc.  The moment I do,\nI'll have people nagging me for features.[3]\nA web site is different from a book or movie or desktop application\nin this respect.  Users judge a site not as a single snapshot, but\nas an animation with multiple frames.  Of the two, I'd say the rate of\nimprovement is more important to users than where you currently\nare.[4]\nIt should not always tell this to users, however.  For example,\nMySpace is basically a replacement mall for mallrats.  But it was\nwiser for them, initially, to pretend that the site was about bands.[5]\nSimilarly, don't make users register to try your site.  Maybe\nwhat you have is so valuable that visitors should gladly register\nto get at it.  But they've been trained to expect the opposite.\nMost of the things they've tried on the web have sucked-- and\nprobably especially those that made them register.[6]\nVCs have rational reasons for behaving this way. They don't\nmake their money (if they make money) off their median investments.\nIn a typical fund, half the companies fail, most of the rest generate\nmediocre returns, and one or two \"make the fund\" by succeeding\nspectacularly.  So if they miss just a few of the most promising\nopportunities, it could hose the whole fund.[7]\nThe attitude of a running back doesn't translate to soccer.\nThough it looks great when a forward dribbles past multiple defenders,\na player who persists in trying such things will do worse in the\nlong term than one who passes.[8]\nThe reason Y Combinator never negotiates valuations\nis that we're not professional negotiators, and don't want to turn\ninto them.[9]\nThere are two ways to do \nwork you love: (a) to make money, then work\non what you love, or (b) to get a job where you get paid to work on\nstuff you love.  In practice the first phases of both\nconsist mostly of unedifying schleps, and in (b) the second phase is less\nsecure.Thanks to Sam Altman, Trevor Blackwell, Beau Hartshorne, Jessica \nLivingston, and Robert Morris for reading drafts of this.April 2005\"Suits make a corporate comeback,\" says the New\nYork Times.  Why does this sound familiar?  Maybe because\nthe suit was also back in February,\n\nSeptember\n2004, June\n2004, March\n2004, September\n2003, \n\nNovember\n2002, \nApril 2002,\nand February\n2002.\n\nWhy do the media keep running stories saying suits are back?  Because\nPR firms tell \nthem to.  One of the most surprising things I discovered\nduring my brief business career was the existence of the PR industry,\nlurking like a huge, quiet submarine beneath the news.  Of the\nstories you read in traditional media that aren't about politics,\ncrimes, or disasters, more than half probably come from PR firms.I know because I spent years hunting such \"press hits.\"  Our startup spent\nits entire marketing budget on PR: at a time when we were assembling\nour own computers to save money, we were paying a PR firm $16,000\na month.  And they were worth it.  PR is the news equivalent of\nsearch engine optimization; instead of buying ads, which readers\nignore, you get yourself inserted directly into the stories.  [1]Our PR firm\nwas one of the best in the business.  In 18 months, they got press\nhits in over 60 different publications.  \nAnd we weren't the only ones they did great things for.  \nIn 1997 I got a call from another\nstartup founder considering hiring them to promote his company.  I\ntold him they were PR gods, worth every penny of their outrageous   \nfees.  But I remember thinking his company's name was odd.\nWhy call an auction site \"eBay\"?\nSymbiosisPR is not dishonest.  Not quite.  In fact, the reason the best PR\nfirms are so effective is precisely that they aren't dishonest.\nThey give reporters genuinely valuable information.  A good PR firm\nwon't bug reporters just because the client tells them to; they've\nworked hard to build their credibility with reporters, and they\ndon't want to destroy it by feeding them mere propaganda.If anyone is dishonest, it's the reporters.  The main reason PR  \nfirms exist is that reporters are lazy.  Or, to put it more nicely,\noverworked.  Really they ought to be out there digging up stories\nfor themselves.  But it's so tempting to sit in their offices and\nlet PR firms bring the stories to them.  After all, they know good\nPR firms won't lie to them.A good flatterer doesn't lie, but tells his victim selective truths\n(what a nice color your eyes are). Good PR firms use the same\nstrategy: they give reporters stories that are true, but whose truth\nfavors their clients.For example, our PR firm often pitched stories about how the Web  \nlet small merchants compete with big ones.  This was perfectly true.\nBut the reason reporters ended up writing stories about this\nparticular truth, rather than some other one, was that small merchants\nwere our target market, and we were paying the piper.Different publications vary greatly in their reliance on PR firms.\nAt the bottom of the heap are the trade press, who make most of\ntheir money from advertising and would give the magazines away for\nfree if advertisers would let them.  [2] The average\ntrade publication is a  bunch of ads, glued together by just enough\narticles to make it look like a magazine.  They're so desperate for\n\"content\" that some will print your press releases almost verbatim,\nif you take the trouble to write them to read like articles.At the other extreme are publications like the New York Times\nand the Wall Street Journal.  Their reporters do go out and\nfind their own stories, at least some of the time.  They'll listen \nto PR firms, but briefly and skeptically.  We managed to get press   \nhits in almost every publication we wanted, but we never managed \nto crack the print edition of the Times.  [3]The weak point of the top reporters is not laziness, but vanity.\nYou don't pitch stories to them.  You have to approach them as if\nyou were a specimen under their all-seeing microscope, and make it\nseem as if the story you want them to run is something they thought \nof themselves.Our greatest PR coup was a two-part one.  We estimated, based on\nsome fairly informal math, that there were about 5000 stores on the\nWeb.  We got one paper to print this number, which seemed neutral   \nenough.  But once this \"fact\" was out there in print, we could quote\nit to other publications, and claim that with 1000 users we had 20%\nof the online store market.This was roughly true.  We really did have the biggest share of the\nonline store market, and 5000 was our best guess at its size.  But\nthe way the story appeared in the press sounded a lot more definite.Reporters like definitive statements.  For example, many of the\nstories about Jeremy Jaynes's conviction say that he was one of the\n10 worst spammers.  This \"fact\" originated in Spamhaus's ROKSO list,\nwhich I think even Spamhaus would admit is a rough guess at the top\nspammers.  The first stories about Jaynes cited this source, but\nnow it's simply repeated as if it were part of the indictment.   \n[4]All you can say with certainty about Jaynes is that he was a fairly\nbig spammer.  But reporters don't want to print vague stuff like\n\"fairly big.\"  They want statements with punch, like \"top ten.\" And\nPR firms give them what they want.\nWearing suits, we're told, will make us \n3.6\npercent more productive.BuzzWhere the work of PR firms really does get deliberately misleading is in\nthe generation of \"buzz.\"  They usually feed the same story to    \nseveral different publications at once.  And when readers see similar\nstories in multiple places, they think there is some important trend\nafoot.  Which is exactly what they're supposed to think.When Windows 95 was launched, people waited outside stores\nat midnight to buy the first copies.  None of them would have been\nthere without PR firms, who generated such a buzz in\nthe news media that it became self-reinforcing, like a nuclear chain\nreaction.I doubt PR firms realize it yet, but the Web makes it possible to  \ntrack them at work.  If you search for the obvious phrases, you\nturn up several efforts over the years to place stories about the  \nreturn of the suit.  For example, the Reuters article \n\nthat got picked up by USA\nToday in September 2004.  \"The suit is back,\" it begins.Trend articles like this are almost always the work of\nPR firms.  Once you know how to read them, it's straightforward to\nfigure out who the client is.  With trend stories, PR firms usually\nline up one or more \"experts\" to talk about the industry generally. \nIn this case we get three: the NPD Group, the creative director of\nGQ, and a research director at Smith Barney.  [5] When\nyou get to the end of the experts, look for the client. And bingo, \nthere it is: The Men's Wearhouse.Not surprising, considering The Men's Wearhouse was at that moment \nrunning ads saying \"The Suit is Back.\"  Talk about a successful\npress hit-- a wire service article whose first sentence is your own\nad copy.The secret to finding other press hits from a given pitch\nis to realize that they all started from the same document back at\nthe PR firm.  Search for a few key phrases and the names of the\nclients and the experts, and you'll turn up other variants of this \nstory.Casual\nfridays are out and dress codes are in writes Diane E. Lewis\nin The Boston Globe.  In a remarkable coincidence, Ms. Lewis's\nindustry contacts also include the creative director of GQ.Ripped jeans and T-shirts are out, writes Mary Kathleen Flynn in\nUS News & World Report.  And she too knows the \ncreative director of GQ.Men's suits\nare back writes Nicole Ford in Sexbuzz.Com (\"the ultimate men's\nentertainment magazine\").Dressing\ndown loses appeal as men suit up at the office writes Tenisha\nMercer of The Detroit News.\nNow that so many news articles are online, I suspect you could find\na similar pattern for most trend stories placed by PR firms.  I\npropose we call this new sport \"PR diving,\" and I'm sure there are\nfar more striking examples out there than this clump of five stories.OnlineAfter spending years chasing them, it's now second nature\nto me to recognize press hits for what they are.  But before we\nhired a PR firm I had no idea where articles in the mainstream media\ncame from.  I could tell a lot of them were crap, but I didn't\nrealize why.Remember the exercises in critical reading you did in school, where\nyou had to look at a piece of writing and step back and ask whether\nthe author was telling the whole truth?  If you really want to be\na critical reader, it turns out you have to step back one step\nfurther, and ask not just whether the author is telling the truth,\nbut why he's writing about this subject at all.Online, the answer tends to be a lot simpler.  Most people who\npublish online write what they write for the simple reason that\nthey want to.  You\ncan't see the fingerprints of PR firms all over the articles, as\nyou can in so many print publications-- which is one of the reasons,\nthough they may not consciously realize it, that readers trust\nbloggers more than Business Week.I was talking recently to a friend who works for a\nbig newspaper.  He thought the print media were in serious trouble,\nand that they were still mostly in denial about it.  \"They think\nthe decline is cyclic,\" he said.  \"Actually it's structural.\"In other words, the readers are leaving, and they're not coming\nback.\nWhy? I think the main reason is that the writing online is more honest.\nImagine how incongruous the New York Times article about\nsuits would sound if you read it in a blog:\n   The urge to look corporate-- sleek, commanding,\n  prudent, yet with just a touch of hubris on your well-cut sleeve--\n  is an unexpected development in a time of business disgrace.\n   \nThe problem\nwith this article is not just that it originated in a PR firm.\nThe whole tone is bogus.  This is the tone of someone writing down\nto their audience.Whatever its flaws, the writing you find online\nis authentic.  It's not mystery meat cooked up\nout of scraps of pitch letters and press releases, and pressed into \nmolds of zippy\njournalese.  It's people writing what they think.I didn't realize, till there was an alternative, just how artificial\nmost of the writing in the mainstream media was.  I'm not saying\nI used to believe what I read in Time and Newsweek.  Since high\nschool, at least, I've thought of magazines like that more as\nguides to what ordinary people were being\ntold to think than as  \nsources of information.  But I didn't realize till the last  \nfew years that writing for publication didn't have to mean writing\nthat way.  I didn't realize you could write as candidly and\ninformally as you would if you were writing to a friend.Readers aren't the only ones who've noticed the\nchange.  The PR industry has too.\nA hilarious article\non the site of the PR Society of America gets to the heart of the   \nmatter:\n   Bloggers are sensitive about becoming mouthpieces\n  for other organizations and companies, which is the reason they\n  began blogging in the first place.  \nPR people fear bloggers for the same reason readers\nlike them.  And that means there may be a struggle ahead.  As\nthis new kind of writing draws readers away from traditional media, we\nshould be prepared for whatever PR mutates into to compensate.  \nWhen I think   \nhow hard PR firms work to score press hits in the traditional   \nmedia, I can't imagine they'll work any less hard to feed stories\nto bloggers, if they can figure out how.\nNotes[1] PR has at least   \none beneficial feature: it favors small companies.  If PR didn't  \nwork, the only alternative would be to advertise, and only big\ncompanies can afford that.[2] Advertisers pay \nless for ads in free publications, because they assume readers \nignore something they get for free.  This is why so many trade\npublications nominally have a cover price and yet give away free\nsubscriptions with such abandon.[3] Different sections\nof the Times vary so much in their standards that they're\npractically different papers.  Whoever fed the style section reporter\nthis story about suits coming back would have been sent packing by\nthe regular news reporters.[4] The most striking\nexample I know of this type is the \"fact\" that the Internet worm   \nof 1988 infected 6000 computers. I was there when it was cooked up,\nand this was the recipe: someone guessed that there were about\n60,000 computers attached to the Internet, and that the worm might\nhave infected ten percent of them.Actually no one knows how many computers the worm infected, because\nthe remedy was to reboot them, and this destroyed all traces.  But\npeople like numbers.  And so this one is now replicated\nall over the Internet, like a little worm of its own.[5] Not all were\nnecessarily supplied by the PR firm. Reporters sometimes call a few\nadditional sources on their own, like someone adding a few fresh \nvegetables to a can of soup.\nThanks to Ingrid Basset, Trevor Blackwell, Sarah Harlin, Jessica \nLivingston, Jackie McDonough, Robert Morris, and Aaron Swartz (who\nalso found the PRSA article) for reading drafts of this.Correction: Earlier versions used a recent\nBusiness Week article mentioning del.icio.us as an example\nof a press hit, but Joshua Schachter tells me \nit was spontaneous.September 2017The most valuable insights are both general and surprising. \nF\u00a0=\u00a0ma for example. But general and surprising is a hard\ncombination to achieve. That territory tends to be picked\nclean, precisely because those insights are so valuable.Ordinarily, the best that people can do is one without the\nother: either surprising without being general (e.g.\ngossip), or general without being surprising (e.g.\nplatitudes).Where things get interesting is the moderately valuable\ninsights.  You get those from small additions of whichever\nquality was missing.  The more common case is a small\naddition of generality: a piece of gossip that's more than\njust gossip, because it teaches something interesting about\nthe world. But another less common approach is to focus on\nthe most general ideas and see if you can find something new\nto say about them. Because these start out so general, you\nonly need a small delta of novelty to produce a useful\ninsight.A small delta of novelty is all you'll be able to get most\nof the time. Which means if you take this route, your ideas\nwill seem a lot like ones that already exist. Sometimes\nyou'll find you've merely rediscovered an idea that did\nalready exist.  But don't be discouraged.  Remember the huge\nmultiplier that kicks in when you do manage to think of\nsomething even a little new.Corollary: the more general the ideas you're talking about,\nthe less you should worry about repeating yourself.  If you\nwrite enough, it's inevitable you will.  Your brain is much\nthe same from year to year and so are the stimuli that hit\nit. I feel slightly bad when I find I've said something\nclose to what I've said before, as if I were plagiarizing\nmyself. But rationally one shouldn't.  You won't say\nsomething exactly the same way the second time, and that\nvariation increases the chance you'll get that tiny but\ncritical delta of novelty.And of course, ideas beget ideas.  (That sounds \nfamiliar.)\nAn idea with a small amount of novelty could lead to one\nwith more. But only if you keep going. So it's doubly\nimportant not to let yourself be discouraged by people who\nsay there's not much new about something you've discovered.\n\"Not much new\" is a real achievement when you're talking\nabout the most general ideas. It's not true that there's nothing new under the sun.  There\nare some domains where there's almost nothing new.  But\nthere's a big difference between nothing and almost nothing,\nwhen it's multiplied by the area under the sun.\nThanks to Sam Altman, Patrick Collison, and Jessica\nLivingston for reading drafts of this.\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nOctober 2010After barely changing at all for decades, the startup funding\nbusiness is now in what could, at least by comparison, be called\nturmoil.  At Y Combinator we've seen dramatic changes in the funding\nenvironment for startups.  Fortunately one of them is much higher\nvaluations.The trends we've been seeing are probably not YC-specific.  I wish\nI could say they were, but the main cause is probably just that we\nsee trends first\u2014partly because the startups we fund are very\nplugged into the Valley and are quick to take advantage of anything\nnew, and partly because we fund so many that we have enough data\npoints to see patterns clearly.What we're seeing now, everyone's probably going to be seeing in\nthe next couple years.  So I'm going to explain what we're seeing,\nand what that will mean for you if you try to raise money.Super-AngelsLet me start by describing what the world of startup funding used\nto look like.  There used to be two sharply differentiated types\nof investors: angels and venture capitalists.  Angels are individual\nrich people who invest small amounts of their own money, while VCs\nare employees of funds that invest large amounts of other people's.For decades there were just those two types of investors, but now\na third type has appeared halfway between them: the so-called\nsuper-angels. \n[1]\n  And VCs have been provoked by their arrival\ninto making a lot of angel-style investments themselves.  So the\npreviously sharp line between angels and VCs has become hopelessly\nblurred.There used to be a no man's land between angels and VCs.  Angels\nwould invest $20k to $50k apiece, and VCs usually a million or more.\nSo an angel round meant a collection of angel investments that\ncombined to maybe $200k, and a VC round meant a series A round in\nwhich a single VC fund (or occasionally two) invested $1-5 million.The no man's land between angels and VCs was a very inconvenient\none for startups, because it coincided with the amount many wanted\nto raise.  Most startups coming out of Demo Day wanted to raise\naround $400k.  But it was a pain to stitch together that much out\nof angel investments, and most VCs weren't interested in investments\nso small.  That's the fundamental reason the super-angels have\nappeared.  They're responding to the market.The arrival of a new type of investor is big news for startups,\nbecause there used to be only two and they rarely competed with one\nanother.  Super-angels compete with both angels and VCs.  That's\ngoing to change the rules about how to raise money.  I don't know\nyet what the new rules will be, but it looks like most of the changes\nwill be for the better.A super-angel has some of the qualities of an angel, and some of\nthe qualities of a VC.  They're usually individuals, like angels.\nIn fact many of the current super-angels were initially angels of\nthe classic type.  But like VCs, they invest other people's money.\nThis allows them to invest larger amounts than angels:  a typical\nsuper-angel investment is currently about $100k.  They make investment\ndecisions quickly, like angels.  And they make a lot more investments\nper partner than VCs\u2014up to 10 times as many.The fact that super-angels invest other people's money makes them\ndoubly alarming to VCs. They don't just compete for startups; they\nalso compete for investors.  What super-angels really are is a new\nform of fast-moving, lightweight VC fund.   And those of us in the\ntechnology world know what usually happens when something comes\nalong that can be described in terms like that.  Usually it's the\nreplacement.Will it be?  As of now, few of the startups that take money from\nsuper-angels are ruling out taking VC money.  They're just postponing\nit.  But that's still a problem for VCs.  Some of the startups that\npostpone raising VC money may do so well on the angel money they\nraise that they never bother to raise more.  And those who do raise\nVC rounds will be able to get higher valuations when they do.  If\nthe best startups get 10x higher valuations when they raise series\nA rounds, that would cut VCs' returns from winners at least tenfold.\n[2]So I think VC funds are seriously threatened by the super-angels.\nBut one thing that may save them to some extent is the uneven\ndistribution of startup outcomes: practically all the returns are\nconcentrated in a few big successes.  The expected value of a startup\nis the percentage chance it's Google.  So to the extent that winning\nis a matter of absolute returns, the super-angels could win practically\nall the battles for individual startups and yet lose the war, if\nthey merely failed to get those few big winners.  And there's a\nchance that could happen, because the top VC funds have better\nbrands, and can also do more for their portfolio companies.  \n[3]Because super-angels make more investments per partner, they have\nless partner per investment.  They can't pay as much attention to\nyou as a VC on your board could.  How much is that extra attention\nworth?  It will vary enormously from one partner to another.  There's\nno consensus yet in the general case.  So for now this is something\nstartups are deciding individually.Till now, VCs' claims about how much value they added were sort of\nlike the government's.  Maybe they made you feel better, but you\nhad no choice in the matter, if you needed money on the scale only\nVCs could supply.  Now that VCs have competitors, that's going to\nput a market price on the help they offer.  The interesting thing\nis, no one knows yet what it will be.Do startups that want to get really big need the sort of advice and\nconnections only the top VCs can supply?  Or would super-angel money\ndo just as well?  The VCs will say you need them, and the super-angels\nwill say you don't.  But the truth is, no one knows yet, not even\nthe VCs and super-angels themselves.   All the super-angels know\nis that their new model seems promising enough to be worth trying,\nand all the VCs know is that it seems promising enough to worry\nabout.RoundsWhatever the outcome, the conflict between VCs and super-angels is\ngood news for founders.  And not just for the obvious reason that\nmore competition for deals means better terms.  The whole shape of\ndeals is changing.One of the biggest differences between angels and VCs is the amount\nof your company they want.  VCs want a lot.  In a series A round\nthey want a third of your company, if they can get it.  They don't\ncare much how much they pay for it, but they want a lot because the\nnumber of series A investments they can do is so small.  In a\ntraditional series A investment, at least one partner from the VC\nfund takes a seat on your board.  \n[4]\n Since board seats last about\n5 years and each partner can't handle more than about 10 at once,\nthat means a VC fund can only do about 2 series A deals per partner\nper year. And that means they need to get as much of the company\nas they can in each one.  You'd have to be a very promising startup\nindeed to get a VC to use up one of his 10 board seats for only a\nfew percent of you.Since angels generally don't take board seats, they don't have this\nconstraint.  They're happy to buy only a few percent of you.  And\nalthough the super-angels are in most respects mini VC funds, they've\nretained this critical property of angels.  They don't take board\nseats, so they don't need a big percentage of your company.Though that means you'll get correspondingly less attention from\nthem, it's good news in other respects.  Founders never really liked\ngiving up as much equity as VCs wanted.  It was a lot of the company\nto give up in one shot.  Most founders doing series A deals would\nprefer to take half as much money for half as much stock, and then\nsee what valuation they could get for the second half of the stock\nafter using the first half of the money to increase its value.  But\nVCs never offered that option.Now startups have another alternative.  Now it's easy to raise angel\nrounds about half the size of series A rounds.  Many of the startups\nwe fund are taking this route, and I predict that will be true of\nstartups in general.A typical big angel round might be $600k on a convertible note with\na valuation cap of $4 million premoney.  Meaning that when the note\nconverts into stock (in a later round, or upon acquisition), the\ninvestors in that round will get .6 / 4.6, or 13% of the company.\nThat's a lot less than the 30 to 40% of the company you usually\ngive up in a series A round if you do it so early.  \n[5]But the advantage of these medium-sized rounds is not just that\nthey cause less dilution.  You also lose less control.  After an\nangel round, the founders almost always still have control of the\ncompany, whereas after a series A round they often don't.  The\ntraditional board structure after a series A round is two founders,\ntwo VCs, and a (supposedly) neutral fifth person.  Plus series A\nterms usually give the investors a veto over various kinds of\nimportant decisions, including selling the company.  Founders usually\nhave a lot of de facto control after a series A, as long as things\nare going well.  But that's not the same as just being able to do\nwhat you want, like you could before.A third and quite significant advantage of angel rounds is that\nthey're less stressful to raise.  Raising a traditional series A\nround has in the past taken weeks, if not months.  When a VC firm\ncan only do 2 deals per partner per year, they're careful about\nwhich they do.  To get a traditional series A round you have to go\nthrough a series of meetings, culminating in a full partner meeting\nwhere the firm as a whole says yes or no.  That's the really scary\npart for founders: not just that series A rounds take so long, but\nat the end of this long process the VCs might still say no.  The\nchance of getting rejected after the full partner meeting averages\nabout 25%.  At some firms it's over 50%.Fortunately for founders, VCs have been getting a lot faster.\nNowadays Valley VCs are more likely to take 2 weeks than 2 months.\nBut they're still not as fast as angels and super-angels, the most\ndecisive of whom sometimes decide in hours.Raising an angel round is not only quicker, but you get feedback\nas it progresses.  An angel round is not an all or nothing thing\nlike a series A.  It's composed of multiple investors with varying\ndegrees of seriousness, ranging from the upstanding ones who commit\nunequivocally to the jerks who give you lines like \"come back to\nme to fill out the round.\" You usually start collecting money from\nthe most committed investors and work your way out toward the\nambivalent ones, whose interest increases as the round fills up.But at each point you know how you're doing.  If investors turn\ncold you may have to raise less, but when investors in an angel\nround turn cold the process at least degrades gracefully, instead\nof blowing up in your face and leaving you with nothing, as happens\nif you get rejected by a VC fund after a full partner meeting.\nWhereas if investors seem hot, you can not only close the round\nfaster, but now that convertible notes are becoming the norm,\nactually raise the price to reflect demand.ValuationHowever, the VCs have a weapon they can use against the super-angels,\nand they have started to use it.   VCs have started making angel-sized\ninvestments too.  The term \"angel round\" doesn't mean that all the\ninvestors in it are angels; it just describes the structure of the\nround.  Increasingly the participants include VCs making investments\nof a hundred thousand or two.  And when VCs invest in angel rounds\nthey can do things that super-angels don't like.  VCs are quite\nvaluation-insensitive in angel rounds\u2014partly because they are\nin general, and partly because they don't care that much about the\nreturns on angel rounds, which they still view mostly as a way to\nrecruit startups for series A rounds later.  So VCs who invest in\nangel rounds can blow up the valuations for angels and super-angels\nwho invest in them. \n[6]Some super-angels seem to care about valuations.  Several turned\ndown YC-funded startups after Demo Day because their valuations\nwere too high.  This was not a problem for the startups; by definition\na high valuation means enough investors were willing to accept it.\nBut it was mysterious to me that the super-angels would quibble\nabout valuations.  Did they not understand that the big returns\ncome from a few big successes, and that it therefore mattered far\nmore which startups you picked than how much you paid for them?After thinking about it for a while and observing certain other\nsigns, I have a theory that explains why the super-angels may be\nsmarter than they seem.  It would make sense for super-angels to\nwant low valuations if they're hoping to invest in startups that\nget bought early.  If you're hoping to hit the next Google, you\nshouldn't care if the valuation is 20 million.  But if you're looking\nfor companies that are going to get bought for 30 million, you care.\nIf you invest at 20 and the company gets bought for 30, you only\nget 1.5x.  You might as well buy Apple.So if some of the super-angels were looking for companies that could\nget acquired quickly, that would explain why they'd care about\nvaluations.  But why would they be looking for those?   Because\ndepending on the meaning of \"quickly,\" it could actually be very\nprofitable.  A company that gets acquired for 30 million is a failure\nto a VC, but it could be a 10x return for an angel, and moreover,\na quick 10x return.  Rate of return is what matters in\ninvesting\u2014not the multiple you get, but the multiple per year.\nIf a super-angel gets 10x in one year, that's a higher rate of\nreturn than a VC could ever hope to get from a company that took 6\nyears to go public.  To get the same rate of return, the VC would\nhave to get a multiple of 10^6\u2014one million x.  Even Google\ndidn't come close to that.So I think at least some super-angels are looking for companies\nthat will get bought.  That's the only rational explanation for\nfocusing on getting the right valuations, instead of the right\ncompanies.  And if so they'll be different to deal with than VCs.\nThey'll be tougher on valuations, but more accommodating if you want\nto sell early.PrognosisWho will win, the super-angels or the VCs?  I think the answer to\nthat is, some of each.  They'll each become more like one another.\nThe super-angels will start to invest larger amounts, and the VCs\nwill gradually figure out ways to make more, smaller investments\nfaster.  A decade from now the players will be hard to tell apart,\nand there will probably be survivors from each group.What does that mean for founders?  One thing it means is that the\nhigh valuations startups are presently getting may not last forever.\nTo the extent that valuations are being driven up by price-insensitive\nVCs, they'll fall again if VCs become more like super-angels and\nstart to become more miserly about valuations.  Fortunately if this\ndoes happen it will take years.The short term forecast is more competition between investors, which\nis good news for you.  The super-angels will try to undermine the\nVCs by acting faster, and the VCs will try to undermine the\nsuper-angels by driving up valuations.  Which for founders will\nresult in the perfect combination: funding rounds that close fast,\nwith high valuations.But remember that to get that combination, your startup will have\nto appeal to both super-angels and VCs.  If you don't seem like you\nhave the potential to go public, you won't be able to use VCs to\ndrive up the valuation of an angel round.There is a danger of having VCs in an angel round: the so-called\nsignalling risk.  If VCs are only doing it in the hope of investing\nmore later, what happens if they don't?  That's a signal to everyone\nelse that they think you're lame.How much should you worry about that?  The seriousness of signalling\nrisk depends on how far along you are.  If by the next time you\nneed to raise money, you have graphs showing rising revenue or\ntraffic month after month, you don't have to worry about any signals\nyour existing investors are sending.  Your results will speak for\nthemselves.  \n[7]Whereas if the next time you need to raise money you won't yet have\nconcrete results, you may need to think more about the message your\ninvestors might send if they don't invest more.  I'm not sure yet\nhow much you have to worry, because this whole phenomenon of VCs\ndoing angel investments is so new. But my instincts tell me you\ndon't have to worry much.  Signalling risk smells like one of those\nthings founders worry about that's not a real problem.  As a rule,\nthe only thing that can kill a good startup is the startup itself.\nStartups hurt themselves way more often than competitors hurt them,\nfor example.  I suspect signalling risk is in this category too.One thing YC-funded startups have been doing to mitigate the risk\nof taking money from VCs in angel rounds is not to take too much\nfrom any one VC.  Maybe that will help, if you have the luxury of\nturning down money.Fortunately, more and more startups will.  After decades of competition\nthat could best be described as intramural, the startup funding\nbusiness is finally getting some real competition.  That should\nlast several years at least, and maybe a lot longer. Unless there's\nsome huge market crash, the next couple years are going to be a\ngood time for startups to raise money.  And that's exciting because\nit means lots more startups will happen.\nNotes[1]\nI've also heard them called \"Mini-VCs\" and \"Micro-VCs.\" I\ndon't know which name will stick.There were a couple predecessors.  Ron Conway had angel funds\nstarting in the 1990s, and in some ways First Round Capital is closer to a\nsuper-angel than a VC fund.[2]\nIt wouldn't cut their overall returns tenfold, because investing\nlater would probably (a) cause them to lose less on investments\nthat failed, and (b) not allow them to get as large a percentage\nof startups as they do now.  So it's hard to predict precisely what\nwould happen to their returns.[3]\nThe brand of an investor derives mostly from the success of\ntheir portfolio companies.  The top VCs thus have a big brand\nadvantage over the super-angels.  They could make it self-perpetuating\nif they used it to get all the best new startups.  But I don't think\nthey'll be able to.  To get all the best startups, you have to do\nmore than make them want you.  You also have to want them; you have\nto recognize them when you see them, and that's much harder.\nSuper-angels will snap up stars that VCs miss.  And that will cause\nthe brand gap between the top VCs and the super-angels gradually\nto erode.[4]\nThough in a traditional series A round VCs put two partners\non your board, there are signs now that VCs may begin to conserve\nboard seats by switching to what used to be considered an angel-round\nboard, consisting of two founders and one VC.  Which is also to the\nfounders' advantage if it means they still control the company.[5]\nIn a series A round, you usually have to give up more than\nthe actual amount of stock the VCs buy, because they insist you\ndilute yourselves to set aside an \"option pool\" as well.  I predict\nthis practice will gradually disappear though.[6]\nThe best thing for founders, if they can get it, is a convertible\nnote with no valuation cap at all.  In that case the money invested\nin the angel round just converts into stock at the valuation of the\nnext round, no matter how large.  Angels and super-angels tend not\nto like uncapped notes. They have no idea how much of the company\nthey're buying.  If the company does well and the valuation of the\nnext round is high, they may end up with only a sliver of it.  So\nby agreeing to uncapped notes, VCs who don't care about valuations\nin angel rounds can make offers that super-angels hate to match.[7]\nObviously signalling risk is also not a problem if you'll\nnever need to raise more money.  But startups are often mistaken\nabout that.Thanks to Sam Altman, John Bautista, Patrick Collison, James\nLindenbaum, Reid Hoffman, Jessica Livingston and Harj Taggar\nfor reading drafts\nof this.April 2012A palliative care nurse called Bronnie Ware made a list of the\nbiggest regrets\nof the dying.  Her list seems plausible.  I could see\nmyself \u2014 can see myself \u2014 making at least 4 of these\n5 mistakes.If you had to compress them into a single piece of advice, it might\nbe: don't be a cog.  The 5 regrets paint a portrait of post-industrial\nman, who shrinks himself into a shape that fits his circumstances,\nthen turns dutifully till he stops.The alarming thing is, the mistakes that produce these regrets are\nall errors of omission.  You forget your dreams, ignore your family,\nsuppress your feelings, neglect your friends, and forget to be\nhappy.  Errors of omission are a particularly dangerous type of\nmistake, because you make them by default.I would like to avoid making these mistakes.  But how do you avoid\nmistakes you make by default?  Ideally you transform your life so\nit has other defaults.  But it may not be possible to do that\ncompletely. As long as these mistakes happen by default, you probably\nhave to be reminded not to make them.  So I inverted the 5 regrets,\nyielding a list of 5 commands\n\n   Don't ignore your dreams; don't work too much; say what you\n   think; cultivate friendships; be happy.\n\nwhich I then put at the top of the file I use as a todo list.May 2007People who worry about the increasing gap between rich and poor\ngenerally look back on the mid twentieth century as a golden age.\nIn those days we had a large number of high-paying union manufacturing\njobs that boosted the median income.  I wouldn't quite call the\nhigh-paying union job a myth, but I think people who dwell on it\nare reading too much into it.Oddly enough, it was working with startups that made me realize\nwhere the high-paying union job came from.  In a rapidly growing\nmarket, you don't worry too much about efficiency.  It's more\nimportant to grow fast.  If there's some mundane problem getting\nin your way, and there's a simple solution that's somewhat expensive,\njust take it and get on with more important things.  EBay didn't\nwin by paying less for servers than their competitors.Difficult though it may be to imagine now, manufacturing was a\ngrowth industry in the mid twentieth century.  This was an era when\nsmall firms making everything from cars to candy were getting\nconsolidated into a new kind of corporation with national reach and\nhuge economies of scale.  You had to grow fast or die.  Workers\nwere for these companies what servers are for an Internet startup.\nA reliable supply was more important than low cost.If you looked in the head of a 1950s auto executive, the attitude\nmust have been: sure, give 'em whatever they ask for, so long as\nthe new model isn't delayed.In other words, those workers were not paid what their work was\nworth.  Circumstances being what they were, companies would have\nbeen stupid to insist on paying them so little.If you want a less controversial example of this phenomenon, ask\nanyone who worked as a consultant building web sites during the\nInternet Bubble.  In the late nineties you could get paid huge sums\nof money for building the most trivial things.  And yet does anyone\nwho was there have any expectation those days will ever return?  I\ndoubt it.  Surely everyone realizes that was just a temporary\naberration.The era of labor unions seems to have been the same kind of aberration, \njust spread\nover a longer period, and mixed together with a lot of ideology\nthat prevents people from viewing it with as cold an eye as they\nwould something like consulting during the Bubble.Basically, unions were just Razorfish.People who think the labor movement was the creation of heroic union\norganizers have a problem to explain: why are unions shrinking now?\nThe best they can do is fall back on the default explanation of\npeople living in fallen civilizations.  Our ancestors were giants.\nThe workers of the early twentieth century must have had a moral\ncourage that's lacking today.In fact there's a simpler explanation.  The early twentieth century\nwas just a fast-growing startup overpaying for infrastructure.  And\nwe in the present are not a fallen people, who have abandoned\nwhatever mysterious high-minded principles produced the high-paying\nunion job.  We simply live in a time when the fast-growing companies\noverspend on different things.February 2020What should an essay be? Many people would say persuasive. That's\nwhat a lot of us were taught essays should be. But I think we can\naim for something more ambitious: that an essay should be useful.To start with, that means it should be correct. But it's not enough\nmerely to be correct. It's easy to make a statement correct by\nmaking it vague. That's a common flaw in academic writing, for\nexample. If you know nothing at all about an issue, you can't go\nwrong by saying that the issue is a complex one, that there are\nmany factors to be considered, that it's a mistake to take too\nsimplistic a view of it, and so on.Though no doubt correct, such statements tell the reader nothing.\nUseful writing makes claims that are as strong as they can be made\nwithout becoming false.For example, it's more useful to say that Pike's Peak is near the\nmiddle of Colorado than merely somewhere in Colorado. But if I say\nit's in the exact middle of Colorado, I've now gone too far, because\nit's a bit east of the middle.Precision and correctness are like opposing forces. It's easy to\nsatisfy one if you ignore the other. The converse of vaporous\nacademic writing is the bold, but false, rhetoric of demagogues.\nUseful writing is bold, but true.It's also two other things: it tells people something important,\nand that at least some of them didn't already know.Telling people something they didn't know doesn't always mean\nsurprising them. Sometimes it means telling them something they\nknew unconsciously but had never put into words. In fact those may\nbe the more valuable insights, because they tend to be more\nfundamental.Let's put them all together. Useful writing tells people something\ntrue and important that they didn't already know, and tells them\nas unequivocally as possible.Notice these are all a matter of degree. For example, you can't\nexpect an idea to be novel to everyone. Any insight that you have\nwill probably have already been had by at least one of the world's\n7 billion people. But it's sufficient if an idea is novel to a lot\nof readers.Ditto for correctness, importance, and strength. In effect the four\ncomponents are like numbers you can multiply together to get a score\nfor usefulness. Which I realize is almost awkwardly reductive, but\nnonetheless true._____\nHow can you ensure that the things you say are true and novel and\nimportant? Believe it or not, there is a trick for doing this. I\nlearned it from my friend Robert Morris, who has a horror of saying\nanything dumb. His trick is not to say anything unless he's sure\nit's worth hearing. This makes it hard to get opinions out of him,\nbut when you do, they're usually right.Translated into essay writing, what this means is that if you write\na bad sentence, you don't publish it. You delete it and try again.\nOften you abandon whole branches of four or five paragraphs. Sometimes\na whole essay.You can't ensure that every idea you have is good, but you can\nensure that every one you publish is, by simply not publishing the\nones that aren't.In the sciences, this is called publication bias, and is considered\nbad. When some hypothesis you're exploring gets inconclusive results,\nyou're supposed to tell people about that too. But with essay\nwriting, publication bias is the way to go.My strategy is loose, then tight. I write the first draft of an\nessay fast, trying out all kinds of ideas. Then I spend days rewriting\nit very carefully.I've never tried to count how many times I proofread essays, but\nI'm sure there are sentences I've read 100 times before publishing\nthem. When I proofread an essay, there are usually passages that\nstick out in an annoying way, sometimes because they're clumsily\nwritten, and sometimes because I'm not sure they're true. The\nannoyance starts out unconscious, but after the tenth reading or\nso I'm saying \"Ugh, that part\" each time I hit it. They become like\nbriars that catch your sleeve as you walk past. Usually I won't\npublish an essay till they're all gone \u0097 till I can read through\nthe whole thing without the feeling of anything catching.I'll sometimes let through a sentence that seems clumsy, if I can't\nthink of a way to rephrase it, but I will never knowingly let through\none that doesn't seem correct. You never have to. If a sentence\ndoesn't seem right, all you have to do is ask why it doesn't, and\nyou've usually got the replacement right there in your head.This is where essayists have an advantage over journalists. You\ndon't have a deadline. You can work for as long on an essay as you\nneed to get it right. You don't have to publish the essay at all,\nif you can't get it right. Mistakes seem to lose courage in the\nface of an enemy with unlimited resources. Or that's what it feels\nlike. What's really going on is that you have different expectations\nfor yourself. You're like a parent saying to a child \"we can sit\nhere all night till you eat your vegetables.\" Except you're the\nchild too.I'm not saying no mistake gets through. For example, I added condition\n(c) in \"A Way to Detect Bias\" \nafter readers pointed out that I'd\nomitted it. But in practice you can catch nearly all of them.There's a trick for getting importance too. It's like the trick I\nsuggest to young founders for getting startup ideas: to make something\nyou yourself want. You can use yourself as a proxy for the reader.\nThe reader is not completely unlike you, so if you write about\ntopics that seem important to you, they'll probably seem important\nto a significant number of readers as well.Importance has two factors. It's the number of people something\nmatters to, times how much it matters to them. Which means of course\nthat it's not a rectangle, but a sort of ragged comb, like a Riemann\nsum.The way to get novelty is to write about topics you've thought about\na lot. Then you can use yourself as a proxy for the reader in this\ndepartment too. Anything you notice that surprises you, who've\nthought about the topic a lot, will probably also surprise a\nsignificant number of readers. And here, as with correctness and\nimportance, you can use the Morris technique to ensure that you\nwill. If you don't learn anything from writing an essay, don't\npublish it.You need humility to measure novelty, because acknowledging the\nnovelty of an idea means acknowledging your previous ignorance of\nit. Confidence and humility are often seen as opposites, but in\nthis case, as in many others, confidence helps you to be humble.\nIf you know you're an expert on some topic, you can freely admit\nwhen you learn something you didn't know, because you can be confident\nthat most other people wouldn't know it either.The fourth component of useful writing, strength, comes from two\nthings: thinking well, and the skillful use of qualification. These\ntwo counterbalance each other, like the accelerator and clutch in\na car with a manual transmission. As you try to refine the expression\nof an idea, you adjust the qualification accordingly. Something\nyou're sure of, you can state baldly with no qualification at all,\nas I did the four components of useful writing. Whereas points that\nseem dubious have to be held at arm's length with perhapses.As you refine an idea, you're pushing in the direction of less\nqualification. But you can rarely get it down to zero. Sometimes\nyou don't even want to, if it's a side point and a fully refined\nversion would be too long.Some say that qualifications weaken writing. For example, that you\nshould never begin a sentence in an essay with \"I think,\" because\nif you're saying it, then of course you think it. And it's true\nthat \"I think x\" is a weaker statement than simply \"x.\" Which is\nexactly why you need \"I think.\" You need it to express your degree\nof certainty.But qualifications are not scalars. They're not just experimental\nerror. There must be 50 things they can express: how broadly something\napplies, how you know it, how happy you are it's so, even how it\ncould be falsified. I'm not going to try to explore the structure\nof qualification here. It's probably more complex than the whole\ntopic of writing usefully. Instead I'll just give you a practical\ntip: Don't underestimate qualification. It's an important skill in\nits own right, not just a sort of tax you have to pay in order to\navoid saying things that are false. So learn and use its full range.\nIt may not be fully half of having good ideas, but it's part of\nhaving them.There's one other quality I aim for in essays: to say things as\nsimply as possible. But I don't think this is a component of\nusefulness. It's more a matter of consideration for the reader. And\nit's a practical aid in getting things right; a mistake is more\nobvious when expressed in simple language. But I'll admit that the\nmain reason I write simply is not for the reader's sake or because\nit helps get things right, but because it bothers me to use more\nor fancier words than I need to. It seems inelegant, like a program\nthat's too long.I realize florid writing works for some people. But unless you're\nsure you're one of them, the best advice is to write as simply as\nyou can._____\nI believe the formula I've given you, importance + novelty +\ncorrectness + strength, is the recipe for a good essay. But I should\nwarn you that it's also a recipe for making people mad.The root of the problem is novelty. When you tell people something\nthey didn't know, they don't always thank you for it. Sometimes the\nreason people don't know something is because they don't want to\nknow it. Usually because it contradicts some cherished belief. And\nindeed, if you're looking for novel ideas, popular but mistaken\nbeliefs are a good place to find them. Every popular mistaken belief\ncreates a dead zone of ideas around \nit that are relatively unexplored because they contradict it.The strength component just makes things worse. If there's anything\nthat annoys people more than having their cherished assumptions\ncontradicted, it's having them flatly contradicted.Plus if you've used the Morris technique, your writing will seem\nquite confident. Perhaps offensively confident, to people who\ndisagree with you. The reason you'll seem confident is that you are\nconfident: you've cheated, by only publishing the things you're\nsure of.  It will seem to people who try to disagree with you that\nyou never admit you're wrong. In fact you constantly admit you're\nwrong. You just do it before publishing instead of after.And if your writing is as simple as possible, that just makes things\nworse. Brevity is the diction of command. If you watch someone\ndelivering unwelcome news from a position of inferiority, you'll\nnotice they tend to use lots of words, to soften the blow. Whereas\nto be short with someone is more or less to be rude to them.It can sometimes work to deliberately phrase statements more weakly\nthan you mean. To put \"perhaps\" in front of something you're actually\nquite sure of. But you'll notice that when writers do this, they\nusually do it with a wink.I don't like to do this too much. It's cheesy to adopt an ironic\ntone for a whole essay. I think we just have to face the fact that\nelegance and curtness are two names for the same thing.You might think that if you work sufficiently hard to ensure that\nan essay is correct, it will be invulnerable to attack. That's sort\nof true. It will be invulnerable to valid attacks. But in practice\nthat's little consolation.In fact, the strength component of useful writing will make you\nparticularly vulnerable to misrepresentation. If you've stated an\nidea as strongly as you could without making it false, all anyone\nhas to do is to exaggerate slightly what you said, and now it is\nfalse.Much of the time they're not even doing it deliberately. One of the\nmost surprising things you'll discover, if you start writing essays,\nis that people who disagree with you rarely disagree with what\nyou've actually written. Instead they make up something you said\nand disagree with that.For what it's worth, the countermove is to ask someone who does\nthis to quote a specific sentence or passage you wrote that they\nbelieve is false, and explain why. I say \"for what it's worth\"\nbecause they never do. So although it might seem that this could\nget a broken discussion back on track, the truth is that it was\nnever on track in the first place.Should you explicitly forestall likely misinterpretations? Yes, if\nthey're misinterpretations a reasonably smart and well-intentioned\nperson might make. In fact it's sometimes better to say something\nslightly misleading and then add the correction than to try to get\nan idea right in one shot. That can be more efficient, and can also\nmodel the way such an idea would be discovered.But I don't think you should explicitly forestall intentional\nmisinterpretations in the body of an essay. An essay is a place to\nmeet honest readers. You don't want to spoil your house by putting\nbars on the windows to protect against dishonest ones. The place\nto protect against intentional misinterpretations is in end-notes.\nBut don't think you can predict them all. People are as ingenious\nat misrepresenting you when you say something they don't want to\nhear as they are at coming up with rationalizations for things they\nwant to do but know they shouldn't. I suspect it's the same skill._____\nAs with most other things, the way to get better at writing essays\nis to practice. But how do you start? Now that we've examined the\nstructure of useful writing, we can rephrase that question more\nprecisely. Which constraint do you relax initially? The answer is,\nthe first component of importance: the number of people who care\nabout what you write.If you narrow the topic sufficiently, you can probably find something\nyou're an expert on. Write about that to start with. If you only\nhave ten readers who care, that's fine. You're helping them, and\nyou're writing. Later you can expand the breadth of topics you write\nabout.The other constraint you can relax is a little surprising: publication.\nWriting essays doesn't have to mean publishing them. That may seem\nstrange now that the trend is to publish every random thought, but\nit worked for me. I wrote what amounted to essays in notebooks for\nabout 15 years. I never published any of them and never expected\nto. I wrote them as a way of figuring things out. But when the web\ncame along I'd had a lot of practice.Incidentally, \nSteve \nWozniak did the same thing. In high school he\ndesigned computers on paper for fun. He couldn't build them because\nhe couldn't afford the components. But when Intel launched 4K DRAMs\nin 1975, he was ready._____\nHow many essays are there left to write though? The answer to that\nquestion is probably the most exciting thing I've learned about\nessay writing. Nearly all of them are left to write.Although the essay \nis an old form, it hasn't been assiduously\ncultivated. In the print era, publication was expensive, and there\nwasn't enough demand for essays to publish that many. You could\npublish essays if you were already well known for writing something\nelse, like novels. Or you could write book reviews that you took\nover to express your own ideas. But there was not really a direct\npath to becoming an essayist. Which meant few essays got written,\nand those that did tended to be about a narrow range of subjects.Now, thanks to the internet, there's a path. Anyone can publish\nessays online. You start in obscurity, perhaps, but at least you\ncan start. You don't need anyone's permission.It sometimes happens that an area of knowledge sits quietly for\nyears, till some change makes it explode. Cryptography did this to\nnumber theory. The internet is doing it to the essay.The exciting thing is not that there's a lot left to write, but\nthat there's a lot left to discover. There's a certain kind of idea\nthat's best discovered by writing essays. If most essays are still\nunwritten, most such ideas are still undiscovered.Notes[1] Put railings on the balconies, but don't put bars on the windows.[2] Even now I sometimes write essays that are not meant for\npublication. I wrote several to figure out what Y Combinator should\ndo, and they were really helpful.Thanks to Trevor Blackwell, Daniel Gackle, Jessica Livingston, and\nRobert Morris for reading drafts of this.January 2016Life is short, as everyone knows. When I was a kid I used to wonder\nabout this. Is life actually short, or are we really complaining\nabout its finiteness?  Would we be just as likely to feel life was\nshort if we lived 10 times as long?Since there didn't seem any way to answer this question, I stopped\nwondering about it.  Then I had kids.  That gave me a way to answer\nthe question, and the answer is that life actually is short.Having kids showed me how to convert a continuous quantity, time,\ninto discrete quantities. You only get 52 weekends with your 2 year\nold.  If Christmas-as-magic lasts from say ages 3 to 10, you only\nget to watch your child experience it 8 times.  And while it's\nimpossible to say what is a lot or a little of a continuous quantity\nlike time, 8 is not a lot of something.  If you had a handful of 8\npeanuts, or a shelf of 8 books to choose from, the quantity would\ndefinitely seem limited, no matter what your lifespan was.Ok, so life actually is short.  Does it make any difference to know\nthat?It has for me.  It means arguments of the form \"Life is too short\nfor x\" have great force.  It's not just a figure of speech to say\nthat life is too short for something.  It's not just a synonym for\nannoying.  If you find yourself thinking that life is too short for\nsomething, you should try to eliminate it if you can.When I ask myself what I've found life is too short for, the word\nthat pops into my head is \"bullshit.\" I realize that answer is\nsomewhat tautological.  It's almost the definition of bullshit that\nit's the stuff that life is too short for.  And yet bullshit does\nhave a distinctive character.  There's something fake about it.\nIt's the junk food of experience.\n[1]If you ask yourself what you spend your time on that's bullshit,\nyou probably already know the answer.  Unnecessary meetings, pointless\ndisputes, bureaucracy, posturing, dealing with other people's\nmistakes, traffic jams, addictive but unrewarding pastimes.There are two ways this kind of thing gets into your life: it's\neither forced on you, or it tricks you.  To some extent you have to\nput up with the bullshit forced on you by circumstances.  You need\nto make money, and making money consists mostly of errands.  Indeed,\nthe law of supply and demand insures that: the more rewarding some\nkind of work is, the cheaper people will do it.  It may be that\nless bullshit is forced on you than you think, though.  There has\nalways been a stream of people who opt out of the default grind and\ngo live somewhere where opportunities are fewer in the conventional\nsense, but life feels more authentic.  This could become more common.You can do it on a smaller scale without moving.  The amount of\ntime you have to spend on bullshit varies between employers.  Most\nlarge organizations (and many small ones) are steeped in it.  But\nif you consciously prioritize bullshit avoidance over other factors\nlike money and prestige, you can probably find employers that will\nwaste less of your time.If you're a freelancer or a small company, you can do this at the\nlevel of individual customers.  If you fire or avoid toxic customers,\nyou can decrease the amount of bullshit in your life by more than\nyou decrease your income.But while some amount of bullshit is inevitably forced on you, the\nbullshit that sneaks into your life by tricking you is no one's\nfault but your own.  And yet the bullshit you choose may be harder\nto eliminate than the bullshit that's forced on you.  Things that\nlure you into wasting your time have to be really good at\ntricking you.  An example that will be familiar to a lot of people\nis arguing online.  When someone\ncontradicts you, they're in a sense attacking you. Sometimes pretty\novertly.  Your instinct when attacked is to defend yourself.  But\nlike a lot of instincts, this one wasn't designed for the world we\nnow live in.  Counterintuitive as it feels, it's better most of\nthe time not to defend yourself.  Otherwise these people are literally\ntaking your life.\n[2]Arguing online is only incidentally addictive. There are more\ndangerous things than that. As I've written before, one byproduct\nof technical progress is that things we like tend to become more\naddictive.  Which means we will increasingly have to make a conscious\neffort to avoid addictions \u0097 to stand outside ourselves and ask \"is\nthis how I want to be spending my time?\"As well as avoiding bullshit, one should actively seek out things\nthat matter.  But different things matter to different people, and\nmost have to learn what matters to them.  A few are lucky and realize\nearly on that they love math or taking care of animals or writing,\nand then figure out a way to spend a lot of time doing it.  But\nmost people start out with a life that's a mix of things that\nmatter and things that don't, and only gradually learn to distinguish\nbetween them.For the young especially, much of this confusion is induced by the\nartificial situations they find themselves in. In middle school and\nhigh school, what the other kids think of you seems the most important\nthing in the world.  But when you ask adults what they got wrong\nat that age, nearly all say they cared too much what other kids\nthought of them.One heuristic for distinguishing stuff that matters is to ask\nyourself whether you'll care about it in the future.  Fake stuff\nthat matters usually has a sharp peak of seeming to matter.  That's\nhow it tricks you.  The area under the curve is small, but its shape\njabs into your consciousness like a pin.The things that matter aren't necessarily the ones people would\ncall \"important.\"  Having coffee with a friend matters.  You won't\nfeel later like that was a waste of time.One great thing about having small children is that they make you\nspend time on things that matter: them. They grab your sleeve as\nyou're staring at your phone and say \"will you play with me?\" And\nodds are that is in fact the bullshit-minimizing option.If life is short, we should expect its shortness to take us by\nsurprise. And that is just what tends to happen.  You take things\nfor granted, and then they're gone.  You think you can always write\nthat book, or climb that mountain, or whatever, and then you realize\nthe window has closed.  The saddest windows close when other people\ndie. Their lives are short too.  After my mother died, I wished I'd\nspent more time with her.  I lived as if she'd always be there.\nAnd in her typical quiet way she encouraged that illusion.  But an\nillusion it was. I think a lot of people make the same mistake I\ndid.The usual way to avoid being taken by surprise by something is to\nbe consciously aware of it.  Back when life was more precarious,\npeople used to be aware of death to a degree that would now seem a\nbit morbid.  I'm not sure why, but it doesn't seem the right answer\nto be constantly reminding oneself of the grim reaper hovering at\neveryone's shoulder.  Perhaps a better solution is to look at the\nproblem from the other end. Cultivate a habit of impatience about\nthe things you most want to do. Don't wait before climbing that\nmountain or writing that book or visiting your mother.  You don't\nneed to be constantly reminding yourself why you shouldn't wait.\nJust don't wait.I can think of two more things one does when one doesn't have much\nof something: try to get more of it, and savor what one has.  Both\nmake sense here.How you live affects how long you live.  Most people could do better.\nMe among them.But you can probably get even more effect by paying closer attention\nto the time you have.  It's easy to let the days rush by.  The\n\"flow\" that imaginative people love so much has a darker cousin\nthat prevents you from pausing to savor life amid the daily slurry\nof errands and alarms.  One of the most striking things I've read\nwas not in a book, but the title of one: James Salter's Burning\nthe Days.It is possible to slow time somewhat. I've gotten better at it.\nKids help.  When you have small children, there are a lot of moments\nso perfect that you can't help noticing.It does help too to feel that you've squeezed everything out of\nsome experience.  The reason I'm sad about my mother is not just\nthat I miss her but that I think of all the things we could have\ndone that we didn't.  My oldest son will be 7 soon.  And while I\nmiss the 3 year old version of him, I at least don't have any regrets\nover what might have been.  We had the best time a daddy and a 3\nyear old ever had.Relentlessly prune bullshit, don't wait to do things that matter,\nand savor the time you have.  That's what you do when life is short.Notes[1]\nAt first I didn't like it that the word that came to mind was\none that had other meanings.  But then I realized the other meanings\nare fairly closely related.  Bullshit in the sense of things you\nwaste your time on is a lot like intellectual bullshit.[2]\nI chose this example deliberately as a note to self.  I get\nattacked a lot online.  People tell the craziest lies about me.\nAnd I have so far done a pretty mediocre job of suppressing the\nnatural human inclination to say \"Hey, that's not true!\"Thanks to Jessica Livingston and Geoff Ralston for reading drafts\nof this.November 2005In the next few years, venture capital funds will find themselves\nsqueezed from four directions.  They're already stuck with a seller's\nmarket, because of the huge amounts they raised at the end of the\nBubble and still haven't invested.  This by itself is not the end\nof the world.  In fact, it's just a more extreme version of the\nnorm\nin the VC business: too much money chasing too few deals.Unfortunately, those few deals now want less and less money, because\nit's getting so cheap to start a startup.  The four causes: open\nsource, which makes software free; Moore's law, which makes hardware\ngeometrically closer to free; the Web, which makes promotion free\nif you're good; and better languages, which make development a lot\ncheaper.When we started our startup in 1995, the first three were our biggest\nexpenses.  We had to pay $5000 for the Netscape Commerce Server,\nthe only software that then supported secure http connections.  We\npaid $3000 for a server with a 90 MHz processor and 32 meg of\nmemory.  And we paid a PR firm about $30,000 to promote our launch.Now you could get all three for nothing.  You can get the software\nfor free; people throw away computers more powerful than our first\nserver; and if you make something good you can generate ten times\nas much traffic by word of mouth online than our first PR firm got\nthrough the print media.And of course another big change for the average startup is that\nprogramming languages have improved-- or rather, the median language has.  At most startups ten years\nago, software development meant ten programmers writing code in\nC++.  Now the same work might be done by one or two using Python\nor Ruby.During the Bubble, a lot of people predicted that startups would\noutsource their development to India.  I think a better model for\nthe future is David Heinemeier Hansson, who outsourced his development\nto a more powerful language instead.  A lot of well-known applications\nare now, like BaseCamp, written by just one programmer.  And one\nguy is more than 10x cheaper than ten, because (a) he won't waste\nany time in meetings, and (b) since he's probably a founder, he can\npay himself nothing.Because starting a startup is so cheap, venture capitalists now\noften want to give startups more money than the startups want to\ntake.  VCs like to invest several million at a time.  But as one\nVC told me after a startup he funded would only take about half a\nmillion, \"I don't know what we're going to do.  Maybe we'll just\nhave to give some of it back.\" Meaning give some of the fund back\nto the institutional investors who supplied it, because it wasn't\ngoing to be possible to invest it all.Into this already bad situation comes the third problem: Sarbanes-Oxley.\nSarbanes-Oxley is a law, passed after the Bubble, that drastically\nincreases the regulatory burden on public companies. And in addition\nto the cost of compliance, which is at least two million dollars a\nyear, the law introduces frightening legal exposure for corporate\nofficers.  An experienced CFO I know said flatly: \"I would not\nwant to be CFO of a public company now.\"You might think that responsible corporate governance is an area\nwhere you can't go too far.  But you can go too far in any law, and\nthis remark convinced me that Sarbanes-Oxley must have.  This CFO\nis both the smartest and the most upstanding money guy I know.  If\nSarbanes-Oxley deters people like him from being CFOs of public  \ncompanies, that's proof enough that it's broken.Largely because of Sarbanes-Oxley, few startups go public now.  For\nall practical purposes, succeeding now equals getting bought.  Which\nmeans VCs are now in the business of finding promising little 2-3\nman startups and pumping them up into companies that cost $100\nmillion to acquire.   They didn't mean to be in this business; it's\njust what their business has evolved into.Hence the fourth problem: the acquirers have begun to realize they\ncan buy wholesale.  Why should they wait for VCs to make the startups\nthey want more expensive?  Most of what the VCs add, acquirers don't\nwant anyway.  The acquirers already have brand recognition and HR\ndepartments.  What they really want is the software and the developers,\nand that's what the startup is in the early phase: concentrated\nsoftware and developers.Google, typically, seems to have been the first to figure this out.\n\"Bring us your startups early,\" said Google's speaker at the Startup School.  They're quite\nexplicit about it: they like to acquire startups at just the point\nwhere they would do a Series A round.  (The Series A round is the\nfirst round of real VC funding; it usually happens in the first\nyear.) It is a brilliant strategy, and one that other big technology\ncompanies will no doubt try to duplicate.  Unless they want to have \nstill more of their lunch eaten by Google.Of course, Google has an advantage in buying startups: a lot of the\npeople there are rich, or expect to be when their options vest.\nOrdinary employees find it very hard to recommend an acquisition;\nit's just too annoying to see a bunch of twenty year olds get rich\nwhen you're still working for salary.  Even if it's the right thing   \nfor your company to do.The Solution(s)Bad as things look now, there is a way for VCs to save themselves.\nThey need to do two things, one of which won't surprise them, and  \nanother that will seem an anathema.Let's start with the obvious one: lobby to get Sarbanes-Oxley  \nloosened.  This law was created to prevent future Enrons, not to\ndestroy the IPO market.  Since the IPO market was practically dead\nwhen it passed, few saw what bad effects it would have.  But now \nthat technology has recovered from the last bust, we can see clearly\nwhat a bottleneck Sarbanes-Oxley has become.Startups are fragile plants\u2014seedlings, in fact.  These seedlings\nare worth protecting, because they grow into the trees of the\neconomy.  Much of the economy's growth is their growth.  I think\nmost politicians realize that.  But they don't realize just how   \nfragile startups are, and how easily they can become collateral\ndamage of laws meant to fix some other problem.Still more dangerously, when you destroy startups, they make very\nlittle noise.  If you step on the toes of the coal industry, you'll\nhear about it.  But if you inadvertantly squash the startup industry,\nall that happens is that the founders of the next Google stay in \ngrad school instead of starting a company.My second suggestion will seem shocking to VCs: let founders cash  \nout partially in the Series A round.  At the moment, when VCs invest\nin a startup, all the stock they get is newly issued and all the \nmoney goes to the company.  They could buy some stock directly from\nthe founders as well.Most VCs have an almost religious rule against doing this.  They\ndon't want founders to get a penny till the company is sold or goes\npublic.  VCs are obsessed with control, and they worry that they'll\nhave less leverage over the founders if the founders have any money.This is a dumb plan.  In fact, letting the founders sell a little stock\nearly would generally be better for the company, because it would\ncause the founders' attitudes toward risk to be aligned with the\nVCs'.  As things currently work, their attitudes toward risk tend\nto be diametrically opposed: the founders, who have nothing, would\nprefer a 100% chance of $1 million to a 20% chance of $10 million,\nwhile the VCs can afford to be \"rational\" and prefer the latter.Whatever they say, the reason founders are selling their companies\nearly instead of doing Series A rounds is that they get paid up\nfront.  That first million is just worth so much more than the\nsubsequent ones.  If founders could sell a little stock early,\nthey'd be happy to take VC money and bet the rest on a bigger\noutcome.So why not let the founders have that first million, or at least\nhalf million?  The VCs would get same number of shares for the   \nmoney.  So what if some of the money would go to the  \nfounders instead of the company?Some VCs will say this is\nunthinkable\u2014that they want all their money to be put to work\ngrowing the company.  But the fact is, the huge size of current VC\ninvestments is dictated by the structure\nof VC funds, not the needs of startups.  Often as not these large  \ninvestments go to work destroying the company rather than growing\nit.The angel investors who funded our startup let the founders sell\nsome stock directly to them, and it was a good deal for everyone. \nThe angels made a huge return on that investment, so they're happy.\nAnd for us founders it blunted the terrifying all-or-nothingness\nof a startup, which in its raw form is more a distraction than a\nmotivator.If VCs are frightened at the idea of letting founders partially\ncash out, let me tell them something still more frightening: you\nare now competing directly with Google.\nThanks to Trevor Blackwell, Sarah Harlin, Jessica\nLivingston, and Robert Morris for reading drafts of this.January 2012A few hours before the Yahoo acquisition was announced in June 1998\nI took a snapshot of Viaweb's\nsite.  I thought it might be interesting to look at one day.The first thing one notices is is how tiny the pages are.  Screens\nwere a lot smaller in 1998.  If I remember correctly, our frontpage\nused to just fit in the size window people typically used then.Browsers then (IE 6 was still 3 years in the future) had few fonts\nand they weren't antialiased.  If you wanted to make pages that\nlooked good, you had to render display text as images.You may notice a certain similarity between the Viaweb and Y Combinator logos.  We did that\nas an inside joke when we started YC.  Considering how basic a red\ncircle is, it seemed surprising to me when we started Viaweb how\nfew other companies used one as their logo.  A bit later I realized\nwhy.On the Company\npage you'll notice a mysterious individual called John McArtyem.\nRobert Morris (aka Rtm) was so publicity averse after the \nWorm that he\ndidn't want his name on the site.  I managed to get him to agree\nto a compromise: we could use his bio but not his name.  He has\nsince relaxed a bit\non that point.Trevor graduated at about the same time the acquisition closed, so in the\ncourse of 4 days he went from impecunious grad student to millionaire\nPhD.  The culmination of my career as a writer of press releases\nwas one celebrating\nhis graduation, illustrated with a drawing I did of him during\na meeting.(Trevor also appears as Trevino\nBagwell in our directory of web designers merchants could hire\nto build stores for them.  We inserted him as a ringer in case some\ncompetitor tried to spam our web designers.   We assumed his logo\nwould deter any actual customers, but it did not.)Back in the 90s, to get users you had to get mentioned in magazines\nand newspapers.  There were not the same ways to get found online\nthat there are today.  So we used to pay a PR\nfirm $16,000 a month to get us mentioned in the press.  Fortunately\nreporters liked\nus.In our advice about\ngetting traffic from search engines (I don't think the term SEO\nhad been coined yet), we say there are only 7 that matter: Yahoo,\nAltaVista, Excite, WebCrawler, InfoSeek, Lycos, and HotBot.  Notice\nanything missing?  Google was incorporated that September.We supported online transactions via a company called \nCybercash,\nsince if we lacked that feature we'd have gotten beaten up in product\ncomparisons.  But Cybercash was so bad and most stores' order volumes\nwere so low that it was better if merchants processed orders like phone orders.  We had a page in our site trying to talk merchants\nout of doing real time authorizations.The whole site was organized like a funnel, directing people to the\ntest drive.\nIt was a novel thing to be able to try out software online.  We put\ncgi-bin in our dynamic urls to fool competitors about how our\nsoftware worked.We had some well\nknown users.  Needless to say, Frederick's of Hollywood got the\nmost traffic.  We charged a flat fee of $300/month for big stores,\nso it was a little alarming to have users who got lots of traffic.\nI once calculated how much Frederick's was costing us in bandwidth,\nand it was about $300/month.Since we hosted all the stores, which together were getting just\nover 10 million page views per month in June 1998, we consumed what\nat the time seemed a lot of bandwidth.  We had 2 T1s (3 Mb/sec)\ncoming into our offices.  In those days there was no AWS.  Even\ncolocating servers seemed too risky, considering how often things\nwent wrong with them.  So we had our servers in our offices.  Or\nmore precisely, in Trevor's office.  In return for the unique\nprivilege of sharing his office with no other humans, he had to\nshare it with 6 shrieking tower servers.  His office was nicknamed\nthe Hot Tub on account of the heat they generated.  Most days his\nstack of window air conditioners could keep up.For describing pages, we had a template language called RTML, which\nsupposedly stood for something, but which in fact I named after\nRtm.  RTML was Common Lisp augmented by some macros and libraries,\nand concealed under a structure editor that made it look like it\nhad syntax.Since we did continuous releases, our software didn't actually have\nversions.  But in those days the trade press expected versions, so\nwe made them up.  If we wanted to get lots of attention, we made\nthe version number an\ninteger.  That \"version 4.0\" icon was generated by our own\nbutton generator, incidentally.  The whole Viaweb site was made\nwith our software, even though it wasn't an online store, because\nwe wanted to experience what our users did.At the end of 1997, we released a general purpose shopping search\nengine called Shopfind.  It\nwas pretty advanced for the time.  It had a programmable crawler\nthat could crawl most of the different stores online and pick out\nthe products.November 2022Since I was about 9 I've been puzzled by the apparent contradiction\nbetween being made of matter that behaves in a predictable way, and\nthe feeling that I could choose to do whatever I wanted. At the\ntime I had a self-interested motive for exploring the question. At\nthat age (like most succeeding ages) I was always in trouble with\nthe authorities, and it seemed to me that there might possibly be\nsome way to get out of trouble by arguing that I wasn't responsible\nfor my actions. I gradually lost hope of that, but the puzzle\nremained: How do you reconcile being a machine made of matter with\nthe feeling that you're free to choose what you do?\n[1]The best way to explain the answer may be to start with a slightly\nwrong version, and then fix it. The wrong version is: You can do\nwhat you want, but you can't want what you want. Yes, you can control\nwhat you do, but you'll do what you want, and you can't control\nthat.The reason this is mistaken is that people do sometimes change what\nthey want. People who don't want to want something \u2014 drug addicts,\nfor example \u2014 can sometimes make themselves stop wanting it. And\npeople who want to want something \u2014 who want to like classical\nmusic, or broccoli \u2014 sometimes succeed.So we modify our initial statement: You can do what you want, but\nyou can't want to want what you want.That's still not quite true. It's possible to change what you want\nto want. I can imagine someone saying \"I decided to stop wanting\nto like classical music.\" But we're getting closer to the truth.\nIt's rare for people to change what they want to want, and the more\n\"want to\"s we add, the rarer it gets.We can get arbitrarily close to a true statement by adding more \"want\nto\"s in much the same way we can get arbitrarily close to 1 by adding\nmore 9s to a string of 9s following a decimal point. In practice\nthree or four \"want to\"s must surely be enough. It's hard even to\nenvision what it would mean to change what you want to want to want\nto want, let alone actually do it.So one way to express the correct answer is to use a regular\nexpression. You can do what you want, but there's some statement\nof the form \"you can't (want to)* want what you want\" that's true.\nUltimately you get back to a want that you don't control.\n[2]\nNotes[1]\nI didn't know when I was 9 that matter might behave randomly,\nbut I don't think it affects the problem much. Randomness destroys\nthe ghost in the machine as effectively as determinism.[2]\nIf you don't like using an expression, you can make the same\npoint using higher-order desires: There is some n such that you\ndon't control your nth-order desires.\nThanks to Trevor Blackwell,\nJessica Livingston, Robert Morris, and\nMichael Nielsen for reading drafts of this.\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nNovember 2005Does \"Web 2.0\" mean anything?  Till recently I thought it didn't,\nbut the truth turns out to be more complicated.  Originally, yes,\nit was meaningless.  Now it seems to have acquired a meaning.  And\nyet those who dislike the term are probably right, because if it\nmeans what I think it does, we don't need it.I first heard the phrase \"Web 2.0\" in the name of the Web 2.0\nconference in 2004.  At the time it was supposed to mean using \"the\nweb as a platform,\" which I took to refer to web-based applications.\n[1]So I was surprised at a conference this summer when Tim O'Reilly\nled a session intended to figure out a definition of \"Web 2.0.\"\nDidn't it already mean using the web as a platform?  And if it\ndidn't already mean something, why did we need the phrase at all?OriginsTim says the phrase \"Web 2.0\" first\narose in \"a brainstorming session between\nO'Reilly and Medialive International.\" What is Medialive International?\n\"Producers of technology tradeshows and conferences,\" according to\ntheir site.  So presumably that's what this brainstorming session\nwas about.  O'Reilly wanted to organize a conference about the web,\nand they were wondering what to call it.I don't think there was any deliberate plan to suggest there was a\nnew version of the web.  They just wanted to make the point\nthat the web mattered again.  It was a kind of semantic deficit\nspending: they knew new things were coming, and the \"2.0\" referred\nto whatever those might turn out to be.And they were right.  New things were coming.  But the new version\nnumber led to some awkwardness in the short term.  In the process\nof developing the pitch for the first conference, someone must have\ndecided they'd better take a stab at explaining what that \"2.0\"\nreferred to.  Whatever it meant, \"the web as a platform\" was at\nleast not too constricting.The story about \"Web 2.0\" meaning the web as a platform didn't live\nmuch past the first conference.  By the second conference, what\n\"Web 2.0\" seemed to mean was something about democracy.  At least,\nit did when people wrote about it online.  The conference itself\ndidn't seem very grassroots.  It cost $2800, so the only people who\ncould afford to go were VCs and people from big companies.And yet, oddly enough, Ryan Singel's article\nabout the conference in Wired News spoke of \"throngs of\ngeeks.\"  When a friend of mine asked Ryan about this, it was news\nto him.  He said he'd originally written something like \"throngs\nof VCs and biz dev guys\" but had later shortened it just to \"throngs,\"\nand that this must have in turn been expanded by the editors into\n\"throngs of geeks.\"  After all, a Web 2.0 conference would presumably\nbe full of geeks, right?Well, no.  There were about 7.  Even Tim O'Reilly was wearing a   \nsuit, a sight so alien I couldn't parse it at first.  I saw\nhim walk by and said to one of the O'Reilly people \"that guy looks\njust like Tim.\"\"Oh, that's Tim.  He bought a suit.\"\nI ran after him, and sure enough, it was.  He explained that he'd\njust bought it in Thailand.The 2005 Web 2.0 conference reminded me of Internet trade shows\nduring the Bubble, full of prowling VCs looking for the next hot\nstartup.  There was that same odd atmosphere created by a large  \nnumber of people determined not to miss out.  Miss out on what?\nThey didn't know.  Whatever was going to happen\u2014whatever Web 2.0\nturned out to be.I wouldn't quite call it \"Bubble 2.0\" just because VCs are eager\nto invest again.  The Internet is a genuinely big deal.  The bust\nwas as much an overreaction as\nthe boom.  It's to be expected that once we started to pull out of\nthe bust, there would be a lot of growth in this area, just as there\nwas in the industries that spiked the sharpest before the Depression.The reason this won't turn into a second Bubble is that the IPO\nmarket is gone.  Venture investors\nare driven by exit strategies.  The reason they were funding all  \nthose laughable startups during the late 90s was that they hoped\nto sell them to gullible retail investors; they hoped to be laughing\nall the way to the bank.  Now that route is closed.  Now the default\nexit strategy is to get bought, and acquirers are less prone to\nirrational exuberance than IPO investors.  The closest you'll get \nto Bubble valuations is Rupert Murdoch paying $580 million for   \nMyspace.  That's only off by a factor of 10 or so.1. AjaxDoes \"Web 2.0\" mean anything more than the name of a conference\nyet?  I don't like to admit it, but it's starting to.  When people\nsay \"Web 2.0\" now, I have some idea what they mean.  And the fact\nthat I both despise the phrase and understand it is the surest proof\nthat it has started to mean something.One ingredient of its meaning is certainly Ajax, which I can still\nonly just bear to use without scare quotes.  Basically, what \"Ajax\"\nmeans is \"Javascript now works.\"  And that in turn means that\nweb-based applications can now be made to work much more like desktop\nones.As you read this, a whole new generation\nof software is being written to take advantage of Ajax.  There\nhasn't been such a wave of new applications since microcomputers\nfirst appeared.  Even Microsoft sees it, but it's too late for them\nto do anything more than leak \"internal\"  \ndocuments designed to give the impression they're on top of this\nnew trend.In fact the new generation of software is being written way too\nfast for Microsoft even to channel it, let alone write their own\nin house.  Their only hope now is to buy all the best Ajax startups\nbefore Google does.  And even that's going to be hard, because\nGoogle has as big a head start in buying microstartups as it did\nin search a few years ago.  After all, Google Maps, the canonical\nAjax application, was the result of a startup they bought.So ironically the original description of the Web 2.0 conference\nturned out to be partially right: web-based applications are a big\ncomponent of Web 2.0.  But I'm convinced they got this right by \naccident.  The Ajax boom didn't start till early 2005, when Google\nMaps appeared and the term \"Ajax\" was coined.2. DemocracyThe second big element of Web 2.0 is democracy.  We now have several\nexamples to prove that amateurs can   \nsurpass professionals, when they have the right kind of system to \nchannel their efforts.  Wikipedia\nmay be the most famous.  Experts have given Wikipedia middling\nreviews, but they miss the critical point: it's good enough.  And   \nit's free, which means people actually read it.  On the web, articles\nyou have to pay for might as well not exist.  Even if you were    \nwilling to pay to read them yourself, you can't link to them.    \nThey're not part of the conversation.Another place democracy seems to win is in deciding what counts as\nnews.  I never look at any news site now except Reddit.\n[2]\n I know if something major\nhappens, or someone writes a particularly interesting article, it   \nwill show up there.  Why bother checking the front page of any\nspecific paper or magazine?  Reddit's like an RSS feed for the whole\nweb, with a filter for quality.  Similar sites include Digg, a technology news site that's\nrapidly approaching Slashdot in popularity, and del.icio.us, the collaborative\nbookmarking network that set off the \"tagging\" movement.  And whereas\nWikipedia's main appeal is that it's good enough and free, these\nsites suggest that voters do a significantly better job than human\neditors.The most dramatic example of Web 2.0 democracy is not in the selection\nof ideas, but their production.  \nI've noticed for a while that the stuff I read on individual people's\nsites is as good as or better than the stuff I read in newspapers\nand magazines.  And now I have independent evidence: the top links\non Reddit are generally links to individual people's sites rather  \nthan to magazine articles or news stories.My experience of writing\nfor magazines suggests an explanation.  Editors.  They control the\ntopics you can write about, and they can generally rewrite whatever\nyou produce.  The result is to damp extremes.  Editing yields 95th\npercentile writing\u201495% of articles are improved by it, but 5% are\ndragged down.  5% of the time you get \"throngs of geeks.\"On the web, people can publish whatever they want.  Nearly all of\nit falls short of the editor-damped writing in print publications.\nBut the pool of writers is very, very large.  If it's large enough,\nthe lack of damping means the best writing online should surpass  \nthe best in print.\n[3]  \nAnd now that the web has evolved mechanisms\nfor selecting good stuff, the web wins net.  Selection beats damping,\nfor the same reason market economies beat centrally planned ones.Even the startups are different this time around.  They are to the  \nstartups of the Bubble what bloggers are to the print media.  During\nthe Bubble, a startup meant a company headed by an MBA that was   \nblowing through several million dollars of VC money to \"get big\nfast\" in the most literal sense.  Now it means a smaller, younger, more technical group that just      \ndecided to make something great.  They'll decide later if they want  \nto raise VC-scale funding, and if they take it, they'll take it on\ntheir terms.3. Don't Maltreat UsersI think everyone would agree that democracy and Ajax are elements\nof \"Web 2.0.\"  I also see a third: not to maltreat users.  During\nthe Bubble a lot of popular sites were quite high-handed with users.\nAnd not just in obvious ways, like making them register, or subjecting\nthem to annoying ads.  The very design of the average site in the   \nlate 90s was an abuse.  Many of the most popular sites were loaded\nwith obtrusive branding that made them slow to load and sent the\nuser the message: this is our site, not yours.  (There's a physical\nanalog in the Intel and Microsoft stickers that come on some\nlaptops.)I think the root of the problem was that sites felt they were giving\nsomething away for free, and till recently a company giving anything\naway for free could be pretty high-handed about it.  Sometimes it\nreached the point of economic sadism: site owners assumed that the\nmore pain they caused the user, the more benefit it must be to them.  \nThe most dramatic remnant of this model may be at salon.com, where   \nyou can read the beginning of a story, but to get the rest you have\nsit through a movie.At Y Combinator we advise all the startups we fund never to lord\nit over users.  Never make users register, unless you need to in\norder to store something for them.  If you do make users register,   \nnever make them wait for a confirmation link in an email; in fact,\ndon't even ask for their email address unless you need it for some\nreason.  Don't ask them any unnecessary questions.  Never send them\nemail unless they explicitly ask for it.  Never frame pages you\nlink to, or open them in new windows.  If you have a free version \nand a pay version, don't make the free version too restricted.  And\nif you find yourself asking \"should we allow users to do x?\" just \nanswer \"yes\" whenever you're unsure.  Err on the side of generosity.In How to Start a Startup I advised startups\nnever to let anyone fly under them, meaning never to let any other\ncompany offer a cheaper, easier solution.  Another way to fly low \nis to give users more power.  Let users do what they want.  If you \ndon't and a competitor does, you're in trouble.iTunes is Web 2.0ish in this sense.  Finally you can buy individual\nsongs instead of having to buy whole albums.  The recording industry\nhated the idea and resisted it as long as possible.  But it was\nobvious what users wanted, so Apple flew under the labels.\n[4]\nThough really it might be better to describe iTunes as Web 1.5.     \nWeb 2.0 applied to music would probably mean individual bands giving\naway DRMless songs for free.The ultimate way to be nice to users is to give them something for\nfree that competitors charge for.  During the 90s a lot of people   \nprobably thought we'd have some working system for micropayments     \nby now.  In fact things have gone in the other direction.  The most   \nsuccessful sites are the ones that figure out new ways to give stuff\naway for free.  Craigslist has largely destroyed the classified ad\nsites of the 90s, and OkCupid looks likely to do the same to the\nprevious generation of dating sites.Serving web pages is very, very cheap.  If you can make even a   \nfraction of a cent per page view, you can make a profit.  And\ntechnology for targeting ads continues to improve.  I wouldn't be\nsurprised if ten years from now eBay had been supplanted by an      \nad-supported freeBay (or, more likely, gBay).Odd as it might sound, we tell startups that they should try to\nmake as little money as possible.  If you can figure out a way to\nturn a billion dollar industry into a fifty million dollar industry,\nso much the better, if all fifty million go to you.  Though indeed,\nmaking things cheaper often turns out to generate more money in the\nend, just as automating things often turns out to generate more\njobs.The ultimate target is Microsoft.  What a bang that balloon is going\nto make when someone pops it by offering a free web-based alternative \nto MS Office.\n[5]\nWho will?  Google?  They seem to be taking their\ntime.  I suspect the pin will be wielded by a couple of 20 year old\nhackers who are too naive to be intimidated by the idea.  (How hard\ncan it be?)The Common ThreadAjax, democracy, and not dissing users.  What do they all have in  \ncommon?  I didn't realize they had anything in common till recently,\nwhich is one of the reasons I disliked the term \"Web 2.0\" so much.\nIt seemed that it was being used as a label for whatever happened\nto be new\u2014that it didn't predict anything.But there is a common thread.  Web 2.0 means using the web the way\nit's meant to be used.  The \"trends\" we're seeing now are simply\nthe inherent nature of the web emerging from under the broken models\nthat got imposed on it during the Bubble.I realized this when I read an  interview with\nJoe Kraus, the co-founder of Excite.\n[6]\n\n  Excite really never got the business model right at all.  We fell \n  into the classic problem of how when a new medium comes out it\n  adopts the practices, the content, the business models of the old\n  medium\u2014which fails, and then the more appropriate models get\n  figured out.\n\nIt may have seemed as if not much was happening during the years\nafter the Bubble burst.  But in retrospect, something was happening:\nthe web was finding its natural angle of repose.  The democracy \ncomponent, for example\u2014that's not an innovation, in the sense of\nsomething someone made happen.  That's what the web naturally tends\nto produce.Ditto for the idea of delivering desktop-like applications over the\nweb.  That idea is almost as old as the web.  But the first time    \naround it was co-opted by Sun, and we got Java applets.  Java has\nsince been remade into a generic replacement for C++, but in 1996\nthe story about Java was that it represented a new model of software.\nInstead of desktop applications, you'd run Java \"applets\" delivered\nfrom a server.This plan collapsed under its own weight. Microsoft helped kill it,\nbut it would have died anyway.  There was no uptake among hackers.\nWhen you find PR firms promoting\nsomething as the next development platform, you can be sure it's\nnot.  If it were, you wouldn't need PR firms to tell you, because   \nhackers would already be writing stuff on top of it, the way sites    \nlike Busmonster used Google Maps as a\nplatform before Google even meant it to be one.The proof that Ajax is the next hot platform is that thousands of  \nhackers have spontaneously started building things on top\nof it.  Mikey likes it.There's another thing all three components of Web 2.0 have in common.\nHere's a clue.  Suppose you approached investors with the following\nidea for a Web 2.0 startup:\n\n  Sites like del.icio.us and flickr allow users to \"tag\" content\n  with descriptive tokens.  But there is also huge source of\n  implicit tags that they ignore: the text within web links.\n  Moreover, these links represent a social network connecting the   \n  individuals and organizations who created the pages, and by using\n  graph theory we can compute from this network an estimate of the\n  reputation of each member.  We plan to mine the web for these \n  implicit tags, and use them together with the reputation hierarchy\n  they embody to enhance web searches.\n\nHow long do you think it would take them on average to realize that\nit was a description of Google?Google was a pioneer in all three components of Web 2.0: their core\nbusiness sounds crushingly hip when described in Web 2.0 terms, \n\"Don't maltreat users\" is a subset of \"Don't be evil,\" and of course\nGoogle set off the whole Ajax boom with Google Maps.Web 2.0 means using the web as it was meant to be used, and Google\ndoes.  That's their secret.    They're sailing with the wind, instead of sitting  \nbecalmed praying for a business model, like the print media, or   \ntrying to tack upwind by suing their customers, like Microsoft and \nthe record labels.\n[7]Google doesn't try to force things to happen their way.  They try   \nto figure out what's going to happen, and arrange to be standing \nthere when it does.  That's the way to approach technology\u2014and \nas business includes an ever larger technological component, the\nright way to do business.The fact that Google is a \"Web 2.0\" company shows that, while\nmeaningful, the term is also rather bogus.  It's like the word\n\"allopathic.\"  It just means doing things right, and it's a bad   \nsign when you have a special word for that.\nNotes[1]\nFrom the conference\nsite, June 2004: \"While the first wave of the Web was closely  \ntied to the browser, the second wave extends applications across    \nthe web and enables a new generation of services and business\nopportunities.\"  To the extent this means anything, it seems to be\nabout \nweb-based applications.[2]\nDisclosure: Reddit was funded by \nY Combinator.  But although\nI started using it out of loyalty to the home team, I've become a\ngenuine addict.  While we're at it, I'm also an investor in\n!MSFT, having sold all my shares earlier this year.[3]\nI'm not against editing. I spend more time editing than\nwriting, and I have a group of picky friends who proofread almost\neverything I write.  What I dislike is editing done after the fact  \nby someone else.[4]\nObvious is an understatement.  Users had been climbing in through  \nthe window for years before Apple finally moved the door.[5]\nHint: the way to create a web-based alternative to Office may\nnot be to write every component yourself, but to establish a protocol\nfor web-based apps to share a virtual home directory spread across\nmultiple servers.  Or it may be to write it all yourself.[6]\nIn Jessica Livingston's\nFounders at\nWork.[7]\nMicrosoft didn't sue their customers directly, but they seem \nto have done all they could to help SCO sue them.Thanks to Trevor Blackwell, Sarah Harlin, Jessica Livingston, Peter\nNorvig, Aaron Swartz, and Jeff Weiner for reading drafts of this, and to the\nguys at O'Reilly and Adaptive Path for answering my questions.August 2021When people say that in their experience all programming languages\nare basically equivalent, they're making a statement not about\nlanguages but about the kind of programming they've done.99.5% of programming consists of gluing together calls to library\nfunctions. All popular languages are equally good at this. So one\ncan easily spend one's whole career operating in the intersection\nof popular programming languages.But the other .5% of programming is disproportionately interesting.\nIf you want to learn what it consists of, the weirdness of weird\nlanguages is a good clue to follow.Weird languages aren't weird by accident. Not the good ones, at\nleast. The weirdness of the good ones usually implies the existence\nof some form of programming that's not just the usual gluing together\nof library calls.A concrete example: Lisp macros. Lisp macros seem weird even to\nmany Lisp programmers. They're not only not in the intersection of\npopular languages, but by their nature would be hard to implement\nproperly in a language without turning it into a dialect of\nLisp. And macros are definitely evidence of techniques that go\nbeyond glue programming. For example, solving problems by first\nwriting a language for problems of that type, and then writing\nyour specific application in it. Nor is this all you can do with\nmacros; it's just one region in a space of program-manipulating\ntechniques that even now is far from fully explored.So if you want to expand your concept of what programming can be,\none way to do it is by learning weird languages. Pick a language\nthat most programmers consider weird but whose median user is smart,\nand then focus on the differences between this language and the\nintersection of popular languages. What can you say in this language\nthat would be impossibly inconvenient to say in others? In the\nprocess of learning how to say things you couldn't previously say,\nyou'll probably be learning how to think things you couldn't\npreviously think.\nThanks to Trevor Blackwell, Patrick Collison, Daniel Gackle, Amjad\nMasad, and Robert Morris for reading drafts of this.\nFebruary 2007A few days ago I finally figured out something I've wondered about\nfor 25 years: the relationship between wisdom and intelligence.\nAnyone can see they're not the same by the number of people who are\nsmart, but not very wise.  And yet intelligence and wisdom do seem\nrelated.  How?What is wisdom?  I'd say it's knowing what to do in a lot of\nsituations.  I'm not trying to make a deep point here about the\ntrue nature of wisdom, just to figure out how we use the word.  A\nwise person is someone who usually knows the right thing to do.And yet isn't being smart also knowing what to do in certain\nsituations?  For example, knowing what to do when the teacher tells\nyour elementary school class to add all the numbers from 1 to 100?\n[1]Some say wisdom and intelligence apply to different types of\nproblems\u2014wisdom to human problems and intelligence to abstract\nones.  But that isn't true.  Some wisdom has nothing to do with\npeople: for example, the wisdom of the engineer who knows certain\nstructures are less prone to failure than others.  And certainly\nsmart people can find clever solutions to human problems as well\nas abstract ones. \n[2]Another popular explanation is that wisdom comes from experience\nwhile intelligence is innate.  But people are not simply wise in\nproportion to how much experience they have.  Other things must\ncontribute to wisdom besides experience, and some may be innate: a\nreflective disposition, for example.Neither of the conventional explanations of the difference between\nwisdom and intelligence stands up to scrutiny.  So what is the\ndifference?  If we look at how people use the words \"wise\" and\n\"smart,\" what they seem to mean is different shapes of performance.Curve\"Wise\" and \"smart\" are both ways of saying someone knows what to\ndo.  The difference is that \"wise\" means one has a high average\noutcome across all situations, and \"smart\" means one does spectacularly\nwell in a few.  That is, if you had a graph in which the x axis\nrepresented situations and the y axis the outcome, the graph of the\nwise person would be high overall, and the graph of the smart person\nwould have high peaks.The distinction is similar to the rule that one should judge talent\nat its best and character at its worst.  Except you judge intelligence\nat its best, and wisdom by its average.  That's how the two are\nrelated: they're the two different senses in which the same curve\ncan be high.So a wise person knows what to do in most situations, while a smart\nperson knows what to do in situations where few others could.  We\nneed to add one more qualification: we should ignore cases where\nsomeone knows what to do because they have inside information. \n[3]\nBut aside from that, I don't think we can get much more specific\nwithout starting to be mistaken.Nor do we need to.  Simple as it is, this explanation predicts, or\nat least accords with, both of the conventional stories about the\ndistinction between wisdom and intelligence.  Human problems are\nthe most common type, so being good at solving those is key in\nachieving a high average outcome.   And it seems natural that a\nhigh average outcome depends mostly on experience, but that dramatic\npeaks can only be achieved by people with certain rare, innate\nqualities; nearly anyone can learn to be a good swimmer, but to be\nan Olympic swimmer you need a certain body type.This explanation also suggests why wisdom is such an elusive concept:\nthere's no such thing.  \"Wise\" means something\u2014that one is\non average good at making the right choice.  But giving the name\n\"wisdom\" to the supposed quality that enables one to do that doesn't\nmean such a thing exists.  To the extent \"wisdom\" means anything,\nit refers to a grab-bag of qualities as various as self-discipline,\nexperience, and empathy.  \n[4]Likewise, though \"intelligent\" means something, we're asking for\ntrouble if we insist on looking for a single thing called \"intelligence.\"\nAnd whatever its components, they're not all innate.  We use the\nword \"intelligent\" as an indication of ability: a smart person can\ngrasp things few others could.  It does seem likely there's some\ninborn predisposition to intelligence (and wisdom too), but this\npredisposition is not itself intelligence.One reason we tend to think of intelligence as inborn is that people\ntrying to measure it have concentrated on the aspects of it that\nare most measurable.  A quality that's inborn will obviously be\nmore convenient to work with than one that's influenced by experience,\nand thus might vary in the course of a study.  The problem comes\nwhen we drag the word \"intelligence\" over onto what they're measuring.\nIf they're measuring something inborn, they can't be measuring\nintelligence.  Three year olds aren't smart.   When we describe one\nas smart, it's shorthand for \"smarter than other three year olds.\"SplitPerhaps it's a technicality to point out that a predisposition to\nintelligence is not the same as intelligence.  But it's an important\ntechnicality, because it reminds us that we can become smarter,\njust as we can become wiser.The alarming thing is that we may have to choose between the two.If wisdom and intelligence are the average and peaks of the same\ncurve, then they converge as the number of points on the curve\ndecreases.  If there's just one point, they're identical: the average\nand maximum are the same.  But as the number of points increases,\nwisdom and intelligence diverge.  And historically the number of\npoints on the curve seems to have been increasing: our ability is\ntested in an ever wider range of situations.In the time of Confucius and Socrates, people seem to have regarded\nwisdom, learning, and intelligence as more closely related than we\ndo.  Distinguishing between \"wise\" and \"smart\" is a modern habit.\n[5]\nAnd the reason we do is that they've been diverging.  As knowledge\ngets more specialized, there are more points on the curve, and the\ndistinction between the spikes and the average becomes sharper,\nlike a digital image rendered with more pixels.One consequence is that some old recipes may have become obsolete.\nAt the very least we have to go back and figure out if they were\nreally recipes for wisdom or intelligence.  But the really striking\nchange, as intelligence and wisdom drift apart, is that we may have\nto decide which we prefer.  We may not be able to optimize for both\nsimultaneously.Society seems to have voted for intelligence.  We no longer admire\nthe sage\u2014not the way people did two thousand years ago.  Now\nwe admire the genius.  Because in fact the distinction we began\nwith has a rather brutal converse: just as you can be smart without\nbeing very wise, you can be wise without being very smart.  That\ndoesn't sound especially admirable.  That gets you James Bond, who\nknows what to do in a lot of situations, but has to rely on Q for\nthe ones involving math.Intelligence and wisdom are obviously not mutually exclusive.  In\nfact, a high average may help support high peaks.  But there are\nreasons to believe that at some point you have to choose between\nthem.  One is the example of very smart people, who are so often\nunwise that in popular culture this now seems to be regarded as the\nrule rather than the exception.  Perhaps the absent-minded professor\nis wise in his way, or wiser than he seems, but he's not wise in\nthe way Confucius or Socrates wanted people to be. \n[6]NewFor both Confucius and Socrates, wisdom, virtue, and happiness were\nnecessarily related.  The wise man was someone who knew what the\nright choice was and always made it; to be the right choice, it had\nto be morally right; he was therefore always happy, knowing he'd\ndone the best he could.  I can't think of many ancient philosophers\nwho would have disagreed with that, so far as it goes.\"The superior man is always happy; the small man sad,\" said Confucius.\n[7]Whereas a few years ago I read an interview with a mathematician\nwho said that most nights he went to bed discontented, feeling he\nhadn't made enough progress.  \n[8]\nThe Chinese and Greek words we\ntranslate as \"happy\" didn't mean exactly what we do by it, but\nthere's enough overlap that this remark contradicts them.Is the mathematician a small man because he's discontented?  No;\nhe's just doing a kind of work that wasn't very common in Confucius's\nday.Human knowledge seems to grow fractally.  Time after time, something\nthat seemed a small and uninteresting area\u2014experimental error,\neven\u2014turns out, when examined up close, to have as much in\nit as all knowledge up to that point.  Several of the fractal buds\nthat have exploded since ancient times involve inventing and\ndiscovering new things.  Math, for example, used to be something a\nhandful of people did part-time.  Now it's the career of thousands.\nAnd in work that involves making new things, some old rules don't\napply.Recently I've spent some time advising people, and there I find the\nancient rule still works: try to understand the situation as well\nas you can, give the best advice you can based on your experience,\nand then don't worry about it, knowing you did all you could.  But\nI don't have anything like this serenity when I'm writing an essay.\nThen I'm worried.  What if I run out of ideas?  And when I'm writing,\nfour nights out of five I go to bed discontented, feeling I didn't\nget enough done.Advising people and writing are fundamentally different types of\nwork.  When people come to you with a problem and you have to figure\nout the right thing to do, you don't (usually) have to invent\nanything.  You just weigh the alternatives and try to judge which\nis the prudent choice.  But prudence can't tell me what sentence\nto write next.  The search space is too big.Someone like a judge or a military officer can in much of his work\nbe guided by duty, but duty is no guide in making things.  Makers\ndepend on something more precarious: inspiration.  And like most\npeople who lead a precarious existence, they tend to be worried,\nnot contented.  In that respect they're more like the small man of\nConfucius's day, always one bad harvest (or ruler) away from\nstarvation. Except instead of being at the mercy of weather and\nofficials, they're at the mercy of their own imagination.LimitsTo me it was a relief just to realize it might be ok to be discontented.\nThe idea that a successful person should be happy has thousands of\nyears of momentum behind it.  If I was any good, why didn't I have\nthe easy confidence winners are supposed to have?  But that, I now\nbelieve, is like a runner asking \"If I'm such a good athlete, why\ndo I feel so tired?\" Good runners still get tired; they just get\ntired at higher speeds.People whose work is to invent or discover things are in the same\nposition as the runner.  There's no way for them to do the best\nthey can, because there's no limit to what they could do.  The\nclosest you can come is to compare yourself to other people.  But\nthe better you do, the less this matters.  An undergrad who gets\nsomething published feels like a star.  But for someone at the top\nof the field, what's the test of doing well?  Runners can at least\ncompare themselves to others doing exactly the same thing; if you\nwin an Olympic gold medal, you can be fairly content, even if you\nthink you could have run a bit faster.  But what is a novelist to\ndo?Whereas if you're doing the kind of work in which problems are\npresented to you and you have to choose between several alternatives,\nthere's an upper bound on your performance: choosing the best every\ntime.  In ancient societies, nearly all work seems to have been of\nthis type.  The peasant had to decide whether a garment was worth\nmending, and the king whether or not to invade his neighbor, but\nneither was expected to invent anything.  In principle they could\nhave; the king could have invented firearms, then invaded his\nneighbor.  But in practice innovations were so rare that they weren't\nexpected of you, any more than goalkeepers are expected to score\ngoals. \n[9]\nIn practice, it seemed as if there was a correct decision\nin every situation, and if you made it you'd done your job perfectly,\njust as a goalkeeper who prevents the other team from scoring is\nconsidered to have played a perfect game.In this world, wisdom seemed paramount.  \n[10]\nEven now, most people\ndo work in which problems are put before them and they have to\nchoose the best alternative.  But as knowledge has grown more\nspecialized, there are more and more types of work in which people\nhave to make up new things, and in which performance is therefore\nunbounded.  Intelligence has become increasingly important relative\nto wisdom because there is more room for spikes.RecipesAnother sign we may have to choose between intelligence and wisdom\nis how different their recipes are.  Wisdom seems to come largely\nfrom curing childish qualities, and intelligence largely from\ncultivating them.Recipes for wisdom, particularly ancient ones, tend to have a\nremedial character.  To achieve wisdom one must cut away all the\ndebris that fills one's head on emergence from childhood, leaving\nonly the important stuff.  Both self-control and experience have\nthis effect: to eliminate the random biases that come from your own\nnature and from the circumstances of your upbringing respectively.\nThat's not all wisdom is, but it's a large part of it.  Much of\nwhat's in the sage's head is also in the head of every twelve year\nold.  The difference is that in the head of the twelve year old\nit's mixed together with a lot of random junk.The path to intelligence seems to be through working on hard problems.\nYou develop intelligence as you might develop muscles, through\nexercise.  But there can't be too much compulsion here.  No amount\nof discipline can replace genuine curiosity.  So cultivating\nintelligence seems to be a matter of identifying some bias in one's\ncharacter\u2014some tendency to be interested in certain types of\nthings\u2014and nurturing it.  Instead of obliterating your\nidiosyncrasies in an effort to make yourself a neutral vessel for\nthe truth, you select one and try to grow it from a seedling into\na tree.The wise are all much alike in their wisdom, but very smart people\ntend to be smart in distinctive ways.Most of our educational traditions aim at wisdom. So perhaps one\nreason schools work badly is that they're trying to make intelligence\nusing recipes for wisdom.  Most recipes for wisdom have an element\nof subjection.  At the very least, you're supposed to do what the\nteacher says.  The more extreme recipes aim to break down your\nindividuality the way basic training does.  But that's not the route\nto intelligence.  Whereas wisdom comes through humility, it may\nactually help, in cultivating intelligence, to have a mistakenly\nhigh opinion of your abilities, because that encourages you to keep\nworking.  Ideally till you realize how mistaken you were.(The reason it's hard to learn new skills late in life is not just\nthat one's brain is less malleable.  Another probably even worse\nobstacle is that one has higher standards.)I realize we're on dangerous ground here.  I'm not proposing the\nprimary goal of education should be to increase students' \"self-esteem.\"\nThat just breeds laziness.  And in any case, it doesn't really fool\nthe kids, not the smart ones.  They can tell at a young age that a\ncontest where everyone wins is a fraud.A teacher has to walk a narrow path: you want to encourage kids to\ncome up with things on their own, but you can't simply applaud\neverything they produce.  You have to be a good audience: appreciative,\nbut not too easily impressed.  And that's a lot of work.  You have\nto have a good enough grasp of kids' capacities at different ages\nto know when to be surprised.That's the opposite of traditional recipes for education.  Traditionally\nthe student is the audience, not the teacher; the student's job is\nnot to invent, but to absorb some prescribed body of material.  (The\nuse of the term \"recitation\" for sections in some colleges is a\nfossil of this.) The problem with these old traditions is that\nthey're too much influenced by recipes for wisdom.DifferentI deliberately gave this essay a provocative title; of course it's\nworth being wise.  But I think it's important to understand the\nrelationship between intelligence and wisdom, and particularly what\nseems to be the growing gap between them.  That way we can avoid\napplying rules and standards to intelligence that are really meant\nfor wisdom.  These two senses of \"knowing what to do\" are more\ndifferent than most people realize.  The path to wisdom is through\ndiscipline, and the path to intelligence through carefully selected\nself-indulgence.  Wisdom is universal, and intelligence idiosyncratic.\nAnd while wisdom yields calmness, intelligence much of the time\nleads to discontentment.That's particularly worth remembering.  A physicist friend recently\ntold me half his department was on Prozac.  Perhaps if we acknowledge\nthat some amount of frustration is inevitable in certain kinds\nof work, we can mitigate its effects.  Perhaps we can box it up and\nput it away some of the time, instead of letting it flow together\nwith everyday sadness to produce what seems an alarmingly large\npool.  At the very least, we can avoid being discontented about\nbeing discontented.If you feel exhausted, it's not necessarily because there's something\nwrong with you.  Maybe you're just running fast.Notes[1]\nGauss was supposedly asked this when he was 10.  Instead of\nlaboriously adding together the numbers like the other students,\nhe saw that they consisted of 50 pairs that each summed to 101 (100\n+ 1, 99 + 2, etc), and that he could just multiply 101 by 50 to get\nthe answer, 5050.[2]\nA variant is that intelligence is the ability to solve problems,\nand wisdom the judgement to know how to use those solutions.   But\nwhile this is certainly an important relationship between wisdom\nand intelligence, it's not the distinction between them.  Wisdom\nis useful in solving problems too, and intelligence can help in\ndeciding what to do with the solutions.[3]\nIn judging both intelligence and wisdom we have to factor out\nsome knowledge. People who know the combination of a safe will be\nbetter at opening it than people who don't, but no one would say\nthat was a test of intelligence or wisdom.But knowledge overlaps with wisdom and probably also intelligence.\nA knowledge of human nature is certainly part of wisdom.  So where\ndo we draw the line?Perhaps the solution is to discount knowledge that at some point\nhas a sharp drop in utility.  For example, understanding French\nwill help you in a large number of situations, but its value drops\nsharply as soon as no one else involved knows French.  Whereas the\nvalue of understanding vanity would decline more gradually.The knowledge whose utility drops sharply is the kind that has\nlittle relation to other knowledge.  This includes mere conventions,\nlike languages and safe combinations, and also what we'd call\n\"random\" facts, like movie stars' birthdays, or how to distinguish\n1956 from 1957 Studebakers.[4]\nPeople seeking some single thing called \"wisdom\" have been\nfooled by grammar.  Wisdom is just knowing the right thing to do,\nand there are a hundred and one different qualities that help in\nthat.  Some, like selflessness, might come from meditating in an\nempty room, and others, like a knowledge of human nature, might\ncome from going to drunken parties.Perhaps realizing this will help dispel the cloud of semi-sacred\nmystery that surrounds wisdom in so many people's eyes.  The mystery\ncomes mostly from looking for something that doesn't exist.  And\nthe reason there have historically been so many different schools\nof thought about how to achieve wisdom is that they've focused on\ndifferent components of it.When I use the word \"wisdom\" in this essay, I mean no more than\nwhatever collection of qualities helps people make the right choice\nin a wide variety of situations.[5]\nEven in English, our sense of the word \"intelligence\" is\nsurprisingly recent.  Predecessors like \"understanding\" seem to\nhave had a broader meaning.[6]\nThere is of course some uncertainty about how closely the remarks\nattributed to Confucius and Socrates resemble their actual opinions.\nI'm using these names as we use the name \"Homer,\" to mean the\nhypothetical people who said the things attributed to them.[7]\nAnalects VII:36, Fung trans.Some translators use \"calm\" instead of \"happy.\"  One source of\ndifficulty here is that present-day English speakers have a different\nidea of happiness from many older societies.  Every language probably\nhas a word meaning \"how one feels when things are going well,\" but\ndifferent cultures react differently when things go well.  We react\nlike children, with smiles and laughter.  But in a more reserved\nsociety, or in one where life was tougher, the reaction might be a\nquiet contentment.[8]\nIt may have been Andrew Wiles, but I'm not sure.  If anyone\nremembers such an interview, I'd appreciate hearing from you.[9]\nConfucius claimed proudly that he had never invented\nanything\u2014that he had simply passed on an accurate account of\nancient traditions.  [Analects VII:1] It's hard for us now to\nappreciate how important a duty it must have been in preliterate\nsocieties to remember and pass on the group's accumulated knowledge.\nEven in Confucius's time it still seems to have been the first duty\nof the scholar.[10]\nThe bias toward wisdom in ancient philosophy may be exaggerated\nby the fact that, in both Greece and China, many of the first\nphilosophers (including Confucius and Plato) saw themselves as\nteachers of administrators, and so thought disproportionately about\nsuch matters.  The few people who did invent things, like storytellers,\nmust have seemed an outlying data point that could be ignored.Thanks to Trevor Blackwell, Sarah Harlin, Jessica Livingston,\nand Robert Morris for reading drafts of this.February 2021Before college the two main things I worked on, outside of school,\nwere writing and programming. I didn't write essays. I wrote what\nbeginning writers were supposed to write then, and probably still\nare: short stories. My stories were awful. They had hardly any plot,\njust characters with strong feelings, which I imagined made them\ndeep.The first programs I tried writing were on the IBM 1401 that our\nschool district used for what was then called \"data processing.\"\nThis was in 9th grade, so I was 13 or 14. The school district's\n1401 happened to be in the basement of our junior high school, and\nmy friend Rich Draves and I got permission to use it. It was like\na mini Bond villain's lair down there, with all these alien-looking\nmachines \u0097 CPU, disk drives, printer, card reader \u0097 sitting up\non a raised floor under bright fluorescent lights.The language we used was an early version of Fortran. You had to\ntype programs on punch cards, then stack them in the card reader\nand press a button to load the program into memory and run it. The\nresult would ordinarily be to print something on the spectacularly\nloud printer.I was puzzled by the 1401. I couldn't figure out what to do with\nit. And in retrospect there's not much I could have done with it.\nThe only form of input to programs was data stored on punched cards,\nand I didn't have any data stored on punched cards. The only other\noption was to do things that didn't rely on any input, like calculate\napproximations of pi, but I didn't know enough math to do anything\ninteresting of that type. So I'm not surprised I can't remember any\nprograms I wrote, because they can't have done much. My clearest\nmemory is of the moment I learned it was possible for programs not\nto terminate, when one of mine didn't. On a machine without\ntime-sharing, this was a social as well as a technical error, as\nthe data center manager's expression made clear.With microcomputers, everything changed. Now you could have a\ncomputer sitting right in front of you, on a desk, that could respond\nto your keystrokes as it was running instead of just churning through\na stack of punch cards and then stopping. \n[1]The first of my friends to get a microcomputer built it himself.\nIt was sold as a kit by Heathkit. I remember vividly how impressed\nand envious I felt watching him sitting in front of it, typing\nprograms right into the computer.Computers were expensive in those days and it took me years of\nnagging before I convinced my father to buy one, a TRS-80, in about\n1980. The gold standard then was the Apple II, but a TRS-80 was\ngood enough. This was when I really started programming. I wrote\nsimple games, a program to predict how high my model rockets would\nfly, and a word processor that my father used to write at least one\nbook. There was only room in memory for about 2 pages of text, so\nhe'd write 2 pages at a time and then print them out, but it was a\nlot better than a typewriter.Though I liked programming, I didn't plan to study it in college.\nIn college I was going to study philosophy, which sounded much more\npowerful. It seemed, to my naive high school self, to be the study\nof the ultimate truths, compared to which the things studied in\nother fields would be mere domain knowledge. What I discovered when\nI got to college was that the other fields took up so much of the\nspace of ideas that there wasn't much left for these supposed\nultimate truths. All that seemed left for philosophy were edge cases\nthat people in other fields felt could safely be ignored.I couldn't have put this into words when I was 18. All I knew at\nthe time was that I kept taking philosophy courses and they kept\nbeing boring. So I decided to switch to AI.AI was in the air in the mid 1980s, but there were two things\nespecially that made me want to work on it: a novel by Heinlein\ncalled The Moon is a Harsh Mistress, which featured an intelligent\ncomputer called Mike, and a PBS documentary that showed Terry\nWinograd using SHRDLU. I haven't tried rereading The Moon is a Harsh\nMistress, so I don't know how well it has aged, but when I read it\nI was drawn entirely into its world. It seemed only a matter of\ntime before we'd have Mike, and when I saw Winograd using SHRDLU,\nit seemed like that time would be a few years at most. All you had\nto do was teach SHRDLU more words.There weren't any classes in AI at Cornell then, not even graduate\nclasses, so I started trying to teach myself. Which meant learning\nLisp, since in those days Lisp was regarded as the language of AI.\nThe commonly used programming languages then were pretty primitive,\nand programmers' ideas correspondingly so. The default language at\nCornell was a Pascal-like language called PL/I, and the situation\nwas similar elsewhere. Learning Lisp expanded my concept of a program\nso fast that it was years before I started to have a sense of where\nthe new limits were. This was more like it; this was what I had\nexpected college to do. It wasn't happening in a class, like it was\nsupposed to, but that was ok. For the next couple years I was on a\nroll. I knew what I was going to do.For my undergraduate thesis, I reverse-engineered SHRDLU. My God\ndid I love working on that program. It was a pleasing bit of code,\nbut what made it even more exciting was my belief \u0097 hard to imagine\nnow, but not unique in 1985 \u0097 that it was already climbing the\nlower slopes of intelligence.I had gotten into a program at Cornell that didn't make you choose\na major. You could take whatever classes you liked, and choose\nwhatever you liked to put on your degree. I of course chose \"Artificial\nIntelligence.\" When I got the actual physical diploma, I was dismayed\nto find that the quotes had been included, which made them read as\nscare-quotes. At the time this bothered me, but now it seems amusingly\naccurate, for reasons I was about to discover.I applied to 3 grad schools: MIT and Yale, which were renowned for\nAI at the time, and Harvard, which I'd visited because Rich Draves\nwent there, and was also home to Bill Woods, who'd invented the\ntype of parser I used in my SHRDLU clone. Only Harvard accepted me,\nso that was where I went.I don't remember the moment it happened, or if there even was a\nspecific moment, but during the first year of grad school I realized\nthat AI, as practiced at the time, was a hoax. By which I mean the\nsort of AI in which a program that's told \"the dog is sitting on\nthe chair\" translates this into some formal representation and adds\nit to the list of things it knows.What these programs really showed was that there's a subset of\nnatural language that's a formal language. But a very proper subset.\nIt was clear that there was an unbridgeable gap between what they\ncould do and actually understanding natural language. It was not,\nin fact, simply a matter of teaching SHRDLU more words. That whole\nway of doing AI, with explicit data structures representing concepts,\nwas not going to work. Its brokenness did, as so often happens,\ngenerate a lot of opportunities to write papers about various\nband-aids that could be applied to it, but it was never going to\nget us Mike.So I looked around to see what I could salvage from the wreckage\nof my plans, and there was Lisp. I knew from experience that Lisp\nwas interesting for its own sake and not just for its association\nwith AI, even though that was the main reason people cared about\nit at the time. So I decided to focus on Lisp. In fact, I decided\nto write a book about Lisp hacking. It's scary to think how little\nI knew about Lisp hacking when I started writing that book. But\nthere's nothing like writing a book about something to help you\nlearn it. The book, On Lisp, wasn't published till 1993, but I wrote\nmuch of it in grad school.Computer Science is an uneasy alliance between two halves, theory\nand systems. The theory people prove things, and the systems people\nbuild things. I wanted to build things. I had plenty of respect for\ntheory \u0097 indeed, a sneaking suspicion that it was the more admirable\nof the two halves \u0097 but building things seemed so much more exciting.The problem with systems work, though, was that it didn't last.\nAny program you wrote today, no matter how good, would be obsolete\nin a couple decades at best. People might mention your software in\nfootnotes, but no one would actually use it. And indeed, it would\nseem very feeble work. Only people with a sense of the history of\nthe field would even realize that, in its time, it had been good.There were some surplus Xerox Dandelions floating around the computer\nlab at one point. Anyone who wanted one to play around with could\nhave one. I was briefly tempted, but they were so slow by present\nstandards; what was the point? No one else wanted one either, so\noff they went. That was what happened to systems work.I wanted not just to build things, but to build things that would\nlast.In this dissatisfied state I went in 1988 to visit Rich Draves at\nCMU, where he was in grad school. One day I went to visit the\nCarnegie Institute, where I'd spent a lot of time as a kid. While\nlooking at a painting there I realized something that might seem\nobvious, but was a big surprise to me. There, right on the wall,\nwas something you could make that would last. Paintings didn't\nbecome obsolete. Some of the best ones were hundreds of years old.And moreover this was something you could make a living doing. Not\nas easily as you could by writing software, of course, but I thought\nif you were really industrious and lived really cheaply, it had to\nbe possible to make enough to survive. And as an artist you could\nbe truly independent. You wouldn't have a boss, or even need to get\nresearch funding.I had always liked looking at paintings. Could I make them? I had\nno idea. I'd never imagined it was even possible. I knew intellectually\nthat people made art \u0097 that it didn't just appear spontaneously\n\u0097 but it was as if the people who made it were a different species.\nThey either lived long ago or were mysterious geniuses doing strange\nthings in profiles in Life magazine. The idea of actually being\nable to make art, to put that verb before that noun, seemed almost\nmiraculous.That fall I started taking art classes at Harvard. Grad students\ncould take classes in any department, and my advisor, Tom Cheatham,\nwas very easy going. If he even knew about the strange classes I\nwas taking, he never said anything.So now I was in a PhD program in computer science, yet planning to\nbe an artist, yet also genuinely in love with Lisp hacking and\nworking away at On Lisp. In other words, like many a grad student,\nI was working energetically on multiple projects that were not my\nthesis.I didn't see a way out of this situation. I didn't want to drop out\nof grad school, but how else was I going to get out? I remember\nwhen my friend Robert Morris got kicked out of Cornell for writing\nthe internet worm of 1988, I was envious that he'd found such a\nspectacular way to get out of grad school.Then one day in April 1990 a crack appeared in the wall. I ran into\nprofessor Cheatham and he asked if I was far enough along to graduate\nthat June. I didn't have a word of my dissertation written, but in\nwhat must have been the quickest bit of thinking in my life, I\ndecided to take a shot at writing one in the 5 weeks or so that\nremained before the deadline, reusing parts of On Lisp where I\ncould, and I was able to respond, with no perceptible delay \"Yes,\nI think so. I'll give you something to read in a few days.\"I picked applications of continuations as the topic. In retrospect\nI should have written about macros and embedded languages. There's\na whole world there that's barely been explored. But all I wanted\nwas to get out of grad school, and my rapidly written dissertation\nsufficed, just barely.Meanwhile I was applying to art schools. I applied to two: RISD in\nthe US, and the Accademia di Belli Arti in Florence, which, because\nit was the oldest art school, I imagined would be good. RISD accepted\nme, and I never heard back from the Accademia, so off to Providence\nI went.I'd applied for the BFA program at RISD, which meant in effect that\nI had to go to college again. This was not as strange as it sounds,\nbecause I was only 25, and art schools are full of people of different\nages. RISD counted me as a transfer sophomore and said I had to do\nthe foundation that summer. The foundation means the classes that\neveryone has to take in fundamental subjects like drawing, color,\nand design.Toward the end of the summer I got a big surprise: a letter from\nthe Accademia, which had been delayed because they'd sent it to\nCambridge England instead of Cambridge Massachusetts, inviting me\nto take the entrance exam in Florence that fall. This was now only\nweeks away. My nice landlady let me leave my stuff in her attic. I\nhad some money saved from consulting work I'd done in grad school;\nthere was probably enough to last a year if I lived cheaply. Now\nall I had to do was learn Italian.Only stranieri (foreigners) had to take this entrance exam. In\nretrospect it may well have been a way of excluding them, because\nthere were so many stranieri attracted by the idea of studying\nart in Florence that the Italian students would otherwise have been\noutnumbered. I was in decent shape at painting and drawing from the\nRISD foundation that summer, but I still don't know how I managed\nto pass the written exam. I remember that I answered the essay\nquestion by writing about Cezanne, and that I cranked up the\nintellectual level as high as I could to make the most of my limited\nvocabulary. \n[2]I'm only up to age 25 and already there are such conspicuous patterns.\nHere I was, yet again about to attend some august institution in\nthe hopes of learning about some prestigious subject, and yet again\nabout to be disappointed. The students and faculty in the painting\ndepartment at the Accademia were the nicest people you could imagine,\nbut they had long since arrived at an arrangement whereby the\nstudents wouldn't require the faculty to teach anything, and in\nreturn the faculty wouldn't require the students to learn anything.\nAnd at the same time all involved would adhere outwardly to the\nconventions of a 19th century atelier. We actually had one of those\nlittle stoves, fed with kindling, that you see in 19th century\nstudio paintings, and a nude model sitting as close to it as possible\nwithout getting burned. Except hardly anyone else painted her besides\nme. The rest of the students spent their time chatting or occasionally\ntrying to imitate things they'd seen in American art magazines.Our model turned out to live just down the street from me. She made\na living from a combination of modelling and making fakes for a\nlocal antique dealer. She'd copy an obscure old painting out of a\nbook, and then he'd take the copy and maltreat it to make it look\nold. \n[3]While I was a student at the Accademia I started painting still\nlives in my bedroom at night. These paintings were tiny, because\nthe room was, and because I painted them on leftover scraps of\ncanvas, which was all I could afford at the time. Painting still\nlives is different from painting people, because the subject, as\nits name suggests, can't move. People can't sit for more than about\n15 minutes at a time, and when they do they don't sit very still.\nSo the traditional m.o. for painting people is to know how to paint\na generic person, which you then modify to match the specific person\nyou're painting. Whereas a still life you can, if you want, copy\npixel by pixel from what you're seeing. You don't want to stop\nthere, of course, or you get merely photographic accuracy, and what\nmakes a still life interesting is that it's been through a head.\nYou want to emphasize the visual cues that tell you, for example,\nthat the reason the color changes suddenly at a certain point is\nthat it's the edge of an object. By subtly emphasizing such things\nyou can make paintings that are more realistic than photographs not\njust in some metaphorical sense, but in the strict information-theoretic\nsense. \n[4]I liked painting still lives because I was curious about what I was\nseeing. In everyday life, we aren't consciously aware of much we're\nseeing. Most visual perception is handled by low-level processes\nthat merely tell your brain \"that's a water droplet\" without telling\nyou details like where the lightest and darkest points are, or\n\"that's a bush\" without telling you the shape and position of every\nleaf. This is a feature of brains, not a bug. In everyday life it\nwould be distracting to notice every leaf on every bush. But when\nyou have to paint something, you have to look more closely, and\nwhen you do there's a lot to see. You can still be noticing new\nthings after days of trying to paint something people usually take\nfor granted, just as you can  after\ndays of trying to write an essay about something people usually\ntake for granted.This is not the only way to paint. I'm not 100% sure it's even a\ngood way to paint. But it seemed a good enough bet to be worth\ntrying.Our teacher, professor Ulivi, was a nice guy. He could see I worked\nhard, and gave me a good grade, which he wrote down in a sort of\npassport each student had. But the Accademia wasn't teaching me\nanything except Italian, and my money was running out, so at the\nend of the first year I went back to the US.I wanted to go back to RISD, but I was now broke and RISD was very\nexpensive, so I decided to get a job for a year and then return to\nRISD the next fall. I got one at a company called Interleaf, which\nmade software for creating documents. You mean like Microsoft Word?\nExactly. That was how I learned that low end software tends to eat\nhigh end software. But Interleaf still had a few years to live yet.\n[5]Interleaf had done something pretty bold. Inspired by Emacs, they'd\nadded a scripting language, and even made the scripting language a\ndialect of Lisp. Now they wanted a Lisp hacker to write things in\nit. This was the closest thing I've had to a normal job, and I\nhereby apologize to my boss and coworkers, because I was a bad\nemployee. Their Lisp was the thinnest icing on a giant C cake, and\nsince I didn't know C and didn't want to learn it, I never understood\nmost of the software. Plus I was terribly irresponsible. This was\nback when a programming job meant showing up every day during certain\nworking hours. That seemed unnatural to me, and on this point the\nrest of the world is coming around to my way of thinking, but at\nthe time it caused a lot of friction. Toward the end of the year I\nspent much of my time surreptitiously working on On Lisp, which I\nhad by this time gotten a contract to publish.The good part was that I got paid huge amounts of money, especially\nby art student standards. In Florence, after paying my part of the\nrent, my budget for everything else had been $7 a day. Now I was\ngetting paid more than 4 times that every hour, even when I was\njust sitting in a meeting. By living cheaply I not only managed to\nsave enough to go back to RISD, but also paid off my college loans.I learned some useful things at Interleaf, though they were mostly\nabout what not to do. I learned that it's better for technology\ncompanies to be run by product people than sales people (though\nsales is a real skill and people who are good at it are really good\nat it), that it leads to bugs when code is edited by too many people,\nthat cheap office space is no bargain if it's depressing, that\nplanned meetings are inferior to corridor conversations, that big,\nbureaucratic customers are a dangerous source of money, and that\nthere's not much overlap between conventional office hours and the\noptimal time for hacking, or conventional offices and the optimal\nplace for it.But the most important thing I learned, and which I used in both\nViaweb and Y Combinator, is that the low end eats the high end:\nthat it's good to be the \"entry level\" option, even though that\nwill be less prestigious, because if you're not, someone else will\nbe, and will squash you against the ceiling. Which in turn means\nthat prestige is a danger sign.When I left to go back to RISD the next fall, I arranged to do\nfreelance work for the group that did projects for customers, and\nthis was how I survived for the next several years. When I came\nback to visit for a project later on, someone told me about a new\nthing called HTML, which was, as he described it, a derivative of\nSGML. Markup language enthusiasts were an occupational hazard at\nInterleaf and I ignored him, but this HTML thing later became a big\npart of my life.In the fall of 1992 I moved back to Providence to continue at RISD.\nThe foundation had merely been intro stuff, and the Accademia had\nbeen a (very civilized) joke. Now I was going to see what real art\nschool was like. But alas it was more like the Accademia than not.\nBetter organized, certainly, and a lot more expensive, but it was\nnow becoming clear that art school did not bear the same relationship\nto art that medical school bore to medicine. At least not the\npainting department. The textile department, which my next door\nneighbor belonged to, seemed to be pretty rigorous. No doubt\nillustration and architecture were too. But painting was post-rigorous.\nPainting students were supposed to express themselves, which to the\nmore worldly ones meant to try to cook up some sort of distinctive\nsignature style.A signature style is the visual equivalent of what in show business\nis known as a \"schtick\": something that immediately identifies the\nwork as yours and no one else's. For example, when you see a painting\nthat looks like a certain kind of cartoon, you know it's by Roy\nLichtenstein. So if you see a big painting of this type hanging in\nthe apartment of a hedge fund manager, you know he paid millions\nof dollars for it. That's not always why artists have a signature\nstyle, but it's usually why buyers pay a lot for such work.\n[6]There were plenty of earnest students too: kids who \"could draw\"\nin high school, and now had come to what was supposed to be the\nbest art school in the country, to learn to draw even better. They\ntended to be confused and demoralized by what they found at RISD,\nbut they kept going, because painting was what they did. I was not\none of the kids who could draw in high school, but at RISD I was\ndefinitely closer to their tribe than the tribe of signature style\nseekers.I learned a lot in the color class I took at RISD, but otherwise I\nwas basically teaching myself to paint, and I could do that for\nfree. So in 1993 I dropped out. I hung around Providence for a bit,\nand then my college friend Nancy Parmet did me a big favor. A\nrent-controlled apartment in a building her mother owned in New\nYork was becoming vacant. Did I want it? It wasn't much more than\nmy current place, and New York was supposed to be where the artists\nwere. So yes, I wanted it!\n[7]Asterix comics begin by zooming in on a tiny corner of Roman Gaul\nthat turns out not to be controlled by the Romans. You can do\nsomething similar on a map of New York City: if you zoom in on the\nUpper East Side, there's a tiny corner that's not rich, or at least\nwasn't in 1993. It's called Yorkville, and that was my new home.\nNow I was a New York artist \u0097 in the strictly technical sense of\nmaking paintings and living in New York.I was nervous about money, because I could sense that Interleaf was\non the way down. Freelance Lisp hacking work was very rare, and I\ndidn't want to have to program in another language, which in those\ndays would have meant C++ if I was lucky. So with my unerring nose\nfor financial opportunity, I decided to write another book on Lisp.\nThis would be a popular book, the sort of book that could be used\nas a textbook. I imagined myself living frugally off the royalties\nand spending all my time painting. (The painting on the cover of\nthis book, ANSI Common Lisp, is one that I painted around this\ntime.)The best thing about New York for me was the presence of Idelle and\nJulian Weber. Idelle Weber was a painter, one of the early\nphotorealists, and I'd taken her painting class at Harvard. I've\nnever known a teacher more beloved by her students. Large numbers\nof former students kept in touch with her, including me. After I\nmoved to New York I became her de facto studio assistant.She liked to paint on big, square canvases, 4 to 5 feet on a side.\nOne day in late 1994 as I was stretching one of these monsters there\nwas something on the radio about a famous fund manager. He wasn't\nthat much older than me, and was super rich. The thought suddenly\noccurred to me: why don't I become rich? Then I'll be able to work\non whatever I want.Meanwhile I'd been hearing more and more about this new thing called\nthe World Wide Web. Robert Morris showed it to me when I visited\nhim in Cambridge, where he was now in grad school at Harvard. It\nseemed to me that the web would be a big deal. I'd seen what graphical\nuser interfaces had done for the popularity of microcomputers. It\nseemed like the web would do the same for the internet.If I wanted to get rich, here was the next train leaving the station.\nI was right about that part. What I got wrong was the idea. I decided\nwe should start a company to put art galleries online. I can't\nhonestly say, after reading so many Y Combinator applications, that\nthis was the worst startup idea ever, but it was up there. Art\ngalleries didn't want to be online, and still don't, not the fancy\nones. That's not how they sell. I wrote some software to generate\nweb sites for galleries, and Robert wrote some to resize images and\nset up an http server to serve the pages. Then we tried to sign up\ngalleries. To call this a difficult sale would be an understatement.\nIt was difficult to give away. A few galleries let us make sites\nfor them for free, but none paid us.Then some online stores started to appear, and I realized that\nexcept for the order buttons they were identical to the sites we'd\nbeen generating for galleries. This impressive-sounding thing called\nan \"internet storefront\" was something we already knew how to build.So in the summer of 1995, after I submitted the camera-ready copy\nof ANSI Common Lisp to the publishers, we started trying to write\nsoftware to build online stores. At first this was going to be\nnormal desktop software, which in those days meant Windows software.\nThat was an alarming prospect, because neither of us knew how to\nwrite Windows software or wanted to learn. We lived in the Unix\nworld. But we decided we'd at least try writing a prototype store\nbuilder on Unix. Robert wrote a shopping cart, and I wrote a new\nsite generator for stores \u0097 in Lisp, of course.We were working out of Robert's apartment in Cambridge. His roommate\nwas away for big chunks of time, during which I got to sleep in his\nroom. For some reason there was no bed frame or sheets, just a\nmattress on the floor. One morning as I was lying on this mattress\nI had an idea that made me sit up like a capital L. What if we ran\nthe software on the server, and let users control it by clicking\non links? Then we'd never have to write anything to run on users'\ncomputers. We could generate the sites on the same server we'd serve\nthem from. Users wouldn't need anything more than a browser.This kind of software, known as a web app, is common now, but at\nthe time it wasn't clear that it was even possible. To find out,\nwe decided to try making a version of our store builder that you\ncould control through the browser. A couple days later, on August\n12, we had one that worked. The UI was horrible, but it proved you\ncould build a whole store through the browser, without any client\nsoftware or typing anything into the command line on the server.Now we felt like we were really onto something. I had visions of a\nwhole new generation of software working this way. You wouldn't\nneed versions, or ports, or any of that crap. At Interleaf there\nhad been a whole group called Release Engineering that seemed to\nbe at least as big as the group that actually wrote the software.\nNow you could just update the software right on the server.We started a new company we called Viaweb, after the fact that our\nsoftware worked via the web, and we got $10,000 in seed funding\nfrom Idelle's husband Julian. In return for that and doing the\ninitial legal work and giving us business advice, we gave him 10%\nof the company. Ten years later this deal became the model for Y\nCombinator's. We knew founders needed something like this, because\nwe'd needed it ourselves.At this stage I had a negative net worth, because the thousand\ndollars or so I had in the bank was more than counterbalanced by\nwhat I owed the government in taxes. (Had I diligently set aside\nthe proper proportion of the money I'd made consulting for Interleaf?\nNo, I had not.) So although Robert had his graduate student stipend,\nI needed that seed funding to live on.We originally hoped to launch in September, but we got more ambitious\nabout the software as we worked on it. Eventually we managed to\nbuild a WYSIWYG site builder, in the sense that as you were creating\npages, they looked exactly like the static ones that would be\ngenerated later, except that instead of leading to static pages,\nthe links all referred to closures stored in a hash table on the\nserver.It helped to have studied art, because the main goal of an online\nstore builder is to make users look legit, and the key to looking\nlegit is high production values. If you get page layouts and fonts\nand colors right, you can make a guy running a store out of his\nbedroom look more legit than a big company.(If you're curious why my site looks so old-fashioned, it's because\nit's still made with this software. It may look clunky today, but\nin 1996 it was the last word in slick.)In September, Robert rebelled. \"We've been working on this for a\nmonth,\" he said, \"and it's still not done.\" This is funny in\nretrospect, because he would still be working on it almost 3 years\nlater. But I decided it might be prudent to recruit more programmers,\nand I asked Robert who else in grad school with him was really good.\nHe recommended Trevor Blackwell, which surprised me at first, because\nat that point I knew Trevor mainly for his plan to reduce everything\nin his life to a stack of notecards, which he carried around with\nhim. But Rtm was right, as usual. Trevor turned out to be a\nfrighteningly effective hacker.It was a lot of fun working with Robert and Trevor. They're the two\nmost independent-minded people \nI know, and in completely different\nways. If you could see inside Rtm's brain it would look like a\ncolonial New England church, and if you could see inside Trevor's\nit would look like the worst excesses of Austrian Rococo.We opened for business, with 6 stores, in January 1996. It was just\nas well we waited a few months, because although we worried we were\nlate, we were actually almost fatally early. There was a lot of\ntalk in the press then about ecommerce, but not many people actually\nwanted online stores.\n[8]There were three main parts to the software: the editor, which\npeople used to build sites and which I wrote, the shopping cart,\nwhich Robert wrote, and the manager, which kept track of orders and\nstatistics, and which Trevor wrote. In its time, the editor was one\nof the best general-purpose site builders. I kept the code tight\nand didn't have to integrate with any other software except Robert's\nand Trevor's, so it was quite fun to work on. If all I'd had to do\nwas work on this software, the next 3 years would have been the\neasiest of my life. Unfortunately I had to do a lot more, all of\nit stuff I was worse at than programming, and the next 3 years were\ninstead the most stressful.There were a lot of startups making ecommerce software in the second\nhalf of the 90s. We were determined to be the Microsoft Word, not\nthe Interleaf. Which meant being easy to use and inexpensive. It\nwas lucky for us that we were poor, because that caused us to make\nViaweb even more inexpensive than we realized. We charged $100 a\nmonth for a small store and $300 a month for a big one. This low\nprice was a big attraction, and a constant thorn in the sides of\ncompetitors, but it wasn't because of some clever insight that we\nset the price low. We had no idea what businesses paid for things.\n$300 a month seemed like a lot of money to us.We did a lot of things right by accident like that. For example,\nwe did what's now called \"doing things that \ndon't scale,\" although\nat the time we would have described it as \"being so lame that we're\ndriven to the most desperate measures to get users.\" The most common\nof which was building stores for them. This seemed particularly\nhumiliating, since the whole raison d'etre of our software was that\npeople could use it to make their own stores. But anything to get\nusers.We learned a lot more about retail than we wanted to know. For\nexample, that if you could only have a small image of a man's shirt\n(and all images were small then by present standards), it was better\nto have a closeup of the collar than a picture of the whole shirt.\nThe reason I remember learning this was that it meant I had to\nrescan about 30 images of men's shirts. My first set of scans were\nso beautiful too.Though this felt wrong, it was exactly the right thing to be doing.\nBuilding stores for users taught us about retail, and about how it\nfelt to use our software. I was initially both mystified and repelled\nby \"business\" and thought we needed a \"business person\" to be in\ncharge of it, but once we started to get users, I was converted,\nin much the same way I was converted to \nfatherhood once I had kids.\nWhatever users wanted, I was all theirs. Maybe one day we'd have\nso many users that I couldn't scan their images for them, but in\nthe meantime there was nothing more important to do.Another thing I didn't get at the time is that \ngrowth rate is the\nultimate test of a startup. Our growth rate was fine. We had about\n70 stores at the end of 1996 and about 500 at the end of 1997. I\nmistakenly thought the thing that mattered was the absolute number\nof users. And that is the thing that matters in the sense that\nthat's how much money you're making, and if you're not making enough,\nyou might go out of business. But in the long term the growth rate\ntakes care of the absolute number. If we'd been a startup I was\nadvising at Y Combinator, I would have said: Stop being so stressed\nout, because you're doing fine. You're growing 7x a year. Just don't\nhire too many more people and you'll soon be profitable, and then\nyou'll control your own destiny.Alas I hired lots more people, partly because our investors wanted\nme to, and partly because that's what startups did during the\nInternet Bubble. A company with just a handful of employees would\nhave seemed amateurish. So we didn't reach breakeven until about\nwhen Yahoo bought us in the summer of 1998. Which in turn meant we\nwere at the mercy of investors for the entire life of the company.\nAnd since both we and our investors were noobs at startups, the\nresult was a mess even by startup standards.It was a huge relief when Yahoo bought us. In principle our Viaweb\nstock was valuable. It was a share in a business that was profitable\nand growing rapidly. But it didn't feel very valuable to me; I had\nno idea how to value a business, but I was all too keenly aware of\nthe near-death experiences we seemed to have every few months. Nor\nhad I changed my grad student lifestyle significantly since we\nstarted. So when Yahoo bought us it felt like going from rags to\nriches. Since we were going to California, I bought a car, a yellow\n1998 VW GTI. I remember thinking that its leather seats alone were\nby far the most luxurious thing I owned.The next year, from the summer of 1998 to the summer of 1999, must\nhave been the least productive of my life. I didn't realize it at\nthe time, but I was worn out from the effort and stress of running\nViaweb. For a while after I got to California I tried to continue\nmy usual m.o. of programming till 3 in the morning, but fatigue\ncombined with Yahoo's prematurely aged\nculture and grim cube farm\nin Santa Clara gradually dragged me down. After a few months it\nfelt disconcertingly like working at Interleaf.Yahoo had given us a lot of options when they bought us. At the\ntime I thought Yahoo was so overvalued that they'd never be worth\nanything, but to my astonishment the stock went up 5x in the next\nyear. I hung on till the first chunk of options vested, then in the\nsummer of 1999 I left. It had been so long since I'd painted anything\nthat I'd half forgotten why I was doing this. My brain had been\nentirely full of software and men's shirts for 4 years. But I had\ndone this to get rich so I could paint, I reminded myself, and now\nI was rich, so I should go paint.When I said I was leaving, my boss at Yahoo had a long conversation\nwith me about my plans. I told him all about the kinds of pictures\nI wanted to paint. At the time I was touched that he took such an\ninterest in me. Now I realize it was because he thought I was lying.\nMy options at that point were worth about $2 million a month. If I\nwas leaving that kind of money on the table, it could only be to\ngo and start some new startup, and if I did, I might take people\nwith me. This was the height of the Internet Bubble, and Yahoo was\nground zero of it. My boss was at that moment a billionaire. Leaving\nthen to start a new startup must have seemed to him an insanely,\nand yet also plausibly, ambitious plan.But I really was quitting to paint, and I started immediately.\nThere was no time to lose. I'd already burned 4 years getting rich.\nNow when I talk to founders who are leaving after selling their\ncompanies, my advice is always the same: take a vacation. That's\nwhat I should have done, just gone off somewhere and done nothing\nfor a month or two, but the idea never occurred to me.So I tried to paint, but I just didn't seem to have any energy or\nambition. Part of the problem was that I didn't know many people\nin California. I'd compounded this problem by buying a house up in\nthe Santa Cruz Mountains, with a beautiful view but miles from\nanywhere. I stuck it out for a few more months, then in desperation\nI went back to New York, where unless you understand about rent\ncontrol you'll be surprised to hear I still had my apartment, sealed\nup like a tomb of my old life. Idelle was in New York at least, and\nthere were other people trying to paint there, even though I didn't\nknow any of them.When I got back to New York I resumed my old life, except now I was\nrich. It was as weird as it sounds. I resumed all my old patterns,\nexcept now there were doors where there hadn't been. Now when I was\ntired of walking, all I had to do was raise my hand, and (unless\nit was raining) a taxi would stop to pick me up. Now when I walked\npast charming little restaurants I could go in and order lunch. It\nwas exciting for a while. Painting started to go better. I experimented\nwith a new kind of still life where I'd paint one painting in the\nold way, then photograph it and print it, blown up, on canvas, and\nthen use that as the underpainting for a second still life, painted\nfrom the same objects (which hopefully hadn't rotted yet).Meanwhile I looked for an apartment to buy. Now I could actually\nchoose what neighborhood to live in. Where, I asked myself and\nvarious real estate agents, is the Cambridge of New York? Aided by\noccasional visits to actual Cambridge, I gradually realized there\nwasn't one. Huh.Around this time, in the spring of 2000, I had an idea. It was clear\nfrom our experience with Viaweb that web apps were the future. Why\nnot build a web app for making web apps? Why not let people edit\ncode on our server through the browser, and then host the resulting\napplications for them?\n[9]\nYou could run all sorts of services\non the servers that these applications could use just by making an\nAPI call: making and receiving phone calls, manipulating images,\ntaking credit card payments, etc.I got so excited about this idea that I couldn't think about anything\nelse. It seemed obvious that this was the future. I didn't particularly\nwant to start another company, but it was clear that this idea would\nhave to be embodied as one, so I decided to move to Cambridge and\nstart it. I hoped to lure Robert into working on it with me, but\nthere I ran into a hitch. Robert was now a postdoc at MIT, and\nthough he'd made a lot of money the last time I'd lured him into\nworking on one of my schemes, it had also been a huge time sink.\nSo while he agreed that it sounded like a plausible idea, he firmly\nrefused to work on it.Hmph. Well, I'd do it myself then. I recruited Dan Giffin, who had\nworked for Viaweb, and two undergrads who wanted summer jobs, and\nwe got to work trying to build what it's now clear is about twenty\ncompanies and several open source projects worth of software. The\nlanguage for defining applications would of course be a dialect of\nLisp. But I wasn't so naive as to assume I could spring an overt\nLisp on a general audience; we'd hide the parentheses, like Dylan\ndid.By then there was a name for the kind of company Viaweb was, an\n\"application service provider,\" or ASP. This name didn't last long\nbefore it was replaced by \"software as a service,\" but it was current\nfor long enough that I named this new company after it: it was going\nto be called Aspra.I started working on the application builder, Dan worked on network\ninfrastructure, and the two undergrads worked on the first two\nservices (images and phone calls). But about halfway through the\nsummer I realized I really didn't want to run a company \u0097 especially\nnot a big one, which it was looking like this would have to be. I'd\nonly started Viaweb because I needed the money. Now that I didn't\nneed money anymore, why was I doing this? If this vision had to be\nrealized as a company, then screw the vision. I'd build a subset\nthat could be done as an open source project.Much to my surprise, the time I spent working on this stuff was not\nwasted after all. After we started Y Combinator, I would often\nencounter startups working on parts of this new architecture, and\nit was very useful to have spent so much time thinking about it and\neven trying to write some of it.The subset I would build as an open source project was the new Lisp,\nwhose parentheses I now wouldn't even have to hide. A lot of Lisp\nhackers dream of building a new Lisp, partly because one of the\ndistinctive features of the language is that it has dialects, and\npartly, I think, because we have in our minds a Platonic form of\nLisp that all existing dialects fall short of. I certainly did. So\nat the end of the summer Dan and I switched to working on this new\ndialect of Lisp, which I called Arc, in a house I bought in Cambridge.The following spring, lightning struck. I was invited to give a\ntalk at a Lisp conference, so I gave one about how we'd used Lisp\nat Viaweb. Afterward I put a postscript file of this talk online,\non paulgraham.com, which I'd created years before using Viaweb but\nhad never used for anything. In one day it got 30,000 page views.\nWhat on earth had happened? The referring urls showed that someone\nhad posted it on Slashdot.\n[10]Wow, I thought, there's an audience. If I write something and put\nit on the web, anyone can read it. That may seem obvious now, but\nit was surprising then. In the print era there was a narrow channel\nto readers, guarded by fierce monsters known as editors. The only\nway to get an audience for anything you wrote was to get it published\nas a book, or in a newspaper or magazine. Now anyone could publish\nanything.This had been possible in principle since 1993, but not many people\nhad realized it yet. I had been intimately involved with building\nthe infrastructure of the web for most of that time, and a writer\nas well, and it had taken me 8 years to realize it. Even then it\ntook me several years to understand the implications. It meant there\nwould be a whole new generation of \nessays.\n[11]In the print era, the channel for publishing essays had been\nvanishingly small. Except for a few officially anointed thinkers\nwho went to the right parties in New York, the only people allowed\nto publish essays were specialists writing about their specialties.\nThere were so many essays that had never been written, because there\nhad been no way to publish them. Now they could be, and I was going\nto write them.\n[12]I've worked on several different things, but to the extent there\nwas a turning point where I figured out what to work on, it was\nwhen I started publishing essays online. From then on I knew that\nwhatever else I did, I'd always write essays too.I knew that online essays would be a \nmarginal medium at first.\nSocially they'd seem more like rants posted by nutjobs on their\nGeoCities sites than the genteel and beautifully typeset compositions\npublished in The New Yorker. But by this point I knew enough to\nfind that encouraging instead of discouraging.One of the most conspicuous patterns I've noticed in my life is how\nwell it has worked, for me at least, to work on things that weren't\nprestigious. Still life has always been the least prestigious form\nof painting. Viaweb and Y Combinator both seemed lame when we started\nthem. I still get the glassy eye from strangers when they ask what\nI'm writing, and I explain that it's an essay I'm going to publish\non my web site. Even Lisp, though prestigious intellectually in\nsomething like the way Latin is, also seems about as hip.It's not that unprestigious types of work are good per se. But when\nyou find yourself drawn to some kind of work despite its current\nlack of prestige, it's a sign both that there's something real to\nbe discovered there, and that you have the right kind of motives.\nImpure motives are a big danger for the ambitious. If anything is\ngoing to lead you astray, it will be the desire to impress people.\nSo while working on things that aren't prestigious doesn't guarantee\nyou're on the right track, it at least guarantees you're not on the\nmost common type of wrong one.Over the next several years I wrote lots of essays about all kinds\nof different topics. O'Reilly reprinted a collection of them as a\nbook, called Hackers & Painters after one of the essays in it. I\nalso worked on spam filters, and did some more painting. I used to\nhave dinners for a group of friends every thursday night, which\ntaught me how to cook for groups. And I bought another building in\nCambridge, a former candy factory (and later, twas said, porn\nstudio), to use as an office.One night in October 2003 there was a big party at my house. It was\na clever idea of my friend Maria Daniels, who was one of the thursday\ndiners. Three separate hosts would all invite their friends to one\nparty. So for every guest, two thirds of the other guests would be\npeople they didn't know but would probably like. One of the guests\nwas someone I didn't know but would turn out to like a lot: a woman\ncalled Jessica Livingston. A couple days later I asked her out.Jessica was in charge of marketing at a Boston investment bank.\nThis bank thought it understood startups, but over the next year,\nas she met friends of mine from the startup world, she was surprised\nhow different reality was. And how colorful their stories were. So\nshe decided to compile a book of \ninterviews with startup founders.When the bank had financial problems and she had to fire half her\nstaff, she started looking for a new job. In early 2005 she interviewed\nfor a marketing job at a Boston VC firm. It took them weeks to make\nup their minds, and during this time I started telling her about\nall the things that needed to be fixed about venture capital. They\nshould make a larger number of smaller investments instead of a\nhandful of giant ones, they should be funding younger, more technical\nfounders instead of MBAs, they should let the founders remain as\nCEO, and so on.One of my tricks for writing essays had always been to give talks.\nThe prospect of having to stand up in front of a group of people\nand tell them something that won't waste their time is a great\nspur to the imagination. When the Harvard Computer Society, the\nundergrad computer club, asked me to give a talk, I decided I would\ntell them how to start a startup. Maybe they'd be able to avoid the\nworst of the mistakes we'd made.So I gave this talk, in the course of which I told them that the\nbest sources of seed funding were successful startup founders,\nbecause then they'd be sources of advice too. Whereupon it seemed\nthey were all looking expectantly at me. Horrified at the prospect\nof having my inbox flooded by business plans (if I'd only known),\nI blurted out \"But not me!\" and went on with the talk. But afterward\nit occurred to me that I should really stop procrastinating about\nangel investing. I'd been meaning to since Yahoo bought us, and now\nit was 7 years later and I still hadn't done one angel investment.Meanwhile I had been scheming with Robert and Trevor about projects\nwe could work on together. I missed working with them, and it seemed\nlike there had to be something we could collaborate on.As Jessica and I were walking home from dinner on March 11, at the\ncorner of Garden and Walker streets, these three threads converged.\nScrew the VCs who were taking so long to make up their minds. We'd\nstart our own investment firm and actually implement the ideas we'd\nbeen talking about. I'd fund it, and Jessica could quit her job and\nwork for it, and we'd get Robert and Trevor as partners too.\n[13]Once again, ignorance worked in our favor. We had no idea how to\nbe angel investors, and in Boston in 2005 there were no Ron Conways\nto learn from. So we just made what seemed like the obvious choices,\nand some of the things we did turned out to be novel.There are multiple components to Y Combinator, and we didn't figure\nthem all out at once. The part we got first was to be an angel firm.\nIn those days, those two words didn't go together. There were VC\nfirms, which were organized companies with people whose job it was\nto make investments, but they only did big, million dollar investments.\nAnd there were angels, who did smaller investments, but these were\nindividuals who were usually focused on other things and made\ninvestments on the side. And neither of them helped founders enough\nin the beginning. We knew how helpless founders were in some respects,\nbecause we remembered how helpless we'd been. For example, one thing\nJulian had done for us that seemed to us like magic was to get us\nset up as a company. We were fine writing fairly difficult software,\nbut actually getting incorporated, with bylaws and stock and all\nthat stuff, how on earth did you do that? Our plan was not only to\nmake seed investments, but to do for startups everything Julian had\ndone for us.YC was not organized as a fund. It was cheap enough to run that we\nfunded it with our own money. That went right by 99% of readers,\nbut professional investors are thinking \"Wow, that means they got\nall the returns.\" But once again, this was not due to any particular\ninsight on our part. We didn't know how VC firms were organized.\nIt never occurred to us to try to raise a fund, and if it had, we\nwouldn't have known where to start.\n[14]The most distinctive thing about YC is the batch model: to fund a\nbunch of startups all at once, twice a year, and then to spend three\nmonths focusing intensively on trying to help them. That part we\ndiscovered by accident, not merely implicitly but explicitly due\nto our ignorance about investing. We needed to get experience as\ninvestors. What better way, we thought, than to fund a whole bunch\nof startups at once? We knew undergrads got temporary jobs at tech\ncompanies during the summer. Why not organize a summer program where\nthey'd start startups instead? We wouldn't feel guilty for being\nin a sense fake investors, because they would in a similar sense\nbe fake founders. So while we probably wouldn't make much money out\nof it, we'd at least get to practice being investors on them, and\nthey for their part would probably have a more interesting summer\nthan they would working at Microsoft.We'd use the building I owned in Cambridge as our headquarters.\nWe'd all have dinner there once a week \u0097 on tuesdays, since I was\nalready cooking for the thursday diners on thursdays \u0097 and after\ndinner we'd bring in experts on startups to give talks.We knew undergrads were deciding then about summer jobs, so in a\nmatter of days we cooked up something we called the Summer Founders\nProgram, and I posted an \nannouncement \non my site, inviting undergrads\nto apply. I had never imagined that writing essays would be a way\nto get \"deal flow,\" as investors call it, but it turned out to be\nthe perfect source.\n[15]\nWe got 225 applications for the Summer\nFounders Program, and we were surprised to find that a lot of them\nwere from people who'd already graduated, or were about to that\nspring. Already this SFP thing was starting to feel more serious\nthan we'd intended.We invited about 20 of the 225 groups to interview in person, and\nfrom those we picked 8 to fund. They were an impressive group. That\nfirst batch included reddit, Justin Kan and Emmett Shear, who went\non to found Twitch, Aaron Swartz, who had already helped write the\nRSS spec and would a few years later become a martyr for open access,\nand Sam Altman, who would later become the second president of YC.\nI don't think it was entirely luck that the first batch was so good.\nYou had to be pretty bold to sign up for a weird thing like the\nSummer Founders Program instead of a summer job at a legit place\nlike Microsoft or Goldman Sachs.The deal for startups was based on a combination of the deal we did\nwith Julian ($10k for 10%) and what Robert said MIT grad students\ngot for the summer ($6k). We invested $6k per founder, which in the\ntypical two-founder case was $12k, in return for 6%. That had to\nbe fair, because it was twice as good as the deal we ourselves had\ntaken. Plus that first summer, which was really hot, Jessica brought\nthe founders free air conditioners.\n[16]Fairly quickly I realized that we had stumbled upon the way to scale\nstartup funding. Funding startups in batches was more convenient\nfor us, because it meant we could do things for a lot of startups\nat once, but being part of a batch was better for the startups too.\nIt solved one of the biggest problems faced by founders: the\nisolation. Now you not only had colleagues, but colleagues who\nunderstood the problems you were facing and could tell you how they\nwere solving them.As YC grew, we started to notice other advantages of scale. The\nalumni became a tight community, dedicated to helping one another,\nand especially the current batch, whose shoes they remembered being\nin. We also noticed that the startups were becoming one another's\ncustomers. We used to refer jokingly to the \"YC GDP,\" but as YC\ngrows this becomes less and less of a joke. Now lots of startups\nget their initial set of customers almost entirely from among their\nbatchmates.I had not originally intended YC to be a full-time job. I was going\nto do three things: hack, write essays, and work on YC. As YC grew,\nand I grew more excited about it, it started to take up a lot more\nthan a third of my attention. But for the first few years I was\nstill able to work on other things.In the summer of 2006, Robert and I started working on a new version\nof Arc. This one was reasonably fast, because it was compiled into\nScheme. To test this new Arc, I wrote Hacker News in it. It was\noriginally meant to be a news aggregator for startup founders and\nwas called Startup News, but after a few months I got tired of\nreading about nothing but startups. Plus it wasn't startup founders\nwe wanted to reach. It was future startup founders. So I changed\nthe name to Hacker News and the topic to whatever engaged one's\nintellectual curiosity.HN was no doubt good for YC, but it was also by far the biggest\nsource of stress for me. If all I'd had to do was select and help\nfounders, life would have been so easy. And that implies that HN\nwas a mistake. Surely the biggest source of stress in one's work\nshould at least be something close to the core of the work. Whereas\nI was like someone who was in pain while running a marathon not\nfrom the exertion of running, but because I had a blister from an\nill-fitting shoe. When I was dealing with some urgent problem during\nYC, there was about a 60% chance it had to do with HN, and a 40%\nchance it had do with everything else combined.\n[17]As well as HN, I wrote all of YC's internal software in Arc. But\nwhile I continued to work a good deal in Arc, I gradually stopped\nworking on Arc, partly because I didn't have time to, and partly\nbecause it was a lot less attractive to mess around with the language\nnow that we had all this infrastructure depending on it. So now my\nthree projects were reduced to two: writing essays and working on\nYC.YC was different from other kinds of work I've done. Instead of\ndeciding for myself what to work on, the problems came to me. Every\n6 months there was a new batch of startups, and their problems,\nwhatever they were, became our problems. It was very engaging work,\nbecause their problems were quite varied, and the good founders\nwere very effective. If you were trying to learn the most you could\nabout startups in the shortest possible time, you couldn't have\npicked a better way to do it.There were parts of the job I didn't like. Disputes between cofounders,\nfiguring out when people were lying to us, fighting with people who\nmaltreated the startups, and so on. But I worked hard even at the\nparts I didn't like. I was haunted by something Kevin Hale once\nsaid about companies: \"No one works harder than the boss.\" He meant\nit both descriptively and prescriptively, and it was the second\npart that scared me. I wanted YC to be good, so if how hard I worked\nset the upper bound on how hard everyone else worked, I'd better\nwork very hard.One day in 2010, when he was visiting California for interviews,\nRobert Morris did something astonishing: he offered me unsolicited\nadvice. I can only remember him doing that once before. One day at\nViaweb, when I was bent over double from a kidney stone, he suggested\nthat it would be a good idea for him to take me to the hospital.\nThat was what it took for Rtm to offer unsolicited advice. So I\nremember his exact words very clearly. \"You know,\" he said, \"you\nshould make sure Y Combinator isn't the last cool thing you do.\"At the time I didn't understand what he meant, but gradually it\ndawned on me that he was saying I should quit. This seemed strange\nadvice, because YC was doing great. But if there was one thing rarer\nthan Rtm offering advice, it was Rtm being wrong. So this set me\nthinking. It was true that on my current trajectory, YC would be\nthe last thing I did, because it was only taking up more of my\nattention. It had already eaten Arc, and was in the process of\neating essays too. Either YC was my life's work or I'd have to leave\neventually. And it wasn't, so I would.In the summer of 2012 my mother had a stroke, and the cause turned\nout to be a blood clot caused by colon cancer. The stroke destroyed\nher balance, and she was put in a nursing home, but she really\nwanted to get out of it and back to her house, and my sister and I\nwere determined to help her do it. I used to fly up to Oregon to\nvisit her regularly, and I had a lot of time to think on those\nflights. On one of them I realized I was ready to hand YC over to\nsomeone else.I asked Jessica if she wanted to be president, but she didn't, so\nwe decided we'd try to recruit Sam Altman. We talked to Robert and\nTrevor and we agreed to make it a complete changing of the guard.\nUp till that point YC had been controlled by the original LLC we\nfour had started. But we wanted YC to last for a long time, and to\ndo that it couldn't be controlled by the founders. So if Sam said\nyes, we'd let him reorganize YC. Robert and I would retire, and\nJessica and Trevor would become ordinary partners.When we asked Sam if he wanted to be president of YC, initially he\nsaid no. He wanted to start a startup to make nuclear reactors.\nBut I kept at it, and in October 2013 he finally agreed. We decided\nhe'd take over starting with the winter 2014 batch. For the rest\nof 2013 I left running YC more and more to Sam, partly so he could\nlearn the job, and partly because I was focused on my mother, whose\ncancer had returned.She died on January 15, 2014. We knew this was coming, but it was\nstill hard when it did.I kept working on YC till March, to help get that batch of startups\nthrough Demo Day, then I checked out pretty completely. (I still\ntalk to alumni and to new startups working on things I'm interested\nin, but that only takes a few hours a week.)What should I do next? Rtm's advice hadn't included anything about\nthat. I wanted to do something completely different, so I decided\nI'd paint. I wanted to see how good I could get if I really focused\non it. So the day after I stopped working on YC, I started painting.\nI was rusty and it took a while to get back into shape, but it was\nat least completely engaging.\n[18]I spent most of the rest of 2014 painting. I'd never been able to\nwork so uninterruptedly before, and I got to be better than I had\nbeen. Not good enough, but better. Then in November, right in the\nmiddle of a painting, I ran out of steam. Up till that point I'd\nalways been curious to see how the painting I was working on would\nturn out, but suddenly finishing this one seemed like a chore. So\nI stopped working on it and cleaned my brushes and haven't painted\nsince. So far anyway.I realize that sounds rather wimpy. But attention is a zero sum\ngame. If you can choose what to work on, and you choose a project\nthat's not the best one (or at least a good one) for you, then it's\ngetting in the way of another project that is. And at 50 there was\nsome opportunity cost to screwing around.I started writing essays again, and wrote a bunch of new ones over\nthe next few months. I even wrote a couple that \nweren't about\nstartups. Then in March 2015 I started working on Lisp again.The distinctive thing about Lisp is that its core is a language\ndefined by writing an interpreter in itself. It wasn't originally\nintended as a programming language in the ordinary sense. It was\nmeant to be a formal model of computation, an alternative to the\nTuring machine. If you want to write an interpreter for a language\nin itself, what's the minimum set of predefined operators you need?\nThe Lisp that John McCarthy invented, or more accurately discovered,\nis an answer to that question.\n[19]McCarthy didn't realize this Lisp could even be used to program\ncomputers till his grad student Steve Russell suggested it. Russell\ntranslated McCarthy's interpreter into IBM 704 machine language,\nand from that point Lisp started also to be a programming language\nin the ordinary sense. But its origins as a model of computation\ngave it a power and elegance that other languages couldn't match.\nIt was this that attracted me in college, though I didn't understand\nwhy at the time.McCarthy's 1960 Lisp did nothing more than interpret Lisp expressions.\nIt was missing a lot of things you'd want in a programming language.\nSo these had to be added, and when they were, they weren't defined\nusing McCarthy's original axiomatic approach. That wouldn't have\nbeen feasible at the time. McCarthy tested his interpreter by\nhand-simulating the execution of programs. But it was already getting\nclose to the limit of interpreters you could test that way \u0097 indeed,\nthere was a bug in it that McCarthy had overlooked. To test a more\ncomplicated interpreter, you'd have had to run it, and computers\nthen weren't powerful enough.Now they are, though. Now you could continue using McCarthy's\naxiomatic approach till you'd defined a complete programming language.\nAnd as long as every change you made to McCarthy's Lisp was a\ndiscoveredness-preserving transformation, you could, in principle,\nend up with a complete language that had this quality. Harder to\ndo than to talk about, of course, but if it was possible in principle,\nwhy not try? So I decided to take a shot at it. It took 4 years,\nfrom March 26, 2015 to October 12, 2019. It was fortunate that I\nhad a precisely defined goal, or it would have been hard to keep\nat it for so long.I wrote this new Lisp, called Bel, \nin itself in Arc. That may sound\nlike a contradiction, but it's an indication of the sort of trickery\nI had to engage in to make this work. By means of an egregious\ncollection of hacks I managed to make something close enough to an\ninterpreter written in itself that could actually run. Not fast,\nbut fast enough to test.I had to ban myself from writing essays during most of this time,\nor I'd never have finished. In late 2015 I spent 3 months writing\nessays, and when I went back to working on Bel I could barely\nunderstand the code. Not so much because it was badly written as\nbecause the problem is so convoluted. When you're working on an\ninterpreter written in itself, it's hard to keep track of what's\nhappening at what level, and errors can be practically encrypted\nby the time you get them.So I said no more essays till Bel was done. But I told few people\nabout Bel while I was working on it. So for years it must have\nseemed that I was doing nothing, when in fact I was working harder\nthan I'd ever worked on anything. Occasionally after wrestling for\nhours with some gruesome bug I'd check Twitter or HN and see someone\nasking \"Does Paul Graham still code?\"Working on Bel was hard but satisfying. I worked on it so intensively\nthat at any given time I had a decent chunk of the code in my head\nand could write more there. I remember taking the boys to the\ncoast on a sunny day in 2015 and figuring out how to deal with some\nproblem involving continuations while I watched them play in the\ntide pools. It felt like I was doing life right. I remember that\nbecause I was slightly dismayed at how novel it felt. The good news\nis that I had more moments like this over the next few years.In the summer of 2016 we moved to England. We wanted our kids to\nsee what it was like living in another country, and since I was a\nBritish citizen by birth, that seemed the obvious choice. We only\nmeant to stay for a year, but we liked it so much that we still\nlive there. So most of Bel was written in England.In the fall of 2019, Bel was finally finished. Like McCarthy's\noriginal Lisp, it's a spec rather than an implementation, although\nlike McCarthy's Lisp it's a spec expressed as code.Now that I could write essays again, I wrote a bunch about topics\nI'd had stacked up. I kept writing essays through 2020, but I also\nstarted to think about other things I could work on. How should I\nchoose what to do? Well, how had I chosen what to work on in the\npast? I wrote an essay for myself to answer that question, and I\nwas surprised how long and messy the answer turned out to be. If\nthis surprised me, who'd lived it, then I thought perhaps it would\nbe interesting to other people, and encouraging to those with\nsimilarly messy lives. So I wrote a more detailed version for others\nto read, and this is the last sentence of it.\nNotes[1]\nMy experience skipped a step in the evolution of computers:\ntime-sharing machines with interactive OSes. I went straight from\nbatch processing to microcomputers, which made microcomputers seem\nall the more exciting.[2]\nItalian words for abstract concepts can nearly always be\npredicted from their English cognates (except for occasional traps\nlike polluzione). It's the everyday words that differ. So if you\nstring together a lot of abstract concepts with a few simple verbs,\nyou can make a little Italian go a long way.[3]\nI lived at Piazza San Felice 4, so my walk to the Accademia\nwent straight down the spine of old Florence: past the Pitti, across\nthe bridge, past Orsanmichele, between the Duomo and the Baptistery,\nand then up Via Ricasoli to Piazza San Marco. I saw Florence at\nstreet level in every possible condition, from empty dark winter\nevenings to sweltering summer days when the streets were packed with\ntourists.[4]\nYou can of course paint people like still lives if you want\nto, and they're willing. That sort of portrait is arguably the apex\nof still life painting, though the long sitting does tend to produce\npained expressions in the sitters.[5]\nInterleaf was one of many companies that had smart people and\nbuilt impressive technology, and yet got crushed by Moore's Law.\nIn the 1990s the exponential growth in the power of commodity (i.e.\nIntel) processors rolled up high-end, special-purpose hardware and\nsoftware companies like a bulldozer.[6]\nThe signature style seekers at RISD weren't specifically\nmercenary. In the art world, money and coolness are tightly coupled.\nAnything expensive comes to be seen as cool, and anything seen as\ncool will soon become equally expensive.[7]\nTechnically the apartment wasn't rent-controlled but\nrent-stabilized, but this is a refinement only New Yorkers would\nknow or care about. The point is that it was really cheap, less\nthan half market price.[8]\nMost software you can launch as soon as it's done. But when\nthe software is an online store builder and you're hosting the\nstores, if you don't have any users yet, that fact will be painfully\nobvious. So before we could launch publicly we had to launch\nprivately, in the sense of recruiting an initial set of users and\nmaking sure they had decent-looking stores.[9]\nWe'd had a code editor in Viaweb for users to define their\nown page styles. They didn't know it, but they were editing Lisp\nexpressions underneath. But this wasn't an app editor, because the\ncode ran when the merchants' sites were generated, not when shoppers\nvisited them.[10]\nThis was the first instance of what is now a familiar experience,\nand so was what happened next, when I read the comments and found\nthey were full of angry people. How could I claim that Lisp was\nbetter than other languages? Weren't they all Turing complete?\nPeople who see the responses to essays I write sometimes tell me\nhow sorry they feel for me, but I'm not exaggerating when I reply\nthat it has always been like this, since the very beginning. It\ncomes with the territory. An essay must tell readers things they\ndon't already know, and some \npeople dislike being told such things.[11]\nPeople put plenty of stuff on the internet in the 90s of\ncourse, but putting something online is not the same as publishing\nit online. Publishing online means you treat the online version as\nthe (or at least a) primary version.[12]\nThere is a general lesson here that our experience with Y\nCombinator also teaches: Customs continue to constrain you long\nafter the restrictions that caused them have disappeared. Customary\nVC practice had once, like the customs about publishing essays,\nbeen based on real constraints. Startups had once been much more\nexpensive to start, and proportionally rare. Now they could be cheap\nand common, but the VCs' customs still reflected the old world,\njust as customs about writing essays still reflected the constraints\nof the print era.Which in turn implies that people who are independent-minded (i.e.\nless influenced by custom) will have an advantage in fields affected\nby rapid change (where customs are more likely to be obsolete).Here's an interesting point, though: you can't always predict which\nfields will be affected by rapid change. Obviously software and\nventure capital will be, but who would have predicted that essay\nwriting would be?[13]\nY Combinator was not the original name. At first we were\ncalled Cambridge Seed. But we didn't want a regional name, in case\nsomeone copied us in Silicon Valley, so we renamed ourselves after\none of the coolest tricks in the lambda calculus, the Y combinator.I picked orange as our color partly because it's the warmest, and\npartly because no VC used it. In 2005 all the VCs used staid colors\nlike maroon, navy blue, and forest green, because they were trying\nto appeal to LPs, not founders. The YC logo itself is an inside\njoke: the Viaweb logo had been a white V on a red circle, so I made\nthe YC logo a white Y on an orange square.[14]\nYC did become a fund for a couple years starting in 2009,\nbecause it was getting so big I could no longer afford to fund it\npersonally. But after Heroku got bought we had enough money to go\nback to being self-funded.[15]\nI've never liked the term \"deal flow,\" because it implies\nthat the number of new startups at any given time is fixed. This\nis not only false, but it's the purpose of YC to falsify it, by\ncausing startups to be founded that would not otherwise have existed.[16]\nShe reports that they were all different shapes and sizes,\nbecause there was a run on air conditioners and she had to get\nwhatever she could, but that they were all heavier than she could\ncarry now.[17]\nAnother problem with HN was a bizarre edge case that occurs\nwhen you both write essays and run a forum. When you run a forum,\nyou're assumed to see if not every conversation, at least every\nconversation involving you. And when you write essays, people post\nhighly imaginative misinterpretations of them on forums. Individually\nthese two phenomena are tedious but bearable, but the combination\nis disastrous. You actually have to respond to the misinterpretations,\nbecause the assumption that you're present in the conversation means\nthat not responding to any sufficiently upvoted misinterpretation\nreads as a tacit admission that it's correct. But that in turn\nencourages more; anyone who wants to pick a fight with you senses\nthat now is their chance.[18]\nThe worst thing about leaving YC was not working with Jessica\nanymore. We'd been working on YC almost the whole time we'd known\neach other, and we'd neither tried nor wanted to separate it from\nour personal lives, so leaving was like pulling up a deeply rooted\ntree.[19]\nOne way to get more precise about the concept of invented vs\ndiscovered is to talk about space aliens. Any sufficiently advanced\nalien civilization would certainly know about the Pythagorean\ntheorem, for example. I believe, though with less certainty, that\nthey would also know about the Lisp in McCarthy's 1960 paper.But if so there's no reason to suppose that this is the limit of\nthe language that might be known to them. Presumably aliens need\nnumbers and errors and I/O too. So it seems likely there exists at\nleast one path out of McCarthy's Lisp along which discoveredness\nis preserved.Thanks to Trevor Blackwell, John Collison, Patrick Collison, Daniel\nGackle, Ralph Hazell, Jessica Livingston, Robert Morris, and Harj\nTaggar for reading drafts of this.**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \nWatch how this essay was\n[written](https://code.stypi.com/hacks/13sentences?doomed=true).  \n  \n  \nFebruary 2009  \n  \nOne of the things I always tell startups is a principle I learned from Paul\nBuchheit: it's better to make a few people really happy than to make a lot of\npeople semi-happy. I was saying recently to a reporter that if I could only\ntell startups 10 things, this would be one of them. Then I thought: what would\nthe other 9 be?  \n  \nWhen I made the list there turned out to be 13:\n\n**1\\. Pick good cofounders.**  \n  \nCofounders are for a startup what location is for real estate. You can change\nanything about a house except where it is. In a startup you can change your\nidea easily, but changing your cofounders is hard. [1] And the success of a\nstartup is almost always a function of its founders.  \n  \n**2\\. Launch fast.**  \n  \nThe reason to launch fast is not so much that it's critical to get your\nproduct to market early, but that you haven't really started working on it\ntill you've launched. Launching teaches you what you should have been\nbuilding. Till you know that you're wasting your time. So the main value of\nwhatever you launch with is as a pretext for engaging users.  \n  \n**3\\. Let your idea evolve.**  \n  \nThis is the second half of launching fast. Launch fast and iterate. It's a big\nmistake to treat a startup as if it were merely a matter of implementing some\nbrilliant initial idea. As in an essay, most of the ideas appear in the\nimplementing.  \n  \n**4\\. Understand your users.**  \n  \nYou can envision the wealth created by a startup as a rectangle, where one\nside is the number of users and the other is how much you improve their lives.\n[2] The second dimension is the one you have most control over. And indeed,\nthe growth in the first will be driven by how well you do in the second. As in\nscience, the hard part is not answering questions but asking them: the hard\npart is seeing something new that users lack. The better you understand them\nthe better the odds of doing that. That's why so many successful startups make\nsomething the founders needed.  \n  \n**5\\. Better to make a few users love you than a lot ambivalent.**  \n  \nIdeally you want to make large numbers of users love you, but you can't expect\nto hit that right away. Initially you have to choose between satisfying all\nthe needs of a subset of potential users, or satisfying a subset of the needs\nof all potential users. Take the first. It's easier to expand userwise than\nsatisfactionwise. And perhaps more importantly, it's harder to lie to\nyourself. If you think you're 85% of the way to a great product, how do you\nknow it's not 70%? Or 10%? Whereas it's easy to know how many users you have.  \n  \n**6\\. Offer surprisingly good customer service.**  \n  \nCustomers are used to being maltreated. Most of the companies they deal with\nare quasi-monopolies that get away with atrocious customer service. Your own\nideas about what's possible have been unconsciously lowered by such\nexperiences. Try making your customer service not merely good, but\n[surprisingly good](http://www.diaryofawebsite.com/blog/2008/07/wufoo-and-the-\nart-of-customer-service/). Go out of your way to make people happy. They'll be\noverwhelmed; you'll see. In the earliest stages of a startup, it pays to offer\ncustomer service on a level that wouldn't scale, because it's a way of\nlearning about your users.  \n  \n**7\\. You make what you measure.**  \n  \nI learned this one from Joe Kraus. [3] Merely measuring something has an\nuncanny tendency to improve it. If you want to make your user numbers go up,\nput a big piece of paper on your wall and every day plot the number of users.\nYou'll be delighted when it goes up and disappointed when it goes down. Pretty\nsoon you'll start noticing what makes the number go up, and you'll start to do\nmore of that. Corollary: be careful what you measure.  \n  \n**8\\. Spend little.**  \n  \nI can't emphasize enough how important it is for a startup to be cheap. Most\nstartups fail before they make something people want, and the most common form\nof failure is running out of money. So being cheap is (almost) interchangeable\nwith iterating rapidly. [4] But it's more than that. A culture of cheapness\nkeeps companies young in something like the way exercise keeps people young.  \n  \n**9\\. Get ramen profitable.**  \n  \n\"Ramen profitable\" means a startup makes just enough to pay the founders'\nliving expenses. It's not rapid prototyping for business models (though it can\nbe), but more a way of hacking the investment process. Once you cross over\ninto ramen profitable, it completely changes your relationship with investors.\nIt's also great for morale.  \n  \n**10\\. Avoid distractions.**  \n  \nNothing kills startups like distractions. The worst type are those that pay\nmoney: day jobs, consulting, profitable side-projects. The startup may have\nmore long-term potential, but you'll always interrupt working on it to answer\ncalls from people paying you now. Paradoxically,\n[fundraising](fundraising.html) is this type of distraction, so try to\nminimize that too.  \n  \n**11\\. Don't get demoralized.**  \n  \nThough the immediate cause of death in a startup tends to be running out of\nmoney, the underlying cause is usually lack of focus. Either the company is\nrun by stupid people (which can't be fixed with advice) or the people are\nsmart but got demoralized. Starting a startup is a huge moral weight.\nUnderstand this and make a conscious effort not to be ground down by it, just\nas you'd be careful to bend at the knees when picking up a heavy box.  \n  \n**12\\. Don't give up.**  \n  \nEven if you get demoralized, [don't give up](die.html). You can get\nsurprisingly far by just not giving up. This isn't true in all fields. There\nare a lot of people who couldn't become good mathematicians no matter how long\nthey persisted. But startups aren't like that. Sheer effort is usually enough,\nso long as you keep morphing your idea.  \n  \n**13\\. Deals fall through.**  \n  \nOne of the most useful skills we learned from Viaweb was not getting our hopes\nup. We probably had 20 deals of various types fall through. After the first 10\nor so we learned to treat deals as background processes that we should ignore\ntill they terminated. It's very dangerous to morale to start to depend on\ndeals closing, not just because they so often don't, but because it makes them\nless likely to.\n\nHaving gotten it down to 13 sentences, I asked myself which I'd choose if I\ncould only keep one.  \n  \nUnderstand your users. That's the key. The essential task in a startup is to\ncreate wealth; the dimension of wealth you have most control over is how much\nyou improve users' lives; and the hardest part of that is knowing what to make\nfor them. Once you know what to make, it's mere effort to make it, and most\ndecent hackers are capable of that.  \n  \nUnderstanding your users is part of half the principles in this list. That's\nthe reason to launch early, to understand your users. Evolving your idea is\nthe embodiment of understanding your users. Understanding your users well will\ntend to push you toward making something that makes a few people deeply happy.\nThe most important reason for having surprisingly good customer service is\nthat it helps you understand your users. And understanding your users will\neven ensure your morale, because when everything else is collapsing around\nyou, having just ten users who love you will keep you going.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] Strictly speaking it's impossible without a time machine.  \n  \n[2] In practice it's more like a ragged comb.  \n  \n[3] Joe thinks one of the founders of Hewlett Packard said it first, but he\ndoesn't remember which.  \n  \n[4] They'd be interchangeable if markets stood still. Since they don't,\nworking twice as fast is better than having twice as much time.  \n  \n\nApril 2009  \n  \n _Inc_ recently asked me who I thought were the 5 most interesting startup\nfounders of the last 30 years. How do you decide who's the most interesting?\nThe best test seemed to be influence: who are the 5 who've influenced me most?\nWho do I use as examples when I'm talking to companies we fund? Who do I find\nmyself quoting?  \n  \n**1\\. Steve Jobs**  \n  \nI'd guess Steve is the most influential founder not just for me but for most\npeople you could ask. A lot of startup culture is Apple culture. He was the\noriginal young founder. And while the concept of \"insanely great\" already\nexisted in the arts, it was a novel idea to introduce into a company in the\n1980s.  \n  \nMore remarkable still, he's stayed interesting for 30 years. People await new\nApple products the way they'd await new books by a popular novelist. Steve may\nnot literally design them, but they wouldn't happen if he weren't CEO.  \n  \nSteve is clever and driven, but so are a lot of people in the Valley. What\nmakes him unique is his [sense of design](taste.html). Before him, most\ncompanies treated design as a frivolous extra. Apple's competitors now know\nbetter.  \n  \n**2\\. TJ Rodgers**  \n  \nTJ Rodgers isn't as famous as Steve Jobs, but he may be the best writer among\nSilicon Valley CEOs. I've probably learned more from him about the startup way\nof thinking than from anyone else. Not so much from specific things he's\nwritten as by reconstructing the mind that produced them: brutally candid;\naggressively garbage-collecting outdated ideas; and yet driven by pragmatism\nrather than ideology.  \n  \nThe first essay of his that I read was so electrifying that I remember exactly\nwhere I was at the time. It was [High Technology Innovation: Free Markets or\nGovernment Subsidies?](http://www.cypress.com/?rID=34993) and I was downstairs\nin the Harvard Square T Station. It felt as if someone had flipped on a light\nswitch inside my head.  \n  \n**3\\. Larry & Sergey**  \n  \nI'm sorry to treat Larry and Sergey as one person. I've always thought that\nwas unfair to them. But it does seem as if Google was a collaboration.  \n  \nBefore Google, companies in Silicon Valley already knew it was important to\nhave the best hackers. So they claimed, at least. But Google pushed this idea\nfurther than anyone had before. Their hypothesis seems to have been that, in\nthe initial stages at least, _all_ you need is good hackers: if you hire all\nthe smartest people and put them to work on a problem where their success can\nbe measured, you win. All the other stuff\u2014which includes all the stuff that\nbusiness schools think business consists of\u2014you can figure out along the way.\nThe results won't be perfect, but they'll be optimal. If this was their\nhypothesis, it's now been verified experimentally.  \n  \n**4\\. Paul Buchheit**  \n  \nFew know this, but one person, Paul Buchheit, is responsible for three of the\nbest things Google has done. He was the original author of GMail, which is the\nmost impressive thing Google has after search. He also wrote the first\nprototype of AdSense, and was the author of Google's mantra \"Don't be evil.\"  \n  \nPB made a point in a talk once that I now mention to every startup we fund:\nthat it's better, initially, to make a small number of users really love you\nthan a large number kind of like you. If I could tell startups only [ten\nsentences](13sentences.html), this would be one of them.  \n  \nNow he's cofounder of a startup called Friendfeed. It's only a year old, but\nalready everyone in the Valley is watching them. Someone responsible for three\nof the biggest ideas at Google is going to come up with more.  \n  \n**5\\. Sam Altman**  \n  \nI was told I shouldn't mention founders of YC-funded companies in this list.\nBut Sam Altman can't be stopped by such flimsy rules. If he wants to be on\nthis list, he's going to be.  \n  \nHonestly, Sam is, along with Steve Jobs, the founder I refer to most when I'm\nadvising startups. On questions of design, I ask \"What would Steve do?\" but on\nquestions of strategy or ambition I ask \"What would Sama do?\"  \n  \nWhat I learned from meeting Sama is that the doctrine of the elect applies to\nstartups. It applies way less than most people think: startup investing does\nnot consist of trying to pick winners the way you might in a horse race. But\nthere are a few people with such force of will that they're going to get\nwhatever they want.  \n  \n\nMarch 2006, rev August 2009  \n  \nA couple days ago I found to my surprise that I'd been granted a\n[patent](http://patft.uspto.gov/netacgi/nph-\nParser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.htm&r=1&f=G&l=50&s1=6,631,372.PN.&OS=PN/6,631,372&RS=PN/6,631,372).\nIt issued in 2003, but no one told me. I wouldn't know about it now except\nthat a few months ago, while visiting Yahoo, I happened to run into a Big\nCheese I knew from working there in the late nineties. He brought up something\ncalled Revenue Loop, which Viaweb had been working on when they bought us.  \n  \nThe idea is basically that you sort search results not in order of textual\n\"relevance\" (as search engines did then) nor in order of how much advertisers\nbid (as Overture did) but in order of the bid times the number of\ntransactions. Ordinarily you'd do this for shopping searches, though in fact\none of the features of our scheme is that it automatically detects which\nsearches are shopping searches.  \n  \nIf you just order the results in order of bids, you can make the search\nresults useless, because the first results could be dominated by lame sites\nthat had bid the most. But if you order results by bid multiplied by\ntransactions, far from selling out, you're getting a _better_ measure of\nrelevance. What could be a better sign that someone was satisfied with a\nsearch result than going to the site and buying something?  \n  \nAnd, of course, this algorithm automatically maximizes the revenue of the\nsearch engine.  \n  \nEveryone is focused on this type of approach now, but few were in 1998\\. In\n1998 it was all about selling banner ads. We didn't know that, so we were\npretty excited when we figured out what seemed to us the optimal way of doing\nshopping searches.  \n  \nWhen Yahoo was thinking of buying us, we had a meeting with Jerry Yang in New\nYork. For him, I now realize, this was supposed to be one of those meetings\nwhen you check out a company you've pretty much decided to buy, just to make\nsure they're ok guys. We weren't expected to do more than chat and seem smart\nand reasonable. He must have been dismayed when I jumped up to the whiteboard\nand launched into a presentation of our exciting new technology.  \n  \nI was just as dismayed when he didn't seem to care at all about it. At the\ntime I thought, \"boy, is this guy poker-faced. We present to him what has to\nbe the optimal way of sorting product search results, and he's not even\ncurious.\" I didn't realize till much later why he didn't care. In 1998,\nadvertisers were overpaying enormously for ads on web sites. In 1998, if\nadvertisers paid the maximum that traffic was worth to them, Yahoo's revenues\nwould have _decreased._  \n  \nThings are different now, of course. Now this sort of thing is all the rage.\nSo when I ran into the Yahoo exec I knew from the old days in the Yahoo\ncafeteria a few months ago, the first thing he remembered was not\n(fortunately) all the fights I had with him, but Revenue Loop.  \n  \n\"Well,\" I said, \"I think we actually applied for a patent on it. I'm not sure\nwhat happened to the application after I left.\"  \n  \n\"Really? That would be an important patent.\"  \n  \nSo someone investigated, and sure enough, that patent application had\ncontinued in the pipeline for several years after, and finally issued in 2003.  \n  \nThe main thing that struck me on reading it, actually, is that lawyers at some\npoint messed up my nice clear writing. Some clever person with a spell checker\nreduced one section to Zen-like incomprehensibility:\n\n> Also, common spelling errors will tend to get fixed. For example, if users\n> searching for \"compact disc player\" end up spending considerable money at\n> sites offering compact disc players, then those pages will have a higher\n> relevance for that search phrase, even though the phrase \"compact disc\n> player\" is not present on those pages.\n\n(That \"compat disc player\" wasn't a typo, guys.)  \n  \nFor the fine prose of the original, see the provisional application of\nFebruary 1998, back when we were still Viaweb and couldn't afford to pay\nlawyers to turn every \"a lot of\" into \"considerable.\"  \n  \n\nDecember 2014  \n  \nAmerican technology companies want the government to make immigration easier\nbecause they say they can't find enough programmers in the US. Anti-\nimmigration people say that instead of letting foreigners take these jobs, we\nshould train more Americans to be programmers. Who's right?  \n  \nThe technology companies are right. What the anti-immigration people don't\nunderstand is that there is a huge variation in ability between competent\nprogrammers and exceptional ones, and while you can train people to be\ncompetent, you can't train them to be exceptional. Exceptional programmers\nhave an aptitude for and [_interest in_](genius.html) programming that is not\nmerely the product of training. [1]  \n  \nThe US has less than 5% of the world's population. Which means if the\nqualities that make someone a great programmer are evenly distributed, 95% of\ngreat programmers are born outside the US.  \n  \nThe anti-immigration people have to invent some explanation to account for all\nthe effort technology companies have expended trying to make immigration\neasier. So they claim it's because they want to drive down salaries. But if\nyou talk to startups, you find practically every one over a certain size has\ngone through legal contortions to get programmers into the US, where they then\npaid them the same as they'd have paid an American. Why would they go to extra\ntrouble to get programmers for the same price? The only explanation is that\nthey're telling the truth: there are just not enough great programmers to go\naround. [2]  \n  \nI asked the CEO of a startup with about 70 programmers how many more he'd hire\nif he could get all the great programmers he wanted. He said \"We'd hire 30\ntomorrow morning.\" And this is one of the hot startups that always win\nrecruiting battles. It's the same all over Silicon Valley. Startups are that\nconstrained for talent.  \n  \nIt would be great if more Americans were trained as programmers, but no amount\nof training can flip a ratio as overwhelming as 95 to 5. Especially since\nprogrammers are being trained in other countries too. Barring some cataclysm,\nit will always be true that most great programmers are born outside the US. It\nwill always be true that most people who are great at anything are born\noutside the US. [3]  \n  \nExceptional performance implies immigration. A country with only a few percent\nof the world's population will be exceptional in some field only if there are\na lot of immigrants working in it.  \n  \nBut this whole discussion has taken something for granted: that if we let more\ngreat programmers into the US, they'll want to come. That's true now, and we\ndon't realize how lucky we are that it is. If we want to keep this option\nopen, the best way to do it is to take advantage of it: the more of the\nworld's great programmers are here, the more the rest will want to come here.  \n  \nAnd if we don't, the US could be seriously fucked. I realize that's strong\nlanguage, but the people dithering about this don't seem to realize the power\nof the forces at work here. Technology gives the best programmers huge\nleverage. The world market in programmers seems to be becoming dramatically\nmore liquid. And since good people like good colleagues, that means the best\nprogrammers could collect in just a few hubs. Maybe mostly in one hub.  \n  \nWhat if most of the great programmers collected in one hub, and it wasn't\nhere? That scenario may seem unlikely now, but it won't be if things change as\nmuch in the next 50 years as they did in the last 50.  \n  \nWe have the potential to ensure that the US remains a technology superpower\njust by letting in a few thousand great programmers a year. What a colossal\nmistake it would be to let that opportunity slip. It could easily be the\ndefining mistake this generation of American politicians later become famous\nfor. And unlike other potential mistakes on that scale, it costs nothing to\nfix.  \n  \nSo please, get on with it.  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] How much better is a great programmer than an ordinary one? So much better\nthat you can't even measure the difference directly. A great programmer\ndoesn't merely do the same work faster. A great programmer will invent things\nan ordinary programmer would never even think of. This doesn't mean a great\nprogrammer is infinitely more valuable, because any invention has a finite\nmarket value. But it's easy to imagine cases where a great programmer might\ninvent things worth 100x or even 1000x an average programmer's salary.  \n  \n[2] There are a handful of consulting firms that rent out big pools of foreign\nprogrammers they bring in on H1-B visas. By all means crack down on these. It\nshould be easy to write legislation that distinguishes them, because they are\nso different from technology companies. But it is dishonest of the anti-\nimmigration people to claim that companies like Google and Facebook are driven\nby the same motives. An influx of inexpensive but mediocre programmers is the\nlast thing they'd want; it would destroy them.  \n  \n[3] Though this essay talks about programmers, the group of people we need to\nimport is broader, ranging from designers to programmers to electrical\nengineers. The best one could do as a general term might be \"digital talent.\"\nIt seemed better to make the argument a little too narrow than to confuse\neveryone with a neologism.  \n  \n**Thanks** to Sam Altman, John Collison, Patrick Collison, Jessica Livingston,\nGeoff Ralston, Fred Wilson, and Qasar Younis for reading drafts of this.  \n  \n\nDecember 2020  \n  \nAs I was deciding what to write about next, I was surprised to find that two\nseparate essays I'd been planning to write were actually the same.  \n  \nThe first is about how to ace your Y Combinator interview. There has been so\nmuch nonsense written about this topic that I've been meaning for years to\nwrite something telling founders the truth.  \n  \nThe second is about something politicians sometimes say \u0097 that the only way to\nbecome a billionaire is by exploiting people \u0097 and why this is mistaken.  \n  \nKeep reading, and you'll learn both simultaneously.  \n  \nI know the politicians are mistaken because it was my job to predict which\npeople will become billionaires. I think I can truthfully say that I know as\nmuch about how to do this as anyone. If the key to becoming a billionaire \u0097\nthe defining feature of billionaires \u0097 was to exploit people, then I, as a\nprofessional billionaire scout, would surely realize this and look for people\nwho would be good at it, just as an NFL scout looks for speed in wide\nreceivers.  \n  \nBut aptitude for exploiting people is not what Y Combinator looks for at all.\nIn fact, it's the opposite of what they look for. I'll tell you what they do\nlook for, by explaining how to convince Y Combinator to fund you, and you can\nsee for yourself.  \n  \nWhat YC looks for, above all, is founders who understand some group of users\nand can make what they want. This is so important that it's YC's motto: \"Make\nsomething people want.\"  \n  \nA big company can to some extent force unsuitable products on unwilling\ncustomers, but a startup doesn't have the power to do that. A startup must\nsing for its supper, by making things that genuinely delight its customers.\nOtherwise it will never get off the ground.  \n  \nHere's where things get difficult, both for you as a founder and for the YC\npartners trying to decide whether to fund you. In a market economy, it's hard\nto make something people want that they don't already have. That's the great\nthing about market economies. If other people both knew about this need and\nwere able to satisfy it, they already would be, and there would be no room for\nyour startup.  \n  \nWhich means the conversation during your YC interview will have to be about\nsomething new: either a new need, or a new way to satisfy one. And not just\nnew, but uncertain. If it were certain that the need existed and that you\ncould satisfy it, that certainty would be reflected in large and rapidly\ngrowing revenues, and you wouldn't be seeking seed funding.  \n  \nSo the YC partners have to guess both whether you've discovered a real need,\nand whether you'll be able to satisfy it. That's what they are, at least in\nthis part of their job: professional guessers. They have 1001 heuristics for\ndoing this, and I'm not going to tell you all of them, but I'm happy to tell\nyou the most important ones, because these can't be faked; the only way to\n\"hack\" them would be to do what you should be doing anyway as a founder.  \n  \nThe first thing the partners will try to figure out, usually, is whether what\nyou're making will ever be something a lot of people want. It doesn't have to\nbe something a lot of people want now. The product and the market will both\nevolve, and will influence each other's evolution. But in the end there has to\nbe something with a huge market. That's what the partners will be trying to\nfigure out: is there a path to a huge market? [1]  \n  \nSometimes it's obvious there will be a huge market. If\n[_Boom_](https://boomsupersonic.com/) manages to ship an airliner at all,\ninternational airlines will have to buy it. But usually it's not obvious.\nUsually the path to a huge market is by growing a small market. This idea is\nimportant enough that it's worth coining a phrase for, so let's call one of\nthese small but growable markets a \"larval market.\"  \n  \nThe perfect example of a larval market might be Apple's market when they were\nfounded in 1976. In 1976, not many people wanted their own computer. But more\nand more started to want one, till now every 10 year old on the planet wants a\ncomputer (but calls it a \"phone\").  \n  \nThe ideal combination is the group of founders who are [_\"living in the\nfuture\"_](startupideas.html) in the sense of being at the leading edge of some\nkind of change, and who are building something they themselves want. Most\nsuper-successful startups are of this type. Steve Wozniak wanted a computer.\nMark Zuckerberg wanted to engage online with his college friends. Larry and\nSergey wanted to find things on the web. All these founders were building\nthings they and their peers wanted, and the fact that they were at the leading\nedge of change meant that more people would want these things in the future.  \n  \nBut although the ideal larval market is oneself and one's peers, that's not\nthe only kind. A larval market might also be regional, for example. You build\nsomething to serve one location, and then expand to others.  \n  \nThe crucial feature of the initial market is that it exist. That may seem like\nan obvious point, but the lack of it is the biggest flaw in most startup\nideas. There have to be some people who want what you're building right now,\nand want it so urgently that they're willing to use it, bugs and all, even\nthough you're a small company they've never heard of. There don't have to be\nmany, but there have to be some. As long as you have some users, there are\nstraightforward ways to get more: build new features they want, seek out more\npeople like them, get them to refer you to their friends, and so on. But these\ntechniques all require some initial seed group of users.  \n  \nSo this is one thing the YC partners will almost certainly dig into during\nyour interview. Who are your first users going to be, and how do you know they\nwant this? If I had to decide whether to fund startups based on a single\nquestion, it would be \"How do you know people want this?\"  \n  \nThe most convincing answer is \"Because we and our friends want it.\" It's even\nbetter when this is followed by the news that you've already built a\nprototype, and even though it's very crude, your friends are using it, and\nit's spreading by word of mouth. If you can say that and you're not lying, the\npartners will switch from default no to default yes. Meaning you're in unless\nthere's some other disqualifying flaw.  \n  \nThat is a hard standard to meet, though. Airbnb didn't meet it. They had the\nfirst part. They had made something they themselves wanted. But it wasn't\nspreading. So don't feel bad if you don't hit this gold standard of\nconvincingness. If Airbnb didn't hit it, it must be too high.  \n  \nIn practice, the YC partners will be satisfied if they feel that you have a\ndeep understanding of your users' needs. And the Airbnbs did have that. They\nwere able to tell us all about what motivated hosts and guests. They knew from\nfirst-hand experience, because they'd been the first hosts. We couldn't ask\nthem a question they didn't know the answer to. We ourselves were not very\nexcited about the idea as users, but we knew this didn't prove anything,\nbecause there were lots of successful startups we hadn't been excited about as\nusers. We were able to say to ourselves \"They seem to know what they're\ntalking about. Maybe they're onto something. It's not growing yet, but maybe\nthey can figure out how to make it grow during YC.\" Which they did, about\nthree weeks into the batch.  \n  \nThe best thing you can do in a YC interview is to teach the partners about\nyour users. So if you want to prepare for your interview, one of the best ways\nto do it is to go talk to your users and find out exactly what they're\nthinking. Which is what you should be doing anyway.  \n  \nThis may sound strangely credulous, but the YC partners want to rely on the\nfounders to tell them about the market. Think about how VCs typically judge\nthe potential market for an idea. They're not ordinarily domain experts\nthemselves, so they forward the idea to someone who is, and ask for their\nopinion. YC doesn't have time to do this, but if the YC partners can convince\nthemselves that the founders both (a) know what they're talking about and (b)\naren't lying, they don't need outside domain experts. They can use the\nfounders themselves as domain experts when evaluating their own idea.  \n  \nThis is why YC interviews aren't pitches. To give as many founders as possible\na chance to get funded, we made interviews as short as we could: 10 minutes.\nThat is not enough time for the partners to figure out, through the indirect\nevidence in a pitch, whether you know what you're talking about and aren't\nlying. They need to dig in and ask you questions. There's not enough time for\nsequential access. They need random access. [2]  \n  \nThe worst advice I ever heard about how to succeed in a YC interview is that\nyou should take control of the interview and make sure to deliver the message\nyou want to. In other words, turn the interview into a pitch. \u27e8elaborate\nexpletive\u27e9. It is so annoying when people try to do that. You ask them a\nquestion, and instead of answering it, they deliver some obviously\nprefabricated blob of pitch. It eats up 10 minutes really fast.  \n  \nThere is no one who can give you accurate advice about what to do in a YC\ninterview except a current or former YC partner. People who've merely been\ninterviewed, even successfully, have no idea of this, but interviews take all\nsorts of different forms depending on what the partners want to know about\nmost. Sometimes they're all about the founders, other times they're all about\nthe idea. Sometimes some very narrow aspect of the idea. Founders sometimes\nwalk away from interviews complaining that they didn't get to explain their\nidea completely. True, but they explained enough.  \n  \nSince a YC interview consists of questions, the way to do it well is to answer\nthem well. Part of that is answering them candidly. The partners don't expect\nyou to know everything. But if you don't know the answer to a question, don't\ntry to bullshit your way out of it. The partners, like most experienced\ninvestors, are professional bullshit detectors, and you are (hopefully) an\namateur bullshitter. And if you try to bullshit them and fail, they may not\neven tell you that you failed. So it's better to be honest than to try to sell\nthem. If you don't know the answer to a question, say you don't, and tell them\nhow you'd go about finding it, or tell them the answer to some related\nquestion.  \n  \nIf you're asked, for example, what could go wrong, the worst possible answer\nis \"nothing.\" Instead of convincing them that your idea is bullet-proof, this\nwill convince them that you're a fool or a liar. Far better to go into\ngruesome detail. That's what experts do when you ask what could go wrong. The\npartners know that your idea is risky. That's what a good bet looks like at\nthis stage: a tiny probability of a huge outcome.  \n  \nDitto if they ask about competitors. Competitors are rarely what kills\nstartups. Poor execution does. But you should know who your competitors are,\nand tell the YC partners candidly what your relative strengths and weaknesses\nare. Because the YC partners know that competitors don't kill startups, they\nwon't hold competitors against you too much. They will, however, hold it\nagainst you if you seem either to be unaware of competitors, or to be\nminimizing the threat they pose. They may not be sure whether you're clueless\nor lying, but they don't need to be.  \n  \nThe partners don't expect your idea to be perfect. This is seed investing. At\nthis stage, all they can expect are promising hypotheses. But they do expect\nyou to be thoughtful and honest. So if trying to make your idea seem perfect\ncauses you to come off as glib or clueless, you've sacrificed something you\nneeded for something you didn't.  \n  \nIf the partners are sufficiently convinced that there's a path to a big\nmarket, the next question is whether you'll be able to find it. That in turn\ndepends on three things: the general qualities of the founders, their specific\nexpertise in this domain, and the relationship between them. How determined\nare the founders? Are they good at building things? Are they resilient enough\nto keep going when things go wrong? How strong is their friendship?  \n  \nThough the Airbnbs only did ok in the idea department, they did spectacularly\nwell in this department. The story of how they'd funded themselves by making\nObama- and McCain-themed breakfast cereal was the single most important factor\nin our decision to fund them. They didn't realize it at the time, but what\nseemed to them an irrelevant story was in fact fabulously good evidence of\ntheir qualities as founders. It showed they were resourceful and determined,\nand could work together.  \n  \nIt wasn't just the cereal story that showed that, though. The whole interview\nshowed that they cared. They weren't doing this just for the money, or because\nstartups were cool. The reason they were working so hard on this company was\nbecause it was their project. They had discovered an interesting new idea, and\nthey just couldn't let it go.  \n  \nMundane as it sounds, that's the most powerful motivator of all, not just in\nstartups, but in most ambitious undertakings: to be [_genuinely\ninterested_](genius.html) in what you're building. This is what really drives\nbillionaires, or at least the ones who become billionaires from starting\ncompanies. The company is their project.  \n  \nOne thing few people realize about billionaires is that all of them could have\nstopped sooner. They could have gotten acquired, or found someone else to run\nthe company. Many founders do. The ones who become really rich are the ones\nwho keep working. And what makes them keep working is not just money. What\nkeeps them working is the same thing that keeps anyone else working when they\ncould stop if they wanted to: that there's nothing else they'd rather do.  \n  \nThat, not exploiting people, is the defining quality of people who become\nbillionaires from starting companies. So that's what YC looks for in founders:\nauthenticity. People's motives for starting startups are usually mixed.\nThey're usually doing it from some combination of the desire to make money,\nthe desire to seem cool, genuine interest in the problem, and unwillingness to\nwork for someone else. The last two are more powerful motivators than the\nfirst two. It's ok for founders to want to make money or to seem cool. Most\ndo. But if the founders seem like they're doing it _just_ to make money or\n_just_ to seem cool, they're not likely to succeed on a big scale. The\nfounders who are doing it for the money will take the first sufficiently large\nacquisition offer, and the ones who are doing it to seem cool will rapidly\ndiscover that there are much less painful ways of seeming cool. [3]  \n  \nY Combinator certainly sees founders whose m.o. is to exploit people. YC is a\nmagnet for them, because they want the YC brand. But when the YC partners\ndetect someone like that, they reject them. If bad people made good founders,\nthe YC partners would face a moral dilemma. Fortunately they don't, because\nbad people make bad founders. This exploitative type of founder is not going\nto succeed on a large scale, and in fact probably won't even succeed on a\nsmall one, because they're always going to be taking shortcuts. They see YC\nitself as a shortcut.  \n  \nTheir exploitation usually begins with their own cofounders, which is\ndisastrous, since the cofounders' relationship is the foundation of the\ncompany. Then it moves on to the users, which is also disastrous, because the\nsort of early adopters a successful startup wants as its initial users are the\nhardest to fool. The best this kind of founder can hope for is to keep the\nedifice of deception tottering along until some acquirer can be tricked into\nbuying it. But that kind of acquisition is never very big. [4]  \n  \nIf professional billionaire scouts know that exploiting people is not the\nskill to look for, why do some politicians think this is the defining quality\nof billionaires?  \n  \nI think they start from the feeling that it's wrong that one person could have\nso much more money than another. It's understandable where that feeling comes\nfrom. It's in our DNA, and even in the DNA of other species.  \n  \nIf they limited themselves to saying that it made them feel bad when one\nperson had so much more money than other people, who would disagree? It makes\nme feel bad too, and I think people who make a lot of money have a moral\nobligation to use it for the common good. The mistake they make is to jump\nfrom feeling bad that some people are much richer than others to the\nconclusion that there's no legitimate way to make a very large amount of\nmoney. Now we're getting into statements that are not only falsifiable, but\nfalse.  \n  \nThere are certainly some people who become rich by doing bad things. But there\nare also plenty of people who behave badly and don't make that much from it.\nThere is no correlation \u0097 in fact, probably an inverse correlation \u0097 between\nhow badly you behave and how much money you make.  \n  \nThe greatest danger of this nonsense may not even be that it sends policy\nastray, but that it misleads ambitious people. Can you imagine a better way to\ndestroy social mobility than by telling poor kids that the way to get rich is\nby exploiting people, while the rich kids know, from having watched the\npreceding generation do it, how it's really done?  \n  \nI'll tell you how it's really done, so you can at least tell your own kids the\ntruth. It's all about users. The most reliable way to become a billionaire is\nto start a company that [_grows fast_](growth.html), and the way to grow fast\nis to make what users want. Newly started startups have no choice but to\ndelight users, or they'll never even get rolling. But this never stops being\nthe lodestar, and bigger companies take their eye off it at their peril. Stop\ndelighting users, and eventually someone else will.  \n  \nUsers are what the partners want to know about in YC interviews, and what I\nwant to know about when I talk to founders that we funded ten years ago and\nwho are billionaires now. What do users want? What new things could you build\nfor them? Founders who've become billionaires are always eager to talk about\nthat topic. That's how they became billionaires.  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] The YC partners have so much practice doing this that they sometimes see\npaths that the founders themselves haven't seen yet. The partners don't try to\nseem skeptical, as buyers in transactions often do to increase their leverage.\nAlthough the founders feel their job is to convince the partners of the\npotential of their idea, these roles are not infrequently reversed, and the\nfounders leave the interview feeling their idea has more potential than they\nrealized.  \n  \n[2] In practice, 7 minutes would be enough. You rarely change your mind at\nminute 8. But 10 minutes is socially convenient.  \n  \n[3] I myself took the first sufficiently large acquisition offer in my first\nstartup, so I don't blame founders for doing this. There's nothing wrong with\nstarting a startup to make money. You need to make money somehow, and for some\npeople startups are the most efficient way to do it. I'm just saying that\nthese are not the startups that get really big.  \n  \n[4] Not these days, anyway. There were some big ones during the Internet\nBubble, and indeed some big IPOs.  \n  \n  \n  \n**Thanks** to Trevor Blackwell, Jessica Livingston, Robert Morris, Geoff\nRalston, and Harj Taggar for reading drafts of this.  \n  \n\nMarch 2011  \n  \nYesterday Fred Wilson published a remarkable\n[post](http://avc.com/2011/03/airbnb) about missing\n[Airbnb](http://airbnb.com). VCs miss good startups all the time, but it's\nextraordinarily rare for one to talk about it publicly till long afterward. So\nthat post is further evidence what a rare bird Fred is. He's probably the\nnicest VC I know.  \n  \nReading Fred's post made me go back and look at the emails I exchanged with\nhim at the time, trying to convince him to invest in Airbnb. It was quite\ninteresting to read. You can see Fred's mind at work as he circles the deal.  \n  \nFred and the Airbnb founders have generously agreed to let me publish this\nemail exchange (with one sentence redacted about something that's\nstrategically important to Airbnb and not an important part of the\nconversation). It's an interesting illustration of an element of the startup\necosystem that few except the participants ever see: investors trying to\nconvince one another to invest in their portfolio companies. Hundreds if not\nthousands of conversations of this type are happening now, but if one has ever\nbeen published, I haven't seen it. The Airbnbs themselves never even saw these\nemails at the time.  \n  \nWe do a lot of this behind the scenes stuff at YC, because we invest in such a\nlarge number of companies, and we invest so early that investors sometimes\nneed a lot of convincing to see their merits. I don't always try as hard as\nthis though. Fred must have found me quite annoying.  \n  \n  \n  \n\n* * *\n    \n    \n    from: Paul Graham\n    to: Fred Wilson, AirBedAndBreakfast Founders\n    date: Fri, Jan 23, 2009 at 11:42 AM\n    subject: meet the airbeds  \n      \n    One of the startups from the batch that just started, AirbedAndBreakfast,\n    is in NYC right now meeting their users.  (NYC is their biggest\n    market.) I'd recommend meeting them if your schedule allows.  \n      \n    I'd been thinking to myself that though these guys were going to\n    do really well, I should introduce them to angels, because VCs would\n    never go for it.  But then I thought maybe I should give you more\n    credit.  You'll certainly like meeting them.  Be sure to ask about\n    how they funded themselves with breakfast cereal.  \n      \n    There's no reason this couldn't be as big as Ebay.  And this team\n    is the right one to do it.  \n      \n    --pg  \n      \n      \n      \n    from: Brian Chesky\n    to: Paul Graham\n    cc: Nathan Blecharczyk, Joe Gebbia\n    date: Fri, Jan 23, 2009 at 11:40 AM\n    subject: Re: meet the airbeds  \n      \n    PG,  \n      \n    Thanks for the intro!  \n      \n    Brian  \n      \n      \n      \n    from: Paul Graham\n    to: Brian Chesky\n    cc: Nathan Blecharczyk, Joe Gebbia\n    date: Fri, Jan 23, 2009 at 12:38 PM\n    subject: Re: meet the airbeds  \n      \n    It's a longshot, at this stage, but if there was any VC who'd get\n    you guys, it would be Fred.  He is the least suburban-golf-playing\n    VC I know.  \n      \n    He likes to observe startups for a while before acting, so don't\n    be bummed if he seems ambivalent.  \n      \n    --pg  \n      \n      \n      \n    from: Fred Wilson\n    to: Paul Graham,\n    date: Sun, Jan 25, 2009 at 5:28 PM\n    subject: Re: meet the airbeds  \n      \n    Thanks Paul  \n      \n    We are having a bit of a debate inside our partnership about the\n    airbed concept. We'll finish that debate tomorrow in our weekly\n    meeting and get back to you with our thoughts  \n      \n    Thanks  \n      \n    Fred  \n      \n      \n      \n    from: Paul Graham\n    to: Fred Wilson\n    date: Sun, Jan 25, 2009 at 10:48 PM\n    subject: Re: meet the airbeds  \n      \n    I'd recommend having the debate after meeting them instead of before.\n    We had big doubts about this idea, but they vanished on meeting the\n    guys.  \n      \n      \n      \n    from: Fred Wilson\n    to: Paul Graham\n    date: Mon, Jan 26, 2009 at 11:08 AM\n    subject: RE: meet the airbeds  \n      \n    We are still very suspect of this idea but will take a meeting as\n    you suggest  \n      \n    Thanks  \n      \n    fred  \n      \n      \n      \n    from: Fred Wilson\n    to: Paul Graham, AirBedAndBreakfast Founders\n    date: Mon, Jan 26, 2009 at 11:09 AM\n    subject: RE: meet the airbeds  \n      \n    Airbed team -  \n      \n    Are you still in NYC?  \n      \n    We'd like to meet if you are  \n      \n    Thanks  \n      \n    fred  \n      \n      \n      \n    from: Paul Graham\n    to: Fred Wilson\n    date: Mon, Jan 26, 2009 at 1:42 PM\n    subject: Re: meet the airbeds  \n      \n    Ideas can morph.  Practically every really big startup could say,\n    five years later, \"believe it or not, we started out doing ___.\"\n    It just seemed a very good sign to me that these guys were actually\n    on the ground in NYC hunting down (and understanding) their users.\n    On top of several previous good signs.  \n      \n    --pg  \n      \n      \n      \n    from: Fred Wilson\n    to: Paul Graham\n    date: Sun, Feb 1, 2009 at 7:15 AM\n    subject: Re: meet the airbeds  \n      \n    It's interesting  \n      \n    Our two junior team members were enthusiastic  \n      \n    The three \"old guys\" didn't get it  \n      \n      \n      \n    from: Paul Graham\n    to: Fred Wilson\n    date: Mon, Feb 9, 2009 at 5:58 PM\n    subject: airbnb  \n      \n    The Airbeds just won the first poll among all the YC startups in\n    their batch by a landslide.  In the past this has not been a 100%\n    indicator of success (if only anything were) but much better than\n    random.  \n      \n    --pg  \n      \n      \n      \n    from: Fred Wilson\n    to: Paul Graham\n    date: Fri, Feb 13, 2009 at 5:29 PM\n    subject: Re: airbnb  \n      \n    I met them today  \n      \n    They have an interesting business  \n      \n    I'm just not sure how big it's going to be  \n      \n    fred  \n      \n      \n      \n    from: Paul Graham\n    to: Fred Wilson\n    date: Sat, Feb 14, 2009 at 9:50 AM\n    subject: Re: airbnb  \n      \n    Did they explain the long-term goal of being the market in accommodation\n    the way eBay is in stuff?  That seems like it would be huge.  Hotels\n    now are like airlines in the 1970s before they figured out how to\n    increase their load factors.  \n      \n      \n      \n    from: Fred Wilson\n    to: Paul Graham\n    date: Tue, Feb 17, 2009 at 2:05 PM\n    subject: Re: airbnb  \n      \n    They did but I am not sure I buy that  \n      \n    ABNB reminds me of Etsy in that it facilitates real commerce in a\n    marketplace model directly between two people  \n      \n    So I think it can scale all the way to the bed and breakfast market  \n      \n    But I am not sure they can take on the hotel market  \n      \n    I could be wrong  \n      \n    But even so, if you include short term room rental, second home\n    rental, bed and breakfast, and other similar classes of accommodations,\n    you get to a pretty big opportunity  \n      \n    fred  \n      \n      \n      \n    from: Paul Graham\n    to: Fred Wilson\n    date: Wed, Feb 18, 2009 at 12:21 AM\n    subject: Re: airbnb  \n      \n    So invest in them!  They're very capital efficient.  They would\n    make an investor's money go a long way.  \n      \n    It's also counter-cyclical.  They just arrived back from NYC, and\n    when I asked them what was the most significant thing they'd observed,\n    it was how many of their users actually needed to do these rentals\n    to pay their rents.  \n      \n    --pg  \n      \n      \n      \n    from: Fred Wilson\n    to: Paul Graham\n    date: Wed, Feb 18, 2009 at 2:21 AM\n    subject: Re: airbnb  \n      \n    There's a lot to like  \n      \n    I've done a few things, like intro it to my friends at Foundry who\n    were investors in Service Metrics and understand this model  \n      \n    I am also talking to my friend Mark Pincus who had an idea like\n    this a few years ago.  \n      \n    So we are working on it  \n      \n    Thanks for the lead  \n      \n    Fred  \n      \n      \n      \n    from: Paul Graham\n    to: Fred Wilson\n    date: Fri, Feb 20, 2009 at 10:00 PM\n    subject: airbnb already spreading to pros  \n      \n    I know you're skeptical they'll ever get hotels, but there's a\n    continuum between private sofas and hotel rooms, and they just moved\n    one step further along it.  \n      \n    [link to an airbnb user]  \n      \n    This is after only a few months.  I bet you they will get hotels\n    eventually.  It will start with small ones.  Just wait till all the\n    10-room pensiones in Rome discover this site.  And once it spreads\n    to hotels, where is the point (in size of chain) at which it stops?\n    Once something becomes a big marketplace, you ignore it at your\n    peril.  \n      \n    --pg  \n      \n      \n      \n    from: Fred Wilson\n    to: Paul Graham\n    date: Sat, Feb 21, 2009 at 4:26 AM\n    subject: Re: airbnb already spreading to pros  \n      \n    That's true. It's also true that there are quite a few marketplaces\n    out there that serve this same market  \n      \n    If you look at many of the people who list at ABNB, they list\n    elsewhere too  \n      \n    I am not negative on this one, I am interested, but we are still\n    in the gathering data phase.  \n      \n    fred\n    \n\n  \n  \n\nDecember 2020  \n  \nTo celebrate Airbnb's IPO and to help future founders, I thought it might be\nuseful to explain what was special about Airbnb.  \n  \nWhat was special about the Airbnbs was how earnest they were. They did nothing\nhalf-way, and we could sense this even in the interview. Sometimes after we\ninterviewed a startup we'd be uncertain what to do, and have to talk it over.\nOther times we'd just look at one another and smile. The Airbnbs' interview\nwas that kind. We didn't even like the idea that much. Nor did users, at that\nstage; they had no growth. But the founders seemed so full of energy that it\nwas impossible not to like them.  \n  \nThat first impression was not misleading. During the batch our nickname for\nBrian Chesky was The Tasmanian Devil, because like the [cartoon\ncharacter](http://www.youtube.com/watch?v=StG2u5qfFRg&t=2m27s) he seemed a\ntornado of energy. All three of them were like that. No one ever worked harder\nduring YC than the Airbnbs did. When you talked to the Airbnbs, they took\nnotes. If you suggested an idea to them in office hours, the next time you\ntalked to them they'd not only have implemented it, but also implemented two\nnew ideas they had in the process. \"They probably have the best attitude of\nany startup we've funded\" I wrote to Mike Arrington during the batch.  \n  \nThey're still like that. Jessica and I had dinner with Brian in the summer of\n2018, just the three of us. By this point the company is ten years old. He\ntook a page of notes about ideas for new things Airbnb could do.  \n  \nWhat we didn't realize when we first met Brian and Joe and Nate was that\nAirbnb was on its last legs. After working on the company for a year and\ngetting no growth, they'd agreed to give it one last shot. They'd try this Y\nCombinator thing, and if the company still didn't take off, they'd give up.  \n  \nAny normal person would have given up already. They'd been funding the company\nwith credit cards. They had a _binder_ full of credit cards they'd maxed out.\nInvestors didn't think much of the idea. One investor they met in a cafe\nwalked out in the middle of meeting with them. They thought he was going to\nthe bathroom, but he never came back. \"He didn't even finish his smoothie,\"\nBrian said. And now, in late 2008, it was the worst recession in decades. The\nstock market was in free fall and wouldn't hit bottom for another four months.  \n  \nWhy hadn't they given up? This is a useful question to ask. People, like\nmatter, reveal their nature under extreme conditions. One thing that's clear\nis that they weren't doing this just for the money. As a money-making scheme,\nthis was pretty lousy: a year's work and all they had to show for it was a\nbinder full of maxed-out credit cards. So why were they still working on this\nstartup? Because of the experience they'd had as the first hosts.  \n  \nWhen they first tried renting out airbeds on their floor during a design\nconvention, all they were hoping for was to make enough money to pay their\nrent that month. But something surprising happened: they enjoyed having those\nfirst three guests staying with them. And the guests enjoyed it too. Both they\nand the guests had done it because they were in a sense forced to, and yet\nthey'd all had a great experience. Clearly there was something new here: for\nhosts, a new way to make money that had literally been right under their\nnoses, and for guests, a new way to travel that was in many ways better than\nhotels.  \n  \nThat experience was why the Airbnbs didn't give up. They knew they'd\ndiscovered something. They'd seen a glimpse of the future, and they couldn't\nlet it go.  \n  \nThey knew that once people tried staying in what is now called \"an airbnb,\"\nthey would also realize that this was the future. But only if they tried it,\nand they weren't. That was the problem during Y Combinator: to get growth\nstarted.  \n  \nAirbnb's goal during YC was to reach what we call [ramen\nprofitability](http://paulgraham.com/ramenprofitable.html), which means making\nenough money that the company can pay the founders' living expenses, if they\nlive on ramen noodles. Ramen profitability is not, obviously, the end goal of\nany startup, but it's the most important threshold on the way, because this is\nthe point where you're airborne. This is the point where you no longer need\ninvestors' permission to continue existing. For the Airbnbs, ramen\nprofitability was $4000 a month: $3500 for rent, and $500 for food. They taped\nthis goal to the mirror in the bathroom of their apartment.  \n  \nThe way to get growth started in something like Airbnb is to focus on the\nhottest subset of the market. If you can get growth started there, it will\nspread to the rest. When I asked the Airbnbs where there was most demand, they\nknew from searches: New York City. So they focused on New York. They went\nthere [in person](http://paulgraham.com/ds.html) to visit their hosts and help\nthem make their listings more attractive. A big part of that was better\npictures. So Joe and Brian rented a professional camera and took pictures of\nthe hosts' places themselves.  \n  \nThis didn't just make the listings better. It also taught them about their\nhosts. When they came back from their first trip to New York, I asked what\nthey'd noticed about hosts that surprised them, and they said the biggest\nsurprise was how many of the hosts were in the same position they'd been in:\nthey needed this money to pay their rent. This was, remember, the worst\nrecession in decades, and it had hit New York first. It definitely added to\nthe Airbnbs' sense of mission to feel that people needed them.  \n  \nIn late January 2009, about three weeks into Y Combinator, their efforts\nstarted to show results, and their numbers crept upward. But it was hard to\nsay for sure whether it was growth or just random fluctuation. By February it\nwas clear that it was real growth. They made $460 in fees in the first week of\nFebruary, $897 in the second, and $1428 in the third. That was it: they were\nairborne. Brian sent me an email on February 22 announcing that they were\nramen profitable and giving the last three weeks' numbers.  \n  \n\"I assume you know what you've now set yourself up for next week,\" I\nresponded.  \n  \nBrian's reply was seven words: \"We are not going to slow down.\"  \n  \n\nOctober 2022  \n  \nIf there were intelligent beings elsewhere in the universe, they'd share\ncertain truths in common with us. The truths of mathematics would be the same,\nbecause they're true by definition. Ditto for the truths of physics; the mass\nof a carbon atom would be the same on their planet. But I think we'd share\nother truths with aliens besides the truths of math and physics, and that it\nwould be worthwhile to think about what these might be.  \n  \nFor example, I think we'd share the principle that a controlled experiment\ntesting some hypothesis entitles us to have proportionally increased belief in\nit. It seems fairly likely, too, that it would be true for aliens that one can\nget better at something by practicing. We'd probably share Occam's razor.\nThere doesn't seem anything specifically human about any of these ideas.  \n  \nWe can only guess, of course. We can't say for sure what forms intelligent\nlife might take. Nor is it my goal here to explore that question, interesting\nthough it is. The point of the idea of alien truth is not that it gives us a\nway to speculate about what forms intelligent life might take, but that it\ngives us a threshold, or more precisely a target, for truth. If you're trying\nto find the most general truths short of those of math or physics, then\npresumably they'll be those we'd share in common with other forms of\nintelligent life.  \n  \nAlien truth will work best as a heuristic if we err on the side of generosity.\nIf an idea might plausibly be relevant to aliens, that's enough. Justice, for\nexample. I wouldn't want to bet that all intelligent beings would understand\nthe concept of justice, but I wouldn't want to bet against it either.  \n  \nThe idea of alien truth is related to Erdos's idea of God's book. He used to\ndescribe a particularly good proof as being in God's book, the implication\nbeing (a) that a sufficiently good proof was more discovered than invented,\nand (b) that its goodness would be universally recognized. If there's such a\nthing as alien truth, then there's more in God's book than math.  \n  \nWhat should we call the search for alien truth? The obvious choice is\n\"philosophy.\" Whatever else philosophy includes, it should probably include\nthis. I'm fairly sure Aristotle would have thought so. One could even make the\ncase that the search for alien truth is, if not an accurate description _of_\nphilosophy, a good definition _for_ it. I.e. that it's what people who call\nthemselves philosophers should be doing, whether or not they currently are.\nBut I'm not wedded to that; doing it is what matters, not what we call it.  \n  \nWe may one day have something like alien life among us in the form of AIs. And\nthat may in turn allow us to be precise about what truths an intelligent being\nwould have to share with us. We might find, for example, that it's impossible\nto create something we'd consider intelligent that doesn't use Occam's razor.\nWe might one day even be able to prove that. But though this sort of research\nwould be very interesting, it's not necessary for our purposes, or even the\nsame field; the goal of philosophy, if we're going to call it that, would be\nto see what ideas we come up with using alien truth as a target, not to say\nprecisely where the threshold of it is. Those two questions might one day\nconverge, but they'll converge from quite different directions, and till they\ndo, it would be too constraining to restrict ourselves to thinking only about\nthings we're certain would be alien truths. Especially since this will\nprobably be one of those areas where the best guesses turn out to be\nsurprisingly close to optimal. (Let's see if that one does.)  \n  \nWhatever we call it, the attempt to discover alien truths would be a\nworthwhile undertaking. And curiously enough, that is itself probably an alien\ntruth.  \n  \n  \n  \n  \n  \n**Thanks** to Trevor Blackwell, Greg Brockman, Patrick Collison, Robert\nMorris, and Michael Nielsen for reading drafts of this.  \n  \n\nFebruary 2015  \n  \nOne of the most valuable exercises you can try if you want to understand\nstartups is to look at the most successful companies and explain why they were\nnot as lame as they seemed when they first launched. Because they practically\nall seemed lame at first. Not just small, lame. Not just the first step up a\nbig mountain. More like the first step into a swamp.  \n  \nA Basic interpreter for the Altair? How could that ever grow into a giant\ncompany? People sleeping on airbeds in strangers' apartments? A web site for\ncollege students to stalk one another? A wimpy little single-board computer\nfor hobbyists that used a TV as a monitor? A new search engine, when there\nwere already about 10, and they were all trying to de-emphasize search? These\nideas didn't just seem small. They seemed wrong. They were the kind of ideas\nyou could not merely ignore, but ridicule.  \n  \nOften the founders themselves didn't know why their ideas were promising. They\nwere attracted to these ideas by instinct, because they were [living in the\nfuture](startupideas.html) and they sensed that something was missing. But\nthey could not have put into words exactly how their ugly ducklings were going\nto grow into big, beautiful swans.  \n  \nMost people's first impulse when they hear about a lame-sounding new startup\nidea is to make fun of it. Even a lot of people who should know better.  \n  \nWhen I encounter a startup with a lame-sounding idea, I ask \"What Microsoft is\nthis the Altair Basic of?\" Now it's a puzzle, and the burden is on me to solve\nit. Sometimes I can't think of an answer, especially when the idea is a made-\nup one. But it's remarkable how often there does turn out to be an answer.\nOften it's one the founders themselves hadn't seen yet.  \n  \nIntriguingly, there are sometimes multiple answers. I talked to a startup a\nfew days ago that could grow into 3 distinct Microsofts. They'd probably vary\nin size by orders of magnitude. But you can never predict how big a Microsoft\nis going to be, so in cases like that I encourage founders to follow whichever\npath is most immediately exciting to them. Their instincts got them this far.\nWhy stop now?  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nMarch 2012  \n  \nOne of the more surprising things I've noticed while working on Y Combinator\nis how frightening the most ambitious startup ideas are. In this essay I'm\ngoing to demonstrate this phenomenon by describing some. Any one of them could\nmake you a billionaire. That might sound like an attractive prospect, and yet\nwhen I describe these ideas you may notice you find yourself shrinking away\nfrom them.  \n  \nDon't worry, it's not a sign of weakness. Arguably it's a sign of sanity. The\nbiggest startup ideas are terrifying. And not just because they'd be a lot of\nwork. The biggest ideas seem to threaten your identity: you wonder if you'd\nhave enough ambition to carry them through.  \n  \nThere's a scene in _Being John Malkovich_ where the nerdy hero encounters a\nvery attractive, sophisticated woman. She says to him:\n\n> Here's the thing: If you ever got me, you wouldn't have a clue what to do\n> with me.\n\nThat's what these ideas say to us.  \n  \nThis phenomenon is one of the most important things you can understand about\nstartups. [1] You'd expect big startup ideas to be attractive, but actually\nthey tend to repel you. And that has a bunch of consequences. It means these\nideas are invisible to most people who try to think of startup ideas, because\ntheir subconscious filters them out. Even the most ambitious people are\nprobably best off approaching them obliquely.  \n  \n**1\\. A New Search Engine**  \n  \nThe best ideas are just on the right side of impossible. I don't know if this\none is possible, but there are signs it might be. Making a new search engine\nmeans competing with Google, and recently I've noticed some cracks in their\nfortress.  \n  \nThe point when it became clear to me that Microsoft had lost their way was\nwhen they decided to get into the search business. That was not a natural move\nfor Microsoft. They did it because they were afraid of Google, and Google was\nin the search business. But this meant (a) Google was now setting Microsoft's\nagenda, and (b) Microsoft's agenda consisted of stuff they weren't good at.  \n  \nMicrosoft : Google :: Google : Facebook.  \n  \nThat does not by itself mean there's room for a new search engine, but lately\nwhen using Google search I've found myself nostalgic for the old days, when\nGoogle was true to its own slightly aspy self. Google used to give me a page\nof the right answers, fast, with no clutter. Now the results seem inspired by\nthe Scientologist principle that what's true is what's true for you. And the\npages don't have the clean, sparse feel they used to. Google search results\nused to look like the output of a Unix utility. Now if I accidentally put the\ncursor in the wrong place, anything might happen.  \n  \nThe way to win here is to build the search engine all the hackers use. A\nsearch engine whose users consisted of the top 10,000 hackers and no one else\nwould be in a very powerful position despite its small size, just as Google\nwas when it was that search engine. And for the first time in over a decade\nthe idea of switching seems thinkable to me.  \n  \nSince anyone capable of starting this company is one of those 10,000 hackers,\nthe route is at least straightforward: make the search engine you yourself\nwant. Feel free to make it excessively hackerish. Make it really good for code\nsearch, for example. Would you like search queries to be Turing complete?\nAnything that gets you those 10,000 users is ipso facto good.  \n  \nDon't worry if something you want to do will constrain you in the long term,\nbecause if you don't get that initial core of users, there won't be a long\nterm. If you can just build something that you and your friends genuinely\nprefer to Google, you're already about 10% of the way to an IPO, just as\nFacebook was (though they probably didn't realize it) when they got all the\nHarvard undergrads.  \n  \n**2\\. Replace Email**  \n  \nEmail was not designed to be used the way we use it now. Email is not a\nmessaging protocol. It's a todo list. Or rather, my inbox is a todo list, and\nemail is the way things get onto it. But it is a disastrously bad todo list.  \n  \nI'm open to different types of solutions to this problem, but I suspect that\ntweaking the inbox is not enough, and that email has to be replaced with a new\nprotocol. This new protocol should be a todo list protocol, not a messaging\nprotocol, although there is a degenerate case where what someone wants you to\ndo is: read the following text.  \n  \nAs a todo list protocol, the new protocol should give more power to the\nrecipient than email does. I want there to be more restrictions on what\nsomeone can put on my todo list. And when someone can put something on my todo\nlist, I want them to tell me more about what they want from me. Do they want\nme to do something beyond just reading some text? How important is it? (There\nobviously has to be some mechanism to prevent people from saying everything is\nimportant.) When does it have to be done?  \n  \nThis is one of those ideas that's like an irresistible force meeting an\nimmovable object. On one hand, entrenched protocols are impossible to replace.\nOn the other, it seems unlikely that people in 100 years will still be living\nin the same email hell we do now. And if email is going to get replaced\neventually, why not now?  \n  \nIf you do it right, you may be able to avoid the usual chicken and egg problem\nnew protocols face, because some of the most powerful people in the world will\nbe among the first to switch to it. They're all at the mercy of email too.  \n  \nWhatever you build, make it fast. GMail has become painfully slow. [2] If you\nmade something no better than GMail, but fast, that alone would let you start\nto pull users away from GMail.  \n  \nGMail is slow because Google can't afford to spend a lot on it. But people\nwill pay for this. I'd have no problem paying $50 a month. Considering how\nmuch time I spend in email, it's kind of scary to think how much I'd be\njustified in paying. At least $1000 a month. If I spend several hours a day\nreading and writing email, that would be a cheap way to make my life better.  \n  \n**3\\. Replace Universities**  \n  \nPeople are all over this idea lately, and I think they're onto something. I'm\nreluctant to suggest that an institution that's been around for a millennium\nis finished just because of some mistakes they made in the last few decades,\nbut certainly in the last few decades US universities seem to have been headed\ndown the wrong path. One could do a lot better for a lot less money.  \n  \nI don't think universities will disappear. They won't be replaced wholesale.\nThey'll just lose the de facto monopoly on certain types of learning that they\nonce had. There will be many different ways to learn different things, and\nsome may look quite different from universities. Y Combinator itself is\narguably one of them.  \n  \nLearning is such a big problem that changing the way people do it will have a\nwave of secondary effects. For example, the name of the university one went to\nis treated by a lot of people (correctly or not) as a credential in its own\nright. If learning breaks up into many little pieces, credentialling may\nseparate from it. There may even need to be replacements for campus social\nlife (and oddly enough, YC even has aspects of that).  \n  \nYou could replace high schools too, but there you face bureaucratic obstacles\nthat would slow down a startup. Universities seem the place to start.  \n  \n**4\\. Internet Drama**  \n  \nHollywood has been slow to embrace the Internet. That was a mistake, because I\nthink we can now call a winner in the race between delivery mechanisms, and it\nis the Internet, not cable.  \n  \nA lot of the reason is the horribleness of cable clients, also known as TVs.\nOur family didn't wait for Apple TV. We hated our last TV so much that a few\nmonths ago we replaced it with an iMac bolted to the wall. It's a little\ninconvenient to control it with a wireless mouse, but the overall experience\nis much better than the nightmare UI we had to deal with before.  \n  \nSome of the attention people currently devote to watching movies and TV can be\nstolen by things that seem completely unrelated, like social networking apps.\nMore can be stolen by things that are a little more closely related, like\ngames. But there will probably always remain some residual demand for\nconventional drama, where you sit passively and watch as a plot happens. So\nhow do you deliver drama via the Internet? Whatever you make will have to be\non a larger scale than Youtube clips. When people sit down to watch a show,\nthey want to know what they're going to get: either part of a series with\nfamiliar characters, or a single longer \"movie\" whose basic premise they know\nin advance.  \n  \nThere are two ways delivery and payment could play out. Either some company\nlike Netflix or Apple will be the app store for entertainment, and you'll\nreach audiences through them. Or the would-be app stores will be too\noverreaching, or too technically inflexible, and companies will arise to\nsupply payment and streaming a la carte to the producers of drama. If that's\nthe way things play out, there will also be a need for such infrastructure\ncompanies.  \n  \n**5\\. The Next Steve Jobs**  \n  \nI was talking recently to someone who knew Apple well, and I asked him if the\npeople now running the company would be able to keep creating new things the\nway Apple had under Steve Jobs. His answer was simply \"no.\" I already feared\nthat would be the answer. I asked more to see how he'd qualify it. But he\ndidn't qualify it at all. No, there will be no more great new stuff beyond\nwhatever's currently in the pipeline. Apple's revenues may continue to rise\nfor a long time, but as Microsoft shows, revenue is a lagging indicator in the\ntechnology business.  \n  \nSo if Apple's not going to make the next iPad, who is? None of the existing\nplayers. None of them are run by product visionaries, and empirically you\ncan't seem to get those by hiring them. Empirically the way you get a product\nvisionary as CEO is for him to found the company and not get fired. So the\ncompany that creates the next wave of hardware is probably going to have to be\na startup.  \n  \nI realize it sounds preposterously ambitious for a startup to try to become as\nbig as Apple. But no more ambitious than it was for Apple to become as big as\nApple, and they did it. Plus a startup taking on this problem now has an\nadvantage the original Apple didn't: the example of Apple. Steve Jobs has\nshown us what's possible. That helps would-be successors both directly, as\nRoger Bannister did, by showing how much better you can do than people did\nbefore, and indirectly, as Augustus did, by lodging the idea in users' minds\nthat a single person could unroll the future for them. [3]  \n  \nNow Steve is gone there's a vacuum we can all feel. If a new company led\nboldly into the future of hardware, users would follow. The CEO of that\ncompany, the \"next Steve Jobs,\" might not measure up to Steve Jobs. But he\nwouldn't have to. He'd just have to do a better job than Samsung and HP and\nNokia, and that seems pretty doable.  \n  \n**6\\. Bring Back Moore's Law**  \n  \nThe last 10 years have reminded us what Moore's Law actually says. Till about\n2002 you could safely misinterpret it as promising that clock speeds would\ndouble every 18 months. Actually what it says is that circuit densities will\ndouble every 18 months. It used to seem pedantic to point that out. Not any\nmore. Intel can no longer give us faster CPUs, just more of them.  \n  \nThis Moore's Law is not as good as the old one. Moore's Law used to mean that\nif your software was slow, all you had to do was wait, and the inexorable\nprogress of hardware would solve your problems. Now if your software is slow\nyou have to rewrite it to do more things in parallel, which is a lot more work\nthan waiting.  \n  \nIt would be great if a startup could give us something of the old Moore's Law\nback, by writing software that could make a large number of CPUs look to the\ndeveloper like one very fast CPU. There are several ways to approach this\nproblem. The most ambitious is to try to do it automatically: to write a\ncompiler that will parallelize our code for us. There's a name for this\ncompiler, _the sufficiently smart compiler,_ and it is a byword for\nimpossibility. But is it really impossible? Is there no configuration of the\nbits in memory of a present day computer that is this compiler? If you really\nthink so, you should try to prove it, because that would be an interesting\nresult. And if it's not impossible but simply very hard, it might be worth\ntrying to write it. The expected value would be high even if the chance of\nsucceeding was low.  \n  \nThe reason the expected value is so high is web services. If you could write\nsoftware that gave programmers the convenience of the way things were in the\nold days, you could offer it to them as a web service. And that would in turn\nmean that you got practically all the users.  \n  \nImagine there was another processor manufacturer that could still translate\nincreased circuit densities into increased clock speeds. They'd take most of\nIntel's business. And since web services mean that no one sees their\nprocessors anymore, by writing the sufficiently smart compiler you could\ncreate a situation indistinguishable from you being that manufacturer, at\nleast for the server market.  \n  \nThe least ambitious way of approaching the problem is to start from the other\nend, and offer programmers more parallelizable Lego blocks to build programs\nout of, like Hadoop and MapReduce. Then the programmer still does much of the\nwork of optimization.  \n  \nThere's an intriguing middle ground where you build a semi-automatic\nweapon\u2014where there's a human in the loop. You make something that looks to the\nuser like the sufficiently smart compiler, but inside has people, using highly\ndeveloped optimization tools to find and eliminate bottlenecks in users'\nprograms. These people might be your employees, or you might create a\nmarketplace for optimization.  \n  \nAn optimization marketplace would be a way to generate the sufficiently smart\ncompiler piecemeal, because participants would immediately start writing bots.\nIt would be a curious state of affairs if you could get to the point where\neverything could be done by bots, because then you'd have made the\nsufficiently smart compiler, but no one person would have a complete copy of\nit.  \n  \nI realize how crazy all this sounds. In fact, what I like about this idea is\nall the different ways in which it's wrong. The whole idea of focusing on\noptimization is counter to the general trend in software development for the\nlast several decades. Trying to write the sufficiently smart compiler is by\ndefinition a mistake. And even if it weren't, compilers are the sort of\nsoftware that's supposed to be created by open source projects, not companies.\nPlus if this works it will deprive all the programmers who take pleasure in\nmaking multithreaded apps of so much amusing complexity. The forum troll I\nhave by now internalized doesn't even know where to begin in raising\nobjections to this project. Now that's what I call a startup idea.  \n  \n**7\\. Ongoing Diagnosis**  \n  \nBut wait, here's another that could face even greater resistance: ongoing,\nautomatic medical diagnosis.  \n  \nOne of my tricks for generating startup ideas is to imagine the ways in which\nwe'll seem backward to future generations. And I'm pretty sure that to people\n50 or 100 years in the future, it will seem barbaric that people in our era\nwaited till they had symptoms to be diagnosed with conditions like heart\ndisease and cancer.  \n  \nFor example, in 2004 Bill Clinton found he was feeling short of breath.\nDoctors discovered that several of his arteries were over 90% blocked and 3\ndays later he had a quadruple bypass. It seems reasonable to assume Bill\nClinton has the best medical care available. And yet even he had to wait till\nhis arteries were over 90% blocked to learn that the number was over 90%.\nSurely at some point in the future we'll know these numbers the way we now\nknow something like our weight. Ditto for cancer. It will seem preposterous to\nfuture generations that we wait till patients have physical symptoms to be\ndiagnosed with cancer. Cancer will show up on some sort of radar screen\nimmediately.  \n  \n(Of course, what shows up on the radar screen may be different from what we\nthink of now as cancer. I wouldn't be surprised if at any given time we have\nten or even hundreds of microcancers going at once, none of which normally\namount to anything.)  \n  \nA lot of the obstacles to ongoing diagnosis will come from the fact that it's\ngoing against the grain of the medical profession. The way medicine has always\nworked is that patients come to doctors with problems, and the doctors figure\nout what's wrong. A lot of doctors don't like the idea of going on the medical\nequivalent of what lawyers call a \"fishing expedition,\" where you go looking\nfor problems without knowing what you're looking for. They call the things\nthat get discovered this way \"incidentalomas,\" and they are something of a\nnuisance.  \n  \nFor example, a friend of mine once had her brain scanned as part of a study.\nShe was horrified when the doctors running the study discovered what appeared\nto be a large tumor. After further testing, it turned out to be a harmless\ncyst. But it cost her a few days of terror. A lot of doctors worry that if you\nstart scanning people with no symptoms, you'll get this on a giant scale: a\nhuge number of false alarms that make patients panic and require expensive and\nperhaps even dangerous tests to resolve. But I think that's just an artifact\nof current limitations. If people were scanned all the time and we got better\nat deciding what was a real problem, my friend would have known about this\ncyst her whole life and known it was harmless, just as we do a birthmark.  \n  \nThere is room for a lot of startups here. In addition to the technical\nobstacles all startups face, and the bureaucratic obstacles all medical\nstartups face, they'll be going against thousands of years of medical\ntradition. But it will happen, and it will be a great thing\u2014so great that\npeople in the future will feel as sorry for us as we do for the generations\nthat lived before anaesthesia and antibiotics.  \n  \n**Tactics**  \n  \nLet me conclude with some tactical advice. If you want to take on a problem as\nbig as the ones I've discussed, don't make a direct frontal attack on it.\nDon't say, for example, that you're going to replace email. If you do that you\nraise too many expectations. Your employees and investors will constantly be\nasking \"are we there yet?\" and you'll have an army of haters waiting to see\nyou fail. Just say you're building todo-list software. That sounds harmless.\nPeople can notice you've replaced email when it's a _fait accompli_. [4]  \n  \nEmpirically, the way to do really big things seems to be to start with\ndeceptively small things. Want to dominate microcomputer software? Start by\nwriting a Basic interpreter for a machine with a few thousand users. Want to\nmake the universal web site? Start by building a site for Harvard undergrads\nto stalk one another.  \n  \nEmpirically, it's not just for other people that you need to start small. You\nneed to for your own sake. Neither Bill Gates nor Mark Zuckerberg knew at\nfirst how big their companies were going to get. All they knew was that they\nwere onto something. Maybe it's a bad idea to have really big ambitions\ninitially, because the bigger your ambition, the longer it's going to take,\nand the further you project into the future, the more likely you'll get it\nwrong.  \n  \nI think the way to use these big ideas is not to try to identify a precise\npoint in the future and then ask yourself how to get from here to there, like\nthe popular image of a visionary. You'll be better off if you operate like\nColumbus and just head in a general westerly direction. Don't try to construct\nthe future like a building, because your current blueprint is almost certainly\nmistaken. Start with something you know works, and when you expand, expand\nwestward.  \n  \nThe popular image of the visionary is someone with a clear view of the future,\nbut empirically it may be better to have a blurry one.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] It's also one of the most important things VCs fail to understand about\nstartups. Most expect founders to walk in with a clear plan for the future,\nand judge them based on that. Few consciously realize that in the biggest\nsuccesses there is the least correlation between the initial plan and what the\nstartup eventually becomes.  \n  \n[2] This sentence originally read \"GMail is painfully slow.\" Thanks to Paul\nBuchheit for the correction.  \n  \n[3] Roger Bannister is famous as the first person to run a mile in under 4\nminutes. But his world record only lasted 46 days. Once he showed it could be\ndone, lots of others followed. Ten years later Jim Ryun ran a 3:59 mile as a\nhigh school junior.  \n  \n[4] If you want to be the next Apple, maybe you don't even want to start with\nconsumer electronics. Maybe at first you make something hackers use. Or you\nmake something popular but apparently unimportant, like a headset or router.\nAll you need is a bridgehead.  \n  \n**Thanks** to Sam Altman, Trevor Blackwell, Paul Buchheit, Patrick Collison,\nAaron Iba, Jessica Livingston, Robert Morris, Harj Taggar and Garry Tan for\nreading drafts of this.  \n  \n\nMay 2006  \n  \n _(This essay is derived from a keynote at Xtech.)_  \n  \nStartups happen in clusters. There are a lot of them in Silicon Valley and\nBoston, and few in Chicago or Miami. A country that wants startups will\nprobably also have to reproduce whatever makes these clusters form.  \n  \nI've claimed that the [recipe](siliconvalley.html) is a great university near\na town smart people like. If you set up those conditions within the US,\nstartups will form as inevitably as water droplets condense on a cold piece of\nmetal. But when I consider what it would take to reproduce Silicon Valley in\nanother country, it's clear the US is a particularly humid environment.\nStartups condense more easily here.  \n  \nIt is by no means a lost cause to try to create a silicon valley in another\ncountry. There's room not merely to equal Silicon Valley, but to surpass it.\nBut if you want to do that, you have to understand the advantages startups get\nfrom being in America.  \n  \n**1\\. The US Allows Immigration.**  \n  \nFor example, I doubt it would be possible to reproduce Silicon Valley in\nJapan, because one of Silicon Valley's most distinctive features is\nimmigration. Half the people there speak with accents. And the Japanese don't\nlike immigration. When they think about how to make a Japanese silicon valley,\nI suspect they unconsciously frame it as how to make one consisting only of\nJapanese people. This way of framing the question probably guarantees failure.  \n  \nA silicon valley has to be a mecca for the smart and the ambitious, and you\ncan't have a mecca if you don't let people into it.  \n  \nOf course, it's not saying much that America is more open to immigration than\nJapan. Immigration policy is one area where a competitor could do better.  \n  \n**2\\. The US Is a Rich Country.**  \n  \nI could see India one day producing a rival to Silicon Valley. Obviously they\nhave the right people: you can tell that by the number of Indians in the\ncurrent Silicon Valley. The problem with India itself is that it's still so\npoor.  \n  \nIn poor countries, things we take for granted are missing. A friend of mine\nvisiting India sprained her ankle falling down the steps in a railway station.\nWhen she turned to see what had happened, she found the steps were all\ndifferent heights. In industrialized countries we walk down steps our whole\nlives and never think about this, because there's an infrastructure that\nprevents such a staircase from being built.  \n  \nThe US has never been so poor as some countries are now. There have never been\nswarms of beggars in the streets of American cities. So we have no data about\nwhat it takes to get from the swarms-of-beggars stage to the silicon-valley\nstage. Could you have both at once, or does there have to be some baseline\nprosperity before you get a silicon valley?  \n  \nI suspect there is some speed limit to the evolution of an economy. Economies\nare made out of people, and attitudes can only change a certain amount per\ngeneration. [1]  \n  \n**3\\. The US Is Not (Yet) a Police State.**  \n  \nAnother country I could see wanting to have a silicon valley is China. But I\ndoubt they could do it yet either. China still seems to be a police state, and\nalthough present rulers seem enlightened compared to the last, even\nenlightened despotism can probably only get you part way toward being a great\neconomic power.  \n  \nIt can get you factories for building things designed elsewhere. Can it get\nyou the designers, though? Can imagination flourish where people can't\ncriticize the government? Imagination means having odd ideas, and it's hard to\nhave odd ideas about technology without also having odd ideas about politics.\nAnd in any case, many technical ideas do have political implications. So if\nyou squash dissent, the back pressure will propagate into technical fields.\n[2]  \n  \nSingapore would face a similar problem. Singapore seems very aware of the\nimportance of encouraging startups. But while energetic government\nintervention may be able to make a port run efficiently, it can't coax\nstartups into existence. A state that bans chewing gum has a long way to go\nbefore it could create a San Francisco.  \n  \nDo you need a San Francisco? Might there not be an alternate route to\ninnovation that goes through obedience and cooperation instead of\nindividualism? Possibly, but I'd bet not. Most imaginative people seem to\nshare a certain prickly [independence](gba.html), whenever and wherever they\nlived. You see it in Diogenes telling Alexander to get out of his light and\ntwo thousand years later in Feynman breaking into safes at Los Alamos. [3]\nImaginative people don't want to follow or lead. They're most productive when\neveryone gets to do what they want.  \n  \nIronically, of all rich countries the US has lost the most civil liberties\nrecently. But I'm not too worried yet. I'm hoping once the present\nadministration is out, the natural openness of American culture will reassert\nitself.  \n  \n**4\\. American Universities Are Better.**  \n  \nYou need a great university to seed a silicon valley, and so far there are few\noutside the US. I asked a handful of American computer science professors\nwhich universities in Europe were most admired, and they all basically said\n\"Cambridge\" followed by a long pause while they tried to think of others.\nThere don't seem to be many universities elsewhere that compare with the best\nin America, at least in technology.  \n  \nIn some countries this is the result of a deliberate policy. The German and\nDutch governments, perhaps from fear of elitism, try to ensure that all\nuniversities are roughly equal in quality. The downside is that none are\nespecially good. The best professors are spread out, instead of being\nconcentrated as they are in the US. This probably makes them less productive,\nbecause they don't have good colleagues to inspire them. It also means no one\nuniversity will be good enough to act as a mecca, attracting talent from\nabroad and causing startups to form around it.  \n  \nThe case of Germany is a strange one. The Germans invented the modern\nuniversity, and up till the 1930s theirs were the best in the world. Now they\nhave none that stand out. As I was mulling this over, I found myself thinking:\n\"I can understand why German universities declined in the 1930s, after they\nexcluded Jews. But surely they should have bounced back by now.\" Then I\nrealized: maybe not. There are few Jews left in Germany and most Jews I know\nwould not want to move there. And if you took any great American university\nand removed the Jews, you'd have some pretty big gaps. So maybe it would be a\nlost cause trying to create a silicon valley in Germany, because you couldn't\nestablish the level of university you'd need as a seed. [4]  \n  \nIt's natural for US universities to compete with one another because so many\nare private. To reproduce the quality of American universities you probably\nalso have to reproduce this. If universities are controlled by the central\ngovernment, log-rolling will pull them all toward the mean: the new Institute\nof X will end up at the university in the district of a powerful politician,\ninstead of where it should be.  \n  \n**5\\. You Can Fire People in America.**  \n  \nI think one of the biggest obstacles to creating startups in Europe is the\nattitude toward employment. The famously rigid labor laws hurt every company,\nbut startups especially, because startups have the least time to spare for\nbureaucratic hassles.  \n  \nThe difficulty of firing people is a particular problem for startups because\nthey have no redundancy. Every person has to do their job well.  \n  \nBut the problem is more than just that some startup might have a problem\nfiring someone they needed to. Across industries and countries, there's a\nstrong inverse correlation between performance and job security. Actors and\ndirectors are fired at the end of each film, so they have to deliver every\ntime. Junior professors are fired by default after a few years unless the\nuniversity chooses to grant them tenure. Professional athletes know they'll be\npulled if they play badly for just a couple games. At the other end of the\nscale (at least in the US) are auto workers, New York City schoolteachers, and\ncivil servants, who are all nearly impossible to fire. The trend is so clear\nthat you'd have to be willfully blind not to see it.  \n  \nPerformance isn't everything, you say? Well, are auto workers, schoolteachers,\nand civil servants _happier_ than actors, professors, and professional\nathletes?  \n  \nEuropean public opinion will apparently tolerate people being fired in\nindustries where they really care about performance. Unfortunately the only\nindustry they care enough about so far is soccer. But that is at least a\nprecedent.  \n  \n**6\\. In America Work Is Less Identified with Employment.**  \n  \nThe problem in more traditional places like Europe and Japan goes deeper than\nthe employment laws. More dangerous is the attitude they reflect: that an\nemployee is a kind of servant, whom the employer has a duty to protect. It\nused to be that way in America too. In 1970 you were still supposed to get a\njob with a big company, for whom ideally you'd work your whole career. In\nreturn the company would take care of you: they'd try not to fire you, cover\nyour medical expenses, and support you in old age.  \n  \nGradually employment has been shedding such paternalistic overtones and\nbecoming simply an economic exchange. But the importance of the new model is\nnot just that it makes it easier for startups to grow. More important, I\nthink, is that it it makes it easier for people to _start_ startups.  \n  \nEven in the US most kids graduating from college still think they're supposed\nto get jobs, as if you couldn't be productive without being someone's\nemployee. But the less you identify work with employment, the easier it\nbecomes to start a startup. When you see your career as a series of different\ntypes of work, instead of a lifetime's service to a single employer, there's\nless risk in starting your own company, because you're only replacing one\nsegment instead of discarding the whole thing.  \n  \nThe old ideas are so powerful that even the most successful startup founders\nhave had to struggle against them. A year after the founding of Apple, Steve\nWozniak still hadn't quit HP. He still planned to work there for life. And\nwhen Jobs found someone to give Apple serious venture funding, on the\ncondition that Woz quit, he initially refused, arguing that he'd designed both\nthe Apple I and the Apple II while working at HP, and there was no reason he\ncouldn't continue.  \n  \n**7\\. America Is Not Too Fussy.**  \n  \nIf there are any laws regulating businesses, you can assume larval startups\nwill break most of them, because they don't know what the laws are and don't\nhave time to find out.  \n  \nFor example, many startups in America begin in places where it's not really\nlegal to run a business. Hewlett-Packard, Apple, and Google were all run out\nof garages. Many more startups, including ours, were initially run out of\napartments. If the laws against such things were actually enforced, most\nstartups wouldn't happen.  \n  \nThat could be a problem in fussier countries. If Hewlett and Packard tried\nrunning an electronics company out of their garage in Switzerland, the old\nlady next door would report them to the municipal authorities.  \n  \nBut the worst problem in other countries is probably the effort required just\nto start a company. A friend of mine started a company in Germany in the early\n90s, and was shocked to discover, among many other regulations, that you\nneeded $20,000 in capital to incorporate. That's one reason I'm not typing\nthis on an Apfel laptop. Jobs and Wozniak couldn't have come up with that kind\nof money in a company financed by selling a VW bus and an HP calculator. We\ncouldn't have started Viaweb either. [5]  \n  \nHere's a tip for governments that want to encourage startups: read the stories\nof existing startups, and then try to simulate what would have happened in\nyour country. When you hit something that would have killed Apple, prune it\noff.  \n  \n_Startups are[marginal](marginal.html)._ They're started by the poor and the\ntimid; they begin in marginal space and spare time; they're started by people\nwho are supposed to be doing something else; and though businesses, their\nfounders often know nothing about business. Young startups are fragile. A\nsociety that trims its margins sharply will kill them all.  \n  \n**8\\. America Has a Large Domestic Market.**  \n  \nWhat sustains a startup in the beginning is the prospect of getting their\ninitial product out. The successful ones therefore make the first version as\nsimple as possible. In the US they usually begin by making something just for\nthe local market.  \n  \nThis works in America, because the local market is 300 million people. It\nwouldn't work so well in Sweden. In a small country, a startup has a harder\ntask: they have to sell internationally from the start.  \n  \nThe EU was designed partly to simulate a single, large domestic market. The\nproblem is that the inhabitants still speak many different languages. So a\nsoftware startup in Sweden is still at a disadvantage relative to one in the\nUS, because they have to deal with internationalization from the beginning.\nIt's significant that the most famous recent startup in Europe, Skype, worked\non a problem that was intrinsically international.  \n  \nHowever, for better or worse it looks as if Europe will in a few decades speak\na single language. When I was a student in Italy in 1990, few Italians spoke\nEnglish. Now all educated people seem to be expected to-- and Europeans do not\nlike to seem uneducated. This is presumably a taboo subject, but if present\ntrends continue, French and German will eventually go the way of Irish and\nLuxembourgish: they'll be spoken in homes and by eccentric nationalists.  \n  \n**9\\. America Has Venture Funding.**  \n  \nStartups are easier to start in America because funding is easier to get.\nThere are now a few VC firms outside the US, but startup funding doesn't only\ncome from VC firms. A more important source, because it's more personal and\ncomes earlier in the process, is money from individual angel investors. Google\nmight never have got to the point where they could raise millions from VC\nfunds if they hadn't first raised a hundred thousand from Andy Bechtolsheim.\nAnd he could help them because he was one of the founders of Sun. This pattern\nis repeated constantly in startup hubs. It's this pattern that _makes_ them\nstartup hubs.  \n  \nThe good news is, all you have to do to get the process rolling is get those\nfirst few startups successfully launched. If they stick around after they get\nrich, startup founders will almost automatically fund and encourage new\nstartups.  \n  \nThe bad news is that the cycle is slow. It probably takes five years, on\naverage, before a startup founder can make angel investments. And while\ngovernments _might_ be able to set up local VC funds by supplying the money\nthemselves and recruiting people from existing firms to run them, only organic\ngrowth can produce angel investors.  \n  \nIncidentally, America's private universities are one reason there's so much\nventure capital. A lot of the money in VC funds comes from their endowments.\nSo another advantage of private universities is that a good chunk of the\ncountry's wealth is managed by enlightened investors.  \n  \n**10\\. America Has Dynamic Typing for Careers.**  \n  \nCompared to other industrialized countries the US is disorganized about\nrouting people into careers. For example, in America people often don't decide\nto go to medical school till they've finished college. In Europe they\ngenerally decide in high school.  \n  \nThe European approach reflects the old idea that each person has a single,\ndefinite occupation-- which is not far from the idea that each person has a\nnatural \"station\" in life. If this were true, the most efficient plan would be\nto discover each person's station as early as possible, so they could receive\nthe training appropriate to it.  \n  \nIn the US things are more haphazard. But that turns out to be an advantage as\nan economy gets more liquid, just as dynamic typing turns out to work better\nthan static for ill-defined problems. This is particularly true with startups.\n\"Startup founder\" is not the sort of career a high school student would\nchoose. If you ask at that age, people will choose conservatively. They'll\nchoose well-understood occupations like engineer, or doctor, or lawyer.  \n  \nStartups are the kind of thing people don't plan, so you're more likely to get\nthem in a society where it's ok to make career decisions on the fly.  \n  \nFor example, in theory the purpose of a PhD program is to train you to do\nresearch. But fortunately in the US this is another rule that isn't very\nstrictly enforced. In the US most people in CS PhD programs are there simply\nbecause they wanted to learn more. They haven't decided what they'll do\nafterward. So American grad schools spawn a lot of startups, because students\ndon't feel they're failing if they don't go into research.  \n  \nThose worried about America's \"competitiveness\" often suggest spending more on\npublic schools. But perhaps America's lousy public schools have a hidden\nadvantage. Because they're so bad, the kids adopt an attitude of waiting for\ncollege. I did; I knew I was learning so little that I wasn't even learning\nwhat the choices were, let alone which to choose. This is demoralizing, but it\ndoes at least make you keep an open mind.  \n  \nCertainly if I had to choose between bad high schools and good universities,\nlike the US, and good high schools and bad universities, like most other\nindustrialized countries, I'd take the US system. Better to make everyone feel\nlike a late bloomer than a failed child prodigy.  \n  \n**Attitudes**  \n  \nThere's one item conspicuously missing from this list: American attitudes.\nAmericans are said to be more entrepreneurial, and less afraid of risk. But\nAmerica has no monopoly on this. Indians and Chinese seem plenty\nentrepreneurial, perhaps more than Americans.  \n  \nSome say Europeans are less energetic, but I don't believe it. I think the\nproblem with Europe is not that they lack balls, but that they lack examples.  \n  \nEven in the US, the most successful startup founders are often technical\npeople who are quite timid, initially, about the idea of starting their own\ncompany. Few are the sort of backslapping extroverts one thinks of as\ntypically American. They can usually only summon up the activation energy to\nstart a startup when they meet people who've done it and realize they could\ntoo.  \n  \nI think what holds back European hackers is simply that they don't meet so\nmany people who've done it. You see that variation even within the US.\nStanford students are more entrepreneurial than Yale students, but not because\nof some difference in their characters; the Yale students just have fewer\nexamples.  \n  \nI admit there seem to be different attitudes toward ambition in Europe and the\nUS. In the US it's ok to be overtly ambitious, and in most of Europe it's not.\nBut this can't be an intrinsically European quality; previous generations of\nEuropeans were as ambitious as Americans. What happened? My hypothesis is that\nambition was discredited by the terrible things ambitious people did in the\nfirst half of the twentieth century. Now swagger is out. (Even now the image\nof a very ambitious German presses a button or two, doesn't it?)  \n  \nIt would be surprising if European attitudes weren't affected by the disasters\nof the twentieth century. It takes a while to be optimistic after events like\nthat. But ambition is human nature. Gradually it will re-emerge. [6]  \n  \n**How To Do Better**  \n  \nI don't mean to suggest by this list that America is the perfect place for\nstartups. It's the best place so far, but the sample size is small, and \"so\nfar\" is not very long. On historical time scales, what we have now is just a\nprototype.  \n  \nSo let's look at Silicon Valley the way you'd look at a product made by a\ncompetitor. What weaknesses could you exploit? How could you make something\nusers would like better? The users in this case are those critical few\nthousand people you'd like to move to your silicon valley.  \n  \nTo start with, Silicon Valley is too far from San Francisco. Palo Alto, the\noriginal ground zero, is about thirty miles away, and the present center more\nlike forty. So people who come to work in Silicon Valley face an unpleasant\nchoice: either live in the boring sprawl of the valley proper, or live in San\nFrancisco and endure an hour commute each way.  \n  \nThe best thing would be if the silicon valley were not merely closer to the\ninteresting city, but interesting itself. And there is a lot of room for\nimprovement here. Palo Alto is not so bad, but everything built since is the\nworst sort of strip development. You can measure how demoralizing it is by the\nnumber of people who will sacrifice two hours a day commuting rather than live\nthere.  \n  \nAnother area in which you could easily surpass Silicon Valley is public\ntransportation. There is a train running the length of it, and by American\nstandards it's not bad. Which is to say that to Japanese or Europeans it would\nseem like something out of the third world.  \n  \nThe kind of people you want to attract to your silicon valley like to get\naround by train, bicycle, and on foot. So if you want to beat America, design\na town that puts cars last. It will be a while before any American city can\nbring itself to do that.  \n  \n**Capital Gains**  \n  \nThere are also a couple things you could do to beat America at the national\nlevel. One would be to have lower capital gains taxes. It doesn't seem\ncritical to have the lowest _income_ taxes, because to take advantage of\nthose, people have to move. [7] But if capital gains rates vary, you move\nassets, not yourself, so changes are reflected at market speeds. The lower the\nrate, the cheaper it is to buy stock in growing companies as opposed to real\nestate, or bonds, or stocks bought for the dividends they pay.  \n  \nSo if you want to encourage startups you should have a low rate on capital\ngains. Politicians are caught between a rock and a hard place here, however:\nmake the capital gains rate low and be accused of creating \"tax breaks for the\nrich,\" or make it high and starve growing companies of investment capital. As\nGalbraith said, politics is a matter of choosing between the unpalatable and\nthe disastrous. A lot of governments experimented with the disastrous in the\ntwentieth century; now the trend seems to be toward the merely unpalatable.  \n  \nOddly enough, the leaders now are European countries like Belgium, which has a\ncapital gains tax rate of zero.  \n  \n**Immigration**  \n  \nThe other place you could beat the US would be with smarter immigration\npolicy. There are huge gains to be made here. Silicon valleys are made of\npeople, remember.  \n  \nLike a company whose software runs on Windows, those in the current Silicon\nValley are all too aware of the shortcomings of the INS, but there's little\nthey can do about it. They're hostages of the platform.  \n  \nAmerica's immigration system has never been well run, and since 2001 there has\nbeen an additional admixture of paranoia. What fraction of the smart people\nwho want to come to America can even get in? I doubt even half. Which means if\nyou made a competing technology hub that let in all smart people, you'd\nimmediately get more than half the world's top talent, for free.  \n  \nUS immigration policy is particularly ill-suited to startups, because it\nreflects a model of work from the 1970s. It assumes good technical people have\ncollege degrees, and that work means working for a big company.  \n  \nIf you don't have a college degree you can't get an H1B visa, the type usually\nissued to programmers. But a test that excludes Steve Jobs, Bill Gates, and\nMichael Dell can't be a good one. Plus you can't get a visa for working on\nyour own company, only for working as an employee of someone else's. And if\nyou want to apply for citizenship you daren't work for a startup at all,\nbecause if your sponsor goes out of business, you have to start over.  \n  \nAmerican immigration policy keeps out most smart people, and channels the rest\ninto unproductive jobs. It would be easy to do better. Imagine if, instead,\nyou treated immigration like recruiting-- if you made a conscious effort to\nseek out the smartest people and get them to come to your country.  \n  \nA country that got immigration right would have a huge advantage. At this\npoint you could become a mecca for smart people simply by having an\nimmigration system that let them in.  \n  \n**A Good Vector**  \n  \nIf you look at the kinds of things you have to do to create an environment\nwhere startups condense, none are great sacrifices. Great universities?\nLivable towns? Civil liberties? Flexible employment laws? Immigration policies\nthat let in smart people? Tax laws that encourage growth? It's not as if you\nhave to risk destroying your country to get a silicon valley; these are all\ngood things in their own right.  \n  \nAnd then of course there's the question, can you afford not to? I can imagine\na future in which the default choice of ambitious young people is to start\ntheir [own](hiring.html) company rather than work for someone else's. I'm not\nsure that will happen, but it's where the trend points now. And if that is the\nfuture, places that don't have startups will be a whole step behind, like\nthose that missed the Industrial Revolution.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] On the verge of the Industrial Revolution, England was already the richest\ncountry in the world. As far as such things can be compared, per capita income\nin England in 1750 was higher than India's in 1960.  \n  \nDeane, Phyllis, _The First Industrial Revolution_ , Cambridge University\nPress, 1965.  \n  \n[2] This has already happened once in China, during the Ming Dynasty, when the\ncountry turned its back on industrialization at the command of the court. One\nof Europe's advantages was that it had no government powerful enough to do\nthat.  \n  \n[3] Of course, Feynman and Diogenes were from adjacent traditions, but\nConfucius, though more polite, was no more willing to be told what to think.  \n  \n[4] For similar reasons it might be a lost cause to try to establish a silicon\nvalley in Israel. Instead of no Jews moving there, only Jews would move there,\nand I don't think you could build a silicon valley out of just Jews any more\nthan you could out of just Japanese.  \n  \n(This is not a remark about the qualities of these groups, just their sizes.\nJapanese are only about 2% of the world population, and Jews about .2%.)  \n  \n[5] According to the World Bank, the initial capital requirement for German\ncompanies is 47.6% of the per capita income. Doh.  \n  \nWorld Bank, _Doing Business in 2006_ , http://doingbusiness.org  \n  \n[6] For most of the twentieth century, Europeans looked back on the summer of\n1914 as if they'd been living in a dream world. It seems more accurate (or at\nleast, as accurate) to call the years after 1914 a nightmare than to call\nthose before a dream. A lot of the optimism Europeans consider distinctly\nAmerican is simply what they too were feeling in 1914.  \n  \n[7] The point where things start to go wrong seems to be about 50%. Above that\npeople get serious about tax avoidance. The reason is that the payoff for\navoiding tax grows hyperexponentially (x/1-x for 0 < x < 1). If your income\ntax rate is 10%, moving to Monaco would only give you 11% more income, which\nwouldn't even cover the extra cost. If it's 90%, you'd get ten times as much\nincome. And at 98%, as it was briefly in Britain in the 70s, moving to Monaco\nwould give you fifty times as much income. It seems quite likely that European\ngovernments of the 70s never drew this curve.  \n  \n**Thanks** to Trevor Blackwell, Matthias Felleisen, Jessica Livingston, Robert\nMorris, Neil Rimer, Hugues Steinier, Brad Templeton, Fred Wilson, and Stephen\nWolfram for reading drafts of this, and to Ed Dumbill for inviting me to\nspeak.  \n  \n\nMarch 2009  \n  \n _(This essay is derived from a talk at[AngelConf](http://angelconf.org).)_  \n  \nWhen we sold our startup in 1998 I thought one day I'd do some angel\ninvesting. Seven years later I still hadn't started. I put it off because it\nseemed mysterious and complicated. It turns out to be easier than I expected,\nand also more interesting.  \n  \nThe part I thought was hard, the mechanics of investing, really isn't. You\ngive a startup money and they give you stock. You'll probably get either\npreferred stock, which means stock with extra rights like getting your money\nback first in a sale, or convertible debt, which means (on paper) you're\nlending the company money, and the debt converts to stock at the next\nsufficiently big funding round. [1]  \n  \nThere are sometimes minor tactical advantages to using one or the other. The\npaperwork for convertible debt is simpler. But really it doesn't matter much\nwhich you use. Don't spend much time worrying about the details of deal terms,\nespecially when you first start angel investing. That's not how you win at\nthis game. When you hear people talking about a successful angel investor,\nthey're not saying \"He got a 4x liquidation preference.\" They're saying \"He\ninvested in Google.\"  \n  \nThat's how you win: by investing in the right startups. That is so much more\nimportant than anything else that I worry I'm misleading you by even talking\nabout other things.  \n  \n**Mechanics**  \n  \nAngel investors often syndicate deals, which means they join together to\ninvest on the same terms. In a syndicate there is usually a \"lead\" investor\nwho negotiates the terms with the startup. But not always: sometimes the\nstartup cobbles together a syndicate of investors who approach them\nindependently, and the startup's lawyer supplies the paperwork.  \n  \nThe easiest way to get started in angel investing is to find a friend who\nalready does it, and try to get included in his syndicates. Then all you have\nto do is write checks.  \n  \nDon't feel like you have to join a syndicate, though. It's not that hard to do\nit yourself. You can just use the standard [series\nAA](http://ycombinator.com/seriesaa.html) documents Wilson Sonsini and Y\nCombinator published online. You should of course have your lawyer review\neverything. Both you and the startup should have lawyers. But the lawyers\ndon't have to create the agreement from scratch. [2]  \n  \nWhen you negotiate terms with a startup, there are two numbers you care about:\nhow much money you're putting in, and the valuation of the company. The\nvaluation determines how much stock you get. If you put $50,000 into a company\nat a pre-money valuation of $1 million, then the post-money valuation is $1.05\nmillion, and you get .05/1.05, or 4.76% of the company's stock.  \n  \nIf the company raises more money later, the new investor will take a chunk of\nthe company away from all the existing shareholders just as you did. If in the\nnext round they sell 10% of the company to a new investor, your 4.76% will be\nreduced to 4.28%.  \n  \nThat's ok. Dilution is normal. What saves you from being mistreated in future\nrounds, usually, is that you're in the same boat as the founders. They can't\ndilute you without diluting themselves just as much. And they won't dilute\nthemselves unless they end up [net ahead](equity.html). So in theory, each\nfurther round of investment leaves you with a smaller share of an even more\nvaluable company, till after several more rounds you end up with .5% of the\ncompany at the point where it IPOs, and you are very happy because your\n$50,000 has become $5 million. [3]  \n  \nThe agreement by which you invest should have provisions that let you\ncontribute to future rounds to maintain your percentage. So it's your choice\nwhether you get diluted. [4] If the company does really well, you eventually\nwill, because eventually the valuations will get so high it's not worth it for\nyou.  \n  \nHow much does an angel invest? That varies enormously, from $10,000 to\nhundreds of thousands or in rare cases even millions. The upper bound is\nobviously the total amount the founders want to raise. The lower bound is\n5-10% of the total or $10,000, whichever is greater. A typical angel round\nthese days might be $150,000 raised from 5 people.  \n  \nValuations don't vary as much. For angel rounds it's rare to see a valuation\nlower than half a million or higher than 4 or 5 million. 4 million is starting\nto be VC territory.  \n  \nHow do you decide what valuation to offer? If you're part of a round led by\nsomeone else, that problem is solved for you. But what if you're investing by\nyourself? There's no real answer. There is no rational way to value an early\nstage startup. The valuation reflects nothing more than the strength of the\ncompany's bargaining position. If they really want you, either because they\ndesperately need money, or you're someone who can help them a lot, they'll let\nyou invest at a low valuation. If they don't need you, it will be higher. So\nguess. The startup may not have any more idea what the number should be than\nyou do. [5]  \n  \nUltimately it doesn't matter much. When angels make a lot of money from a\ndeal, it's not because they invested at a valuation of $1.5 million instead of\n$3 million. It's because the company was really successful.  \n  \nI can't emphasize that too much. Don't get hung up on mechanics or deal terms.\nWhat you should spend your time thinking about is whether the company is good.  \n  \n(Similarly, founders also should not get hung up on deal terms, but should\nspend their time thinking about how to make the company good.)  \n  \nThere's a second less obvious component of an angel investment: how much\nyou're expected to help the startup. Like the amount you invest, this can vary\na lot. You don't have to do anything if you don't want to; you could simply be\na source of money. Or you can become a de facto employee of the company. Just\nmake sure that you and the startup agree in advance about roughly how much\nyou'll do for them.  \n  \nReally hot companies sometimes have high standards for angels. The ones\neveryone wants to invest in practically audition investors, and only take\nmoney from people who are famous and/or will work hard for them. But don't\nfeel like you have to put in a lot of time or you won't get to invest in any\ngood startups. There is a surprising lack of correlation between how hot a\ndeal a startup is and how well it ends up doing. Lots of hot startups will end\nup failing, and lots of startups no one likes will end up succeeding. And the\nlatter are so desperate for money that they'll take it from anyone at a low\nvaluation. [6]  \n  \n**Picking Winners**  \n  \nIt would be nice to be able to pick those out, wouldn't it? The part of angel\ninvesting that has most effect on your returns, picking the right companies,\nis also the hardest. So you should practically ignore (or more precisely,\narchive, in the Gmail sense) everything I've told you so far. You may need to\nrefer to it at some point, but it is not the central issue.  \n  \nThe central issue is picking the right startups. What \"Make something people\nwant\" is for startups, \"Pick the right startups\" is for investors. Combined\nthey yield \"Pick the startups that will make something people want.\"  \n  \nHow do you do that? It's not as simple as picking startups that are already\nmaking something wildly popular. By then it's too late for angels. VCs will\nalready be onto them. As an angel, you have to pick startups before they've\ngot a hit\u2014either because they've made something great but users don't realize\nit yet, like Google early on, or because they're still an iteration or two\naway from the big hit, like Paypal when they were making software for\ntransferring money between PDAs.  \n  \nTo be a good angel investor, you have to be a good judge of potential. That's\nwhat it comes down to. VCs can be fast followers. Most of them don't try to\npredict what will win. They just try to notice quickly when something already\nis winning. But angels have to be able to predict. [7]  \n  \nOne interesting consequence of this fact is that there are a lot of people out\nthere who have never even made an angel investment and yet are already better\nangel investors than they realize. Someone who doesn't know the first thing\nabout the mechanics of venture funding but knows what a successful startup\nfounder looks like is actually far ahead of someone who knows termsheets\ninside out, but thinks [\"hacker\"](gba.html) means someone who breaks into\ncomputers. If you can recognize good startup founders by empathizing with\nthem\u2014if you both resonate at the same frequency\u2014then you may already be a\nbetter startup picker than the median professional VC. [8]  \n  \nPaul Buchheit, for example, started angel investing about a year after me, and\nhe was pretty much immediately as good as me at picking startups. My extra\nyear of experience was rounding error compared to our ability to empathize\nwith founders.  \n  \nWhat makes a good founder? If there were a word that meant the opposite of\nhapless, that would be the one. Bad founders seem hapless. They may be smart,\nor not, but somehow events overwhelm them and they get discouraged and give\nup. Good founders make things happen the way they want. Which is not to say\nthey force things to happen in a predefined way. Good founders have a healthy\nrespect for reality. But they are relentlessly resourceful. That's the closest\nI can get to the opposite of hapless. You want to fund people who are\nrelentlessly resourceful.  \n  \nNotice we started out talking about things, and now we're talking about\npeople. There is an ongoing debate between investors which is more important,\nthe people, or the idea\u2014or more precisely, the market. Some, like Ron Conway,\nsay it's the people\u2014that the idea will change, but the people are the\nfoundation of the company. Whereas Marc Andreessen says he'd back ok founders\nin a hot market over great founders in a bad one. [9]  \n  \nThese two positions are not so far apart as they seem, because good people\nfind good markets. Bill Gates would probably have ended up pretty rich even if\nIBM hadn't happened to drop the PC standard in his lap.  \n  \nI've thought a lot about the disagreement between the investors who prefer to\nbet on people and those who prefer to bet on markets. It's kind of surprising\nthat it even exists. You'd expect opinions to have converged more.  \n  \nBut I think I've figured out what's going on. The three most prominent people\nI know who favor markets are Marc, Jawed Karim, and Joe Kraus. And all three\nof them, in their own startups, basically flew into a thermal: they hit a\nmarket growing so fast that it was all they could do to keep up with it. That\nkind of experience is hard to ignore. Plus I think they underestimate\nthemselves: they think back to how easy it felt to ride that huge thermal\nupward, and they think \"anyone could have done it.\" But that isn't true; they\nare not ordinary people.  \n  \nSo as an angel investor I think you want to go with Ron Conway and bet on\npeople. Thermals happen, yes, but no one can predict them\u2014not even the\nfounders, and certainly not you as an investor. And only good people can ride\nthe thermals if they hit them anyway.  \n  \n**Deal Flow**  \n  \nOf course the question of how to choose startups presumes you have startups to\nchoose between. How do you find them? This is yet another problem that gets\nsolved for you by syndicates. If you tag along on a friend's investments, you\ndon't have to find startups.  \n  \nThe problem is not finding startups, exactly, but finding a stream of\nreasonably high quality ones. The traditional way to do this is through\ncontacts. If you're friends with a lot of investors and founders, they'll send\ndeals your way. The Valley basically runs on referrals. And once you start to\nbecome known as reliable, useful investor, people will refer lots of deals to\nyou. I certainly will.  \n  \nThere's also a newer way to find startups, which is to come to events like Y\nCombinator's Demo Day, where a batch of newly created startups presents to\ninvestors all at once. We have two Demo Days a year, one in March and one in\nAugust. These are basically mass referrals.  \n  \nBut events like Demo Day only account for a fraction of matches between\nstartups and investors. The personal referral is still the most common route.\nSo if you want to hear about new startups, the best way to do it is to get\nlots of referrals.  \n  \nThe best way to get lots of referrals is to invest in startups. No matter how\nsmart and nice you seem, insiders will be reluctant to send you referrals\nuntil you've proven yourself by doing a couple investments. Some smart, nice\nguys turn out to be flaky, high-maintenance investors. But once you prove\nyourself as a good investor, the deal flow, as they call it, will increase\nrapidly in both quality and quantity. At the extreme, for someone like Ron\nConway, it is basically identical with the deal flow of the whole Valley.  \n  \nSo if you want to invest seriously, the way to get started is to bootstrap\nyourself off your existing connections, be a good investor in the startups you\nmeet that way, and eventually you'll start a chain reaction. Good investors\nare rare, even in Silicon Valley. There probably aren't more than a couple\nhundred serious angels in the whole Valley, and yet they're probably the\nsingle most important ingredient in making the Valley what it is. Angels are\nthe limiting reagent in startup formation.  \n  \nIf there are only a couple hundred serious angels in the Valley, then by\ndeciding to become one you could single-handedly make the pipeline for\nstartups in Silicon Valley significantly wider. That is kind of mind-blowing.  \n  \n**Being Good**  \n  \nHow do you be a good angel investor? The first thing you need is to be\ndecisive. When we talk to founders about good and bad investors, one of the\nways we describe the good ones is to say \"he writes checks.\" That doesn't mean\nthe investor says yes to everyone. Far from it. It means he makes up his mind\nquickly, and follows through. You may be thinking, how hard could that be?\nYou'll see when you try it. It follows from the nature of angel investing that\nthe decisions are hard. You have to guess early, at the stage when the most\npromising ideas still seem counterintuitive, because if they were obviously\ngood, VCs would already have funded them.  \n  \nSuppose it's 1998. You come across a startup founded by a couple grad\nstudents. They say they're going to work on Internet search. There are already\na bunch of big public companies doing search. How can these grad students\npossibly compete with them? And does search even matter anyway? All the search\nengines are trying to get people to start calling them \"portals\" instead. Why\nwould you want to invest in a startup run by a couple of nobodies who are\ntrying to compete with large, aggressive companies in an area they themselves\nhave declared passe? And yet the grad students seem pretty smart. What do you\ndo?  \n  \nThere's a hack for being decisive when you're inexperienced: ratchet down the\nsize of your investment till it's an amount you wouldn't care too much about\nlosing. For every rich person (you probably shouldn't try angel investing\nunless you think of yourself as rich) there's some amount that would be\npainless, though annoying, to lose. Till you feel comfortable investing, don't\ninvest more than that per startup.  \n  \nFor example, if you have $5 million in investable assets, it would probably be\npainless (though annoying) to lose $15,000. That's less than .3% of your net\nworth. So start by making 3 or 4 $15,000 investments. Nothing will teach you\nabout angel investing like experience. Treat the first few as an educational\nexpense. $60,000 is less than a lot of graduate programs. Plus you get equity.  \n  \nWhat's really uncool is to be strategically indecisive: to string founders\nalong while trying to gather more information about the startup's trajectory.\n[10] There's always a temptation to do that, because you just have so little\nto go on, but you have to consciously resist it. In the long term it's to your\nadvantage to be good.  \n  \nThe other component of being a good angel investor is simply to be a good\nperson. Angel investing is not a business where you make money by screwing\npeople over. Startups create wealth, and creating wealth is not a zero sum\ngame. No one has to lose for you to win. In fact, if you mistreat the founders\nyou invest in, they'll just get demoralized and the company will do worse.\nPlus your referrals will dry up. So I recommend being good.  \n  \nThe most successful angel investors I know are all basically good people. Once\nthey invest in a company, all they want to do is help it. And they'll help\npeople they haven't invested in too. When they do favors they don't seem to\nkeep track of them. It's too much overhead. They just try to help everyone,\nand assume good things will flow back to them somehow. Empirically that seems\nto work.  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] Convertible debt can be either capped at a particular valuation, or can be\ndone at a discount to whatever the valuation turns out to be when it converts.\nE.g. convertible debt at a discount of 30% means when it converts you get\nstock as if you'd invested at a 30% lower valuation. That can be useful in\ncases where you can't or don't want to figure out what the valuation should\nbe. You leave it to the next investor. On the other hand, a lot of investors\nwant to know exactly what they're getting, so they will only do convertible\ndebt with a cap.  \n  \n[2] The expensive part of creating an agreement from scratch is not writing\nthe agreement, but bickering at several hundred dollars an hour over the\ndetails. That's why the series AA paperwork aims at a middle ground. You can\njust start from the compromise you'd have reached after lots of back and\nforth.  \n  \nWhen you fund a startup, both your lawyers should be specialists in startups.\nDo not use ordinary corporate lawyers for this. Their inexperience makes them\noverbuild: they'll create huge, overcomplicated agreements, and spend hours\narguing over irrelevant things.  \n  \nIn the Valley, the top startup law firms are Wilson Sonsini, Orrick, Fenwick &\nWest, Gunderson Dettmer, and Cooley Godward. In Boston the best are Goodwin\nProcter, Wilmer Hale, and Foley Hoag.  \n  \n[3] Your mileage may vary.  \n  \n[4] These anti-dilution provisions also protect you against tricks like a\nlater investor trying to steal the company by doing another round that values\nthe company at $1. If you have a competent startup lawyer handle the deal for\nyou, you should be protected against such tricks initially. But it could\nbecome a problem later. If a big VC firm wants to invest in the startup after\nyou, they may try to make you take out your anti-dilution protections. And if\nthey do the startup will be pressuring you to agree. They'll tell you that if\nyou don't, you're going to kill their deal with the VC. I recommend you solve\nthis problem by having a gentlemen's agreement with the founders: agree with\nthem in advance that you're not going to give up your anti-dilution\nprotections. Then it's up to them to tell VCs early on.  \n  \nThe reason you don't want to give them up is the following scenario. The VCs\nrecapitalize the company, meaning they give it additional funding at a pre-\nmoney valuation of zero. This wipes out the existing shareholders, including\nboth you and the founders. They then grant the founders lots of options,\nbecause they need them to stay around, but you get nothing.  \n  \nObviously this is not a nice thing to do. It doesn't happen often. Brand-name\nVCs wouldn't recapitalize a company just to steal a few percent from an angel.\nBut there's a continuum here. A less upstanding, lower-tier VC might be\ntempted to do it to steal a big chunk of stock.  \n  \nI'm not saying you should always absolutely refuse to give up your anti-\ndilution protections. Everything is a negotiation. If you're part of a\npowerful syndicate, you might be able to give up legal protections and rely on\nsocial ones. If you invest in a deal led by a big angel like Ron Conway, for\nexample, you're pretty well protected against being mistreated, because any VC\nwould think twice before crossing him. This kind of protection is one of the\nreasons angels like to invest in syndicates.  \n  \n[5] Don't invest so much, or at such a low valuation, that you end up with an\nexcessively large share of a startup, unless you're sure your money will be\nthe last they ever need. Later stage investors won't invest in a company if\nthe founders don't have enough equity left to motivate them. I talked to a VC\nrecently who said he'd met with a company he really liked, but he turned them\ndown because investors already owned more than half of it. Those investors\nprobably thought they'd been pretty clever by getting such a large chunk of\nthis desirable company, but in fact they were shooting themselves in the foot.  \n  \n[6] At any given time I know of at least 3 or 4 YC alumni who I believe will\nbe big successes but who are running on vapor, financially, because investors\ndon't yet get what they're doing. (And no, unfortunately, I can't tell you who\nthey are. I can't refer a startup to an investor I don't know.)  \n  \n[7] There are some VCs who can predict instead of reacting. Not surprisingly,\nthese are the most successful ones.  \n  \n[8] It's somewhat sneaky of me to put it this way, because the median VC loses\nmoney. That's one of the most surprising things I've learned about VC while\nworking on Y Combinator. Only a fraction of VCs even have positive returns.\nThe rest exist to satisfy demand among fund managers for venture capital as an\nasset class. Learning this explained a lot about some of the VCs I encountered\nwhen we were working on Viaweb.  \n  \n[9] VCs also generally say they prefer great markets to great people. But what\nthey're really saying is they want both. They're so selective that they only\neven consider great people. So when they say they care above all about big\nmarkets, they mean that's how they choose between great people.  \n  \n[10] Founders rightly dislike the sort of investor who says he's interested in\ninvesting but doesn't want to lead. There are circumstances where this is an\nacceptable excuse, but more often than not what it means is \"No, but if you\nturn out to be a hot deal, I want to be able to claim retroactively I said\nyes.\"  \n  \nIf you like a startup enough to invest in it, then invest in it. Just use the\nstandard [series AA](http://ycombinator.com/seriesaa.html) terms and write\nthem a check.  \n  \n**Thanks** to Sam Altman, Paul Buchheit, Jessica Livingston, Robert Morris,\nand Fred Wilson for reading drafts of this.  \n  \n[Comment](http://news.ycombinator.com/item?id=506671) on this essay.  \n  \n\nNovember 2008  \n  \nOne of the differences between big companies and startups is that big\ncompanies tend to have developed procedures to protect themselves against\nmistakes. A startup walks like a toddler, bashing into things and falling over\nall the time. A big company is more deliberate.  \n  \nThe gradual accumulation of checks in an organization is a kind of learning,\nbased on disasters that have happened to it or others like it. After giving a\ncontract to a supplier who goes bankrupt and fails to deliver, for example, a\ncompany might require all suppliers to prove they're solvent before submitting\nbids.  \n  \nAs companies grow they invariably get more such checks, either in response to\ndisasters they've suffered, or (probably more often) by hiring people from\nbigger companies who bring with them customs for protecting against new types\nof disasters.  \n  \nIt's natural for organizations to learn from mistakes. The problem is, people\nwho propose new checks almost never consider that the check itself has a cost.  \n  \n_Every check has a cost._ For example, consider the case of making suppliers\nverify their solvency. Surely that's mere prudence? But in fact it could have\nsubstantial costs. There's obviously the direct cost in time of the people on\nboth sides who supply and check proofs of the supplier's solvency. But the\nreal costs are the ones you never hear about: the company that would be the\nbest supplier, but doesn't bid because they can't spare the effort to get\nverified. Or the company that would be the best supplier, but falls just short\nof the threshold for solvency\u2014which will of course have been set on the high\nside, since there is no apparent cost of increasing it.  \n  \nWhenever someone in an organization proposes to add a new check, they should\nhave to explain not just the benefit but the cost. No matter how bad a job\nthey did of analyzing it, this meta-check would at least remind everyone there\nhad to _be_ a cost, and send them looking for it.  \n  \nIf companies started doing that, they'd find some surprises. Joel Spolsky\nrecently spoke at Y Combinator about selling software to corporate customers.\nHe said that in most companies software costing up to about $1000 could be\nbought by individual managers without any additional approvals. Above that\nthreshold, software purchases generally had to be approved by a committee. But\nbabysitting this process was so expensive for software vendors that it didn't\nmake sense to charge less than $50,000. Which means if you're making something\nyou might otherwise have charged $5000 for, you have to sell it for $50,000\ninstead.  \n  \nThe purpose of the committee is presumably to ensure that the company doesn't\nwaste money. And yet the result is that the company pays 10 times as much.  \n  \nChecks on purchases will always be expensive, because the harder it is to sell\nsomething to you, the more it has to cost. And not merely linearly, either. If\nyou're hard enough to sell to, the people who are best at making things don't\nwant to bother. The only people who will sell to you are companies that\nspecialize in selling to you. Then you've sunk to a whole new level of\ninefficiency. Market mechanisms no longer protect you, because the good\nsuppliers are no longer in the market.  \n  \nSuch things happen constantly to the biggest organizations of all,\ngovernments. But checks instituted by governments can cause much worse\nproblems than merely overpaying. Checks instituted by governments can cripple\na country's whole economy. Up till about 1400, China was richer and more\ntechnologically advanced than Europe. One reason Europe pulled ahead was that\nthe Chinese government restricted long trading voyages. So it was left to the\nEuropeans to explore and eventually to dominate the rest of the world,\nincluding China.  \n  \nIn more recent times, Sarbanes-Oxley has practically destroyed the US IPO\nmarket. That wasn't the intention of the legislators who wrote it. They just\nwanted to add a few more checks on public companies. But they forgot to\nconsider the cost. They forgot that companies about to go public are usually\nrather stretched, and that the weight of a few extra checks that might be easy\nfor General Electric to bear are enough to prevent younger companies from\nbeing public at all.  \n  \nOnce you start to think about the cost of checks, you can start to ask other\ninteresting questions. Is the cost increasing or decreasing? Is it higher in\nsome areas than others? Where does it increase discontinuously? If large\norganizations started to ask questions like that, they'd learn some\nfrightening things.  \n  \nI think the cost of checks may actually be increasing. The reason is that\nsoftware plays an increasingly important role in companies, and the people who\nwrite software are particularly harmed by checks.  \n  \nProgrammers are unlike many types of workers in that the best ones actually\nprefer to work hard. This doesn't seem to be the case in most types of work.\nWhen I worked in fast food, we didn't prefer the busy times. And when I used\nto mow lawns, I definitely didn't prefer it when the grass was long after a\nweek of rain.  \n  \nProgrammers, though, like it better when they write more code. Or more\nprecisely, when they release more code. Programmers like to make a difference.\nGood ones, anyway.  \n  \nFor good programmers, one of the best things about working for a startup is\nthat there are few checks on releases. In true startups, there are no external\nchecks at all. If you have an idea for a new feature in the morning, you can\nwrite it and push it to the production servers before lunch. And when you can\ndo that, you have more ideas.  \n  \nAt big companies, software has to go through various approvals before it can\nbe launched. And the cost of doing this can be enormous\u2014in fact,\ndiscontinuous. I was talking recently to a group of three programmers whose\nstartup had been acquired a few years before by a big company. When they'd\nbeen independent, they could release changes instantly. Now, they said, the\nabsolute fastest they could get code released on the production servers was\ntwo weeks.  \n  \nThis didn't merely make them less productive. It made them hate working for\nthe acquirer.  \n  \nHere's a sign of how much programmers like to be able to work hard: these guys\nwould have _paid_ to be able to release code immediately, the way they used\nto. I asked them if they'd trade 10% of the acquisition price for the ability\nto release code immediately, and all three instantly said yes. Then I asked\nwhat was the maximum percentage of the acquisition price they'd trade for it.\nThey said they didn't want to think about it, because they didn't want to know\nhow high they'd go, but I got the impression it might be as much as half.  \n  \nThey'd have sacrificed hundreds of thousands of dollars, perhaps millions,\njust to be able to deliver more software to users. And you know what? It would\nhave been perfectly safe to let them. In fact, the acquirer would have been\nbetter off; not only wouldn't these guys have broken anything, they'd have\ngotten a lot more done. So the acquirer is in fact getting worse performance\nat greater cost. Just like the committee approving software purchases.  \n  \nAnd just as the greatest danger of being hard to sell to is not that you\noverpay but that the best suppliers won't even sell to you, the greatest\ndanger of applying too many checks to your programmers is not that you'll make\nthem unproductive, but that good programmers won't even want to work for you.  \n  \nSteve Jobs's famous maxim \"artists ship\" works both ways. Artists aren't\nmerely capable of shipping. They insist on it. So if you don't let people\nship, you won't have any artists.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nOctober 2008  \n  \nThe economic situation is apparently so grim that some experts fear we may be\nin for a stretch as bad as the mid seventies.  \n  \nWhen Microsoft and Apple were founded.  \n  \nAs those examples suggest, a recession may not be such a bad time to start a\nstartup. I'm not claiming it's a particularly good time either. The truth is\nmore boring: the state of the economy doesn't matter much either way.  \n  \nIf we've learned one thing from funding so many startups, it's that they\nsucceed or fail based on the qualities of the founders. The economy has some\neffect, certainly, but as a predictor of success it's rounding error compared\nto the founders.  \n  \nWhich means that what matters is who you are, not when you do it. If you're\nthe right sort of person, you'll win even in a bad economy. And if you're not,\na good economy won't save you. Someone who thinks \"I better not start a\nstartup now, because the economy is so bad\" is making the same mistake as the\npeople who thought during the Bubble \"all I have to do is start a startup, and\nI'll be rich.\"  \n  \nSo if you want to improve your chances, you should think far more about who\nyou can recruit as a cofounder than the state of the economy. And if you're\nworried about threats to the survival of your company, don't look for them in\nthe news. Look in the mirror.  \n  \nBut for any given team of founders, would it not pay to wait till the economy\nis better before taking the leap? If you're starting a restaurant, maybe, but\nnot if you're working on technology. Technology progresses more or less\nindependently of the stock market. So for any given idea, the payoff for\nacting fast in a bad economy will be higher than for waiting. Microsoft's\nfirst product was a Basic interpreter for the Altair. That was exactly what\nthe world needed in 1975, but if Gates and Allen had decided to wait a few\nyears, it would have been too late.  \n  \nOf course, the idea you have now won't be the last you have. There are always\nnew ideas. But if you have a specific idea you want to act on, act now.  \n  \nThat doesn't mean you can ignore the economy. Both customers and investors\nwill be feeling pinched. It's not necessarily a problem if customers feel\npinched: you may even be able to benefit from it, by making things that [save\nmoney](http://bountii.com). Startups often make things cheaper, so in that\nrespect they're better positioned to prosper in a recession than big\ncompanies.  \n  \nInvestors are more of a problem. Startups generally need to raise some amount\nof external funding, and investors tend to be less willing to invest in bad\ntimes. They shouldn't be. Everyone knows you're supposed to buy when times are\nbad and sell when times are good. But of course what makes investing so\ncounterintuitive is that in equity markets, good times are defined as everyone\nthinking it's time to buy. You have to be a contrarian to be correct, and by\ndefinition only a minority of investors can be.  \n  \nSo just as investors in 1999 were tripping over one another trying to buy into\nlousy startups, investors in 2009 will presumably be reluctant to invest even\nin good ones.  \n  \nYou'll have to adapt to this. But that's nothing new: startups always have to\nadapt to the whims of investors. Ask any founder in any economy if they'd\ndescribe investors as fickle, and watch the face they make. Last year you had\nto be prepared to explain how your startup was viral. Next year you'll have to\nexplain how it's recession-proof.  \n  \n(Those are both good things to be. The mistake investors make is not the\ncriteria they use but that they always tend to focus on one to the exclusion\nof the rest.)  \n  \nFortunately the way to make a startup recession-proof is to do exactly what\nyou should do anyway: run it as cheaply as possible. For years I've been\ntelling founders that the surest route to success is to be the cockroaches of\nthe corporate world. The immediate cause of death in a startup is always\nrunning out of money. So the cheaper your company is to operate, the harder it\nis to kill. And fortunately it has gotten very cheap to run a startup. A\nrecession will if anything make it cheaper still.  \n  \nIf nuclear winter really is here, it may be safer to be a cockroach even than\nto keep your job. Customers may drop off individually if they can no longer\nafford you, but you're not going to lose them all at once; markets don't\n\"reduce headcount.\"  \n  \nWhat if you quit your job to start a startup that fails, and you can't find\nanother? That could be a problem if you work in sales or marketing. In those\nfields it can take months to find a new job in a bad economy. But hackers seem\nto be more liquid. Good hackers can always get some kind of job. It might not\nbe your dream job, but you're not going to starve.  \n  \nAnother advantage of bad times is that there's less competition. Technology\ntrains leave the station at regular intervals. If everyone else is cowering in\na corner, you may have a whole car to yourself.  \n  \nYou're an investor too. As a founder, you're buying stock with work: the\nreason Larry and Sergey are so rich is not so much that they've done work\nworth tens of billions of dollars, but that they were the first investors in\nGoogle. And like any investor you should buy when times are bad.  \n  \nWere you nodding in agreement, thinking \"stupid investors\" a few paragraphs\nago when I was talking about how investors are reluctant to put money into\nstartups in bad markets, even though that's the time they should rationally be\nmost willing to buy? Well, founders aren't much better. When times get bad,\nhackers go to grad school. And no doubt that will happen this time too. In\nfact, what makes the preceding paragraph true is that most readers won't\nbelieve it\u2014at least to the extent of acting on it.  \n  \nSo maybe a recession is a good time to start a startup. It's hard to say\nwhether advantages like lack of competition outweigh disadvantages like\nreluctant investors. But it doesn't matter much either way. It's the people\nthat matter. And for a given set of people working on a given technology, the\ntime to act is always now.  \n  \n\nJanuary 2003  \n  \n _(This article was given as a talk at the 2003 Spam Conference. It describes\nthe work I've done to improve the performance of the algorithm described in[A\nPlan for Spam](spam.html), and what I plan to do in the future.)_  \n  \nThe first discovery I'd like to present here is an algorithm for lazy\nevaluation of research papers. Just write whatever you want and don't cite any\nprevious work, and indignant readers will send you references to all the\npapers you should have cited. I discovered this algorithm after ``A Plan for\nSpam'' [1] was on Slashdot.  \n  \nSpam filtering is a subset of text classification, which is a well established\nfield, but the first papers about Bayesian spam filtering per se seem to have\nbeen two given at the same conference in 1998, one by Pantel and Lin [2], and\nanother by a group from Microsoft Research [3].  \n  \nWhen I heard about this work I was a bit surprised. If people had been onto\nBayesian filtering four years ago, why wasn't everyone using it? When I read\nthe papers I found out why. Pantel and Lin's filter was the more effective of\nthe two, but it only caught 92% of spam, with 1.16% false positives.  \n  \nWhen I tried writing a Bayesian spam filter, it caught 99.5% of spam with less\nthan .03% false positives [4]. It's always alarming when two people trying the\nsame experiment get widely divergent results. It's especially alarming here\nbecause those two sets of numbers might yield opposite conclusions. Different\nusers have different requirements, but I think for many people a filtering\nrate of 92% with 1.16% false positives means that filtering is not an\nacceptable solution, whereas 99.5% with less than .03% false positives means\nthat it is.  \n  \nSo why did we get such different numbers? I haven't tried to reproduce Pantel\nand Lin's results, but from reading the paper I see five things that probably\naccount for the difference.  \n  \nOne is simply that they trained their filter on very little data: 160 spam and\n466 nonspam mails. Filter performance should still be climbing with data sets\nthat small. So their numbers may not even be an accurate measure of the\nperformance of their algorithm, let alone of Bayesian spam filtering in\ngeneral.  \n  \nBut I think the most important difference is probably that they ignored\nmessage headers. To anyone who has worked on spam filters, this will seem a\nperverse decision. And yet in the very first filters I tried writing, I\nignored the headers too. Why? Because I wanted to keep the problem neat. I\ndidn't know much about mail headers then, and they seemed to me full of random\nstuff. There is a lesson here for filter writers: don't ignore data. You'd\nthink this lesson would be too obvious to mention, but I've had to learn it\nseveral times.  \n  \nThird, Pantel and Lin stemmed the tokens, meaning they reduced e.g. both\n``mailing'' and ``mailed'' to the root ``mail''. They may have felt they were\nforced to do this by the small size of their corpus, but if so this is a kind\nof premature optimization.  \n  \nFourth, they calculated probabilities differently. They used all the tokens,\nwhereas I only use the 15 most significant. If you use all the tokens you'll\ntend to miss longer spams, the type where someone tells you their life story\nup to the point where they got rich from some multilevel marketing scheme. And\nsuch an algorithm would be easy for spammers to spoof: just add a big chunk of\nrandom text to counterbalance the spam terms.  \n  \nFinally, they didn't bias against false positives. I think any spam filtering\nalgorithm ought to have a convenient knob you can twist to decrease the false\npositive rate at the expense of the filtering rate. I do this by counting the\noccurrences of tokens in the nonspam corpus double.  \n  \nI don't think it's a good idea to treat spam filtering as a straight text\nclassification problem. You can use text classification techniques, but\nsolutions can and should reflect the fact that the text is email, and spam in\nparticular. Email is not just text; it has structure. Spam filtering is not\njust classification, because false positives are so much worse than false\nnegatives that you should treat them as a different kind of error. And the\nsource of error is not just random variation, but a live human spammer working\nactively to defeat your filter.  \n  \n**Tokens**  \n  \nAnother project I heard about after the Slashdot article was Bill Yerazunis'\n[CRM114](http://crm114.sourceforge.net) [5]. This is the counterexample to the\ndesign principle I just mentioned. It's a straight text classifier, but such a\nstunningly effective one that it manages to filter spam almost perfectly\nwithout even knowing that's what it's doing.  \n  \nOnce I understood how CRM114 worked, it seemed inevitable that I would\neventually have to move from filtering based on single words to an approach\nlike this. But first, I thought, I'll see how far I can get with single words.\nAnd the answer is, surprisingly far.  \n  \nMostly I've been working on smarter tokenization. On current spam, I've been\nable to achieve filtering rates that approach CRM114's. These techniques are\nmostly orthogonal to Bill's; an optimal solution might incorporate both.  \n  \n``A Plan for Spam'' uses a very simple definition of a token. Letters, digits,\ndashes, apostrophes, and dollar signs are constituent characters, and\neverything else is a token separator. I also ignored case.  \n  \nNow I have a more complicated definition of a token:\n\n  1. Case is preserved.  \n  \n\n  2. Exclamation points are constituent characters.  \n  \n\n  3. Periods and commas are constituents if they occur between two digits. This lets me get ip addresses and prices intact.  \n  \n\n  4. A price range like $20-25 yields two tokens, $20 and $25.  \n  \n\n  5. Tokens that occur within the To, From, Subject, and Return-Path lines, or within urls, get marked accordingly. E.g. ``foo'' in the Subject line becomes ``Subject*foo''. (The asterisk could be any character you don't allow as a constituent.) \n\nSuch measures increase the filter's vocabulary, which makes it more\ndiscriminating. For example, in the current filter, ``free'' in the Subject\nline has a spam probability of 98%, whereas the same token in the body has a\nspam probability of only 65%.  \n  \nHere are some of the current probabilities [6]:  \n  \n\n    \n    \n    Subject*FREE      0.9999\n    free!!            0.9999\n    To*free           0.9998\n    Subject*free      0.9782\n    free!             0.9199\n    Free              0.9198\n    Url*free          0.9091\n    FREE              0.8747\n    From*free         0.7636\n    free              0.6546\n    \n\nIn the Plan for Spam filter, all these tokens would have had the same\nprobability, .7602. That filter recognized about 23,000 tokens. The current\none recognizes about 187,000.  \n  \nThe disadvantage of having a larger universe of tokens is that there is more\nchance of misses. Spreading your corpus out over more tokens has the same\neffect as making it smaller. If you consider exclamation points as\nconstituents, for example, then you could end up not having a spam probability\nfor free with seven exclamation points, even though you know that free with\njust two exclamation points has a probability of 99.99%.  \n  \nOne solution to this is what I call degeneration. If you can't find an exact\nmatch for a token, treat it as if it were a less specific version. I consider\nterminal exclamation points, uppercase letters, and occurring in one of the\nfive marked contexts as making a token more specific. For example, if I don't\nfind a probability for ``Subject*free!'', I look for probabilities for\n``Subject*free'', ``free!'', and ``free'', and take whichever one is farthest\nfrom .5.  \n  \nHere are the alternatives [7] considered if the filter sees ``FREE!!!'' in the\nSubject line and doesn't have a probability for it.  \n  \n\n    \n    \n    Subject*Free!!!\n    Subject*free!!!\n    Subject*FREE!\n    Subject*Free!\n    Subject*free!\n    Subject*FREE\n    Subject*Free\n    Subject*free\n    FREE!!!\n    Free!!!\n    free!!!\n    FREE!\n    Free!\n    free!\n    FREE\n    Free\n    free              \n    \n\nIf you do this, be sure to consider versions with initial caps as well as all\nuppercase and all lowercase. Spams tend to have more sentences in imperative\nmood, and in those the first word is a verb. So verbs with initial caps have\nhigher spam probabilities than they would in all lowercase. In my filter, the\nspam probability of ``Act'' is 98% and for ``act'' only 62%.  \n  \nIf you increase your filter's vocabulary, you can end up counting the same\nword multiple times, according to your old definition of ``same''. Logically,\nthey're not the same token anymore. But if this still bothers you, let me add\nfrom experience that the words you seem to be counting multiple times tend to\nbe exactly the ones you'd want to.  \n  \nAnother effect of a larger vocabulary is that when you look at an incoming\nmail you find more interesting tokens, meaning those with probabilities far\nfrom .5. I use the 15 most interesting to decide if mail is spam. But you can\nrun into a problem when you use a fixed number like this. If you find a lot of\nmaximally interesting tokens, the result can end up being decided by whatever\nrandom factor determines the ordering of equally interesting tokens. One way\nto deal with this is to treat some as more interesting than others.  \n  \nFor example, the token ``dalco'' occurs 3 times in my spam corpus and never in\nmy legitimate corpus. The token ``Url*optmails'' (meaning ``optmails'' within\na url) occurs 1223 times. And yet, as I used to calculate probabilities for\ntokens, both would have the same spam probability, the threshold of .99.  \n  \nThat doesn't feel right. There are theoretical arguments for giving these two\ntokens substantially different probabilities (Pantel and Lin do), but I\nhaven't tried that yet. It does seem at least that if we find more than 15\ntokens that only occur in one corpus or the other, we ought to give priority\nto the ones that occur a lot. So now there are two threshold values. For\ntokens that occur only in the spam corpus, the probability is .9999 if they\noccur more than 10 times and .9998 otherwise. Ditto at the other end of the\nscale for tokens found only in the legitimate corpus.  \n  \nI may later scale token probabilities substantially, but this tiny amount of\nscaling at least ensures that tokens get sorted the right way.  \n  \nAnother possibility would be to consider not just 15 tokens, but all the\ntokens over a certain threshold of interestingness. Steven Hauser does this in\nhis statistical spam filter [8]. If you use a threshold, make it very high, or\nspammers could spoof you by packing messages with more innocent words.  \n  \nFinally, what should one do about html? I've tried the whole spectrum of\noptions, from ignoring it to parsing it all. Ignoring html is a bad idea,\nbecause it's full of useful spam signs. But if you parse it all, your filter\nmight degenerate into a mere html recognizer. The most effective approach\nseems to be the middle course, to notice some tokens but not others. I look at\na, img, and font tags, and ignore the rest. Links and images you should\ncertainly look at, because they contain urls.  \n  \nI could probably be smarter about dealing with html, but I don't think it's\nworth putting a lot of time into this. Spams full of html are easy to filter.\nThe smarter spammers already avoid it. So performance in the future should not\ndepend much on how you deal with html.  \n  \n**Performance**  \n  \nBetween December 10 2002 and January 10 2003 I got about 1750 spams. Of these,\n4 got through. That's a filtering rate of about 99.75%.  \n  \nTwo of the four spams I missed got through because they happened to use words\nthat occur often in my legitimate email.  \n  \nThe third was one of those that exploit an insecure cgi script to send mail to\nthird parties. They're hard to filter based just on the content because the\nheaders are innocent and they're careful about the words they use. Even so I\ncan usually catch them. This one squeaked by with a probability of .88, just\nunder the threshold of .9.  \n  \nOf course, looking at multiple token sequences would catch it easily. ``Below\nis the result of your feedback form'' is an instant giveaway.  \n  \nThe fourth spam was what I call a spam-of-the-future, because this is what I\nexpect spam to evolve into: some completely neutral text followed by a url. In\nthis case it was was from someone saying they had finally finished their\nhomepage and would I go look at it. (The page was of course an ad for a porn\nsite.)  \n  \nIf the spammers are careful about the headers and use a fresh url, there is\nnothing in spam-of-the-future for filters to notice. We can of course counter\nby sending a crawler to look at the page. But that might not be necessary. The\nresponse rate for spam-of-the-future must be low, or everyone would be doing\nit. If it's low enough, it [won't pay](wfks.html) for spammers to send it, and\nwe won't have to work too hard on filtering it.  \n  \nNow for the really shocking news: during that same one-month period I got\n_three_ false positives.  \n  \nIn a way it's a relief to get some false positives. When I wrote ``A Plan for\nSpam'' I hadn't had any, and I didn't know what they'd be like. Now that I've\nhad a few, I'm relieved to find they're not as bad as I feared. False\npositives yielded by statistical filters turn out to be mails that sound a lot\nlike spam, and these tend to be the ones you would least mind missing [9].  \n  \nTwo of the false positives were newsletters from companies I've bought things\nfrom. I never asked to receive them, so arguably they were spams, but I count\nthem as false positives because I hadn't been deleting them as spams before.\nThe reason the filters caught them was that both companies in January switched\nto commercial email senders instead of sending the mails from their own\nservers, and both the headers and the bodies became much spammier.  \n  \nThe third false positive was a bad one, though. It was from someone in Egypt\nand written in all uppercase. This was a direct result of making tokens case\nsensitive; the Plan for Spam filter wouldn't have caught it.  \n  \nIt's hard to say what the overall false positive rate is, because we're up in\nthe noise, statistically. Anyone who has worked on filters (at least,\neffective filters) will be aware of this problem. With some emails it's hard\nto say whether they're spam or not, and these are the ones you end up looking\nat when you get filters really tight. For example, so far the filter has\ncaught two emails that were sent to my address because of a typo, and one sent\nto me in the belief that I was someone else. Arguably, these are neither my\nspam nor my nonspam mail.  \n  \nAnother false positive was from a vice president at Virtumundo. I wrote to\nthem pretending to be a customer, and since the reply came back through\nVirtumundo's mail servers it had the most incriminating headers imaginable.\nArguably this isn't a real false positive either, but a sort of Heisenberg\nuncertainty effect: I only got it because I was writing about spam filtering.  \n  \nNot counting these, I've had a total of five false positives so far, out of\nabout 7740 legitimate emails, a rate of .06%. The other two were a notice that\nsomething I bought was back-ordered, and a party reminder from Evite.  \n  \nI don't think this number can be trusted, partly because the sample is so\nsmall, and partly because I think I can fix the filter not to catch some of\nthese.  \n  \nFalse positives seem to me a different kind of error from false negatives.\nFiltering rate is a measure of performance. False positives I consider more\nlike bugs. I approach improving the filtering rate as optimization, and\ndecreasing false positives as debugging.  \n  \nSo these five false positives are my bug list. For example, the mail from\nEgypt got nailed because the uppercase text made it look to the filter like a\nNigerian spam. This really is kind of a bug. As with html, the email being all\nuppercase is really conceptually _one_ feature, not one for each word. I need\nto handle case in a more sophisticated way.  \n  \nSo what to make of this .06%? Not much, I think. You could treat it as an\nupper bound, bearing in mind the small sample size. But at this stage it is\nmore a measure of the bugs in my implementation than some intrinsic false\npositive rate of Bayesian filtering.  \n  \n**Future**  \n  \nWhat next? Filtering is an optimization problem, and the key to optimization\nis profiling. Don't try to guess where your code is slow, because you'll guess\nwrong. _Look_ at where your code is slow, and fix that. In filtering, this\ntranslates to: look at the spams you miss, and figure out what you could have\ndone to catch them.  \n  \nFor example, spammers are now working aggressively to evade filters, and one\nof the things they're doing is breaking up and misspelling words to prevent\nfilters from recognizing them. But working on this is not my first priority,\nbecause I still have no trouble catching these spams [10].  \n  \nThere are two kinds of spams I currently do have trouble with. One is the type\nthat pretends to be an email from a woman inviting you to go chat with her or\nsee her profile on a dating site. These get through because they're the one\ntype of sales pitch you can make without using sales talk. They use the same\nvocabulary as ordinary email.  \n  \nThe other kind of spams I have trouble filtering are those from companies in\ne.g. Bulgaria offering contract programming services. These get through\nbecause I'm a programmer too, and the spams are full of the same words as my\nreal mail.  \n  \nI'll probably focus on the personal ad type first. I think if I look closer\nI'll be able to find statistical differences between these and my real mail.\nThe style of writing is certainly different, though it may take multiword\nfiltering to catch that. Also, I notice they tend to repeat the url, and\nsomeone including a url in a legitimate mail wouldn't do that [11].  \n  \nThe outsourcing type are going to be hard to catch. Even if you sent a crawler\nto the site, you wouldn't find a smoking statistical gun. Maybe the only\nanswer is a central list of domains advertised in spams [12]. But there can't\nbe that many of this type of mail. If the only spams left were unsolicited\noffers of contract programming services from Bulgaria, we could all probably\nmove on to working on something else.  \n  \nWill statistical filtering actually get us to that point? I don't know. Right\nnow, for me personally, spam is not a problem. But spammers haven't yet made a\nserious effort to spoof statistical filters. What will happen when they do?  \n  \nI'm not optimistic about filters that work at the network level [13]. When\nthere is a static obstacle worth getting past, spammers are pretty efficient\nat getting past it. There is already a company called Assurance Systems that\nwill run your mail through Spamassassin and tell you whether it will get\nfiltered out.  \n  \nNetwork-level filters won't be completely useless. They may be enough to kill\nall the \"opt-in\" spam, meaning spam from companies like Virtumundo and\nEqualamail who claim that they're really running opt-in lists. You can filter\nthose based just on the headers, no matter what they say in the body. But\nanyone willing to falsify headers or use open relays, presumably including\nmost porn spammers, should be able to get some message past network-level\nfilters if they want to. (By no means the message they'd like to send though,\nwhich is something.)  \n  \nThe kind of filters I'm optimistic about are ones that calculate probabilities\nbased on each individual user's mail. These can be much more effective, not\nonly in avoiding false positives, but in filtering too: for example, finding\nthe recipient's email address base-64 encoded anywhere in a message is a very\ngood spam indicator.  \n  \nBut the real advantage of individual filters is that they'll all be different.\nIf everyone's filters have different probabilities, it will make the spammers'\noptimization loop, what programmers would call their edit-compile-test cycle,\nappallingly slow. Instead of just tweaking a spam till it gets through a copy\nof some filter they have on their desktop, they'll have to do a test mailing\nfor each tweak. It would be like programming in a language without an\ninteractive toplevel, and I wouldn't wish that on anyone.  \n  \n  \n  \n**Notes**  \n  \n[1] Paul Graham. ``A Plan for Spam.'' August 2002.\nhttp://paulgraham.com/spam.html.  \n  \nProbabilities in this algorithm are calculated using a degenerate case of\nBayes' Rule. There are two simplifying assumptions: that the probabilities of\nfeatures (i.e. words) are independent, and that we know nothing about the\nprior probability of an email being spam.  \n  \nThe first assumption is widespread in text classification. Algorithms that use\nit are called ``naive Bayesian.''  \n  \nThe second assumption I made because the proportion of spam in my incoming\nmail fluctuated so much from day to day (indeed, from hour to hour) that the\noverall prior ratio seemed worthless as a predictor. If you assume that\nP(spam) and P(nonspam) are both .5, they cancel out and you can remove them\nfrom the formula.  \n  \nIf you were doing Bayesian filtering in a situation where the ratio of spam to\nnonspam was consistently very high or (especially) very low, you could\nprobably improve filter performance by incorporating prior probabilities. To\ndo this right you'd have to track ratios by time of day, because spam and\nlegitimate mail volume both have distinct daily patterns.  \n  \n[2] Patrick Pantel and Dekang Lin. ``SpamCop-- A Spam Classification &\nOrganization Program.'' Proceedings of AAAI-98 Workshop on Learning for Text\nCategorization.  \n  \n[3] Mehran Sahami, Susan Dumais, David Heckerman and Eric Horvitz. ``A\nBayesian Approach to Filtering Junk E-Mail.'' Proceedings of AAAI-98 Workshop\non Learning for Text Categorization.  \n  \n[4] At the time I had zero false positives out of about 4,000 legitimate\nemails. If the next legitimate email was a false positive, this would give us\n.03%. These false positive rates are untrustworthy, as I explain later. I\nquote a number here only to emphasize that whatever the false positive rate\nis, it is less than 1.16%.  \n  \n[5] Bill Yerazunis. ``Sparse Binary Polynomial Hash Message Filtering and The\nCRM114 Discriminator.'' Proceedings of 2003 Spam Conference.  \n  \n[6] In ``A Plan for Spam'' I used thresholds of .99 and .01. It seems\njustifiable to use thresholds proportionate to the size of the corpora. Since\nI now have on the order of 10,000 of each type of mail, I use .9999 and .0001.  \n  \n[7] There is a flaw here I should probably fix. Currently, when\n``Subject*foo'' degenerates to just ``foo'', what that means is you're getting\nthe stats for occurrences of ``foo'' in the body or header lines other than\nthose I mark. What I should do is keep track of statistics for ``foo'' overall\nas well as specific versions, and degenerate from ``Subject*foo'' not to\n``foo'' but to ``Anywhere*foo''. Ditto for case: I should degenerate from\nuppercase to any-case, not lowercase.  \n  \nIt would probably be a win to do this with prices too, e.g. to degenerate from\n``$129.99'' to ``$--9.99'', ``$--.99'', and ``$--''.  \n  \nYou could also degenerate from words to their stems, but this would probably\nonly improve filtering rates early on when you had small corpora.  \n  \n[8] Steven Hauser. ``Statistical Spam Filter Works for Me.''\nhttp://www.sofbot.com.  \n  \n[9] False positives are not all equal, and we should remember this when\ncomparing techniques for stopping spam. Whereas many of the false positives\ncaused by filters will be near-spams that you wouldn't mind missing, false\npositives caused by blacklists, for example, will be just mail from people who\nchose the wrong ISP. In both cases you catch mail that's near spam, but for\nblacklists nearness is physical, and for filters it's textual.  \n  \n[10] If spammers get good enough at obscuring tokens for this to be a problem,\nwe can respond by simply removing whitespace, periods, commas, etc. and using\na dictionary to pick the words out of the resulting sequence. And of course\nfinding words this way that weren't visible in the original text would in\nitself be evidence of spam.  \n  \nPicking out the words won't be trivial. It will require more than just\nreconstructing word boundaries; spammers both add (``xHot nPorn cSite'') and\nomit (``P#rn'') letters. Vision research may be useful here, since human\nvision is the limit that such tricks will approach.  \n  \n[11] In general, spams are more repetitive than regular email. They want to\npound that message home. I currently don't allow duplicates in the top 15\ntokens, because you could get a false positive if the sender happens to use\nsome bad word multiple times. (In my current filter, ``dick'' has a spam\nprobabilty of .9999, but it's also a name.) It seems we should at least notice\nduplication though, so I may try allowing up to two of each token, as Brian\nBurton does in SpamProbe.  \n  \n[12] This is what approaches like Brightmail's will degenerate into once\nspammers are pushed into using mad-lib techniques to generate everything else\nin the message.  \n  \n[13] It's sometimes argued that we should be working on filtering at the\nnetwork level, because it is more efficient. What people usually mean when\nthey say this is: we currently filter at the network level, and we don't want\nto start over from scratch. But you can't dictate the problem to fit your\nsolution.  \n  \nHistorically, scarce-resource arguments have been the losing side in debates\nabout software design. People only tend to use them to justify choices\n(inaction in particular) made for other reasons.  \n  \n**Thanks** to Sarah Harlin, Trevor Blackwell, and Dan Giffin for reading\ndrafts of this paper, and to Dan again for most of the infrastructure that\nthis filter runs on.  \n  \n  \n  \n**Related:**  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nApril 2005  \n  \nThis summer, as an experiment, some friends and I are giving [seed\nfunding](http://ycombinator.com) to a bunch of new startups. It's an\nexperiment because we're prepared to fund younger founders than most investors\nwould. That's why we're doing it during the summer\u2014so even college students\ncan participate.  \n  \nWe know from Google and Yahoo that grad students can start successful\nstartups. And we know from experience that some undergrads are as capable as\nmost grad students. The accepted age for startup founders has been creeping\ndownward. We're trying to find the lower bound.  \n  \nThe deadline has now passed, and we're sifting through 227 applications.  We\nexpected to divide them into two categories, promising and unpromising. But we\nsoon saw we needed a third: promising people with unpromising ideas. [1]  \n  \n**The Artix Phase**  \n  \nWe should have expected this. It's very common for a group of founders to go\nthrough one lame idea before realizing that a startup has to make something\npeople will pay for. In fact, we ourselves did.  \n  \nViaweb wasn't the first startup Robert Morris and I started. In January 1995,\nwe and a couple friends started a company called Artix. The plan was to put\nart galleries on the Web. In retrospect, I wonder how we could have wasted our\ntime on anything so stupid. Galleries are not especially\n[excited](http://www.knoedlergallery.com/) about being on the Web even now,\nten years later. They don't want to have their stock visible to any random\nvisitor, like an antique store. [2]  \n  \nBesides which, art dealers are the most technophobic people on earth. They\ndidn't become art dealers after a difficult choice between that and a career\nin the hard sciences. Most of them had never seen the Web before we came to\ntell them why they should be on it. Some didn't even have computers. It\ndoesn't do justice to the situation to describe it as a hard _sell_ ; we soon\nsank to building sites for free, and it was hard to convince galleries even to\ndo that.  \n  \nGradually it dawned on us that instead of trying to make Web sites for people\nwho didn't want them, we could make sites for people who did. In fact,\nsoftware that would let people who wanted sites make their own. So we ditched\nArtix and started a new company, Viaweb, to make software for building online\nstores. That one succeeded.  \n  \nWe're in good company here. Microsoft was not the first company Paul Allen and\nBill Gates started either. The first was called Traf-o-data. It does not seem\nto have done as well as Micro-soft.  \n  \nIn Robert's defense, he was skeptical about Artix. I dragged him into it. [3]\nBut there were moments when he was optimistic. And if we, who were 29 and 30\nat the time, could get excited about such a thoroughly boneheaded idea, we\nshould not be surprised that hackers aged 21 or 22 are pitching us ideas with\nlittle hope of making money.  \n  \n**The Still Life Effect**  \n  \nWhy does this happen? Why do good hackers have bad business ideas?  \n  \nLet's look at our case. One reason we had such a lame idea was that it was the\nfirst thing we thought of. I was in New York trying to be a starving artist at\nthe time (the starving part is actually quite easy), so I was haunting\ngalleries anyway. When I learned about the Web, it seemed natural to mix the\ntwo. Make Web sites for galleries\u2014that's the ticket!  \n  \nIf you're going to spend years working on something, you'd think it might be\nwise to spend at least a couple days considering different ideas, instead of\ngoing with the first that comes into your head. You'd think. But people don't.\nIn fact, this is a constant problem when you're painting still lifes. You\nplonk down a bunch of stuff on a table, and maybe spend five or ten minutes\nrearranging it to look interesting. But you're so impatient to get started\npainting that ten minutes of rearranging feels very long. So you start\npainting. Three days later, having spent twenty hours staring at it, you're\nkicking yourself for having set up such an awkward and boring composition, but\nby then it's too late.  \n  \nPart of the problem is that big projects tend to grow out of small ones. You\nset up a still life to make a quick sketch when you have a spare hour, and\ndays later you're still working on it. I once spent a month painting three\nversions of a still life I set up in about four minutes. At each point (a day,\na week, a month) I thought I'd already put in so much time that it was too\nlate to change.  \n  \nSo the biggest cause of bad ideas is the still life effect: you come up with a\nrandom idea, plunge into it, and then at each point (a day, a week, a month)\nfeel you've put so much time into it that this must be _the_ idea.  \n  \nHow do we fix that? I don't think we should discard plunging. Plunging into an\nidea is a good thing. The solution is at the other end: to realize that having\ninvested time in something doesn't make it good.  \n  \nThis is clearest in the case of names. Viaweb was originally called Webgen,\nbut we discovered someone else had a product called that. We were so attached\nto our name that we offered him _5% of the company_ if he'd let us have it.\nBut he wouldn't, so we had to think of another. [4] The best we could do was\nViaweb, which we disliked at first. It was like having a new mother. But\nwithin three days we loved it, and Webgen sounded lame and old-fashioned.  \n  \nIf it's hard to change something so simple as a name, imagine how hard it is\nto garbage-collect an idea. A name only has one point of attachment into your\nhead. An idea for a company gets woven into your thoughts. So you must\nconsciously discount for that. Plunge in, by all means, but remember later to\nlook at your idea in the harsh light of morning and ask: is this something\npeople will pay for? Is this, of all the things we could make, the thing\npeople will pay most for?  \n  \n**Muck**  \n  \nThe second mistake we made with Artix is also very common. Putting galleries\non the Web seemed cool.  \n  \nOne of the most valuable things my father taught me is an old Yorkshire\nsaying: where there's muck, there's brass. Meaning that unpleasant work pays.\nAnd more to the point here, vice versa. Work people like doesn't pay well, for\nreasons of supply and demand. The most extreme case is developing programming\nlanguages, which doesn't pay at all, because people like it so much they do it\nfor free.  \n  \nWhen we started Artix, I was still ambivalent about business. I wanted to keep\none foot in the art world. Big, big, mistake. Going into business is like a\nhang-glider launch: you'd better do it wholeheartedly, or not at all. The\npurpose of a company, and a startup especially, is to make money. You can't\nhave divided loyalties.  \n  \nWhich is not to say that you have to do the most disgusting sort of work, like\nspamming, or starting a company whose only purpose is patent litigation. What\nI mean is, if you're starting a company that will do something cool, the aim\nhad better be to make money and maybe be cool, not to be cool and maybe make\nmoney.  \n  \nIt's hard enough to make money that you can't do it by accident. Unless it's\nyour first priority, it's unlikely to happen at all.  \n  \n**Hyenas**  \n  \nWhen I probe our motives with Artix, I see a third mistake: timidity. If you'd\nproposed at the time that we go into the e-commerce business, we'd have found\nthe idea terrifying. Surely a field like that would be dominated by fearsome\nstartups with five million dollars of VC money each. Whereas we felt pretty\nsure that we could hold our own in the slightly less competitive business of\ngenerating Web sites for art galleries.  \n  \nWe erred ridiculously far on the side of safety. As it turns out, VC-backed\nstartups are not that fearsome. They're too busy trying to spend all that\n[money](venturecapital.html) to get software written. In 1995, the e-commerce\nbusiness was very competitive as measured in press releases, but not as\nmeasured in software. And really it never was. The big fish like Open Market\n(rest their souls) were just consulting companies pretending to be product\ncompanies [5], and the offerings at our end of the market were a couple\nhundred lines of Perl scripts. Or could have been implemented as a couple\nhundred lines of Perl; in fact they were probably tens of thousands of lines\nof C++ or Java. Once we actually took the plunge into e-commerce, it turned\nout to be surprisingly easy to compete.  \n  \nSo why were we afraid? We felt we were good at programming, but we lacked\nconfidence in our ability to do a mysterious, undifferentiated thing we called\n\"business.\" In fact there is no such thing as \"business.\" There's selling,\npromotion, figuring out what people want, deciding how much to charge,\ncustomer support, paying your bills, getting customers to pay you, getting\nincorporated, raising money, and so on. And the combination is not as hard as\nit seems, because some tasks (like raising money and getting incorporated) are\nan O(1) pain in the ass, whether you're big or small, and others (like selling\nand promotion) depend more on energy and imagination than any kind of special\ntraining.  \n  \nArtix was like a hyena, content to survive on carrion because we were afraid\nof the lions. Except the lions turned out not to have any teeth, and the\nbusiness of putting galleries online barely qualified as carrion.  \n  \n**A Familiar Problem**  \n  \nSum up all these sources of error, and it's no wonder we had such a bad idea\nfor a company. We did the first thing we thought of; we were ambivalent about\nbeing in business at all; and we deliberately chose an impoverished market to\navoid competition.  \n  \nLooking at the applications for the Summer Founders Program, I see signs of\nall three. But the first is by far the biggest problem. Most of the groups\napplying have not stopped to ask: of all the things we could do, is _this_ the\none with the best chance of making money?  \n  \nIf they'd already been through their Artix phase, they'd have learned to ask\nthat. After the reception we got from art dealers, we were ready to. This\ntime, we thought, let's make something people want.  \n  \nReading the _Wall Street Journal_ for a week should give anyone ideas for two\nor three new startups. The articles are full of descriptions of problems that\nneed to be solved. But most of the applicants don't seem to have looked far\nfor ideas.  \n  \nWe expected the most common proposal to be for multiplayer games. We were not\nfar off: this was the second most common. The most common was some combination\nof a blog, a calendar, a dating site, and Friendster. Maybe there is some new\nkiller app to be discovered here, but it seems perverse to go poking around in\nthis fog when there are valuable, unsolved problems lying about in the open\nfor anyone to see. Why did no one propose a new scheme for micropayments? An\nambitious project, perhaps, but I can't believe we've considered every\nalternative. And newspapers and magazines are (literally) dying for a\nsolution.  \n  \nWhy did so few applicants really think about what customers want? I think the\nproblem with many, as with people in their early twenties generally, is that\nthey've been trained their whole lives to jump through predefined hoops.\nThey've spent 15-20 years solving problems other people have set for them. And\nhow much time deciding what problems would be good to solve? Two or three\ncourse projects?  They're good at solving problems, but bad at choosing them.  \n  \nBut that, I'm convinced, is just the effect of training. Or more precisely,\nthe effect of grading. To make grading efficient, everyone has to solve the\nsame problem, and that means it has to be decided in advance. It would be\ngreat if schools taught students how to choose problems as well as how to\nsolve them, but I don't know how you'd run such a class in practice.  \n  \n**Copper and Tin**  \n  \nThe good news is, choosing problems is something that can be learned. I know\nthat from experience. Hackers can learn to make things customers want. [6]  \n  \nThis is a controversial view. One expert on \"entrepreneurship\" told me that\nany startup had to include business people, because only they could focus on\nwhat customers wanted. I'll probably alienate this guy forever by quoting him,\nbut I have to risk it, because his email was such a perfect example of this\nview:\n\n> 80% of MIT spinoffs succeed _provided_ they have at least one management\n> person in the team at the start. The business person represents the \"voice\n> of the customer\" and that's what keeps the engineers and product development\n> on track.\n\nThis is, in my opinion, a crock. Hackers are perfectly capable of hearing the\nvoice of the customer without a business person to amplify the signal for\nthem. Larry Page and Sergey Brin were grad students in computer science, which\npresumably makes them \"engineers.\" Do you suppose Google is only good because\nthey had some business guy whispering in their ears what customers wanted? It\nseems to me the business guys who did the most for Google were the ones who\nobligingly flew Altavista into a hillside just as Google was getting started.  \n  \nThe hard part about figuring out what customers want is figuring out that you\nneed to figure it out. But that's something you can learn quickly. It's like\nseeing the other interpretation of an ambiguous picture. As soon as someone\ntells you there's a rabbit as well as a duck, it's hard not to see it.  \n  \nAnd compared to the sort of problems hackers are used to solving, giving\ncustomers what they want is easy. Anyone who can write an optimizing compiler\ncan design a UI that doesn't confuse users, once they _choose_ to focus on\nthat problem. And once you apply that kind of brain power to petty but\nprofitable questions, you can create wealth very rapidly.  \n  \nThat's the essence of a startup: having brilliant people do work that's\nbeneath them. Big companies try to hire the right person for the job. Startups\nwin because they don't\u2014because they take people so smart that they would in a\nbig company be doing \"research,\" and set them to work instead on problems of\nthe most immediate and mundane sort. Think Einstein designing refrigerators.\n[7]  \n  \nIf you want to learn what people want, read Dale Carnegie's _How to Win\nFriends and Influence People._ [8] When a friend recommended this book, I\ncouldn't believe he was serious. But he insisted it was good, so I read it,\nand he was right. It deals with the most difficult problem in human\nexperience: how to see things from other people's point of view, instead of\nthinking only of yourself.  \n  \nMost smart people don't do that very well. But adding this ability to raw\nbrainpower is like adding tin to copper. The result is bronze, which is so\nmuch harder that it seems a different metal.  \n  \nA hacker who has learned what to make, and not just how to make, is\nextraordinarily powerful. And not just at making money: look what a small\ngroup of volunteers has achieved with Firefox.  \n  \nDoing an Artix teaches you to make something people want in the same way that\nnot drinking anything would teach you how much you depend on water. But it\nwould be more convenient for all involved if the Summer Founders didn't learn\nthis on our dime\u2014if they could skip the Artix phase and go right on to make\nsomething customers wanted. That, I think, is going to be the real experiment\nthis summer. How long will it take them to grasp this?  \n  \nWe decided we ought to have T-Shirts for the SFP, and we'd been thinking about\nwhat to print on the back. Till now we'd been planning to use\n\n> If you can read this, I should be working.\n\nbut now we've decided it's going to be\n\n> Make something people want.\n\n  \n  \n  \n  \n**Notes**  \n  \n[1] SFP applicants: please don't assume that not being accepted means we think\nyour idea is bad. Because we want to keep the number of startups small this\nfirst summer, we're going to have to turn down some good proposals too.  \n  \n[2] Dealers try to give each customer the impression that the stuff they're\nshowing him is something special that only a few people have seen, when in\nfact it may have been sitting in their racks for years while they tried to\nunload it on buyer after buyer.  \n  \n[3] On the other hand, he was skeptical about Viaweb too. I have a precise\nmeasure of that, because at one point in the first couple months we made a\nbet: if he ever made a million dollars out of Viaweb, he'd get his ear\npierced. We didn't let him [off](pierced.html), either.  \n  \n[4] I wrote a program to generate all the combinations of \"Web\" plus a three\nletter word. I learned from this that most three letter words are bad: Webpig,\nWebdog, Webfat, Webzit, Webfug. But one of them was Webvia; I swapped them to\nmake Viaweb.  \n  \n[5] It's much easier to sell services than a product, just as it's easier to\nmake a living playing at weddings than by selling recordings. But the margins\nare greater on products. So during the Bubble a lot of companies used\nconsulting to generate revenues they could attribute to the sale of products,\nbecause it made a better story for an IPO.  \n  \n[6] Trevor Blackwell presents the following recipe for a startup: \"Watch\npeople who have money to spend, see what they're wasting their time on, cook\nup a solution, and try selling it to them. It's surprising how small a problem\ncan be and still provide a profitable market for a solution.\"  \n  \n[7] You need to offer especially large rewards to get great people to do\ntedious work. That's why startups always pay equity rather than just salary.  \n  \n[8] Buy an\n[old](http://dogbert.abebooks.com/servlet/SearchResults?bx=on&sts=t&ds=30&bi=0&an=carnegie&kn=1938+OR+1939+OR+1940+OR+1941+OR+1942+OR+1943+OR+1944+OR+1945+OR+1946+OR+1947+OR+1948&tn=influence+friends&sortby=2)\ncopy from the 1940s or 50s instead of the current edition, which has been\nrewritten to suit present fashions. The original edition contained a few unPC\nideas, but it's always better to read an original book, bearing in mind that\nit's a book from a past era, than to read a new version sanitized for your\nprotection.  \n  \n**Thanks** to Bill Birch, Trevor Blackwell, Jessica Livingston, and Robert\nMorris for reading drafts of this.  \n  \n\nSeptember 2004  \n  \n _(This essay is derived from an invited talk at ICFP 2004.)_  \n  \nI had a front row seat for the Internet Bubble, because I worked at Yahoo\nduring 1998 and 1999. One day, when the stock was trading around $200, I sat\ndown and calculated what I thought the price should be. The answer I got was\n$12. I went to the next cubicle and told my friend Trevor. \"Twelve!\" he said.\nHe tried to sound indignant, but he didn't quite manage it. He knew as well as\nI did that our valuation was crazy.  \n  \nYahoo was a special case. It was not just our price to earnings ratio that was\nbogus. Half our earnings were too. Not in the Enron way, of course. The\nfinance guys seemed scrupulous about reporting earnings. What made our\nearnings bogus was that Yahoo was, in effect, the center of a Ponzi scheme.\nInvestors looked at Yahoo's earnings and said to themselves, here is proof\nthat Internet companies can make money. So they invested in new startups that\npromised to be the next Yahoo. And as soon as these startups got the money,\nwhat did they do with it? Buy millions of dollars worth of advertising on\nYahoo to promote their brand. Result: a capital investment in a startup this\nquarter shows up as Yahoo earnings next quarter\u2014stimulating another round of\ninvestments in startups.  \n  \nAs in a Ponzi scheme, what seemed to be the returns of this system were simply\nthe latest round of investments in it. What made it not a Ponzi scheme was\nthat it was unintentional. At least, I think it was. The venture capital\nbusiness is pretty incestuous, and there were presumably people in a position,\nif not to create this situation, to realize what was happening and to milk it.  \n  \nA year later the game was up. Starting in January 2000, Yahoo's stock price\nbegan to crash, ultimately losing 95% of its value.  \n  \nNotice, though, that even with all the fat trimmed off its market cap, Yahoo\nwas still worth a lot. Even at the morning-after valuations of March and April\n2001, the people at Yahoo had managed to create a company worth about $8\nbillion in just six years.  \n  \nThe fact is, despite all the nonsense we heard during the Bubble about the\n\"new economy,\" there was a core of truth. You need that to get a really big\nbubble: you need to have something solid at the center, so that even smart\npeople are sucked in. (Isaac Newton and Jonathan Swift both lost money in the\nSouth Sea Bubble of 1720.)  \n  \nNow the pendulum has swung the other way. Now anything that became fashionable\nduring the Bubble is ipso facto unfashionable. But that's a mistake\u2014an even\nbigger mistake than believing what everyone was saying in 1999. Over the long\nterm, what the Bubble got right will be more important than what it got wrong.  \n  \n**1\\. Retail VC**  \n  \nAfter the excesses of the Bubble, it's now considered dubious to take\ncompanies public before they have earnings. But there is nothing intrinsically\nwrong with that idea. Taking a company public at an early stage is simply\nretail VC: instead of going to venture capital firms for the last round of\nfunding, you go to the public markets.  \n  \nBy the end of the Bubble, companies going public with no earnings were being\nderided as \"concept stocks,\" as if it were inherently stupid to invest in\nthem. But investing in concepts isn't stupid; it's what VCs do, and the best\nof them are far from stupid.  \n  \nThe stock of a company that doesn't yet have earnings is worth _something._ It\nmay take a while for the market to learn how to value such companies, just as\nit had to learn to value common stocks in the early 20th century. But markets\nare good at solving that kind of problem. I wouldn't be surprised if the\nmarket ultimately did a better job than VCs do now.  \n  \nGoing public early will not be the right plan for every company. And it can of\ncourse be disruptive\u2014by distracting the management, or by making the early\nemployees suddenly rich. But just as the market will learn how to value\nstartups, startups will learn how to minimize the damage of going public.  \n  \n**2\\. The Internet**  \n  \nThe Internet genuinely is a big deal. That was one reason even smart people\nwere fooled by the Bubble. Obviously it was going to have a huge effect.\nEnough of an effect to triple the value of Nasdaq companies in two years? No,\nas it turned out. But it was hard to say for certain at the time. [1]  \n  \nThe same thing happened during the Mississippi and South Sea Bubbles. What\ndrove them was the invention of organized public finance (the South Sea\nCompany, despite its name, was really a competitor of the Bank of England).\nAnd that did turn out to be a big deal, in the long run.  \n  \nRecognizing an important trend turns out to be easier than figuring out how to\nprofit from it. The mistake investors always seem to make is to take the trend\ntoo literally. Since the Internet was the big new thing, investors supposed\nthat the more Internettish the company, the better. Hence such parodies as\nPets.Com.  \n  \nIn fact most of the money to be made from big trends is made indirectly. It\nwas not the railroads themselves that made the most money during the railroad\nboom, but the companies on either side, like Carnegie's steelworks, which made\nthe rails, and Standard Oil, which used railroads to get oil to the East\nCoast, where it could be shipped to Europe.  \n  \nI think the Internet will have great effects, and that what we've seen so far\nis nothing compared to what's coming. But most of the winners will only\nindirectly be Internet companies; for every Google there will be ten JetBlues.  \n  \n**3\\. Choices**  \n  \nWhy will the Internet have great effects? The general argument is that new\nforms of communication always do. They happen rarely (till industrial times\nthere were just speech, writing, and printing), but when they do, they always\ncause a big splash.  \n  \nThe specific argument, or one of them, is the Internet gives us more choices.\nIn the \"old\" economy, the high cost of presenting information to people meant\nthey had only a narrow range of options to choose from. The tiny, expensive\npipeline to consumers was tellingly named \"the channel.\" Control the channel\nand you could feed them what you wanted, on your terms. And it was not just\nbig corporations that depended on this principle. So, in their way, did labor\nunions, the traditional news media, and the art and literary establishments.\nWinning depended not on doing good work, but on gaining control of some\nbottleneck.  \n  \nThere are signs that this is changing. Google has over 82 million unique users\na month and annual revenues of about three billion dollars. [2] And yet have\nyou ever seen a Google ad? Something is going on here.  \n  \nAdmittedly, Google is an extreme case. It's very easy for people to switch to\na new search engine. It costs little effort and no money to try a new one, and\nit's easy to see if the results are better. And so Google doesn't _have_ to\nadvertise. In a business like theirs, being the best is enough.  \n  \nThe exciting thing about the Internet is that it's shifting everything in that\ndirection. The hard part, if you want to win by making the best stuff, is the\nbeginning. Eventually everyone will learn by word of mouth that you're the\nbest, but how do you survive to that point? And it is in this crucial stage\nthat the Internet has the most effect. First, the Internet lets anyone find\nyou at almost zero cost. Second, it dramatically speeds up the rate at which\nreputation spreads by word of mouth. Together these mean that in many fields\nthe rule will be: Build it, and they will come. Make something great and put\nit online. That is a big change from the recipe for winning in the past\ncentury.  \n  \n**4\\. Youth**  \n  \nThe aspect of the Internet Bubble that the press seemed most taken with was\nthe youth of some of the startup founders. This too is a trend that will last.\nThere is a huge standard deviation among 26 year olds. Some are fit only for\nentry level jobs, but others are ready to rule the world if they can find\nsomeone to handle the paperwork for them.  \n  \nA 26 year old may not be very good at managing people or dealing with the SEC.\nThose require experience. But those are also commodities, which can be handed\noff to some lieutenant. The most important quality in a CEO is his vision for\nthe company's future. What will they build next? And in that department, there\nare 26 year olds who can compete with anyone.  \n  \nIn 1970 a company president meant someone in his fifties, at least. If he had\ntechnologists working for him, they were treated like a racing stable: prized,\nbut not powerful. But as technology has grown more important, the power of\nnerds has grown to reflect it. Now it's not enough for a CEO to have someone\nsmart he can ask about technical matters. Increasingly, he has to be that\nperson himself.  \n  \nAs always, business has clung to old forms. VCs still seem to want to install\na legitimate-looking talking head as the CEO. But increasingly the founders of\nthe company are the real powers, and the grey-headed man installed by the VCs\nmore like a music group's manager than a general.  \n  \n**5\\. Informality**  \n  \nIn New York, the Bubble had dramatic consequences: suits went out of fashion.\nThey made one seem old. So in 1998 powerful New York types were suddenly\nwearing open-necked shirts and khakis and oval wire-rimmed glasses, just like\nguys in Santa Clara.  \n  \nThe pendulum has swung back a bit, driven in part by a panicked reaction by\nthe clothing industry. But I'm betting on the open-necked shirts. And this is\nnot as frivolous a question as it might seem. Clothes are important, as all\nnerds can sense, though they may not realize it consciously.  \n  \nIf you're a nerd, you can understand how important clothes are by asking\nyourself how you'd feel about a company that made you wear a suit and tie to\nwork. The idea sounds horrible, doesn't it? In fact, horrible far out of\nproportion to the mere discomfort of wearing such clothes. A company that made\nprogrammers wear suits would have something deeply wrong with it.  \n  \nAnd what would be wrong would be that how one presented oneself counted more\nthan the quality of one's ideas. _That's_ the problem with formality. Dressing\nup is not so much bad in itself. The problem is the receptor it binds to:\ndressing up is inevitably a substitute for good ideas. It is no coincidence\nthat technically inept business types are known as \"suits.\"  \n  \nNerds don't just happen to dress informally. They do it too consistently.\nConsciously or not, they dress informally as a prophylactic measure against\nstupidity.  \n  \n**6\\. Nerds**  \n  \nClothing is only the most visible battleground in the war against formality.\nNerds tend to eschew formality of any sort. They're not impressed by one's job\ntitle, for example, or any of the other appurtenances of authority.  \n  \nIndeed, that's practically the definition of a nerd. I found myself talking\nrecently to someone from Hollywood who was planning a show about nerds. I\nthought it would be useful if I explained what a nerd was. What I came up with\nwas: someone who doesn't expend any effort on marketing himself.  \n  \nA nerd, in other words, is someone who concentrates on substance. So what's\nthe connection between nerds and technology? Roughly that you can't fool\nmother nature. In technical matters, you have to get the right answers. If\nyour software miscalculates the path of a space probe, you can't finesse your\nway out of trouble by saying that your code is patriotic, or avant-garde, or\nany of the other dodges people use in nontechnical fields.  \n  \nAnd as technology becomes increasingly important in the economy, nerd culture\nis [rising](nerdad.html) with it. Nerds are already a lot cooler than they\nwere when I was a kid. When I was in college in the mid-1980s, \"nerd\" was\nstill an insult. People who majored in computer science generally tried to\nconceal it. Now women ask me where they can meet nerds. (The answer that\nsprings to mind is \"Usenix,\" but that would be like drinking from a firehose.)  \n  \nI have no illusions about why nerd culture is becoming more accepted. It's not\nbecause people are realizing that substance is more important than marketing.\nIt's because the nerds are getting rich. But that is not going to change.  \n  \n**7\\. Options**  \n  \nWhat makes the nerds rich, usually, is stock options. Now there are moves\nafoot to make it harder for companies to grant options. To the extent there's\nsome genuine accounting abuse going on, by all means correct it. But don't\nkill the golden goose. Equity is the fuel that drives technical innovation.  \n  \nOptions are a good idea because (a) they're fair, and (b) they work. Someone\nwho goes to work for a company is (one hopes) adding to its value, and it's\nonly fair to give them a share of it. And as a purely practical measure,\npeople work a _lot_ harder when they have options. I've seen that first hand.  \n  \nThe fact that a few crooks during the Bubble robbed their companies by\ngranting themselves options doesn't mean options are a bad idea. During the\nrailroad boom, some executives enriched themselves by selling watered stock\u2014by\nissuing more shares than they said were outstanding. But that doesn't make\ncommon stock a bad idea. Crooks just use whatever means are available.  \n  \nIf there is a problem with options, it's that they reward slightly the wrong\nthing. Not surprisingly, people do what you pay them to. If you pay them by\nthe hour, they'll work a lot of hours. If you pay them by the volume of work\ndone, they'll get a lot of work done (but only as you defined work). And if\nyou pay them to raise the stock price, which is what options amount to,\nthey'll raise the stock price.  \n  \nBut that's not quite what you want. What you want is to increase the actual\nvalue of the company, not its market cap. Over time the two inevitably meet,\nbut not always as quickly as options vest. Which means options tempt\nemployees, if only unconsciously, to \"pump and dump\"\u2014to do things that will\nmake the company _seem_ valuable. I found that when I was at Yahoo, I couldn't\nhelp thinking, \"how will this sound to investors?\" when I should have been\nthinking \"is this a good idea?\"  \n  \nSo maybe the standard option deal needs to be tweaked slightly. Maybe options\nshould be replaced with something tied more directly to earnings. It's still\nearly days.  \n  \n**8\\. Startups**  \n  \nWhat made the options valuable, for the most part, is that they were options\non the stock of [startups](start.html). Startups were not of course a creation\nof the Bubble, but they were more visible during the Bubble than ever before.  \n  \nOne thing most people did learn about for the first time during the Bubble was\nthe startup created with the intention of selling it. Originally a startup\nmeant a small company that hoped to grow into a big one. But increasingly\nstartups are evolving into a vehicle for developing technology on spec.  \n  \nAs I wrote in [Hackers & Painters](hackpaint.html), employees seem to be most\nproductive when they're paid in proportion to the wealth they generate. And\nthe advantage of a startup\u2014indeed, almost its raison d'etre\u2014is that it offers\nsomething otherwise impossible to obtain: a way of _measuring_ that.  \n  \nIn many businesses, it just makes more sense for companies to get technology\nby buying startups rather than developing it in house. You pay more, but there\nis less risk, and risk is what big companies don't want. It makes the guys\ndeveloping the technology more accountable, because they only get paid if they\nbuild the winner. And you end up with better technology, created faster,\nbecause things are made in the innovative atmosphere of startups instead of\nthe bureaucratic atmosphere of big companies.  \n  \nOur startup, Viaweb, was built to be sold. We were open with investors about\nthat from the start. And we were careful to create something that could slot\neasily into a larger company. That is the pattern for the future.  \n  \n**9\\. California**  \n  \nThe Bubble was a California phenomenon. When I showed up in Silicon Valley in\n1998, I felt like an immigrant from Eastern Europe arriving in America in\n1900. Everyone was so cheerful and healthy and rich. It seemed a new and\nimproved world.  \n  \nThe press, ever eager to exaggerate small trends, now gives one the impression\nthat Silicon Valley is a ghost town. Not at all. When I drive down 101 from\nthe airport, I still feel a buzz of energy, as if there were a giant\ntransformer nearby. Real estate is still more expensive than just about\nanywhere else in the country. The people still look healthy, and the weather\nis still fabulous. The future is there. (I say \"there\" because I moved back to\nthe East Coast after Yahoo. I still wonder if this was a smart idea.)  \n  \nWhat makes the Bay Area superior is the attitude of the people. I notice that\nwhen I come home to Boston. The first thing I see when I walk out of the\nairline terminal is the fat, grumpy guy in charge of the taxi line. I brace\nmyself for rudeness: _remember, you're back on the East Coast now._  \n  \nThe atmosphere varies from city to city, and fragile organisms like startups\nare exceedingly sensitive to such variation. If it hadn't already been\nhijacked as a new euphemism for liberal, the word to describe the atmosphere\nin the Bay Area would be \"progressive.\" People there are trying to build the\nfuture. Boston has MIT and Harvard, but it also has a lot of truculent,\nunionized employees like the police who recently held the Democratic National\nConvention for\n[ransom](http://www.usatoday.com/news/politicselections/nation/president/2004-04-30-boston-\npolice-convention_x.htm), and a lot of people trying to be Thurston Howell.\nTwo sides of an obsolete coin.  \n  \nSilicon Valley may not be the next Paris or London, but it is at least the\nnext Chicago. For the next fifty years, that's where new wealth will come\nfrom.  \n  \n**10\\. Productivity**  \n  \nDuring the Bubble, optimistic analysts used to justify high price to earnings\nratios by saying that technology was going to increase productivity\ndramatically. They were wrong about the specific companies, but not so wrong\nabout the underlying principle. I think one of the big trends we'll see in the\ncoming century is a huge increase in productivity.  \n  \nOr more precisely, a huge increase in [variation](gh.html) in productivity.\nTechnology is a lever. It doesn't add; it multiplies. If the present range of\nproductivity is 0 to 100, introducing a multiple of 10 increases the range\nfrom 0 to 1000.  \n  \nOne upshot of which is that the companies of the future may be surprisingly\nsmall. I sometimes daydream about how big you could grow a company (in\nrevenues) without ever having more than ten people. What would happen if you\noutsourced everything except product development? If you tried this\nexperiment, I think you'd be surprised at how far you could get. As Fred\nBrooks pointed out, small groups are intrinsically more productive, because\nthe internal friction in a group grows as the square of its size.  \n  \nTill quite recently, running a major company meant managing an army of\nworkers. Our standards about how many employees a company should have are\nstill influenced by old patterns. Startups are perforce small, because they\ncan't afford to hire a lot of people. But I think it's a big mistake for\ncompanies to loosen their belts as revenues increase. The question is not\nwhether you can afford the extra salaries. Can you afford the loss in\nproductivity that comes from making the company bigger?  \n  \nThe prospect of technological leverage will of course raise the specter of\nunemployment. I'm surprised people still worry about this. After centuries of\nsupposedly job-killing innovations, the number of jobs is within ten percent\nof the number of people who want them. This can't be a coincidence. There must\nbe some kind of balancing mechanism.  \n  \n**What's New**  \n  \nWhen one looks over these trends, is there any overall theme? There does seem\nto be: that in the coming century, good ideas will count for more. That 26\nyear olds with good ideas will increasingly have an edge over 50 year olds\nwith powerful connections. That doing good work will matter more than dressing\nup\u2014or advertising, which is the same thing for companies. That people will be\nrewarded a bit more in proportion to the value of what they create.  \n  \nIf so, this is good news indeed. Good ideas always tend to win eventually. The\nproblem is, it can take a very long time. It took decades for relativity to be\naccepted, and the greater part of a century to establish that central planning\ndidn't work. So even a small increase in the rate at which good ideas win\nwould be a momentous change\u2014big enough, probably, to justify a name like the\n\"new economy.\"  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] Actually it's hard to say now. As Jeremy Siegel points out, if the value\nof a stock is its future earnings, you can't tell if it was overvalued till\nyou see what the earnings turn out to be. While certain famous Internet stocks\nwere almost certainly overvalued in 1999, it is still hard to say for sure\nwhether, e.g., the Nasdaq index was.  \n  \nSiegel, Jeremy J. \"What Is an Asset Price Bubble? An Operational Definition.\"\n_European Financial Management,_ 9:1, 2003.  \n  \n[2] The number of users comes from a 6/03 Nielsen study quoted on Google's\nsite. (You'd think they'd have something more recent.) The revenue estimate is\nbased on revenues of $1.35 billion for the first half of 2004, as reported in\ntheir IPO filing.  \n  \n**Thanks** to Chris Anderson, Trevor Blackwell, Sarah Harlin, Jessica\nLivingston, and Robert Morris for reading drafts of this.  \n  \n  \n\nNovember 2004, corrected June 2006  \n  \nOccam's razor says we should prefer the simpler of two explanations. I begin\nby reminding readers of this principle because I'm about to propose a theory\nthat will offend both liberals and conservatives. But Occam's razor means, in\neffect, that if you want to disagree with it, you have a hell of a coincidence\nto explain.  \n  \nTheory: In US presidential elections, the more charismatic candidate wins.  \n  \nPeople who write about politics, whether on the left or the right, have a\nconsistent bias: they take politics seriously. When one candidate beats\nanother they look for political explanations. The country is shifting to the\nleft, or the right. And that sort of shift can certainly be the result of a\npresidential election, which makes it easy to believe it was the cause.  \n  \nBut when I think about why I voted for Clinton over the first George Bush, it\nwasn't because I was shifting to the left. Clinton just seemed more dynamic.\nHe seemed to want the job more. Bush seemed old and tired. I suspect it was\nthe same for a lot of voters.  \n  \nClinton didn't represent any national shift leftward. [1] He was just more\ncharismatic than George Bush or (God help us) Bob Dole. In 2000 we practically\ngot a controlled experiment to prove it: Gore had Clinton's policies, but not\nhis charisma, and he suffered proportionally. [2] Same story in 2004. Kerry\nwas smarter and more articulate than Bush, but rather a stiff. And Kerry lost.  \n  \nAs I looked further back, I kept finding the same pattern. Pundits said Carter\nbeat Ford because the country distrusted the Republicans after Watergate. And\nyet it also happened that Carter was famous for his big grin and folksy ways,\nand Ford for being a boring klutz. Four years later, pundits said the country\nhad lurched to the right. But Reagan, a former actor, also happened to be even\nmore charismatic than Carter (whose grin was somewhat less cheery after four\nstressful years in office). In 1984 the charisma gap between Reagan and\nMondale was like that between Clinton and Dole, with similar results. The\nfirst George Bush managed to win in 1988, though he would later be vanquished\nby one of the most charismatic presidents ever, because in 1988 he was up\nagainst the notoriously uncharismatic Michael Dukakis.  \n  \nThese are the elections I remember personally, but apparently the same pattern\nplayed out in 1964 and 1972. The most recent counterexample appears to be\n1968, when Nixon beat the more charismatic Hubert Humphrey. But when you\nexamine that election, it tends to support the charisma theory more than\ncontradict it. As Joe McGinnis recounts in his famous book _The Selling of the\nPresident 1968_ , Nixon knew he had less charisma than Humphrey, and thus\nsimply refused to debate him on TV. He knew he couldn't afford to let the two\nof them be seen side by side.  \n  \nNow a candidate probably couldn't get away with refusing to debate. But in\n1968 the custom of televised debates was still evolving. In effect, Nixon won\nin 1968 because voters were never allowed to see the real Nixon. All they saw\nwere carefully scripted campaign spots.  \n  \nOddly enough, the most recent true counterexample is probably 1960. Though\nthis election is usually given as an example of the power of TV, Kennedy\napparently would not have won without fraud by party machines in Illinois and\nTexas. But TV was still young in 1960; only 87% of households had it. [3]\nUndoubtedly TV helped Kennedy, so historians are correct in regarding this\nelection as a watershed. TV required a new kind of candidate. There would be\nno more Calvin Coolidges.  \n  \nThe charisma theory may also explain why Democrats tend to lose presidential\nelections. The core of the Democrats' ideology seems to be a belief in\ngovernment. Perhaps this tends to attract people who are earnest, but dull.\nDukakis, Gore, and Kerry were so similar in that respect that they might have\nbeen brothers. Good thing for the Democrats that their screen lets through an\noccasional Clinton, even if some scandal results. [4]  \n  \nOne would like to believe elections are won and lost on issues, if only fake\nones like Willie Horton. And yet, if they are, we have a remarkable\ncoincidence to explain. In every presidential election since TV became\nwidespread, the apparently more charismatic candidate has won. Surprising,\nisn't it, that voters' opinions on the issues have lined up with charisma for\n11 elections in a row?  \n  \nThe political commentators who come up with shifts to the left or right in\ntheir morning-after analyses are like the financial reporters stuck writing\nstories day after day about the random fluctuations of the stock market. Day\nends, market closes up or down, reporter looks for good or bad news\nrespectively, and writes that the market was up on news of Intel's earnings,\nor down on fears of instability in the Middle East. Suppose we could somehow\nfeed these reporters false information about market closes, but give them all\nthe other news intact. Does anyone believe they would notice the anomaly, and\nnot simply write that stocks were up (or down) on whatever good (or bad) news\nthere was that day? That they would say, hey, wait a minute, how can stocks be\nup with all this unrest in the Middle East?  \n  \nI'm not saying that issues don't matter to voters. Of course they do. But the\nmajor parties know so well which issues matter how much to how many voters,\nand adjust their message so precisely in response, that they tend to split the\ndifference on the issues, leaving the election to be decided by the one factor\nthey can't control: charisma.  \n  \nIf the Democrats had been running a candidate as charismatic as Clinton in the\n2004 election, he'd have won. And we'd be reading that the election was a\nreferendum on the war in Iraq, instead of that the Democrats are out of touch\nwith evangelical Christians in middle America.  \n  \nDuring the 1992 election, the Clinton campaign staff had a big sign in their\noffice saying \"It's the economy, stupid.\" Perhaps it was even simpler than\nthey thought.  \n  \n  \n  \n  \n  \n**Postscript**  \n  \nOpinions seem to be divided about the charisma theory. Some say it's\nimpossible, others say it's obvious. This seems a good sign. Perhaps it's in\nthe sweet spot midway between.  \n  \nAs for it being impossible, I reply: here's the data; here's the theory;\ntheory explains data 100%. To a scientist, at least, that means it deserves\nattention, however implausible it seems.  \n  \nYou can't believe voters are so superficial that they just choose the most\ncharismatic guy? My theory doesn't require that. I'm not proposing that\ncharisma is the only factor, just that it's the only one _left_ after the\nefforts of the two parties cancel one another out.  \n  \nAs for the theory being obvious, as far as I know, no one has proposed it\nbefore. Election forecasters are proud when they can achieve the same results\nwith much more complicated models.  \n  \nFinally, to the people who say that the theory is probably true, but rather\ndepressing: it's not so bad as it seems. The phenomenon is like a pricing\nanomaly; once people realize it's there, it will disappear. Once both parties\nrealize it's a waste of time to nominate uncharismatic candidates, they'll\ntend to nominate only the most charismatic ones. And if the candidates are\nequally charismatic, charisma will cancel out, and elections will be decided\non issues, as political commentators like to think they are now.  \n  \n  \n  \n**Notes**  \n  \n[1] As Clinton himself discovered to his surprise when, in one of his first\nacts as president, he tried to shift the military leftward. After a bruising\nfight he escaped with a face-saving compromise.  \n  \n[2] True, Gore won the popular vote. But politicians know the electoral vote\ndecides the election, so that's what they campaign for. If Bush had been\ncampaigning for the popular vote he would presumably have got more of it.\n(Thanks to judgmentalist for this point.)  \n  \n[3] Source: Nielsen Media Research. Of the remaining 13%, 11 didn't have TV\nbecause they couldn't afford it. I'd argue that the missing 11% were probably\nalso the 11% most susceptible to charisma.  \n  \n[4] One implication of this theory is that parties shouldn't be too quick to\nreject candidates with skeletons in their closets. Charismatic candidates will\ntend to have more skeletons than squeaky clean dullards, but in practice that\ndoesn't seem to lose elections. The current Bush, for example, probably did\nmore drugs in his twenties than any preceding president, and yet managed to\nget elected with a base of evangelical Christians. All you have to do is say\nyou've reformed, and stonewall about the details.  \n  \n**Thanks** to Trevor Blackwell, Maria Daniels, Jessica Livingston, Jackie\nMcDonough, and Robert Morris for reading drafts of this, and to Eric Raymond\nfor pointing out that I was wrong about 1968.  \n  \n[](http://reddit.com) [ Comment](http://reddit.com/info/8zp7/comments) on this\nessay.  \n  \n  \n\nMay 2008  \n  \nGreat cities attract ambitious people. You can sense it when you walk around\none. In a hundred subtle ways, the city sends you a message: you could do\nmore; you should try harder.  \n  \nThe surprising thing is how different these messages can be. New York tells\nyou, above all: you should make more money. There are other messages too, of\ncourse. You should be hipper. You should be better looking. But the clearest\nmessage is that you should be richer.  \n  \nWhat I like about Boston (or rather Cambridge) is that the message there is:\nyou should be smarter. You really should get around to reading all those books\nyou've been meaning to.  \n  \nWhen you ask what message a city sends, you sometimes get surprising answers.\nAs much as they respect brains in Silicon Valley, the message the Valley sends\nis: you should be more powerful.  \n  \nThat's not quite the same message New York sends. Power matters in New York\ntoo of course, but New York is pretty impressed by a billion dollars even if\nyou merely inherited it. In Silicon Valley no one would care except a few real\nestate agents. What matters in Silicon Valley is how much effect you have on\nthe world. The reason people there care about Larry and Sergey is not their\nwealth but the fact that they control Google, which affects practically\neveryone.  \n  \n_____  \n  \nHow much does it matter what message a city sends? Empirically, the answer\nseems to be: a lot. You might think that if you had enough strength of mind to\ndo great things, you'd be able to transcend your environment. Where you live\nshould make at most a couple percent difference. But if you look at the\nhistorical evidence, it seems to matter more than that. Most people who did\ngreat things were clumped together in a few places where that sort of thing\nwas done at the time.  \n  \nYou can see how powerful cities are from something I wrote about\n[earlier](taste.html): the case of the Milanese Leonardo. Practically every\nfifteenth century Italian painter you've heard of was from Florence, even\nthough Milan was just as big. People in Florence weren't genetically\ndifferent, so you have to assume there was someone born in Milan with as much\nnatural ability as Leonardo. What happened to him?  \n  \nIf even someone with the same natural ability as Leonardo couldn't beat the\nforce of environment, do you suppose you can?  \n  \nI don't. I'm fairly stubborn, but I wouldn't try to fight this force. I'd\nrather use it. So I've thought a lot about where to live.  \n  \nI'd always imagined Berkeley would be the ideal place \u2014 that it would\nbasically be Cambridge with good weather. But when I finally tried living\nthere a couple years ago, it turned out not to be. The message Berkeley sends\nis: you should live better. Life in Berkeley is very civilized. It's probably\nthe place in America where someone from Northern Europe would feel most at\nhome. But it's not humming with ambition.  \n  \nIn retrospect it shouldn't have been surprising that a place so pleasant would\nattract people interested above all in quality of life. Cambridge with good\nweather, it turns out, is not Cambridge. The people you find in Cambridge are\nnot there by accident. You have to make sacrifices to live there. It's\nexpensive and somewhat grubby, and the weather's often bad. So the kind of\npeople you find in Cambridge are the kind of people who want to live where the\nsmartest people are, even if that means living in an expensive, grubby place\nwith bad weather.  \n  \nAs of this writing, Cambridge seems to be the intellectual capital of the\nworld. I realize that seems a preposterous claim. What makes it true is that\nit's more preposterous to claim about anywhere else. American universities\ncurrently seem to be the best, judging from the flow of ambitious students.\nAnd what US city has a stronger claim? New York? A fair number of smart\npeople, but diluted by a much larger number of neanderthals in suits. The Bay\nArea has a lot of smart people too, but again, diluted; there are two great\nuniversities, but they're far apart. Harvard and MIT are practically adjacent\nby West Coast standards, and they're surrounded by about 20 other colleges and\nuniversities. [1]  \n  \nCambridge as a result feels like a town whose main industry is ideas, while\nNew York's is finance and Silicon Valley's is startups.  \n  \n_____  \n  \nWhen you talk about cities in the sense we are, what you're really talking\nabout is collections of people. For a long time cities were the only large\ncollections of people, so you could use the two ideas interchangeably. But we\ncan see how much things are changing from the examples I've mentioned. New\nYork is a classic great city. But Cambridge is just part of a city, and\nSilicon Valley is not even that. (San Jose is not, as it sometimes claims, the\ncapital of Silicon Valley. It's just 178 square miles at one end of it.)  \n  \nMaybe the Internet will change things further. Maybe one day the most\nimportant community you belong to will be a virtual one, and it won't matter\nwhere you live physically. But I wouldn't bet on it. The physical world is\nvery high bandwidth, and some of the ways cities send you messages are quite\nsubtle.  \n  \nOne of the exhilarating things about coming back to Cambridge every spring is\nwalking through the streets at dusk, when you can see into the houses. When\nyou walk through Palo Alto in the evening, you see nothing but the blue glow\nof TVs. In Cambridge you see shelves full of promising-looking books. Palo\nAlto was probably much like Cambridge in 1960, but you'd never guess now that\nthere was a university nearby. Now it's just one of the richer neighborhoods\nin Silicon Valley. [2]  \n  \nA city speaks to you mostly by accident \u2014 in things you see through windows,\nin conversations you overhear. It's not something you have to seek out, but\nsomething you can't turn off. One of the occupational hazards of living in\nCambridge is overhearing the conversations of people who use interrogative\nintonation in declarative sentences. But on average I'll take Cambridge\nconversations over New York or Silicon Valley ones.  \n  \nA friend who moved to Silicon Valley in the late 90s said the worst thing\nabout living there was the low quality of the eavesdropping. At the time I\nthought she was being deliberately eccentric. Sure, it can be interesting to\neavesdrop on people, but is good quality eavesdropping so important that it\nwould affect where you chose to live? Now I understand what she meant. The\nconversations you overhear tell you what sort of people you're among.  \n  \n_____  \n  \nNo matter how determined you are, it's hard not to be influenced by the people\naround you. It's not so much that you do whatever a city expects of you, but\nthat you get discouraged when no one around you cares about the same things\nyou do.  \n  \nThere's an imbalance between encouragement and discouragement like that\nbetween gaining and losing money. Most people overvalue negative amounts of\nmoney: they'll work much harder to avoid losing a dollar than to gain one.\nSimilarly, although there are plenty of people strong enough to resist doing\nsomething just because that's what one is supposed to do where they happen to\nbe, there are few strong enough to keep working on something no one around\nthem cares about.  \n  \nBecause ambitions are to some extent incompatible and admiration is a zero-sum\ngame, each city tends to focus on one type of ambition. The reason Cambridge\nis the intellectual capital is not just that there's a concentration of smart\npeople there, but that there's nothing _else_ people there care about more.\nProfessors in New York and the Bay area are second class citizens \u2014 till they\nstart hedge funds or startups respectively.  \n  \nThis suggests an answer to a question people in New York have wondered about\nsince the Bubble: whether New York could grow into a startup hub to rival\nSilicon Valley. One reason that's unlikely is that someone starting a startup\nin New York would feel like a second class citizen. [3] There's already\nsomething else people in New York admire more.  \n  \nIn the long term, that could be a bad thing for New York. The power of an\nimportant new technology does eventually convert to money. So by caring more\nabout money and less about power than Silicon Valley, New York is recognizing\nthe same thing, but slower. [4] And in fact it has been losing to Silicon\nValley at its own game: the ratio of New York to California residents in the\nForbes 400 has decreased from 1.45 (81:56) when the list was first published\nin 1982 to .83 (73:88) in 2007.  \n  \n_____  \n  \nNot all cities send a message. Only those that are centers for some type of\nambition do. And it can be hard to tell exactly what message a city sends\nwithout living there. I understand the messages of New York, Cambridge, and\nSilicon Valley because I've lived for several years in each of them. DC and LA\nseem to send messages too, but I haven't spent long enough in either to say\nfor sure what they are.  \n  \nThe big thing in LA seems to be fame. There's an A List of people who are most\nin demand right now, and what's most admired is to be on it, or friends with\nthose who are. Beneath that, the message is much like New York's, though\nperhaps with more emphasis on physical attractiveness.  \n  \nIn DC the message seems to be that the most important thing is who you know.\nYou want to be an insider. In practice this seems to work much as in LA.\nThere's an A List and you want to be on it or close to those who are. The only\ndifference is how the A List is selected. And even that is not that different.  \n  \nAt the moment, San Francisco's message seems to be the same as Berkeley's: you\nshould live better. But this will change if enough startups choose SF over the\nValley. During the Bubble that was a predictor of failure \u2014 a self-indulgent\nchoice, like buying expensive office furniture. Even now I'm suspicious when\nstartups choose SF. But if enough good ones do, it stops being a self-\nindulgent choice, because the center of gravity of Silicon Valley will shift\nthere.  \n  \nI haven't found anything like Cambridge for intellectual ambition. Oxford and\nCambridge (England) feel like Ithaca or Hanover: the message is there, but not\nas strong.  \n  \nParis was once a great intellectual center. If you went there in 1300, it\nmight have sent the message Cambridge does now. But I tried living there for a\nbit last year, and the ambitions of the inhabitants are not intellectual ones.\nThe message Paris sends now is: do things with style. I liked that, actually.\nParis is the only city I've lived in where people genuinely cared about art.\nIn America only a few rich people buy original art, and even the more\nsophisticated ones rarely get past judging it by the brand name of the artist.\nBut looking through windows at dusk in Paris you can see that people there\nactually care what paintings look like. Visually, Paris has the best\neavesdropping I know. [5]  \n  \nThere's one more message I've heard from cities: in London you can still\n(barely) hear the message that one should be more aristocratic. If you listen\nfor it you can also hear it in Paris, New York, and Boston. But this message\nis everywhere very faint. It would have been strong 100 years ago, but now I\nprobably wouldn't have picked it up at all if I hadn't deliberately tuned in\nto that wavelength to see if there was any signal left.  \n  \n_____  \n  \nSo far the complete list of messages I've picked up from cities is: wealth,\nstyle, hipness, physical attractiveness, fame, political power, economic\npower, intelligence, social class, and quality of life.  \n  \nMy immediate reaction to this list is that it makes me slightly queasy. I'd\nalways considered ambition a good thing, but I realize now that was because\nI'd always implicitly understood it to mean ambition in the areas I cared\nabout. When you list everything ambitious people are ambitious about, it's not\nso pretty.  \n  \nOn closer examination I see a couple things on the list that are surprising in\nthe light of history. For example, physical attractiveness wouldn't have been\nthere 100 years ago (though it might have been 2400 years ago). It has always\nmattered for women, but in the late twentieth century it seems to have started\nto matter for men as well. I'm not sure why \u2014 probably some combination of the\nincreasing power of women, the increasing influence of actors as models, and\nthe fact that so many people work in offices now: you can't show off by\nwearing clothes too fancy to wear in a factory, so you have to show off with\nyour body instead.  \n  \nHipness is another thing you wouldn't have seen on the list 100 years ago. Or\nwouldn't you? What it means is to know what's what. So maybe it has simply\nreplaced the component of social class that consisted of being \"au fait.\" That\ncould explain why hipness seems particularly admired in London: it's version 2\nof the traditional English delight in obscure codes that only insiders\nunderstand.  \n  \nEconomic power would have been on the list 100 years ago, but what we mean by\nit is changing. It used to mean the control of vast human and material\nresources. But increasingly it means the ability to direct the course of\ntechnology, and some of the people in a position to do that are not even rich\n\u2014 leaders of important open source projects, for example. The Captains of\nIndustry of times past had laboratories full of clever people cooking up new\ntechnologies for them. The new breed are themselves those people.  \n  \nAs this force gets more attention, another is dropping off the list: social\nclass. I think the two changes are related. Economic power, wealth, and social\nclass are just names for the same thing at different stages in its life:\neconomic power converts to wealth, and wealth to social class. So the focus of\nadmiration is simply shifting upstream.  \n  \n_____  \n  \nDoes anyone who wants to do great work have to live in a great city? No; all\ngreat cities inspire some sort of ambition, but they aren't the only places\nthat do. For some kinds of work, all you need is a handful of talented\ncolleagues.  \n  \nWhat cities provide is an audience, and a funnel for peers. These aren't so\ncritical in something like math or physics, where no audience matters except\nyour peers, and judging ability is sufficiently straightforward that hiring\nand admissions committees can do it reliably. In a field like math or physics\nall you need is a department with the right colleagues in it. It could be\nanywhere \u2014 in Los Alamos, New Mexico, for example.  \n  \nIt's in fields like the arts or writing or technology that the larger\nenvironment matters. In these the best practitioners aren't conveniently\ncollected in a few top university departments and research labs \u2014 partly\nbecause talent is harder to judge, and partly because people pay for these\nthings, so one doesn't need to rely on teaching or research funding to support\noneself. It's in these more chaotic fields that it helps most to be in a great\ncity: you need the encouragement of feeling that people around you care about\nthe kind of work you do, and since you have to find peers for yourself, you\nneed the much larger intake mechanism of a great city.  \n  \nYou don't have to live in a great city your whole life to benefit from it. The\ncritical years seem to be the early and middle ones of your career. Clearly\nyou don't have to grow up in a great city. Nor does it seem to matter if you\ngo to college in one. To most college students a world of a few thousand\npeople seems big enough. Plus in college you don't yet have to face the\nhardest kind of work \u2014 discovering new problems to solve.  \n  \nIt's when you move on to the next and much harder step that it helps most to\nbe in a place where you can find peers and encouragement. You seem to be able\nto leave, if you want, once you've found both. The Impressionists show the\ntypical pattern: they were born all over France (Pissarro was born in the\nCarribbean) and died all over France, but what defined them were the years\nthey spent together in Paris.  \n  \n_____  \n  \nUnless you're sure what you want to do and where the leading center for it is,\nyour best bet is probably to try living in several places when you're young.\nYou can never tell what message a city sends till you live there, or even\nwhether it still sends one. Often your information will be wrong: I tried\nliving in Florence when I was 25, thinking it would be an art center, but it\nturned out I was 450 years too late.  \n  \nEven when a city is still a live center of ambition, you won't know for sure\nwhether its message will resonate with you till you hear it. When I moved to\nNew York, I was very excited at first. It's an exciting place. So it took me\nquite a while to realize I just wasn't like the people there. I kept searching\nfor the Cambridge of New York. It turned out it was way, way uptown: an hour\nuptown by air.  \n  \nSome people know at 16 what sort of work they're going to do, but in most\nambitious kids, ambition seems to precede anything specific to be ambitious\nabout. They know they want to do something great. They just haven't decided\nyet whether they're going to be a rock star or a brain surgeon. There's\nnothing wrong with that. But it means if you have this most common type of\nambition, you'll probably have to figure out where to live by trial and error.\nYou'll probably have to find the city where you feel at home to know what sort\nof ambition you have.  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] This is one of the advantages of not having the universities in your\ncountry controlled by the government. When governments decide how to allocate\nresources, political deal-making causes things to be spread out\ngeographically. No central goverment would put its two best universities in\nthe same town, unless it was the capital (which would cause other problems).\nBut scholars seem to like to cluster together as much as people in any other\nfield, and when given the freedom to they derive the same advantages from it.  \n  \n[2] There are still a few old professors in Palo Alto, but one by one they die\nand their houses are transformed by developers into McMansions and sold to VPs\nof Bus Dev.  \n  \n[3] How many times have you read about startup founders who continued to live\ninexpensively as their companies took off? Who continued to dress in jeans and\nt-shirts, to drive the old car they had in grad school, and so on? If you did\nthat in New York, people would treat you like shit. If you walk into a fancy\nrestaurant in San Francisco wearing a jeans and a t-shirt, they're nice to\nyou; who knows who you might be? Not in New York.  \n  \nOne sign of a city's potential as a technology center is the number of\nrestaurants that still require jackets for men. According to Zagat's there are\nnone in San Francisco, LA, Boston, or Seattle, 4 in DC, 6 in Chicago, 8 in\nLondon, 13 in New York, and 20 in Paris.  \n  \n(Zagat's lists the Ritz Carlton Dining Room in SF as requiring jackets but I\ncouldn't believe it, so I called to check and in fact they don't. Apparently\nthere's only one restaurant left on the entire West Coast that still requires\njackets: The French Laundry in Napa Valley.)  \n  \n[4] Ideas are one step upstream from economic power, so it's conceivable that\nintellectual centers like Cambridge will one day have an edge over Silicon\nValley like the one the Valley has over New York.  \n  \nThis seems unlikely at the moment; if anything Boston is falling further and\nfurther behind. The only reason I even mention the possibility is that the\npath from ideas to startups has recently been getting smoother. It's a lot\neasier now for a couple of hackers with no business experience to start a\nstartup than it was 10 years ago. If you extrapolate another 20 years, maybe\nthe balance of power will start to shift back. I wouldn't bet on it, but I\nwouldn't bet against it either.  \n  \n[5] If Paris is where people care most about art, why is New York the center\nof gravity of the art business? Because in the twentieth century, art as brand\nsplit apart from art as stuff. New York is where the richest buyers are, but\nall they demand from art is brand, and since you can base brand on anything\nwith a sufficiently identifiable style, you may as well use the local stuff.  \n  \n  \n  \n**Thanks** to Trevor Blackwell, Sarah Harlin, Jessica Livingston, Jackie\nMcDonough, Robert Morris, and David Sloo for reading drafts of this.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nMarch 2005  \n  \n _(Parts of this essay began as replies to students who wrote to me with\nquestions.)_  \n  \nRecently I've had several emails from computer science undergrads asking what\nto do in college. I might not be the best source of advice, because I was a\nphilosophy major in college. But I took so many CS classes that most CS majors\nthought I was one. I was certainly a hacker, at least.  \n  \n**Hacking**  \n  \nWhat should you do in college to become a [good hacker](gh.html)? There are\ntwo main things you can do: become very good at programming, and learn a lot\nabout specific, cool problems. These turn out to be equivalent, because each\ndrives you to do the other.  \n  \nThe way to be good at programming is to work (a) a lot (b) on hard problems.\nAnd the way to make yourself work on hard problems is to work on some very\nengaging project.  \n  \nOdds are this project won't be a class assignment. My friend Robert learned a\nlot by writing network software when he was an undergrad. One of his projects\nwas to connect Harvard to the Arpanet; it had been one of the original nodes,\nbut by 1984 the connection had died. [1] Not only was this work not for a\nclass, but because he spent all his time on it and neglected his studies, he\nwas kicked out of school for a year. [2] It all evened out in the end, and now\nhe's a professor at MIT. But you'll probably be happier if you don't go to\nthat extreme; it caused him a lot of worry at the time.  \n  \nAnother way to be good at programming is to find other people who are good at\nit, and learn what they know. Programmers tend to sort themselves into tribes\naccording to the type of work they do and the tools they use, and some tribes\nare [smarter](pypar.html) than others. Look around you and see what the smart\npeople seem to be working on; there's usually a reason.  \n  \nSome of the smartest people around you are professors. So one way to find\ninteresting work is to volunteer as a research assistant. Professors are\nespecially interested in people who can solve tedious system-administration\ntype problems for them, so that is a way to get a foot in the door. What they\nfear are flakes and resume padders. It's all too common for an assistant to\nresult in a net increase in work. So you have to make it clear you'll mean a\nnet decrease.  \n  \nDon't be put off if they say no. Rejection is almost always less personal than\nthe rejectee imagines. Just move on to the next. (This applies to dating too.)  \n  \nBeware, because although most professors are smart, not all of them work on\ninteresting stuff. Professors have to publish novel results to advance their\ncareers, but there is more competition in more interesting areas of research.\nSo what less ambitious professors do is turn out a series of papers whose\nconclusions are novel because no one else cares about them. You're better off\navoiding these.  \n  \nI never worked as a research assistant, so I feel a bit dishonest recommending\nthat route. I learned to program by writing stuff of my own, particularly by\ntrying to reverse-engineer Winograd's SHRDLU. I was as obsessed with that\nprogram as a mother with a new baby.  \n  \nWhatever the disadvantages of working by yourself, the advantage is that the\nproject is all your own. You never have to compromise or ask anyone's\npermission, and if you have a new idea you can just sit down and start\nimplementing it.  \n  \nIn your own projects you don't have to worry about novelty (as professors do)\nor profitability (as businesses do). All that matters is how hard the project\nis technically, and that has no correlation to the nature of the application.\n\"Serious\" applications like databases are often trivial and dull technically\n(if you ever suffer from insomnia, try reading the technical literature about\ndatabases) while \"frivolous\" applications like games are often very\nsophisticated. I'm sure there are game companies out there working on products\nwith more intellectual content than the research at the bottom nine tenths of\nuniversity CS departments.  \n  \nIf I were in college now I'd probably work on graphics: a network game, for\nexample, or a tool for 3D animation. When I was an undergrad there weren't\nenough cycles around to make graphics interesting, but it's hard to imagine\nanything more fun to work on now.  \n  \n**Math**  \n  \nWhen I was in college, a lot of the professors believed (or at least wished)\nthat [computer science](hp.html) was a branch of math. This idea was strongest\nat Harvard, where there wasn't even a CS major till the 1980s; till then one\nhad to major in applied math. But it was nearly as bad at Cornell. When I told\nthe fearsome Professor Conway that I was interested in AI (a hot topic then),\nhe told me I should major in math. I'm still not sure whether he thought AI\nrequired math, or whether he thought AI was nonsense and that majoring in\nsomething rigorous would cure me of such stupid ambitions.  \n  \nIn fact, the amount of math you need as a hacker is a lot less than most\nuniversity departments like to admit. I don't think you need much more than\nhigh school math plus a few concepts from the theory of computation. (You have\nto know what an n^2 algorithm is if you want to avoid writing them.) Unless\nyou're planning to write math applications, of course. Robotics, for example,\nis all math.  \n  \nBut while you don't literally need math for most kinds of hacking, in the\nsense of knowing 1001 tricks for differentiating formulas, math is very much\nworth studying for its own sake. It's a valuable source of metaphors for\nalmost any kind of work.[3] I wish I'd studied more math in college for that\nreason.  \n  \nLike a lot of people, I was mathematically abused as a child. I learned to\nthink of math as a collection of formulas that were neither beautiful nor had\nany relation to my life (despite attempts to translate them into \"word\nproblems\"), but had to be memorized in order to do well on tests.  \n  \nOne of the most valuable things you could do in college would be to learn what\nmath is really about. This may not be easy, because a lot of good\nmathematicians are bad teachers. And while there are many popular books on\nmath, few seem good. The best I can think of are W. W. Sawyer's. And of course\nEuclid. [4]  \n  \n**Everything**  \n  \nThomas Huxley said \"Try to learn something about everything and everything\nabout something.\" Most universities aim at this ideal.  \n  \nBut what's everything? To me it means, all that people learn in the course of\nworking honestly on hard problems. All such work tends to be related, in that\nideas and techniques from one field can often be transplanted successfully to\nothers. Even others that seem quite distant. For example, I write\n[essays](essay.html) the same way I write software: I sit down and blow out a\nlame version 1 as fast as I can type, then spend several weeks rewriting it.  \n  \nWorking on hard problems is not, by itself, enough. Medieval alchemists were\nworking on a hard problem, but their approach was so bogus that there was\nlittle to learn from studying it, except possibly about people's ability to\ndelude themselves. Unfortunately the sort of AI I was trying to learn in\ncollege had the same flaw: a very hard problem, blithely approached with\nhopelessly inadequate techniques. Bold? Closer to fraudulent.  \n  \nThe social sciences are also fairly bogus, because they're so much influenced\nby intellectual [fashions](say.html). If a physicist met a colleague from 100\nyears ago, he could teach him some new things; if a psychologist met a\ncolleague from 100 years ago, they'd just get into an ideological argument.\nYes, of course, you'll learn something by taking a psychology class. The point\nis, you'll learn more by taking a class in another department.  \n  \nThe worthwhile departments, in my opinion, are math, the hard sciences,\nengineering, history (especially economic and social history, and the history\nof science), architecture, and the classics. A survey course in art history\nmay be worthwhile. Modern literature is important, but the way to learn about\nit is just to read. I don't know enough about music to say.  \n  \nYou can skip the social sciences, philosophy, and the various departments\ncreated recently in response to political pressures. Many of these fields talk\nabout important problems, certainly. But the way they talk about them is\nuseless. For example, philosophy talks, among other things, about our\nobligations to one another; but you can learn more about this from a wise\ngrandmother or E. B. White than from an academic philosopher.  \n  \nI speak here from experience. I should probably have been offended when people\nlaughed at Clinton for saying \"It depends on what the meaning of the word 'is'\nis.\" I took about five classes in college on what the meaning of \"is\" is.  \n  \nAnother way to figure out which fields are worth studying is to create the\n_dropout graph._ For example, I know many people who switched from math to\ncomputer science because they found math too hard, and no one who did the\nopposite. People don't do hard things gratuitously; no one will work on a\nharder problem unless it is proportionately (or at least log(n)) more\nrewarding. So probably math is more worth studying than computer science. By\nsimilar comparisons you can make a graph of all the departments in a\nuniversity. At the bottom you'll find the subjects with least intellectual\ncontent.  \n  \nIf you use this method, you'll get roughly the same answer I just gave.  \n  \nLanguage courses are an anomaly. I think they're better considered as\nextracurricular activities, like pottery classes. They'd be far more useful\nwhen combined with some time living in a country where the language is spoken.\nOn a whim I studied Arabic as a freshman. It was a lot of work, and the only\nlasting benefits were a weird ability to identify semitic roots and some\ninsights into how people recognize words.  \n  \nStudio art and creative writing courses are wildcards. Usually you don't get\ntaught much: you just work (or don't work) on whatever you want, and then sit\naround offering \"crits\" of one another's creations under the vague supervision\nof the teacher. But writing and art are both very hard problems that (some)\npeople work honestly at, so they're worth doing, especially if you can find a\ngood teacher.  \n  \n**Jobs**  \n  \nOf course college students have to think about more than just learning. There\nare also two practical problems to consider: jobs, and graduate school.  \n  \nIn theory a liberal education is not supposed to supply job training. But\neveryone knows this is a bit of a fib. Hackers at every college learn\npractical skills, and not by accident.  \n  \nWhat you should learn to get a job depends on the kind you want. If you want\nto work in a big company, learn how to hack [Blub](avg.html) on Windows. If\nyou want to work at a cool little company or research lab, you'll do better to\nlearn Ruby on Linux. And if you want to start your own company, which I think\nwill be more and more common, master the most powerful tools you can find,\nbecause you're going to be in a race against your competitors, and they'll be\nyour horse.  \n  \nThere is not a direct correlation between the skills you should learn in\ncollege and those you'll use in a job. You should aim slightly high in\ncollege.  \n  \nIn workouts a football player may bench press 300 pounds, even though he may\nnever have to exert anything like that much force in the course of a game.\nLikewise, if your professors try to make you learn stuff that's more advanced\nthan you'll need in a job, it may not just be because they're academics,\ndetached from the real world. They may be trying to make you lift weights with\nyour brain.  \n  \nThe programs you write in classes differ in three critical ways from the ones\nyou'll write in the real world: they're small; you get to start from scratch;\nand the problem is usually artificial and predetermined. In the real world,\nprograms are bigger, tend to involve existing code, and often require you to\nfigure out what the problem is before you can solve it.  \n  \nYou don't have to wait to leave (or even enter) college to learn these skills.\nIf you want to learn how to deal with existing code, for example, you can\ncontribute to open-source projects. The sort of employer you want to work for\nwill be as impressed by that as good grades on class assignments.  \n  \nIn existing open-source projects you don't get much practice at the third\nskill, deciding what problems to solve. But there's nothing to stop you\nstarting new projects of your own. And good employers will be even more\nimpressed with that.  \n  \nWhat sort of problem should you try to solve? One way to answer that is to ask\nwhat you need as a user. For example, I stumbled on a good algorithm for spam\nfiltering because I wanted to stop getting spam. Now what I wish I had was a\nmail reader that somehow prevented my inbox from filling up. I tend to use my\ninbox as a todo list. But that's like using a screwdriver to open bottles;\nwhat one really wants is a bottle opener.  \n  \n**Grad School**  \n  \nWhat about grad school? Should you go? And how do you get into a good one?  \n  \nIn principle, grad school is professional training in research, and you\nshouldn't go unless you want to do research as a career. And yet half the\npeople who get PhDs in CS don't go into research. I didn't go to grad school\nto become a professor. I went because I wanted to learn more.  \n  \nSo if you're mainly interested in hacking and you go to grad school, you'll\nfind a lot of other people who are similarly out of their element. And if half\nthe people around you are out of their element in the same way you are, are\nyou really out of your element?  \n  \nThere's a fundamental problem in \"computer science,\" and it surfaces in\nsituations like this. No one is sure what \"research\" is supposed to be. A lot\nof research is hacking that had to be crammed into the form of an academic\npaper to yield one more quantum of publication.  \n  \nSo it's kind of misleading to ask whether you'll be at home in grad school,\nbecause very few people are quite at home in computer science. The whole field\nis uncomfortable in its own skin. So the fact that you're mainly interested in\nhacking shouldn't deter you from going to grad school. Just be warned you'll\nhave to do a lot of stuff you don't like.  \n  \nNumber one will be your dissertation. Almost everyone hates their dissertation\nby the time they're done with it. The process inherently tends to produce an\nunpleasant result, like a cake made out of whole wheat flour and baked for\ntwelve hours. Few dissertations are read with pleasure, especially by their\nauthors.  \n  \nBut thousands before you have suffered through writing a dissertation. And\naside from that, grad school is close to paradise. Many people remember it as\nthe happiest time of their lives. And nearly all the rest, including me,\nremember it as a period that would have been, if they hadn't had to write a\ndissertation. [5]  \n  \nThe danger with grad school is that you don't see the scary part upfront. PhD\nprograms start out as college part 2, with several years of classes. So by the\ntime you face the horror of writing a dissertation, you're already several\nyears in. If you quit now, you'll be a grad-school dropout, and you probably\nwon't like that idea. When Robert got kicked out of grad school for writing\nthe Internet worm of 1988, I envied him enormously for finding a way out\nwithout the stigma of failure.  \n  \nOn the whole, grad school is probably better than most alternatives. You meet\na lot of smart people, and your glum procrastination will at least be a\npowerful common bond. And of course you have a PhD at the end. I forgot about\nthat. I suppose that's worth something.  \n  \nThe greatest advantage of a PhD (besides being the union card of academia, of\ncourse) may be that it gives you some baseline confidence. For example, the\nHoneywell thermostats in my house have the most atrocious UI. My mother, who\nhas the same model, diligently spent a day reading the user's manual to learn\nhow to operate hers. She assumed the problem was with her. But I can think to\nmyself \"If someone with a PhD in computer science can't understand this\nthermostat, it _must_ be badly designed.\"  \n  \nIf you still want to go to grad school after this equivocal recommendation, I\ncan give you solid advice about how to get in. A lot of my friends are CS\nprofessors now, so I have the inside story about admissions. It's quite\ndifferent from college. At most colleges, admissions officers decide who gets\nin. For PhD programs, the professors do. And they try to do it well, because\nthe people they admit are going to be working for them.  \n  \nApparently only recommendations really matter at the best schools.\nStandardized tests count for nothing, and grades for little. The essay is\nmostly an opportunity to disqualify yourself by saying something stupid. The\nonly thing professors trust is recommendations, preferably from people they\nknow. [6]  \n  \nSo if you want to get into a PhD program, the key is to impress your\nprofessors. And from my friends who are professors I know what impresses them:\nnot merely trying to impress them. They're not impressed by students who get\ngood grades or want to be their research assistants so they can get into grad\nschool. They're impressed by students who get good grades and want to be their\nresearch assistants because they're genuinely interested in the topic.  \n  \nSo the best thing you can do in college, whether you want to get into grad\nschool or just be good at hacking, is figure out what you truly like. It's\nhard to trick professors into letting you into grad school, and impossible to\ntrick problems into letting you solve them. College is where faking stops\nworking. From this point, unless you want to go work for a big company, which\nis like reverting to high school, the only way forward is through doing what\nyou [love](love.html).  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] No one seems to have minded, which shows how unimportant the Arpanet\n(which became the Internet) was as late as 1984.  \n  \n[2] This is why, when I became an employer, I didn't care about GPAs. In fact,\nwe actively sought out people who'd failed out of school. We once put up\nposters around Harvard saying \"Did you just get kicked out for doing badly in\nyour classes because you spent all your time working on some project of your\nown? Come work for us!\" We managed to find a kid who had been, and he was a\ngreat hacker.  \n  \nWhen Harvard kicks undergrads out for a year, they have to get jobs. The idea\nis to show them how awful the real world is, so they'll understand how lucky\nthey are to be in college. This plan backfired with the guy who came to work\nfor us, because he had more fun than he'd had in school, and made more that\nyear from stock options than any of his professors did in salary. So instead\nof crawling back repentant at the end of the year, he took another year off\nand went to Europe. He did eventually graduate at about 26.  \n  \n[3] Eric Raymond says the best metaphors for hackers are in set theory,\ncombinatorics, and graph theory.  \n  \nTrevor Blackwell reminds you to take math classes intended for math majors.\n\"'Math for engineers' classes sucked mightily. In fact any 'x for engineers'\nsucks, where x includes math, law, writing and visual design.\"  \n  \n[4] Other highly recommended books: _What is Mathematics?_ , by Courant and\nRobbins; _Geometry and the Imagination_ by Hilbert and Cohn-Vossen. And for\nthose interested in graphic design, [Byrne's\nEuclid](http://www.math.ubc.ca/people/faculty/cass/Euclid/byrne.html).  \n  \n[5] If you wanted to have the perfect life, the thing to do would be to go to\ngrad school, secretly write your dissertation in the first year or two, and\nthen just enjoy yourself for the next three years, dribbling out a chapter at\na time. This prospect will make grad students' mouths water, but I know of no\none who's had the discipline to pull it off.  \n  \n[6] One professor friend says that 15-20% of the grad students they admit each\nyear are \"long shots.\" But what he means by long shots are people whose\napplications are perfect in every way, except that no one on the admissions\ncommittee knows the professors who wrote the recommendations.  \n  \nSo if you want to get into grad school in the sciences, you need to go to\ncollege somewhere with real research professors. Otherwise you'll seem a risky\nbet to admissions committees, no matter how good you are.  \n  \nWhich implies a surprising but apparently inevitable consequence: little\nliberal arts colleges are doomed.  Most smart high school kids at least\nconsider going into the sciences, even if they ultimately choose not to. Why\ngo to a college that limits their options?  \n  \n  \n  \n**Thanks** to Trevor Blackwell, Alex Lewin, Jessica Livingston, Robert Morris,\nEric Raymond, and several [anonymous CS professors](undergrad2.html) for\nreading drafts of this, and to the students whose questions began it.  \n  \n  \n\nSeptember 2007  \n  \nA few weeks ago I had a thought so heretical that it really surprised me. It\nmay not matter all that much where you go to college.  \n  \nFor me, as for a lot of middle class kids, getting into a good college was\nmore or less the meaning of life when I was growing up. What was I? A student.\nTo do that well meant to get good grades. Why did one have to get good grades?\nTo get into a good college. And why did one want to do that? There seemed to\nbe several reasons: you'd learn more, get better jobs, make more money. But it\ndidn't matter exactly what the benefits would be. College was a bottleneck\nthrough which all your future prospects passed; everything would be better if\nyou went to a better college.  \n  \nA few weeks ago I realized that somewhere along the line I had stopped\nbelieving that.  \n  \nWhat first set me thinking about this was the new trend of worrying\nobsessively about what\n[kindergarten](http://nymag.com/nymetro/urban/education/features/15141/) your\nkids go to. It seemed to me this couldn't possibly matter. Either it won't\nhelp your kid get into Harvard, or if it does, getting into Harvard won't mean\nmuch anymore. And then I thought: how much does it mean even now?  \n  \nIt turns out I have a lot of data about that. My three partners and I run a\nseed stage investment firm called [Y Combinator](http://ycombinator.com). We\ninvest when the company is just a couple guys and an idea. The idea doesn't\nmatter much; it will change anyway. Most of our decision is based on the\nfounders. The average founder is three years out of college. Many have just\ngraduated; a few are still in school. So we're in much the same position as a\ngraduate program, or a company hiring people right out of college. Except our\nchoices are immediately and visibly tested. There are two possible outcomes\nfor a startup: success or failure\u2014and usually you know within a year which it\nwill be.  \n  \nThe test applied to a startup is among the purest of real world tests. A\nstartup succeeds or fails depending almost entirely on the efforts of the\nfounders. Success is decided by the market: you only succeed if users like\nwhat you've built. And users don't care where you went to college.  \n  \nAs well as having precisely measurable results, we have a lot of them. Instead\nof doing a small number of large deals like a traditional venture capital\nfund, we do a large number of small ones. We currently fund about 40 companies\na year, selected from about 900 applications representing a total of about\n2000 people. [1]  \n  \nBetween the volume of people we judge and the rapid, unequivocal test that's\napplied to our choices, Y Combinator has been an unprecedented opportunity for\nlearning how to pick winners. One of the most surprising things we've learned\nis how little it matters where people went to college.  \n  \nI thought I'd already been cured of caring about that. There's nothing like\ngoing to grad school at Harvard to cure you of any illusions you might have\nabout the average Harvard undergrad. And yet Y Combinator showed us we were\nstill overestimating people who'd been to elite colleges. We'd interview\npeople from MIT or Harvard or Stanford and sometimes find ourselves thinking:\nthey _must_ be smarter than they seem. It took us a few iterations to learn to\ntrust our senses.  \n  \nPractically everyone thinks that someone who went to MIT or Harvard or\nStanford must be smart. Even people who hate you for it believe it.  \n  \nBut when you think about what it means to have gone to an elite college, how\ncould this be true? We're talking about a decision made by admissions\nofficers\u2014basically, HR people\u2014based on a cursory examination of a huge pile of\ndepressingly similar applications submitted by seventeen year olds. And what\ndo they have to go on? An easily gamed standardized test; a short essay\ntelling you what the kid thinks you want to hear; an interview with a random\nalum; a high school record that's largely an index of obedience. Who would\nrely on such a test?  \n  \nAnd yet a lot of companies do. A lot of companies are very much influenced by\nwhere applicants went to college. How could they be? I think I know the answer\nto that.  \n  \nThere used to be a saying in the corporate world: \"No one ever got fired for\nbuying IBM.\" You no longer hear this about IBM specifically, but the idea is\nvery much alive; there is a whole category of \"enterprise\" software companies\nthat exist to take advantage of it. People buying technology for large\norganizations don't care if they pay a fortune for mediocre software. It's not\ntheir money. They just want to buy from a supplier who seems safe\u2014a company\nwith an established name, confident salesmen, impressive offices, and software\nthat conforms to all the current fashions. Not necessarily a company that will\ndeliver so much as one that, if they do let you down, will still seem to have\nbeen a prudent choice. So companies have evolved to fill that niche.  \n  \nA recruiter at a big company is in much the same position as someone buying\ntechnology for one. If someone went to Stanford and is not obviously insane,\nthey're probably a safe bet. And a safe bet is enough. No one ever measures\nrecruiters by the later performance of people they turn down. [2]  \n  \nI'm not saying, of course, that elite colleges have evolved to prey upon the\nweaknesses of large organizations the way enterprise software companies have.\nBut they work as if they had. In addition to the power of the brand name,\ngraduates of elite colleges have two critical qualities that plug right into\nthe way large organizations work. They're good at doing what they're asked,\nsince that's what it takes to please the adults who judge you at seventeen.\nAnd having been to an elite college makes them more confident.  \n  \nBack in the days when people might spend their whole career at one big\ncompany, these qualities must have been very valuable. Graduates of elite\ncolleges would have been capable, yet amenable to authority. And since\nindividual performance is so hard to measure in large organizations, their own\nconfidence would have been the starting point for their reputation.  \n  \nThings are very different in the new world of startups. We couldn't save\nsomeone from the market's judgement even if we wanted to. And being charming\nand confident counts for nothing with users. All users care about is whether\nyou make something they like. If you don't, you're dead.  \n  \nKnowing that test is coming makes us work a lot harder to get the right\nanswers than anyone would if they were merely hiring people. We can't afford\nto have any illusions about the predictors of success. And what we've found is\nthat the variation between schools is so much smaller than the variation\nbetween individuals that it's negligible by comparison. We can learn more\nabout someone in the first minute of talking to them than by knowing where\nthey went to school.  \n  \nIt seems obvious when you put it that way. Look at the individual, not where\nthey went to college. But that's a weaker statement than the idea I began\nwith, that it doesn't matter much where a given individual goes to college.\nDon't you learn things at the best schools that you wouldn't learn at lesser\nplaces?  \n  \nApparently not. Obviously you can't prove this in the case of a single\nindividual, but you can tell from aggregate evidence: you can't, without\nasking them, distinguish people who went to one school from those who went to\nanother three times as far down the _US News_ list. [3] Try it and see.  \n  \nHow can this be? Because how much you learn in college depends a lot more on\nyou than the college. A determined party animal can get through the best\nschool without learning anything. And someone with a real thirst for knowledge\nwill be able to find a few smart people to learn from at a school that isn't\nprestigious at all.  \n  \nThe other students are the biggest advantage of going to an elite college; you\nlearn more from them than the professors. But you should be able to reproduce\nthis at most colleges if you make a conscious effort to find smart friends. At\nmost colleges you can find at least a handful of other smart students, and\nmost people have only a handful of close friends in college anyway. [4] The\nodds of finding smart professors are even better. The curve for faculty is a\nlot flatter than for students, especially in math and the hard sciences; you\nhave to go pretty far down the list of colleges before you stop finding smart\nprofessors in the math department.  \n  \nSo it's not surprising that we've found the relative prestige of different\ncolleges useless in judging individuals. There's a lot of randomness in how\ncolleges select people, and what they learn there depends much more on them\nthan the college. Between these two sources of variation, the college someone\nwent to doesn't mean a lot. It is to some degree a predictor of ability, but\nso weak that we regard it mainly as a source of error and try consciously to\nignore it.  \n  \nI doubt what we've discovered is an anomaly specific to startups. Probably\npeople have always overestimated the importance of where one goes to college.\nWe're just finally able to measure it.  \n  \nThe unfortunate thing is not just that people are judged by such a superficial\ntest, but that so many judge themselves by it. A lot of people, probably the\nmajority of people in America, have some amount of insecurity about where, or\nwhether, they went to college. The tragedy of the situation is that by far the\ngreatest liability of not having gone to the college you'd have liked is your\nown feeling that you're thereby lacking something. Colleges are a bit like\nexclusive clubs in this respect. There is only one real advantage to being a\nmember of most exclusive clubs: you know you wouldn't be missing much if you\nweren't. When you're excluded, you can only imagine the advantages of being an\ninsider. But invariably they're larger in your imagination than in real life.  \n  \nSo it is with colleges. Colleges differ, but they're nothing like the stamp of\ndestiny so many imagine them to be. People aren't what some admissions officer\ndecides about them at seventeen. They're what they make themselves.  \n  \nIndeed, the great advantage of not caring where people went to college is not\njust that you can stop judging them (and yourself) by superficial measures,\nbut that you can focus instead on what really matters. What matters is what\nyou make of yourself. I think that's what we should tell kids. Their job isn't\nto get good grades so they can get into a good college, but to learn and do.\nAnd not just because that's more rewarding than worldly success. That will\nincreasingly _be_ the route to worldly success.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] Is what we measure worth measuring? I think so. You can get rich simply by\nbeing energetic and unscrupulous, but getting rich from a technology startup\ntakes some amount of brains. It is just the kind of work the upper middle\nclass values; it has about the same intellectual component as being a doctor.  \n  \n[2] Actually, someone did, once. Mitch Kapor's wife Freada was in charge of HR\nat Lotus in the early years. (As he is at pains to point out, they did not\nbecome romantically involved till afterward.) At one point they worried Lotus\nwas losing its startup edge and turning into a big company. So as an\nexperiment she sent their recruiters the resumes of the first 40 employees,\nwith identifying details changed. These were the people who had made Lotus\ninto the star it was. Not one got an interview.  \n  \n[3] The _US News_ list? Surely no one trusts that. Even if the statistics they\nconsider are useful, how do they decide on the relative weights? The reason\nthe _US News_ list is meaningful is precisely because they are so\nintellectually dishonest in that respect. There is no external source they can\nuse to calibrate the weighting of the statistics they use; if there were, we\ncould just use that instead. What they must do is adjust the weights till the\ntop schools are the usual suspects in about the right order. So in effect what\nthe _US News_ list tells us is what the editors think the top schools are,\nwhich is probably not far from the conventional wisdom on the matter. The\namusing thing is, because some schools work hard to game the system, the\neditors will have to keep tweaking their algorithm to get the rankings they\nwant.  \n  \n[4] Possible doesn't mean easy, of course. A smart student at a party school\nwill inevitably be something of an outcast, just as he or she would be in most\n[high schools](nerds.html).  \n  \n**Thanks** to Trevor Blackwell, Sarah Harlin, Jessica Livingston, Jackie\nMcDonough, Peter Norvig, and Robert Morris for reading drafts of this.  \n  \n\nJuly 2020  \n  \nOne of the most revealing ways to classify people is by the degree and\naggressiveness of their conformism. Imagine a Cartesian coordinate system\nwhose horizontal axis runs from conventional-minded on the left to\nindependent-minded on the right, and whose vertical axis runs from passive at\nthe bottom to aggressive at the top. The resulting four quadrants define four\ntypes of people. Starting in the upper left and going counter-clockwise:\naggressively conventional-minded, passively conventional-minded, passively\nindependent-minded, and aggressively independent-minded.  \n  \nI think that you'll find all four types in most societies, and that which\nquadrant people fall into depends more on their own personality than the\nbeliefs prevalent in their society. [1]  \n  \nYoung children offer some of the best evidence for both points. Anyone who's\nbeen to primary school has seen the four types, and the fact that school rules\nare so arbitrary is strong evidence that which quadrant people fall into\ndepends more on them than the rules.  \n  \nThe kids in the upper left quadrant, the aggressively conventional-minded\nones, are the tattletales. They believe not only that rules must be obeyed,\nbut that those who disobey them must be punished.  \n  \nThe kids in the lower left quadrant, the passively conventional-minded, are\nthe sheep. They're careful to obey the rules, but when other kids break them,\ntheir impulse is to worry that those kids will be punished, not to ensure that\nthey will.  \n  \nThe kids in the lower right quadrant, the passively independent-minded, are\nthe dreamy ones. They don't care much about rules and probably aren't 100%\nsure what the rules even are.  \n  \nAnd the kids in the upper right quadrant, the aggressively independent-minded,\nare the naughty ones. When they see a rule, their first impulse is to question\nit. Merely being told what to do makes them inclined to do the opposite.  \n  \nWhen measuring conformism, of course, you have to say with respect to what,\nand this changes as kids get older. For younger kids it's the rules set by\nadults. But as kids get older, the source of rules becomes their peers. So a\npack of teenagers who all flout school rules in the same way are not\nindependent-minded; rather the opposite.  \n  \nIn adulthood we can recognize the four types by their distinctive calls, much\nas you could recognize four species of birds. The call of the aggressively\nconventional-minded is \"Crush <outgroup>!\" (It's rather alarming to see an\nexclamation point after a variable, but that's the whole problem with the\naggressively conventional-minded.) The call of the passively conventional-\nminded is \"What will the neighbors think?\" The call of the passively\nindependent-minded is \"To each his own.\" And the call of the aggressively\nindependent-minded is \"Eppur si muove.\"  \n  \nThe four types are not equally common. There are more passive people than\naggressive ones, and far more conventional-minded people than independent-\nminded ones. So the passively conventional-minded are the largest group, and\nthe aggressively independent-minded the smallest.  \n  \nSince one's quadrant depends more on one's personality than the nature of the\nrules, most people would occupy the same quadrant even if they'd grown up in a\nquite different society.  \n  \nPrinceton professor Robert George recently wrote:\n\n> I sometimes ask students what their position on slavery would have been had\n> they been white and living in the South before abolition. Guess what? They\n> all would have been abolitionists! They all would have bravely spoken out\n> against slavery, and worked tirelessly against it.\n\nHe's too polite to say so, but of course they wouldn't. And indeed, our\ndefault assumption should not merely be that his students would, on average,\nhave behaved the same way people did at the time, but that the ones who are\naggressively conventional-minded today would have been aggressively\nconventional-minded then too. In other words, that they'd not only not have\nfought against slavery, but that they'd have been among its staunchest\ndefenders.  \n  \nI'm biased, I admit, but it seems to me that aggressively conventional-minded\npeople are responsible for a disproportionate amount of the trouble in the\nworld, and that a lot of the customs we've evolved since the Enlightenment\nhave been designed to protect the rest of us from them. In particular, the\nretirement of the concept of heresy and its replacement by the principle of\nfreely debating all sorts of different ideas, even ones that are currently\nconsidered unacceptable, without any punishment for those who try them out to\nsee if they work. [2]  \n  \nWhy do the independent-minded need to be protected, though? Because they have\nall the new ideas. To be a successful scientist, for example, it's not enough\njust to be right. You have to be right when everyone else is wrong.\nConventional-minded people can't do that. For similar reasons, all successful\nstartup CEOs are not merely independent-minded, but aggressively so. So it's\nno coincidence that societies prosper only to the extent that they have\ncustoms for keeping the conventional-minded at bay. [3]  \n  \nIn the last few years, many of us have noticed that the customs protecting\nfree inquiry have been weakened. Some say we're overreacting \u0097 that they\nhaven't been weakened very much, or that they've been weakened in the service\nof a greater good. The latter I'll dispose of immediately. When the\nconventional-minded get the upper hand, they always say it's in the service of\na greater good. It just happens to be a different, incompatible greater good\neach time.  \n  \nAs for the former worry, that the independent-minded are being oversensitive,\nand that free inquiry hasn't been shut down that much, you can't judge that\nunless you are yourself independent-minded. You can't know how much of the\nspace of ideas is being lopped off unless you have them, and only the\nindependent-minded have the ones at the edges. Precisely because of this, they\ntend to be very sensitive to changes in how freely one can explore ideas.\nThey're the canaries in this coalmine.  \n  \nThe conventional-minded say, as they always do, that they don't want to shut\ndown the discussion of all ideas, just the bad ones.  \n  \nYou'd think it would be obvious just from that sentence what a dangerous game\nthey're playing. But I'll spell it out. There are two reasons why we need to\nbe able to discuss even \"bad\" ideas.  \n  \nThe first is that any process for deciding which ideas to ban is bound to make\nmistakes. All the more so because no one intelligent wants to undertake that\nkind of work, so it ends up being done by the stupid. And when a process makes\na lot of mistakes, you need to leave a margin for error. Which in this case\nmeans you need to ban fewer ideas than you'd like to. But that's hard for the\naggressively conventional-minded to do, partly because they enjoy seeing\npeople punished, as they have since they were children, and partly because\nthey compete with one another. Enforcers of orthodoxy can't allow a borderline\nidea to exist, because that gives other enforcers an opportunity to one-up\nthem in the moral purity department, and perhaps even to turn enforcer upon\nthem. So instead of getting the margin for error we need, we get the opposite:\na race to the bottom in which any idea that seems at all bannable ends up\nbeing banned. [4]  \n  \nThe second reason it's dangerous to ban the discussion of ideas is that ideas\nare more closely related than they look. Which means if you restrict the\ndiscussion of some topics, it doesn't only affect those topics. The\nrestrictions propagate back into any topic that yields implications in the\nforbidden ones. And that is not an edge case. The best ideas do exactly that:\nthey have consequences in fields far removed from their origins. Having ideas\nin a world where some ideas are banned is like playing soccer on a pitch that\nhas a minefield in one corner. You don't just play the same game you would\nhave, but on a different shaped pitch. You play a much more subdued game even\non the ground that's safe.  \n  \nIn the past, the way the independent-minded protected themselves was to\ncongregate in a handful of places \u0097 first in courts, and later in universities\n\u0097 where they could to some extent make their own rules. Places where people\nwork with ideas tend to have customs protecting free inquiry, for the same\nreason wafer fabs have powerful air filters, or recording studios good sound\ninsulation. For the last couple centuries at least, when the aggressively\nconventional-minded were on the rampage for whatever reason, universities were\nthe safest places to be.  \n  \nThat may not work this time though, due to the unfortunate fact that the\nlatest wave of intolerance began in universities. It began in the mid 1980s,\nand by 2000 seemed to have died down, but it has recently flared up again with\nthe arrival of social media. This seems, unfortunately, to have been an own\ngoal by Silicon Valley. Though the people who run Silicon Valley are almost\nall independent-minded, they've handed the aggressively conventional-minded a\ntool such as they could only have dreamed of.  \n  \nOn the other hand, perhaps the decline in the spirit of free inquiry within\nuniversities is as much the symptom of the departure of the independent-minded\nas the cause. People who would have become professors 50 years ago have other\noptions now. Now they can become quants or start startups. You have to be\nindependent-minded to succeed at either of those. If these people had been\nprofessors, they'd have put up a stiffer resistance on behalf of academic\nfreedom. So perhaps the picture of the independent-minded fleeing declining\nuniversities is too gloomy. Perhaps the universities are declining because so\nmany have already left. [5]  \n  \nThough I've spent a lot of time thinking about this situation, I can't predict\nhow it plays out. Could some universities reverse the current trend and remain\nplaces where the independent-minded want to congregate? Or will the\nindependent-minded gradually abandon them? I worry a lot about what we might\nlose if that happened.  \n  \nBut I'm hopeful long term. The independent-minded are good at protecting\nthemselves. If existing institutions are compromised, they'll create new ones.\nThat may require some imagination. But imagination is, after all, their\nspecialty.  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] I realize of course that if people's personalities vary in any two ways,\nyou can use them as axes and call the resulting four quadrants personality\ntypes. So what I'm really claiming is that the axes are orthogonal and that\nthere's significant variation in both.  \n  \n[2] The aggressively conventional-minded aren't responsible for all the\ntrouble in the world. Another big source of trouble is the sort of charismatic\nleader who gains power by appealing to them. They become much more dangerous\nwhen such leaders emerge.  \n  \n[3] I never worried about writing things that offended the conventional-minded\nwhen I was running Y Combinator. If YC were a cookie company, I'd have faced a\ndifficult moral choice. Conventional-minded people eat cookies too. But they\ndon't start successful startups. So if I deterred them from applying to YC,\nthe only effect was to save us work reading applications.  \n  \n[4] There has been progress in one area: the punishments for talking about\nbanned ideas are less severe than in the past. There's little danger of being\nkilled, at least in richer countries. The aggressively conventional-minded are\nmostly satisfied with getting people fired.  \n  \n[5] Many professors are independent-minded \u0097 especially in math, the hard\nsciences, and engineering, where you have to be to succeed. But students are\nmore representative of the general population, and thus mostly conventional-\nminded. So when professors and students are in conflict, it's not just a\nconflict between generations but also between different types of people.  \n  \n  \n  \n**Thanks** to Sam Altman, Trevor Blackwell, Nicholas Christakis, Patrick\nCollison, Sam Gichuru, Jessica Livingston, Patrick McKenzie, Geoff Ralston,\nand Harj Taggar for reading drafts of this.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nDecember 2010  \n  \nSomeone we funded is talking to VCs now, and asked me how common it was for a\nstartup's founders to retain control of the board after a series A round. He\nsaid VCs told him this almost never happened.  \n  \nTen years ago that was true. In the past, founders rarely kept control of the\nboard through a series A. The traditional series A board consisted of two\nfounders, two VCs, and one independent member. More recently the recipe is\noften one founder, one VC, and one independent. In either case the founders\nlose their majority.  \n  \nBut not always. Mark Zuckerberg kept control of Facebook's board through the\nseries A and still has it today. Mark Pincus has kept control of Zynga's too.\nBut are these just outliers? How common is it for founders to keep control\nafter an A round? I'd heard of several cases among the companies we've funded,\nbut I wasn't sure how many there were, so I emailed the ycfounders list.  \n  \nThe replies surprised me. In a dozen companies we've funded, the founders\nstill had a majority of the board seats after the series A round.  \n  \nI feel like we're at a tipping point here. A lot of VCs still act as if\nfounders retaining board control after a series A is unheard-of. A lot of them\ntry to make you feel bad if you even ask \u2014 as if you're a noob or a control\nfreak for wanting such a thing. But the founders I heard from aren't noobs or\ncontrol freaks. Or if they are, they are, like Mark Zuckerberg, the kind of\nnoobs and control freaks VCs should be trying to fund more of.  \n  \nFounders retaining control after a series A is clearly heard-of. And barring\nfinancial catastrophe, I think in the coming year it will become the norm.  \n  \nControl of a company is a more complicated matter than simply outvoting other\nparties in board meetings. Investors usually get vetos over certain big\ndecisions, like selling the company, regardless of how many board seats they\nhave. And board votes are rarely split. Matters are decided in the discussion\npreceding the vote, not in the vote itself, which is usually unanimous. But if\nopinion is divided in such discussions, the side that knows it would lose in a\nvote will tend to be less insistent. That's what board control means in\npractice. You don't simply get to do whatever you want; the board still has to\nact in the interest of the shareholders; but if you have a majority of board\nseats, then your opinion about what's in the interest of the shareholders will\ntend to prevail.  \n  \nSo while board control is not total control, it's not imaginary either.\nThere's inevitably a difference in how things feel within the company. Which\nmeans if it becomes the norm for founders to retain board control after a\nseries A, that will change the way things feel in the whole startup world.  \n  \nThe switch to the new norm may be surprisingly fast, because the startups that\ncan retain control tend to be the best ones. They're the ones that set the\ntrends, both for other startups and for VCs.  \n  \nA lot of the reason VCs are harsh when negotiating with startups is that\nthey're embarrassed to go back to their partners looking like they got beaten.\nWhen they sign a termsheet, they want to be able to brag about the good terms\nthey got. A lot of them don't care that much personally about whether founders\nkeep board control. They just don't want to seem like they had to make\nconcessions. Which means if letting the founders keep control stops being\nperceived as a concession, it will rapidly become much more common.  \n  \nLike a lot of changes that have been forced on VCs, this change won't turn out\nto be as big a problem as they might think. VCs will still be able to\nconvince; they just won't be able to compel. And the startups where they have\nto resort to compulsion are not the ones that matter anyway. VCs make most of\ntheir money from a few big hits, and those aren't them.  \n  \nKnowing that founders will keep control of the board may even help VCs pick\nbetter. If they know they can't fire the founders, they'll have to choose\nfounders they can trust. And that's who they should have been choosing all\nalong.  \n  \n  \n  \n  \n  \n**Thanks** to Sam Altman, John Bautista, Trevor Blackwell, Paul Buchheit,\nBrian Chesky, Bill Clerico, Patrick Collison, Adam Goldstein, James\nLindenbaum, Jessica Livingston, and Fred Wilson for reading drafts of this.  \n  \n\nMarch 2009  \n  \nAbout twenty years ago people noticed computers and TV were on a collision\ncourse and started to speculate about what they'd produce when they converged.\nWe now know the answer: computers. It's clear now that even by using the word\n\"convergence\" we were giving TV too much credit. This won't be convergence so\nmuch as replacement. People may still watch things they call \"TV shows,\" but\nthey'll watch them mostly on computers.  \n  \nWhat decided the contest for computers? Four forces, three of which one could\nhave predicted, and one that would have been harder to.  \n  \nOne predictable cause of victory is that the Internet is an open platform.\nAnyone can build whatever they want on it, and the market picks the winners.\nSo innovation happens at hacker speeds instead of big company speeds.  \n  \nThe second is Moore's Law, which has worked its usual magic on Internet\nbandwidth. [1]  \n  \nThe third reason computers won is piracy. Users prefer it not just because\nit's free, but because it's more convenient. Bittorrent and YouTube have\nalready trained a new generation of viewers that the place to watch shows is\non a computer screen. [2]  \n  \nThe somewhat more surprising force was one specific type of innovation: social\napplications. The average teenage kid has a pretty much infinite capacity for\ntalking to their friends. But they can't physically be with them all the time.\nWhen I was in high school the solution was the telephone. Now it's social\nnetworks, multiplayer games, and various messaging applications. The way you\nreach them all is through a computer. [3] Which means every teenage kid (a)\nwants a computer with an Internet connection, (b) has an incentive to figure\nout how to use it, and (c) spends countless hours in front of it.  \n  \nThis was the most powerful force of all. This was what made everyone want\ncomputers. Nerds got computers because they liked them. Then gamers got them\nto play games on. But it was connecting to other people that got everyone\nelse: that's what made even grandmas and 14 year old girls want computers.  \n  \nAfter decades of running an IV drip right into their audience, people in the\nentertainment business had understandably come to think of them as rather\npassive. They thought they'd be able to dictate the way shows reached\naudiences. But they underestimated the force of their desire to connect with\none another.  \n  \nFacebook killed TV. That is wildly oversimplified, of course, but probably as\nclose to the truth as you can get in three words.  \n  \n___  \n  \nThe TV networks already seem, grudgingly, to see where things are going, and\nhave responded by putting their stuff, grudgingly, online. But they're still\ndragging their heels. They still seem to wish people would watch shows on TV\ninstead, just as newspapers that put their stories online still seem to wish\npeople would wait till the next morning and read them printed on paper. They\nshould both just face the fact that the Internet is the primary medium.  \n  \nThey'd be in a better position if they'd done that earlier. When a new medium\narises that's powerful enough to make incumbents nervous, then it's probably\npowerful enough to win, and the best thing they can do is jump in immediately.  \n  \nWhether they like it or not, big changes are coming, because the Internet\ndissolves the two cornerstones of broadcast media: synchronicity and locality.\nOn the Internet, you don't have to send everyone the same signal, and you\ndon't have to send it to them from a local source. People will watch what they\nwant when they want it, and group themselves according to whatever shared\ninterest they feel most strongly. Maybe their strongest shared interest will\nbe their physical location, but I'm guessing not. Which means local TV is\nprobably dead. It was an artifact of limitations imposed by old technology. If\nsomeone were creating an Internet-based TV company from scratch now, they\nmight have some plan for shows aimed at specific regions, but it wouldn't be a\ntop priority.  \n  \nSynchronicity and locality are tied together. TV network affiliates care\nwhat's on at 10 because that delivers viewers for local news at 11. This\nconnection adds more brittleness than strength, however: people don't watch\nwhat's on at 10 because they want to watch the news afterward.  \n  \nTV networks will fight these trends, because they don't have sufficient\nflexibility to adapt to them. They're hemmed in by local affiliates in much\nthe same way car companies are hemmed in by dealers and unions. Inevitably,\nthe people running the networks will take the easy route and try to keep the\nold model running for a couple more years, just as the record labels have\ndone.  \n  \nA recent article in the _Wall Street Journal_ described how TV networks were\ntrying to add more live shows, partly as a way to make viewers watch TV\nsynchronously instead of watching recorded shows when it suited them. Instead\nof delivering what viewers want, they're trying to force them to change their\nhabits to suit the networks' obsolete business model. That never works unless\nyou have a monopoly or cartel to enforce it, and even then it only works\ntemporarily.  \n  \nThe other reason networks like live shows is that they're cheaper to produce.\nThere they have the right idea, but they haven't followed it to its\nconclusion. Live content can be way cheaper than networks realize, and the way\nto take advantage of dramatic decreases in cost is to [increase\nvolume](http://justin.tv). The networks are prevented from seeing this whole\nline of reasoning because they still think of themselves as being in the\nbroadcast business\u2014as sending one signal to everyone. [4]  \n  \n___  \n  \n[Now](badeconomy.html) would be a good time to start any company that competes\nwith TV networks. That's what a lot of Internet startups are, though they may\nnot have had this as an explicit goal. People only have so many leisure hours\na day, and TV is premised on such long sessions (unlike Google, which prides\nitself on sending users on their way quickly) that anything that takes up\ntheir time is competing with it. But in addition to such indirect competitors,\nI think TV companies will increasingly face direct ones.  \n  \nEven in cable TV, the long tail was lopped off prematurely by the threshold\nyou had to get over to start a new channel. It will be longer on the Internet,\nand there will be more mobility within it. In this new world, the existing\nplayers will only have the advantages any big company has in its market.  \n  \nThat will change the balance of power between the networks and the people who\nproduce shows. The networks used to be gatekeepers. They distributed your\nwork, and sold advertising on it. Now the people who produce a show can\ndistribute it themselves. The main value networks supply now is ad sales.\nWhich will tend to put them in the position of service providers rather than\npublishers.  \n  \nShows will change even more. On the Internet there's no reason to keep their\ncurrent format, or even the fact that they have a single format. Indeed, the\nmore interesting sort of convergence that's coming is between shows and games.\nBut on the question of what sort of entertainment gets distributed on the\nInternet in 20 years, I wouldn't dare to make any predictions, except that\nthings will change a lot. We'll get whatever the most imaginative people can\ncook up. That's why the Internet won.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] Thanks to Trevor Blackwell for this point. He adds: \"I remember the eyes\nof phone companies gleaming in the early 90s when they talked about\nconvergence. They thought most programming would be on demand, and they would\nimplement it and make a lot of money. It didn't work out. They assumed that\ntheir local network infrastructure would be critical to do video on-demand,\nbecause you couldn't possibly stream it from a few data centers over the\ninternet. At the time (1992) the entire cross-country Internet bandwidth\nwasn't enough for one video stream. But wide-area bandwidth increased more\nthan they expected and they were beaten by iTunes and Hulu.\"  \n  \n[2] Copyright owners tend to focus on the aspect they see of piracy, which is\nthe lost revenue. They therefore think what drives users to do it is the\ndesire to get something for free. But iTunes shows that people will pay for\nstuff online, if you make it easy. A significant component of piracy is simply\nthat it offers a better user experience.  \n  \n[3] Or a phone that is actually a computer. I'm not making any predictions\nabout the size of the device that will replace TV, just that it will have a\nbrowser and get data via the Internet.  \n  \n[4] Emmett Shear writes: \"I'd argue the long tail for sports may be even\nlarger than the long tail for other kinds of content. Anyone can broadcast a\nhigh school football game that will be interesting to 10,000 people or so,\neven if the quality of production is not so good.\"  \n  \n**Thanks** to Sam Altman, Trevor Blackwell, Nancy Cook, Michael Seibel, Emmett\nShear, and Fred Wilson for reading drafts of this.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nAugust 2013  \n  \nWhen people hurt themselves lifting heavy things, it's usually because they\ntry to lift with their back. The right way to lift heavy things is to let your\nlegs do the work. Inexperienced founders make the same mistake when trying to\nconvince investors. They try to convince with their pitch. Most would be\nbetter off if they let their startup do the work \u2014 if they started by\nunderstanding why their startup is worth investing in, then simply explained\nthis well to investors.  \n  \nInvestors are looking for startups that will be very successful. But that test\nis not as simple as it sounds. In startups, as in a lot of other domains, the\ndistribution of outcomes follows a power law, but in startups the curve is\nstartlingly steep. The big successes are so big they [dwarf](swan.html) the\nrest. And since there are only a handful each year (the conventional wisdom is\n15), investors treat \"big success\" as if it were binary. Most are interested\nin you if you seem like you have a chance, however small, of being one of the\n15 big successes, and otherwise not. [1]  \n  \n(There are a handful of angels who'd be interested in a company with a high\nprobability of being moderately successful. But angel investors like big\nsuccesses too.)  \n  \nHow do you seem like you'll be one of the big successes? You need three\nthings: formidable founders, a promising market, and (usually) some evidence\nof success so far.  \n  \n**Formidable**  \n  \nThe most important ingredient is formidable founders. Most investors decide in\nthe first few minutes whether you seem like a winner or a loser, and once\ntheir opinion is set it's hard to change. [2] Every startup has reasons both\nto invest and not to invest. If investors think you're a winner they focus on\nthe former, and if not they focus on the latter. For example, it might be a\nrich market, but with a slow sales cycle. If investors are impressed with you\nas founders, they say they want to invest because it's a rich market, and if\nnot, they say they can't invest because of the slow sales cycle.  \n  \nThey're not necessarily trying to mislead you. Most investors are genuinely\nunclear in their own minds why they like or dislike startups. If you seem like\na winner, they'll like your idea more. But don't be too smug about this\nweakness of theirs, because you have it too; almost everyone does.  \n  \nThere is a role for ideas of course. They're fuel for the fire that starts\nwith liking the founders. Once investors like you, you'll see them reaching\nfor ideas: they'll be saying \"yes, and you could also do x.\" (Whereas when\nthey don't like you, they'll be saying \"but what about y?\")  \n  \nBut the foundation of convincing investors is to seem formidable, and since\nthis isn't a word most people use in conversation much, I should explain what\nit means. A formidable person is one who seems like they'll get what they\nwant, regardless of whatever obstacles are in the way. Formidable is close to\nconfident, except that someone could be confident and mistaken. Formidable is\nroughly justifiably confident.  \n  \nThere are a handful of people who are really good at seeming formidable \u2014 some\nbecause they actually are very formidable and just let it show, and others\nbecause they are more or less con artists. [3] But most founders, including\nmany who will go on to start very successful companies, are not that good at\nseeming formidable the first time they try fundraising. What should they do?\n[4]  \n  \nWhat they should not do is try to imitate the swagger of more experienced\nfounders. Investors are not always that good at judging technology, but\nthey're good at judging confidence. If you try to act like something you're\nnot, you'll just end up in an uncanny valley. You'll depart from sincere, but\nnever arrive at convincing.  \n  \n**Truth**  \n  \nThe way to seem most formidable as an inexperienced founder is to stick to the\ntruth. How formidable you seem isn't a constant. It varies depending on what\nyou're saying. Most people can seem confident when they're saying \"one plus\none is two,\" because they know it's true. The most diffident person would be\npuzzled and even slightly contemptuous if they told a VC \"one plus one is two\"\nand the VC reacted with skepticism. The magic ability of people who are good\nat seeming formidable is that they can do this with the sentence \"we're going\nto make a billion dollars a year.\" But you can do the same, if not with that\nsentence with some fairly impressive ones, so long as you convince yourself\nfirst.  \n  \nThat's the secret. Convince yourself that your startup is worth investing in,\nand then when you explain this to investors they'll believe you. And by\nconvince yourself, I don't mean play mind games with yourself to boost your\nconfidence. I mean truly evaluate whether your startup is worth investing in.\nIf it isn't, don't try to raise money. [5] But if it is, you'll be telling the\ntruth when you tell investors it's worth investing in, and they'll sense that.\nYou don't have to be a smooth presenter if you understand something well and\ntell the truth about it.  \n  \nTo evaluate whether your startup is worth investing in, you have to be a\ndomain expert. If you're not a domain expert, you can be as convinced as you\nlike about your idea, and it will seem to investors no more than an instance\nof the Dunning-Kruger effect. Which in fact it will usually be. And investors\ncan tell fairly quickly whether you're a domain expert by how well you answer\ntheir questions. Know everything about your market. [6]  \n  \nWhy do founders persist in trying to convince investors of things they're not\nconvinced of themselves? Partly because we've all been trained to.  \n  \nWhen my friends Robert Morris and Trevor Blackwell were in grad school, one of\ntheir fellow students was on the receiving end of a question from their\nfaculty advisor that we still quote today. When the unfortunate fellow got to\nhis last slide, the professor burst out:\n\n> Which one of these conclusions do you actually believe?\n\nOne of the artifacts of the way schools are organized is that we all get\ntrained to talk even when we have nothing to say. If you have a ten page paper\ndue, then ten pages you must write, even if you only have one page of ideas.\nEven if you have no ideas. You have to produce something. And all too many\nstartups go into fundraising in the same spirit. When they think it's time to\nraise money, they try gamely to make the best case they can for their startup.\nMost never think of pausing beforehand to ask whether what they're saying is\nactually convincing, because they've all been trained to treat the need to\npresent as a given \u2014 as an area of fixed size, over which however much truth\nthey have must needs be spread, however thinly.  \n  \nThe time to raise money is not when you need it, or when you reach some\nartificial deadline like a Demo Day. It's when you can convince investors, and\nnot before. [7]  \n  \nAnd unless you're a good con artist, you'll never convince investors if you're\nnot convinced yourself. They're far better at detecting bullshit than you are\nat producing it, even if you're producing it unknowingly. If you try to\nconvince investors before you've convinced yourself, you'll be wasting both\nyour time.  \n  \nBut pausing first to convince yourself will do more than save you from wasting\nyour time. It will force you to organize your thoughts. To convince yourself\nthat your startup is worth investing in, you'll have to figure out why it's\nworth investing in. And if you can do that you'll end up with more than added\nconfidence. You'll also have a provisional roadmap of how to succeed.  \n  \n**Market**  \n  \nNotice I've been careful to talk about whether a startup is worth investing\nin, rather than whether it's going to succeed. No one knows whether a startup\nis going to succeed. And it's a good thing for investors that this is so,\nbecause if you could know in advance whether a startup would succeed, the\nstock price would already be the future price, and there would be no room for\ninvestors to make money. Startup investors know that every investment is a\nbet, and against pretty long odds.  \n  \nSo to prove you're worth investing in, you don't have to prove you're going to\nsucceed, just that you're a sufficiently good bet. What makes a startup a\nsufficiently good bet? In addition to formidable founders, you need a\nplausible path to owning a big piece of a big market. Founders think of\nstartups as ideas, but investors think of them as markets. If there are x\nnumber of customers who'd pay an average of $y per year for what you're\nmaking, then the total addressable market, or TAM, of your company is $xy.\nInvestors don't expect you to collect all that money, but it's an upper bound\non how big you can get.  \n  \nYour target market has to be big, and it also has to be capturable by you. But\nthe market doesn't have to be big yet, nor do you necessarily have to be in it\nyet. Indeed, it's often better to start in a [small](ds.html) market that will\neither turn into a big one or from which you can move into a big one. There\njust has to be some plausible sequence of hops that leads to dominating a big\nmarket a few years down the line.  \n  \nThe standard of plausibility varies dramatically depending on the age of the\nstartup. A three month old company at Demo Day only needs to be a promising\nexperiment that's worth funding to see how it turns out. Whereas a two year\nold company raising a series A round needs to be able to show the experiment\nworked. [8]  \n  \nBut every company that gets really big is \"lucky\" in the sense that their\ngrowth is due mostly to some external wave they're riding, so to make a\nconvincing case for becoming huge, you have to identify some specific trend\nyou'll benefit from. Usually you can find this by asking \"why now?\" If this is\nsuch a great idea, why hasn't someone else already done it? Ideally the answer\nis that it only recently became a good idea, because something changed, and no\none else has noticed yet.  \n  \nMicrosoft for example was not going to grow huge selling Basic interpreters.\nBut by starting there they were perfectly poised to expand up the stack of\nmicrocomputer software as microcomputers grew powerful enough to support one.\nAnd microcomputers turned out to be a really huge wave, bigger than even the\nmost optimistic observers would have predicted in 1975.  \n  \nBut while Microsoft did really well and there is thus a temptation to think\nthey would have seemed a great bet a few months in, they probably didn't.\nGood, but not great. No company, however successful, ever looks more than a\npretty good bet a few months in. Microcomputers turned out to be a big deal,\nand Microsoft both executed well and got lucky. But it was by no means obvious\nthat this was how things would play out. Plenty of companies seem as good a\nbet a few months in. I don't know about startups in general, but at least half\nthe startups we fund could make as good a case as Microsoft could have for\nbeing on a path to dominating a large market. And who can reasonably expect\nmore of a startup than that?  \n  \n**Rejection**  \n  \nIf you can make as good a case as Microsoft could have, will you convince\ninvestors? Not always. A lot of VCs would have rejected Microsoft. [9]\nCertainly some rejected Google. And getting rejected will put you in a\nslightly awkward position, because as you'll see when you start fundraising,\nthe most common question you'll get from investors will be \"who else is\ninvesting?\" What do you say if you've been fundraising for a while and no one\nhas committed yet? [10]  \n  \nThe people who are really good at acting formidable often solve this problem\nby giving investors the impression that while no investors have committed yet,\nseveral are about to. This is arguably a permissible tactic. It's slightly\ndickish of investors to care more about who else is investing than any other\naspect of your startup, and misleading them about how far along you are with\nother investors seems the complementary countermove. It's arguably an instance\nof scamming a scammer. But I don't recommend this approach to most founders,\nbecause most founders wouldn't be able to carry it off. This is the single\nmost common lie told to investors, and you have to be really good at lying to\ntell members of some profession the most common lie they're told.  \n  \nIf you're not a master of negotiation (and perhaps even if you are) the best\nsolution is to tackle the problem head-on, and to explain why investors have\nturned you down and why they're mistaken. If you know you're on the right\ntrack, then you also know why investors were wrong to reject you. Experienced\ninvestors are well aware that the best ideas are also the scariest. They all\nknow about the VCs who rejected Google. If instead of seeming evasive and\nashamed about having been turned down (and thereby implicitly agreeing with\nthe verdict) you talk candidly about what scared investors about you, you'll\nseem more confident, which they like, and you'll probably also do a better job\nof presenting that aspect of your startup. At the very least, that worry will\nnow be out in the open instead of being a gotcha left to be discovered by the\ninvestors you're currently talking to, who will be proud of and thus attached\nto their discovery. [11]  \n  \nThis strategy will work best with the best investors, who are both hard to\nbluff and who already believe most other investors are conventional-minded\ndrones doomed always to miss the big outliers. Raising money is not like\napplying to college, where you can assume that if you can get into MIT, you\ncan also get into Foobar State. Because the best investors are much smarter\nthan the rest, and the best startup ideas look initially like [bad\nideas](startupideas.html), it's not uncommon for a startup to be rejected by\nall the VCs except the best ones. That's what happened to Dropbox. Y\nCombinator started in Boston, and for the first 3 years we ran alternating\nbatches in Boston and Silicon Valley. Because Boston investors were so few and\nso timid, we used to ship Boston batches out for a second Demo Day in Silicon\nValley. Dropbox was part of a Boston batch, which means all those Boston\ninvestors got the first look at Dropbox, and none of them closed the deal. Yet\nanother backup and syncing thing, they all thought. A couple weeks later,\nDropbox raised a series A round from Sequoia. [12]  \n  \n**Different**  \n  \nNot understanding that investors view investments as bets combines with the\nten page paper mentality to prevent founders from even considering the\npossibility of being certain of what they're saying. They think they're trying\nto convince investors of something very uncertain \u2014 that their startup will be\nhuge \u2014 and convincing anyone of something like that must obviously entail some\nwild feat of salesmanship. But in fact when you raise money you're trying to\nconvince investors of something so much less speculative \u2014 whether the company\nhas all the elements of a good bet \u2014 that you can approach the problem in a\nqualitatively different way. You can convince yourself, then convince them.  \n  \nAnd when you convince them, use the same matter-of-fact language you used to\nconvince yourself. You wouldn't use vague, grandiose marketing-speak among\nyourselves. Don't use it with investors either. It not only doesn't work on\nthem, but seems a mark of incompetence. Just be concise. Many investors\nexplicitly use that as a test, reasoning (correctly) that if you can't explain\nyour plans concisely, you don't really understand them. But even investors who\ndon't have a rule about this will be bored and frustrated by unclear\nexplanations. [13]  \n  \nSo here's the recipe for impressing investors when you're not already good at\nseeming formidable:\n\n  1. Make something worth investing in.  \n  \n\n  2. Understand why it's worth investing in.  \n  \n\n  3. Explain that clearly to investors. \n\nIf you're saying something you know is true, you'll seem confident when you're\nsaying it. Conversely, never let pitching draw you into bullshitting. As long\nas you stay on the territory of truth, you're strong. Make the truth good,\nthen just tell it.  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] There's no reason to believe this number is a constant. In fact it's our\nexplicit goal at Y Combinator to increase it, by encouraging people to start\nstartups who otherwise wouldn't have.  \n  \n[2] Or more precisely, investors decide whether you're a loser or possibly a\nwinner. If you seem like a winner, they may then, depending on how much you're\nraising, have several more meetings with you to test whether that initial\nimpression holds up.  \n  \nBut if you seem like a loser they're done, at least for the next year or so.\nAnd when they decide you're a loser they usually decide in way less than the\n50 minutes they may have allotted for the first meeting. Which explains the\nastonished stories one always hears about VC inattentiveness. How could these\npeople make investment decisions well when they're checking their messages\nduring startups' presentations? The solution to that mystery is that they've\nalready made the decision.  \n  \n[3] The two are not mutually exclusive. There are people who are both\ngenuinely formidable, and also really good at acting that way.  \n  \n[4] How can people who will go on to create giant companies not seem\nformidable early on? I think the main reason is that their experience so far\nhas trained them to keep their wings folded, as it were. Family, school, and\njobs encourage cooperation, not conquest. And it's just as well they do,\nbecause even being Genghis Khan is probably 99% cooperation. But the result is\nthat most people emerge from the tube of their upbringing in their early\ntwenties compressed into the shape of the tube. Some find they have wings and\nstart to spread them. But this takes a few years. In the beginning even they\ndon't know yet what they're capable of.  \n  \n[5] In fact, change what you're doing. You're investing your own time in your\nstartup. If you're not convinced that what you're working on is a sufficiently\ngood bet, why are you even working on that?  \n  \n[6] When investors ask you a question you don't know the answer to, the best\nresponse is neither to bluff nor give up, but instead to explain how you'd\nfigure out the answer. If you can work out a preliminary answer on the spot,\nso much the better, but explain that's what you're doing.  \n  \n[7] At YC we try to ensure startups are ready to raise money on Demo Day by\nencouraging them to ignore investors and instead focus on their companies till\nabout a week before. That way most reach the stage where they're sufficiently\nconvincing well before Demo Day. But not all do, so we also give any startup\nthat wants to the option of deferring to a later Demo Day.  \n  \n[8] Founders are often surprised by how much harder it is to raise the next\nround. There is a qualitative difference in investors' attitudes. It's like\nthe difference between being judged as a kid and as an adult. The next time\nyou raise money, it's not enough to be promising. You have to be delivering\nresults.  \n  \nSo although it works well to show growth graphs at either stage, investors\ntreat them differently. At three months, a growth graph is mostly evidence\nthat the founders are effective. At two years, it has to be evidence of a\npromising market and a company tuned to exploit it.  \n  \n[9] By this I mean that if the present day equivalent of the 3 month old\nMicrosoft presented at a Demo Day, there would be investors who turned them\ndown. Microsoft itself didn't raise outside money, and indeed the venture\nbusiness barely existed when they got started in 1975.  \n  \n[10] The best investors rarely care who else is investing, but mediocre\ninvestors almost all do. So you can use this question as a test of investor\nquality.  \n  \n[11] To use this technique, you'll have to find out why investors who rejected\nyou did so, or at least what they claim was the reason. That may require\nasking, because investors don't always volunteer a lot of detail. Make it\nclear when you ask that you're not trying to dispute their decision \u2014 just\nthat if there is some weakness in your plans, you need to know about it. You\nwon't always get a real reason out of them, but you should at least try.  \n  \n[12] Dropbox wasn't rejected by all the East Coast VCs. There was one firm\nthat wanted to invest but tried to lowball them.  \n  \n[13] Alfred Lin points out that it's doubly important for the explanation of a\nstartup to be clear and concise, because it has to convince at one remove: it\nhas to work not just on the partner you talk to, but when that partner re-\ntells it to colleagues.  \n  \nWe consciously optimize for this at YC. When we work with founders create a\nDemo Day pitch, the last step is to imagine how an investor would sell it to\ncolleagues.  \n  \n**Thanks** to Marc Andreessen, Sam Altman, Patrick Collison, Ron Conway, Chris\nDixon, Alfred Lin, Ben Horowitz, Steve Huffman, Jessica Livingston, Greg\nMcadoo, Andrew Mason, Geoff Ralston, Yuri Sagalov, Emmett Shear, Rajat Suri,\nGarry Tan, Albert Wenger, Fred Wilson, and Qasar Younis for reading drafts of\nthis.  \n  \n  \n  \n\nApril 2020  \n  \nI recently saw a [_video_](https://www.youtube.com/watch?v=NAh4uS4f78o) of TV\njournalists and politicians confidently saying that the coronavirus would be\nno worse than the flu. What struck me about it was not just how mistaken they\nseemed, but how daring. How could they feel safe saying such things?  \n  \nThe answer, I realized, is that they didn't think they could get caught. They\ndidn't realize there was any danger in making false predictions. These people\nconstantly make false predictions, and get away with it, because the things\nthey make predictions about either have mushy enough outcomes that they can\nbluster their way out of trouble, or happen so far in the future that few\nremember what they said.  \n  \nAn epidemic is different. It falsifies your predictions rapidly and\nunequivocally.  \n  \nBut epidemics are rare enough that these people clearly didn't realize this\nwas even a possibility. Instead they just continued to use their ordinary\nm.o., which, as the epidemic has made clear, is to talk confidently about\nthings they don't understand.  \n  \nAn event like this is thus a uniquely powerful way of taking people's measure.\nAs Warren Buffett said, \"It's only when the tide goes out that you learn who's\nbeen swimming naked.\" And the tide has just gone out like never before.  \n  \nNow that we've seen the results, let's remember what we saw, because this is\nthe most accurate test of credibility we're ever likely to have. I hope.  \n  \n  \n  \n\nDecember 2008  \n  \nA few months ago I read a _New York Times_ article on South Korean cram\nschools that said\n\n> Admission to the right university can make or break an ambitious young South\n> Korean.\n\nA parent added:\n\n> \"In our country, college entrance exams determine 70 to 80 percent of a\n> person's future.\"\n\nIt was striking how old fashioned this sounded. And yet when I was in high\nschool it wouldn't have seemed too far off as a description of the US. Which\nmeans things must have been changing here.  \n  \nThe course of people's lives in the US now seems to be determined less by\ncredentials and more by performance than it was 25 years ago. Where you go to\ncollege still matters, but not like it used to.  \n  \nWhat happened?  \n  \n_____  \n  \nJudging people by their academic credentials was in its time an advance. The\npractice seems to have begun in China, where starting in 587 candidates for\nthe imperial civil service had to take an exam on classical literature. [1] It\nwas also a test of wealth, because the knowledge it tested was so specialized\nthat passing required years of expensive training. But though wealth was a\nnecessary condition for passing, it was not a sufficient one. By the standards\nof the rest of the world in 587, the Chinese system was very enlightened.\nEuropeans didn't introduce formal civil service exams till the nineteenth\ncentury, and even then they seem to have been influenced by the Chinese\nexample.  \n  \nBefore credentials, government positions were obtained mainly by family\ninfluence, if not outright bribery. It was a great step forward to judge\npeople by their performance on a test. But by no means a perfect solution.\nWhen you judge people that way, you tend to get cram schools\u2014which they did in\nMing China and nineteenth century England just as much as in present day South\nKorea.  \n  \nWhat cram schools are, in effect, is leaks in a seal. The use of credentials\nwas an attempt to seal off the direct transmission of power between\ngenerations, and cram schools represent that power finding holes in the seal.\nCram schools turn wealth in one generation into credentials in the next.  \n  \nIt's hard to beat this phenomenon, because the schools adjust to suit whatever\nthe tests measure. When the tests are narrow and predictable, you get cram\nschools on the classic model, like those that prepared candidates for\nSandhurst (the British West Point) or the classes American students take now\nto improve their SAT scores. But as the tests get broader, the schools do too.\nPreparing a candidate for the Chinese imperial civil service exams took years,\nas prep school does today. But the raison d'etre of all these institutions has\nbeen the same: to beat the system. [2]  \n  \n_____  \n  \nHistory suggests that, all other things being equal, a society prospers in\nproportion to its ability to prevent parents from influencing their children's\nsuccess directly. It's a fine thing for parents to help their children\nindirectly\u2014for example, by helping them to become smarter or more disciplined,\nwhich then makes them more successful. The problem comes when parents use\ndirect methods: when they are able to use their own wealth or power as a\nsubstitute for their children's qualities.  \n  \nParents will tend to do this when they can. Parents will die for their kids,\nso it's not surprising to find they'll also push their scruples to the limits\nfor them. Especially if other parents are doing it.  \n  \nSealing off this force has a double advantage. Not only does a society get\n\"the best man for the job,\" but parents' ambitions are diverted from direct\nmethods to indirect ones\u2014to actually trying to raise their kids well.  \n  \nBut we should expect it to be very hard to contain parents' efforts to obtain\nan unfair advantage for their kids. We're dealing with one of the most\npowerful forces in human nature. We shouldn't expect naive solutions to work,\nany more than we'd expect naive solutions for keeping heroin out of a prison\nto work.  \n  \n_____  \n  \nThe obvious way to solve the problem is to make credentials better. If the\ntests a society uses are currently hackable, we can study the way people beat\nthem and try to plug the holes. You can use the cram schools to show you where\nmost of the holes are. They also tell you when you're succeeding in fixing\nthem: when cram schools become less popular.  \n  \nA more general solution would be to push for increased transparency,\nespecially at critical social bottlenecks like college admissions. In the US\nthis process still shows many outward signs of corruption. For example, legacy\nadmissions. The official story is that legacy status doesn't carry much\nweight, because all it does is break ties: applicants are bucketed by ability,\nand legacy status is only used to decide between the applicants in the bucket\nthat straddles the cutoff. But what this means is that a university can make\nlegacy status have as much or as little weight as they want, by adjusting the\nsize of the bucket that straddles the cutoff.  \n  \nBy gradually chipping away at the abuse of credentials, you could probably\nmake them more airtight. But what a long fight it would be. Especially when\nthe institutions administering the tests don't really want them to be\nairtight.  \n  \n_____  \n  \nFortunately there's a better way to prevent the direct transmission of power\nbetween generations. Instead of trying to make credentials harder to hack, we\ncan also make them matter less.  \n  \nLet's think about what credentials are for. What they are, functionally, is a\nway of predicting performance. If you could measure actual performance, you\nwouldn't need them.  \n  \nSo why did they even evolve? Why haven't we just been measuring actual\nperformance? Think about where credentialism first appeared: in selecting\ncandidates for large organizations. Individual performance is hard to measure\nin large organizations, and the harder performance is to measure, the more\nimportant it is to predict it. If an organization could immediately and\ncheaply measure the performance of recruits, they wouldn't need to examine\ntheir credentials. They could take everyone and keep just the good ones.  \n  \nLarge organizations can't do this. But a bunch of small organizations in a\nmarket can come close. A market takes every organization and keeps just the\ngood ones. As organizations get smaller, this approaches taking every person\nand keeping just the good ones. So all other things being equal, a society\nconsisting of more, smaller organizations will care less about credentials.  \n  \n_____  \n  \nThat's what's been happening in the US. That's why those quotes from Korea\nsound so old fashioned. They're talking about an economy like America's a few\ndecades ago, dominated by a few big companies. The route for the ambitious in\nthat sort of environment is to join one and climb to the top. Credentials\nmatter a lot then. In the culture of a large organization, an elite pedigree\nbecomes a self-fulfilling prophecy.  \n  \nThis doesn't work in small companies. Even if your colleagues were impressed\nby your credentials, they'd soon be parted from you if your performance didn't\nmatch, because the company would go out of business and the people would be\ndispersed.  \n  \nIn a world of small companies, performance is all anyone cares about. People\nhiring for a startup don't care whether you've even graduated from college,\nlet alone which one. All they care about is what you can do. Which is in fact\nall that should matter, even in a large organization. The reason credentials\nhave such prestige is that for so long the large organizations in a society\ntended to be the most powerful. But in the US at least they don't have the\nmonopoly on power they once did, precisely because they can't measure (and\nthus reward) individual performance. Why spend twenty years climbing the\ncorporate ladder when you can get rewarded directly by the market?  \n  \nI realize I see a more exaggerated version of the change than most other\npeople. As a partner at an early stage venture funding firm, I'm like a\njumpmaster shoving people out of the old world of credentials and into the new\none of performance. I'm an agent of the change I'm seeing. But I don't think\nI'm imagining it. It was not so easy 25 years ago for an ambitious person to\nchoose to be judged directly by the market. You had to go through bosses, and\nthey were influenced by where you'd been to college.  \n  \n_____  \n  \nWhat made it possible for small organizations to succeed in America? I'm still\nnot entirely sure. Startups are certainly a large part of it. Small\norganizations can develop new ideas faster than large ones, and new ideas are\nincreasingly valuable.  \n  \nBut I don't think startups account for all the shift from credentials to\nmeasurement. My friend Julian Weber told me that when he went to work for a\nNew York law firm in the 1950s they paid associates far less than firms do\ntoday. Law firms then made no pretense of paying people according to the value\nof the work they'd done. Pay was based on seniority. The younger employees\nwere paying their dues. They'd be rewarded later.  \n  \nThe same principle prevailed at industrial companies. When my father was\nworking at Westinghouse in the 1970s, he had people working for him who made\nmore than he did, because they'd been there longer.  \n  \nNow companies increasingly have to pay employees market price for the work\nthey do. One reason is that employees no longer trust companies to deliver\n[deferred rewards](ladder.html): why work to accumulate deferred rewards at a\ncompany that might go bankrupt, or be taken over and have all its implicit\nobligations wiped out? The other is that some companies broke ranks and\nstarted to pay young employees large amounts. This was particularly true in\nconsulting, law, and finance, where it led to the phenomenon of yuppies. The\nword is rarely used today because it's no longer surprising to see a 25 year\nold with money, but in 1985 the sight of a 25 year old _professional_ able to\nafford a new BMW was so novel that it called forth a new word.  \n  \nThe classic yuppie worked for a small organization. He didn't work for General\nWidget, but for the law firm that handled General Widget's acquisitions or the\ninvestment bank that floated their bond issues.  \n  \nStartups and yuppies entered the American conceptual vocabulary roughly\nsimultaneously in the late 1970s and early 1980s. I don't think there was a\ncausal connection. Startups happened because technology started to change so\nfast that big companies could no longer keep a lid on the smaller ones. I\ndon't think the rise of yuppies was inspired by it; it seems more as if there\nwas a change in the social conventions (and perhaps the laws) governing the\nway big companies worked. But the two phenomena rapidly fused to produce a\nprinciple that now seems obvious: paying energetic young people market rates,\nand getting correspondingly high performance from them.  \n  \nAt about the same time the US economy rocketed out of the doldrums that had\nafflicted it for most of the 1970s. Was there a connection? I don't know\nenough to say, but it felt like it at the time. There was a lot of energy\nreleased.  \n  \n_____  \n  \nCountries worried about their competitiveness are right to be concerned about\nthe number of startups started within them. But they would do even better to\nexamine the underlying principle. Do they let energetic young people get paid\nmarket rate for the work they do? The young are the test, because when people\naren't rewarded according to performance, they're invariably rewarded\naccording to seniority instead.  \n  \nAll it takes is a few beachheads in your economy that pay for performance.\nMeasurement spreads like heat. If one part of a society is better at\nmeasurement than others, it tends to push the others to do better. If people\nwho are young but smart and driven can make more by starting their own\ncompanies than by working for existing ones, the existing companies are forced\nto pay more to keep them. So market rates gradually permeate every\norganization, even the government. [3]  \n  \nThe measurement of performance will tend to push even the organizations\nissuing credentials into line. When we were kids I used to annoy my sister by\nordering her to do things I knew she was about to do anyway. As credentials\nare superseded by performance, a similar role is the best former gatekeepers\ncan hope for. Once credential granting institutions are no longer in the self-\nfullfilling prophecy business, they'll have to work harder to predict the\nfuture.  \n  \n_____  \n  \nCredentials are a step beyond bribery and influence. But they're not the final\nstep. There's an even better way to block the transmission of power between\ngenerations: to encourage the trend toward an economy made of more, smaller\nunits. Then you can measure what credentials merely predict.  \n  \nNo one likes the transmission of power between generations\u2014not the left or the\nright. But the market forces favored by the right turn out to be a better way\nof preventing it than the credentials the left are forced to fall back on.  \n  \nThe era of credentials began to end when the power of large organizations\n[peaked](highres.html) in the late twentieth century. Now we seem to be\nentering a new era based on measurement. The reason the new model has advanced\nso rapidly is that it works so much better. It shows no sign of slowing.  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] Miyazaki, Ichisada (Conrad Schirokauer trans.), _China's Examination Hell:\nThe Civil Service Examinations of Imperial China,_ Yale University Press,\n1981.  \n  \nScribes in ancient Egypt took exams, but they were more the type of\nproficiency test any apprentice might have to pass.  \n  \n[2] When I say the raison d'etre of prep schools is to get kids into better\ncolleges, I mean this in the narrowest sense. I'm not saying that's all prep\nschools do, just that if they had zero effect on college admissions there\nwould be far less demand for them.  \n  \n[3] Progressive tax rates will tend to damp this effect, however, by\ndecreasing the difference between good and bad measurers.  \n  \n**Thanks** to Trevor Blackwell, Sarah Harlin, Jessica Livingston, and David\nSloo for reading drafts of this.  \n  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nSeptember 2009  \n  \nLike all investors, we spend a lot of time trying to learn how to predict\nwhich startups will succeed. We probably spend more time thinking about it\nthan most, because we invest the earliest. Prediction is usually all we have\nto rely on.  \n  \nWe learned quickly that the most important predictor of success is\ndetermination. At first we thought it might be intelligence. Everyone likes to\nbelieve that's what makes startups succeed. It makes a better story that a\ncompany won because its founders were so smart. The PR people and reporters\nwho spread such stories probably believe them themselves. But while it\ncertainly helps to be smart, it's not the deciding factor. There are plenty of\npeople as smart as Bill Gates who achieve nothing.  \n  \nIn most domains, talent is overrated compared to determination\u2014partly because\nit makes a better story, partly because it gives onlookers an excuse for being\nlazy, and partly because after a while determination starts to look like\ntalent.  \n  \nI can't think of any field in which determination is overrated, but the\nrelative importance of determination and talent probably do vary somewhat.\nTalent probably matters more in types of work that are purer, in the sense\nthat one is solving mostly a single type of problem instead of many different\ntypes. I suspect determination would not take you as far in math as it would\nin, say, organized crime.  \n  \nI don't mean to suggest by this comparison that types of work that depend more\non talent are always more admirable. Most people would agree it's more\nadmirable to be good at math than memorizing long strings of digits, even\nthough the latter depends more on natural ability.  \n  \nPerhaps one reason people believe startup founders win by being smarter is\nthat intelligence does matter more in technology startups than it used to in\nearlier types of companies. You probably do need to be a bit smarter to\ndominate Internet search than you had to be to dominate railroads or hotels or\nnewspapers. And that's probably an ongoing trend. But even in the highest of\nhigh tech industries, success still depends more on determination than brains.  \n  \nIf determination is so important, can we isolate its components? Are some more\nimportant than others? Are there some you can cultivate?  \n  \nThe simplest form of determination is sheer willfulness. When you want\nsomething, you must have it, no matter what.  \n  \nA good deal of willfulness must be inborn, because it's common to see families\nwhere one sibling has much more of it than another. Circumstances can alter\nit, but at the high end of the scale, nature seems to be more important than\nnurture. Bad circumstances can break the spirit of a strong-willed person, but\nI don't think there's much you can do to make a weak-willed person stronger-\nwilled.  \n  \nBeing strong-willed is not enough, however. You also have to be hard on\nyourself. Someone who was strong-willed but self-indulgent would not be called\ndetermined. Determination implies your willfulness is balanced by discipline.  \n  \nThat word balance is a significant one. The more willful you are, the more\ndisciplined you have to be. The stronger your will, the less anyone will be\nable to argue with you except yourself. And someone has to argue with you,\nbecause everyone has base impulses, and if you have more will than discipline\nyou'll just give into them and end up on a local maximum like drug addiction.  \n  \nWe can imagine will and discipline as two fingers squeezing a slippery melon\nseed. The harder they squeeze, the further the seed flies, but they must both\nsqueeze equally or the seed spins off sideways.  \n  \nIf this is true it has interesting implications, because discipline can be\ncultivated, and in fact does tend to vary quite a lot in the course of an\nindividual's life. If determination is effectively the product of will and\ndiscipline, then you can become more determined by being more disciplined. [1]  \n  \nAnother consequence of the melon seed model is that the more willful you are,\nthe more dangerous it is to be undisciplined. There seem to be plenty of\nexamples to confirm that. In some very energetic people's lives you see\nsomething like wing flutter, where they alternate between doing great work and\ndoing absolutely nothing. Externally this would look a lot like bipolar\ndisorder.  \n  \nThe melon seed model is inaccurate in at least one respect, however: it's\nstatic. In fact the dangers of indiscipline increase with temptation. Which\nmeans, interestingly, that determination tends to erode itself. If you're\nsufficiently determined to achieve great things, this will probably increase\nthe number of temptations around you. Unless you become proportionally more\ndisciplined, willfulness will then get the upper hand, and your achievement\nwill revert to the mean.  \n  \nThat's why Shakespeare's Caesar thought thin men so dangerous. They weren't\ntempted by the minor perquisites of power.  \n  \nThe melon seed model implies it's possible to be too disciplined. Is it? I\nthink there probably are people whose willfulness is crushed down by excessive\ndiscipline, and who would achieve more if they weren't so hard on themselves.\nOne reason the young sometimes succeed where the old fail is that they don't\nrealize how incompetent they are. This lets them do a kind of deficit\nspending. When they first start working on something, they overrate their\nachievements. But that gives them confidence to keep working, and their\nperformance improves. Whereas someone clearer-eyed would see their initial\nincompetence for what it was, and perhaps be discouraged from continuing.  \n  \nThere's one other major component of determination: ambition. If willfulness\nand discipline are what get you to your destination, ambition is how you\nchoose it.  \n  \nI don't know if it's exactly right to say that ambition is a component of\ndetermination, but they're not entirely orthogonal. It would seem a misnomer\nif someone said they were very determined to do something trivially easy.  \n  \nAnd fortunately ambition seems to be quite malleable; there's a lot you can do\nto increase it. Most people don't know how ambitious to be, especially when\nthey're young. They don't know what's hard, or what they're capable of. And\nthis problem is exacerbated by having few peers. Ambitious people are rare, so\nif everyone is mixed together randomly, as they tend to be early in people's\nlives, then the ambitious ones won't have many ambitious peers. When you take\npeople like this and put them together with other ambitious people, they bloom\nlike dying plants given water. Probably most ambitious people are starved for\nthe sort of encouragement they'd get from ambitious peers, whatever their age.\n[2]  \n  \nAchievements also tend to increase your ambition. With each step you gain\nconfidence to stretch further next time.  \n  \nSo here in sum is how determination seems to work: it consists of willfulness\nbalanced with discipline, aimed by ambition. And fortunately at least two of\nthese three qualities can be cultivated. You may be able to increase your\nstrength of will somewhat; you can definitely learn self-discipline; and\nalmost everyone is practically malnourished when it comes to ambition.  \n  \nI feel like I understand determination a bit better now. But only a bit:\nwillfulness, discipline, and ambition are all concepts almost as complicated\nas determination. [3]  \n  \nNote too that determination and talent are not the whole story. There's a\nthird factor in achievement: how much you like the work. If you really\n[love](love.html) working on something, you don't need determination to drive\nyou; it's what you'd do anyway. But most types of work have aspects one\ndoesn't like, because most types of work consist of doing things for other\npeople, and it's very unlikely that the tasks imposed by their needs will\nhappen to align exactly with what you want to do.  \n  \nIndeed, if you want to create the most [wealth](wealth.html), the way to do it\nis to focus more on their needs than your interests, and make up the\ndifference with determination.  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] Loosely speaking. What I'm claiming with the melon seed model is more like\ndetermination is proportionate to wd^m - k|w - d|^n, where w is will and d\ndiscipline.  \n  \n[2] Which means one of the best ways to help a society generally is to create\n[events](http://startupschool.org) and [institutions](http://ycombinator.com)\nthat bring ambitious people together. It's like pulling the control rods out\nof a reactor: the energy they emit encourages other ambitious people, instead\nof being absorbed by the normal people they're usually surrounded with.  \n  \nConversely, it's probably a mistake to do as some European countries have done\nand try to ensure none of your universities is significantly better than the\nothers.  \n  \n[3] For example, willfulness clearly has two subcomponents, stubbornness and\nenergy. The first alone yields someone who's stubbornly inert. The second\nalone yields someone flighty. As willful people get older or otherwise lose\ntheir energy, they tend to become merely stubborn.  \n  \n**Thanks** to Sam Altman, Jessica Livingston, and Robert Morris for reading\ndrafts of this.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nAugust 2007  \n  \n _(This is a talk I gave at the last Y Combinator dinner of the summer.\nUsually we don't have a speaker at the last dinner; it's more of a party. But\nit seemed worth spoiling the atmosphere if I could save some of the startups\nfrom preventable deaths. So at the last minute I cooked up this rather grim\ntalk. I didn't mean this as an essay; I wrote it down because I only had two\nhours before dinner and think fastest while writing.)_  \n  \nA couple days ago I told a reporter that we expected about a third of the\ncompanies we funded to succeed. Actually I was being conservative. I'm hoping\nit might be as much as a half. Wouldn't it be amazing if we could achieve a\n50% success rate?  \n  \nAnother way of saying that is that half of you are going to die. Phrased that\nway, it doesn't sound good at all. In fact, it's kind of weird when you think\nabout it, because our definition of success is that the founders get rich. If\nhalf the startups we fund succeed, then half of you are going to get rich and\nthe other half are going to get nothing.  \n  \nIf you can just avoid dying, you get rich. That sounds like a joke, but it's\nactually a pretty good description of what happens in a typical startup. It\ncertainly describes what happened in Viaweb. We avoided dying till we got\nrich.  \n  \nIt was really close, too. When we were visiting Yahoo to talk about being\nacquired, we had to interrupt everything and borrow one of their conference\nrooms to talk down an investor who was about to back out of a new funding\nround we needed to stay alive. So even in the middle of getting rich we were\nfighting off the grim reaper.  \n  \nYou may have heard that quote about luck consisting of opportunity meeting\npreparation. You've now done the preparation. The work you've done so far has,\nin effect, put you in a position to get lucky: you can now get rich by not\nletting your company die. That's more than most people have. So let's talk\nabout how not to die.  \n  \nWe've done this five times now, and we've seen a bunch of startups die. About\n10 of them so far. We don't know exactly what happens when they die, because\nthey generally don't die loudly and heroically. Mostly they crawl off\nsomewhere and die.  \n  \nFor us the main indication of impending doom is when we don't hear from you.\nWhen we haven't heard from, or about, a startup for a couple months, that's a\nbad sign. If we send them an email asking what's up, and they don't reply,\nthat's a really bad sign. So far that is a 100% accurate predictor of death.  \n  \nWhereas if a startup regularly does new deals and releases and either sends us\nmail or shows up at YC events, they're probably going to live.  \n  \nI realize this will sound naive, but maybe the linkage works in both\ndirections. Maybe if you can arrange that we keep hearing from you, you won't\ndie.  \n  \nThat may not be so naive as it sounds. You've probably noticed that having\ndinners every Tuesday with us and the other founders causes you to get more\ndone than you would otherwise, because every dinner is a mini Demo Day. Every\ndinner is a kind of a deadline. So the mere constraint of staying in regular\ncontact with us will push you to make things happen, because otherwise you'll\nbe embarrassed to tell us that you haven't done anything new since the last\ntime we talked.  \n  \nIf this works, it would be an amazing hack. It would be pretty cool if merely\nby staying in regular contact with us you could get rich. It sounds crazy, but\nthere's a good chance that would work.  \n  \nA variant is to stay in touch with other YC-funded startups. There is now a\nwhole neighborhood of them in San Francisco. If you move there, the peer\npressure that made you work harder all summer will continue to operate.  \n  \nWhen startups die, the official cause of death is always either running out of\nmoney or a critical founder bailing. Often the two occur simultaneously. But I\nthink the underlying cause is usually that they've become demoralized. You\nrarely hear of a startup that's working around the clock doing deals and\npumping out new features, and dies because they can't pay their bills and\ntheir ISP unplugs their server.  \n  \nStartups rarely die in mid keystroke. So keep typing!  \n  \nIf so many startups get demoralized and fail when merely by hanging on they\ncould get rich, you have to assume that running a startup can be demoralizing.\nThat is certainly true. I've been there, and that's why I've never done\nanother startup. The low points in a startup are just unbelievably low. I bet\neven Google had moments where things seemed hopeless.  \n  \nKnowing that should help. If you know it's going to feel terrible sometimes,\nthen when it feels terrible you won't think \"ouch, this feels terrible, I give\nup.\" It feels that way for everyone. And if you just hang on, things will\nprobably get better. The metaphor people use to describe the way a startup\nfeels is at least a roller coaster and not drowning. You don't just sink and\nsink; there are ups after the downs.  \n  \nAnother feeling that seems alarming but is in fact normal in a startup is the\nfeeling that what you're doing isn't working. The reason you can expect to\nfeel this is that what you do probably won't work. Startups almost never get\nit right the first time. Much more commonly you launch something, and no one\ncares. Don't assume when this happens that you've failed. That's normal for\nstartups. But don't sit around doing nothing. Iterate.  \n  \nI like Paul Buchheit's suggestion of trying to make something that at least\nsomeone really loves. As long as you've made something that a few users are\necstatic about, you're on the right track. It will be good for your morale to\nhave even a handful of users who really love you, and startups run on morale.\nBut also it will tell you what to focus on. What is it about you that they\nlove? Can you do more of that? Where can you find more people who love that\nsort of thing? As long as you have some core of users who love you, all you\nhave to do is expand it. It may take a while, but as long as you keep plugging\naway, you'll win in the end. Both Blogger and Delicious did that. Both took\nyears to succeed. But both began with a core of fanatically devoted users, and\nall Evan and Joshua had to do was grow that core incrementally.\n[Wufoo](http://wufoo.com) is on the same trajectory now.  \n  \nSo when you release something and it seems like no one cares, look more\nclosely. Are there zero users who really love you, or is there at least some\nlittle group that does? It's quite possible there will be zero. In that case,\ntweak your product and try again. Every one of you is working on a space that\ncontains at least one winning permutation somewhere in it. If you just keep\ntrying, you'll find it.  \n  \nLet me mention some things not to do. The number one thing not to do is other\nthings. If you find yourself saying a sentence that ends with \"but we're going\nto keep working on the startup,\" you are in big trouble. Bob's going to grad\nschool, but we're going to keep working on the startup. We're moving back to\nMinnesota, but we're going to keep working on the startup. We're taking on\nsome consulting projects, but we're going to keep working on the startup. You\nmay as well just translate these to \"we're giving up on the startup, but we're\nnot willing to admit that to ourselves,\" because that's what it means most of\nthe time. A startup is so hard that working on it can't be preceded by \"but.\"  \n  \nIn particular, don't go to graduate school, and don't start other projects.\nDistraction is fatal to startups. Going to (or back to) school is a huge\npredictor of death because in addition to the distraction it gives you\nsomething to say you're doing. If you're only doing a startup, then if the\nstartup fails, you fail. If you're in grad school and your startup fails, you\ncan say later \"Oh yeah, we had this startup on the side when I was in grad\nschool, but it didn't go anywhere.\"  \n  \nYou can't use euphemisms like \"didn't go anywhere\" for something that's your\nonly occupation. People won't let you.  \n  \nOne of the most interesting things we've discovered from working on Y\nCombinator is that founders are more motivated by the fear of looking bad than\nby the hope of getting millions of dollars. So if you want to get millions of\ndollars, put yourself in a position where failure will be public and\nhumiliating.  \n  \nWhen we first met the founders of [Octopart](http://octopart.com), they seemed\nvery smart, but not a great bet to succeed, because they didn't seem\nespecially committed. One of the two founders was still in grad school. It was\nthe usual story: he'd drop out if it looked like the startup was taking off.\nSince then he has not only dropped out of grad school, but appeared full\nlength in [Newsweek](http://docs.octopart.com/newsweek_octopart_small.jpg)\nwith the word \"Billionaire\" printed across his chest. He just cannot fail now.\nEveryone he knows has seen that picture. Girls who dissed him in high school\nhave seen it. His mom probably has it on the fridge. It would be unthinkably\nhumiliating to fail now. At this point he is committed to fight to the death.  \n  \nI wish every startup we funded could appear in a Newsweek article describing\nthem as the next generation of billionaires, because then none of them would\nbe able to give up. The success rate would be 90%. I'm not kidding.  \n  \nWhen we first knew the Octoparts they were lighthearted, cheery guys. Now when\nwe talk to them they seem grimly determined. The electronic parts distributors\nare trying to squash them to keep their monopoly pricing. (If it strikes you\nas odd that people still order electronic parts out of thick paper catalogs in\n2007, there's a reason for that. The distributors want to prevent the\ntransparency that comes from having prices online.) I feel kind of bad that\nwe've transformed these guys from lighthearted to grimly determined. But that\ncomes with the territory. If a startup succeeds, you get millions of dollars,\nand you don't get that kind of money just by asking for it. You have to assume\nit takes some amount of pain.  \n  \nAnd however tough things get for the Octoparts, I predict they'll succeed.\nThey may have to morph themselves into something totally different, but they\nwon't just crawl off and die. They're smart; they're working in a promising\nfield; and they just cannot give up.  \n  \nAll of you guys already have the first two. You're all smart and working on\npromising ideas. Whether you end up among the living or the dead comes down to\nthe third ingredient, not giving up.  \n  \nSo I'll tell you now: bad shit is coming. It always is in a startup. The odds\nof getting from launch to liquidity without some kind of disaster happening\nare one in a thousand. So don't get demoralized. When the disaster strikes,\njust say to yourself, ok, this was what Paul was talking about. What did he\nsay to do? Oh, yeah. Don't give up.  \n  \n\nMarch 2008  \n  \nThe web is turning writing into a conversation. Twenty years ago, writers\nwrote and readers read. The web lets readers respond, and increasingly they\ndo\u2014in comment threads, on forums, and in their own blog posts.  \n  \nMany who respond to something disagree with it. That's to be expected.\nAgreeing tends to motivate people less than disagreeing. And when you agree\nthere's less to say. You could expand on something the author said, but he has\nprobably already explored the most interesting implications. When you disagree\nyou're entering territory he may not have explored.  \n  \nThe result is there's a lot more disagreeing going on, especially measured by\nthe word. That doesn't mean people are getting angrier. The structural change\nin the way we communicate is enough to account for it. But though it's not\nanger that's driving the increase in disagreement, there's a danger that the\nincrease in disagreement will make people angrier. Particularly online, where\nit's easy to say things you'd never say face to face.  \n  \nIf we're all going to be disagreeing more, we should be careful to do it well.\nWhat does it mean to disagree well? Most readers can tell the difference\nbetween mere name-calling and a carefully reasoned refutation, but I think it\nwould help to put names on the intermediate stages. So here's an attempt at a\ndisagreement hierarchy:  \n  \n**DH0. Name-calling.**  \n  \nThis is the lowest form of disagreement, and probably also the most common.\nWe've all seen comments like this:\n\n> u r a fag!!!!!!!!!!\n\nBut it's important to realize that more articulate name-calling has just as\nlittle weight. A comment like\n\n> The author is a self-important dilettante.\n\nis really nothing more than a pretentious version of \"u r a fag.\"  \n  \n**DH1. Ad Hominem.**  \n  \nAn ad hominem attack is not quite as weak as mere name-calling. It might\nactually carry some weight. For example, if a senator wrote an article saying\nsenators' salaries should be increased, one could respond:\n\n> Of course he would say that. He's a senator.\n\nThis wouldn't refute the author's argument, but it may at least be relevant to\nthe case. It's still a very weak form of disagreement, though. If there's\nsomething wrong with the senator's argument, you should say what it is; and if\nthere isn't, what difference does it make that he's a senator?  \n  \nSaying that an author lacks the authority to write about a topic is a variant\nof ad hominem\u2014and a particularly useless sort, because good ideas often come\nfrom outsiders. The question is whether the author is correct or not. If his\nlack of authority caused him to make mistakes, point those out. And if it\ndidn't, it's not a problem.  \n  \n**DH2. Responding to Tone.**  \n  \nThe next level up we start to see responses to the writing, rather than the\nwriter. The lowest form of these is to disagree with the author's tone. E.g.\n\n> I can't believe the author dismisses intelligent design in such a cavalier\n> fashion.\n\nThough better than attacking the author, this is still a weak form of\ndisagreement. It matters much more whether the author is wrong or right than\nwhat his tone is. Especially since tone is so hard to judge. Someone who has a\nchip on their shoulder about some topic might be offended by a tone that to\nother readers seemed neutral.  \n  \nSo if the worst thing you can say about something is to criticize its tone,\nyou're not saying much. Is the author flippant, but correct? Better that than\ngrave and wrong. And if the author is incorrect somewhere, say where.  \n  \n**DH3. Contradiction.**  \n  \nIn this stage we finally get responses to what was said, rather than how or by\nwhom. The lowest form of response to an argument is simply to state the\nopposing case, with little or no supporting evidence.  \n  \nThis is often combined with DH2 statements, as in:\n\n> I can't believe the author dismisses intelligent design in such a cavalier\n> fashion. Intelligent design is a legitimate scientific theory.\n\nContradiction can sometimes have some weight. Sometimes merely seeing the\nopposing case stated explicitly is enough to see that it's right. But usually\nevidence will help.  \n  \n**DH4. Counterargument.**  \n  \nAt level 4 we reach the first form of convincing disagreement:\ncounterargument. Forms up to this point can usually be ignored as proving\nnothing. Counterargument might prove something. The problem is, it's hard to\nsay exactly what.  \n  \nCounterargument is contradiction plus reasoning and/or evidence. When aimed\nsquarely at the original argument, it can be convincing. But unfortunately\nit's common for counterarguments to be aimed at something slightly different.\nMore often than not, two people arguing passionately about something are\nactually arguing about two different things. Sometimes they even agree with\none another, but are so caught up in their squabble they don't realize it.  \n  \nThere could be a legitimate reason for arguing against something slightly\ndifferent from what the original author said: when you feel they missed the\nheart of the matter. But when you do that, you should say explicitly you're\ndoing it.  \n  \n**DH5. Refutation.**  \n  \nThe most convincing form of disagreement is refutation. It's also the rarest,\nbecause it's the most work. Indeed, the disagreement hierarchy forms a kind of\npyramid, in the sense that the higher you go the fewer instances you find.  \n  \nTo refute someone you probably have to quote them. You have to find a \"smoking\ngun,\" a passage in whatever you disagree with that you feel is mistaken, and\nthen explain why it's mistaken. If you can't find an actual quote to disagree\nwith, you may be arguing with a straw man.  \n  \nWhile refutation generally entails quoting, quoting doesn't necessarily imply\nrefutation. Some writers quote parts of things they disagree with to give the\nappearance of legitimate refutation, then follow with a response as low as DH3\nor even DH0.  \n  \n**DH6. Refuting the Central Point.**  \n  \nThe force of a refutation depends on what you refute. The most powerful form\nof disagreement is to refute someone's central point.  \n  \nEven as high as DH5 we still sometimes see deliberate dishonesty, as when\nsomeone picks out minor points of an argument and refutes those. Sometimes the\nspirit in which this is done makes it more of a sophisticated form of ad\nhominem than actual refutation. For example, correcting someone's grammar, or\nharping on minor mistakes in names or numbers. Unless the opposing argument\nactually depends on such things, the only purpose of correcting them is to\ndiscredit one's opponent.  \n  \nTruly refuting something requires one to refute its central point, or at least\none of them. And that means one has to commit explicitly to what the central\npoint is. So a truly effective refutation would look like:\n\n> The author's main point seems to be x. As he says:\n>\n\n>> <quotation>\n\n>\n> But this is wrong for the following reasons...\n\nThe quotation you point out as mistaken need not be the actual statement of\nthe author's main point. It's enough to refute something it depends upon.  \n  \n**What It Means**  \n  \nNow we have a way of classifying forms of disagreement. What good is it? One\nthing the disagreement hierarchy _doesn't_ give us is a way of picking a\nwinner. DH levels merely describe the form of a statement, not whether it's\ncorrect. A DH6 response could still be completely mistaken.  \n  \nBut while DH levels don't set a lower bound on the convincingness of a reply,\nthey do set an upper bound. A DH6 response might be unconvincing, but a DH2 or\nlower response is always unconvincing.  \n  \nThe most obvious advantage of classifying the forms of disagreement is that it\nwill help people to evaluate what they read. In particular, it will help them\nto see through intellectually dishonest arguments. An eloquent speaker or\nwriter can give the impression of vanquishing an opponent merely by using\nforceful words. In fact that is probably the defining quality of a demagogue.\nBy giving names to the different forms of disagreement, we give critical\nreaders a pin for popping such balloons.  \n  \nSuch labels may help writers too. Most intellectual dishonesty is\nunintentional. Someone arguing against the tone of something he disagrees with\nmay believe he's really saying something. Zooming out and seeing his current\nposition on the disagreement hierarchy may inspire him to try moving up to\ncounterargument or refutation.  \n  \nBut the greatest benefit of disagreeing well is not just that it will make\nconversations better, but that it will make the people who have them happier.\nIf you study conversations, you find there is a lot more meanness down in DH1\nthan up in DH6. You don't have to be mean when you have a real point to make.\nIn fact, you don't want to. If you have something real to say, being mean just\ngets in the way.  \n  \nIf moving up the disagreement hierarchy makes people less mean, that will make\nmost of them happier. Most people don't really enjoy being mean; they do it\nbecause they can't help it.  \n  \n  \n  \n  \n  \n**Thanks** to Trevor Blackwell and Jessica Livingston for reading drafts of\nthis.  \n  \n  \n  \n**Related:**  \n  \n\nJanuary 2017  \n  \nBecause biographies of famous scientists tend to edit out their mistakes, we\nunderestimate the degree of risk they were willing to take. And because\nanything a famous scientist did that wasn't a mistake has probably now become\nthe conventional wisdom, those choices don't seem risky either.  \n  \nBiographies of Newton, for example, understandably focus more on physics than\nalchemy or theology. The impression we get is that his unerring judgment led\nhim straight to truths no one else had noticed. How to explain all the time he\nspent on alchemy and theology? Well, smart people are often kind of crazy.  \n  \nBut maybe there is a simpler explanation. Maybe the smartness and the\ncraziness were not as separate as we think. Physics seems to us a promising\nthing to work on, and alchemy and theology obvious wastes of time. But that's\nbecause we know how things turned out. In Newton's day the three problems\nseemed roughly equally promising. No one knew yet what the payoff would be for\ninventing what we now call physics; if they had, more people would have been\nworking on it. And alchemy and theology were still then in the category Marc\nAndreessen would describe as \"huge, if true.\"  \n  \nNewton made three bets. One of them worked. But they were all risky.  \n  \n  \n  \n  \n  \n\nSeptember 2009  \n  \nWhen meeting people you don't know very well, the convention is to seem extra\nfriendly. You smile and say \"pleased to meet you,\" whether you are or not.\nThere's nothing dishonest about this. Everyone knows that these little social\nlies aren't meant to be taken literally, just as everyone knows that \"Can you\npass the salt?\" is only grammatically a question.  \n  \nI'm perfectly willing to smile and say \"pleased to meet you\" when meeting new\npeople. But there is another set of customs for being ingratiating in print\nthat are not so harmless.  \n  \nThe reason there's a convention of being ingratiating in print is that most\nessays are written to persuade. And as any politician could tell you, the way\nto persuade people is not just to baldly state the facts. You have to add a\nspoonful of sugar to make the medicine go down.  \n  \nFor example, a politician announcing the cancellation of a government program\nwill not merely say \"The program is canceled.\" That would seem offensively\ncurt. Instead he'll spend most of his time talking about the noble effort made\nby the people who worked on it.  \n  \nThe reason these conventions are more dangerous is that they interact with the\nideas. Saying \"pleased to meet you\" is just something you prepend to a\nconversation, but the sort of spin added by politicians is woven through it.\nWe're starting to move from social lies to real lies.  \n  \nHere's an example of a paragraph from an essay I wrote about [labor\nunions](unions.html). As written, it tends to offend people who like unions.\n\n> People who think the labor movement was the creation of heroic union\n> organizers have a problem to explain: why are unions shrinking now? The best\n> they can do is fall back on the default explanation of people living in\n> fallen civilizations. Our ancestors were giants. The workers of the early\n> twentieth century must have had a moral courage that's lacking today.\n\nNow here's the same paragraph rewritten to please instead of offending them:\n\n> Early union organizers made heroic sacrifices to improve conditions for\n> workers. But though labor unions are shrinking now, it's not because present\n> union leaders are any less courageous. An employer couldn't get away with\n> hiring thugs to beat up union leaders today, but if they did, I see no\n> reason to believe today's union leaders would shrink from the challenge. So\n> I think it would be a mistake to attribute the decline of unions to some\n> kind of decline in the people who run them. Early union leaders were heroic,\n> certainly, but we should not suppose that if unions have declined, it's\n> because present union leaders are somehow inferior. The cause must be\n> external. [1]\n\nIt makes the same point: that it can't have been the personal qualities of\nearly union organizers that made unions successful, but must have been some\nexternal factor, or otherwise present-day union leaders would have to be\ninferior people. But written this way it seems like a defense of present-day\nunion organizers rather than an attack on early ones. That makes it more\npersuasive to people who like unions, because it seems sympathetic to their\ncause.  \n  \nI believe everything I wrote in the second version. Early union leaders did\nmake heroic sacrifices. And present union leaders probably would rise to the\noccasion if necessary. People tend to; I'm skeptical about the idea of \"the\ngreatest generation.\" [2]  \n  \nIf I believe everything I said in the second version, why didn't I write it\nthat way? Why offend people needlessly?  \n  \nBecause I'd rather offend people than pander to them, and if you write about\ncontroversial topics you have to choose one or the other. The degree of\ncourage of past or present union leaders is beside the point; all that matters\nfor the argument is that they're the same. But if you want to please people\nwho are mistaken, you can't simply tell the truth. You're always going to have\nto add some sort of padding to protect their misconceptions from bumping\nagainst reality.  \n  \nMost writers do. Most writers write to persuade, if only out of habit or\npoliteness. But I don't write to persuade; I write to figure out. I write to\npersuade a hypothetical perfectly unbiased reader.  \n  \nSince the custom is to write to persuade the actual reader, someone who\ndoesn't will seem arrogant. In fact, worse than arrogant: since readers are\nused to essays that try to please someone, an essay that displeases one side\nin a dispute reads as an attempt to pander to the other. To a lot of pro-union\nreaders, the first paragraph sounds like the sort of thing a right-wing radio\ntalk show host would say to stir up his followers. But it's not. Something\nthat curtly contradicts one's beliefs can be hard to distinguish from a\npartisan attack on them, but though they can end up in the same place they\ncome from different sources.  \n  \nWould it be so bad to add a few extra words, to make people feel better? Maybe\nnot. Maybe I'm excessively attached to conciseness. I write [code](power.html)\nthe same way I write essays, making pass after pass looking for anything I can\ncut. But I have a legitimate reason for doing this. You don't know what the\nideas are until you get them down to the fewest words. [3]  \n  \nThe danger of the second paragraph is not merely that it's longer. It's that\nyou start to lie to yourself. The ideas start to get mixed together with the\nspin you've added to get them past the readers' misconceptions.  \n  \nI think the goal of an essay should be to discover [surprising](essay.html)\nthings. That's my goal, at least. And most surprising means most different\nfrom what people currently believe. So writing to persuade and writing to\ndiscover are diametrically opposed. The more your conclusions disagree with\nreaders' present beliefs, the more effort you'll have to expend on selling\nyour ideas rather than having them. As you accelerate, this drag increases,\ntill eventually you reach a point where 100% of your energy is devoted to\novercoming it and you can't go any faster.  \n  \nIt's hard enough to overcome one's own misconceptions without having to think\nabout how to get the resulting ideas past other people's. I worry that if I\nwrote to persuade, I'd start to shy away unconsciously from ideas I knew would\nbe hard to sell. When I notice something surprising, it's usually very faint\nat first. There's nothing more than a slight stirring of discomfort. I don't\nwant anything to get in the way of noticing it consciously.  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] I had a strange feeling of being back in high school writing this. To get\na good grade you had to both write the sort of pious crap you were expected\nto, but also seem to be writing with conviction. The solution was a kind of\nmethod acting. It was revoltingly familiar to slip back into it.  \n  \n[2] Exercise for the reader: rephrase that thought to please the same people\nthe first version would offend.  \n  \n[3] Come to think of it, there is one way in which I deliberately pander to\nreaders, because it doesn't change the number of words: I switch person. This\nflattering distinction seems so natural to the average reader that they\nprobably don't notice even when I switch in mid-sentence, though you tend to\nnotice when it's done as conspicuously as this.  \n  \n**Thanks** to Jessica Livingston and Robert Morris for reading drafts of this.  \n  \n**Note:** An earlier version of this essay began by talking about why people\ndislike Michael Arrington. I now believe that was mistaken, and that most\npeople don't dislike him for the same reason I did when I first met him, but\nsimply because he writes about controversial things.  \n  \n\n_Note: The strategy described at the end of this essay didn't work. It would\nwork for a while, and then I'd gradually find myself using the Internet on my\nwork computer. I'm trying other strategies now, but I think this time I'll\nwait till I'm sure they work before writing about them._  \n  \nMay 2008  \n  \nProcrastination feeds on distractions. Most people find it uncomfortable just\nto sit and do nothing; you avoid work by doing something else.  \n  \nSo one way to beat procrastination is to starve it of distractions. But that's\nnot as straightforward as it sounds, because there are people working hard to\ndistract you. Distraction is not a static obstacle that you avoid like you\nmight avoid a rock in the road. Distraction seeks you out.  \n  \nChesterfield described dirt as matter out of place. Distracting is, similarly,\ndesirable at the wrong time. And technology is continually being refined to\nproduce more and more desirable things. Which means that as we learn to avoid\none class of distractions, new ones constantly appear, like drug-resistant\nbacteria.  \n  \nTelevision, for example, has after 50 years of refinement reached the point\nwhere it's like visual crack. I realized when I was 13 that TV was addictive,\nso I stopped watching it. But I read recently that the average American\nwatches [4 hours](http://www.forbes.com/forbes/2003/0929/076.html) of TV a\nday. A quarter of their life.  \n  \nTV is in decline now, but only because people have found even more addictive\nways of wasting time. And what's especially dangerous is that many happen at\nyour computer. This is no accident. An ever larger percentage of office\nworkers sit in front of computers connected to the Internet, and distractions\nalways evolve toward the procrastinators.  \n  \nI remember when computers were, for me at least, exclusively for work. I might\noccasionally dial up a server to get mail or ftp files, but most of the time I\nwas offline. All I could do was write and program. Now I feel as if someone\nsnuck a television onto my desk. Terribly addictive things are just a click\naway. Run into an obstacle in what you're working on? Hmm, I wonder what's new\nonline. Better check.  \n  \nAfter years of carefully avoiding classic time sinks like TV, games, and\nUsenet, I still managed to fall prey to distraction, because I didn't realize\nthat it evolves. Something that used to be safe, using the Internet, gradually\nbecame more and more dangerous. Some days I'd wake up, get a cup of tea and\ncheck the news, then check email, then check the news again, then answer a few\nemails, then suddenly notice it was almost lunchtime and I hadn't gotten any\nreal work done. And this started to happen more and more often.  \n  \nIt took me surprisingly long to realize how distracting the Internet had\nbecome, because the problem was intermittent. I ignored it the way you let\nyourself ignore a bug that only appears intermittently. When I was in the\nmiddle of a project, distractions weren't really a problem. It was when I'd\nfinished one project and was deciding what to do next that they always bit me.  \n  \nAnother reason it was hard to notice the danger of this new type of\ndistraction was that social customs hadn't yet caught up with it. If I'd spent\na whole morning sitting on a sofa watching TV, I'd have noticed very quickly.\nThat's a known danger sign, like drinking alone. But using the Internet still\nlooked and felt a lot like work.  \n  \nEventually, though, it became clear that the Internet had become so much more\ndistracting that I had to start treating it differently. Basically, I had to\nadd a new application to my list of known time sinks: Firefox.  \n  \n* * *  \n  \nThe problem is a hard one to solve because most people still need the Internet\nfor some things. If you drink too much, you can solve that problem by stopping\nentirely. But you can't solve the problem of overeating by stopping eating. I\ncouldn't simply avoid the Internet entirely, as I'd done with previous time\nsinks.  \n  \nAt first I tried rules. For example, I'd tell myself I was only going to use\nthe Internet twice a day. But these schemes never worked for long. Eventually\nsomething would come up that required me to use it more than that. And then\nI'd gradually slip back into my old ways.  \n  \nAddictive things have to be treated as if they were sentient adversaries\u2014as if\nthere were a little man in your head always cooking up the most plausible\narguments for doing whatever you're trying to stop doing. If you leave a path\nto it, he'll find it.  \n  \nThe key seems to be visibility. The biggest ingredient in most bad habits is\ndenial. So you have to make it so that you can't merely _slip_ into doing the\nthing you're trying to avoid. It has to set off alarms.  \n  \nMaybe in the long term the right answer for dealing with Internet distractions\nwill be [software](http://rescuetime.com) that watches and controls them. But\nin the meantime I've found a more drastic solution that definitely works: to\nset up a separate computer for using the Internet.  \n  \nI now leave wifi turned off on my main computer except when I need to transfer\na file or edit a web page, and I have a separate laptop on the other side of\nthe room that I use to check mail or browse the web. (Irony of ironies, it's\nthe computer Steve Huffman wrote Reddit on. When Steve and Alexis auctioned\noff their old laptops for charity, I bought them for the Y Combinator museum.)  \n  \nMy rule is that I can spend as much time online as I want, as long as I do it\non that computer. And this turns out to be enough. When I have to sit on the\nother side of the room to check email or browse the web, I become much more\naware of it. Sufficiently aware, in my case at least, that it's hard to spend\nmore than about an hour a day online.  \n  \nAnd my main computer is now freed for work. If you try this trick, you'll\nprobably be struck by how different it feels when your computer is\ndisconnected from the Internet. It was alarming to me how foreign it felt to\nsit in front of a computer that could only be used for work, because that\nshowed how much time I must have been wasting.  \n  \n_Wow. All I can do at this computer is work. Ok, I better work then._  \n  \nThat's the good part. Your old bad habits now help you to work. You're used to\nsitting in front of that computer for hours at a time. But you can't browse\nthe web or check email now. What are you going to do? You can't just sit\nthere. So you start working.  \n  \n\nDecember 2008  \n  \n _(I originally wrote this at the request of a company producing a report\nabout entrepreneurship. Unfortunately after reading it they decided it was too\ncontroversial to include.)_  \n  \nVC funding will probably dry up somewhat during the present recession, like it\nusually does in bad times. But this time the result may be different. This\ntime the number of new startups may not decrease. And that could be dangerous\nfor VCs.  \n  \nWhen VC funding dried up after the Internet Bubble, startups dried up too.\nThere were not a lot of new startups being founded in 2003\\. But startups\naren't tied to VC the way they were 10 years ago. It's now possible for VCs\nand startups to diverge. And if they do, they may not reconverge once the\neconomy gets better.  \n  \nThe reason startups no longer depend so much on VCs is one that everyone in\nthe startup business knows by now: it has gotten much cheaper to start a\nstartup. There are four main reasons: Moore's law has made hardware cheap;\nopen source has made software free; the web has made marketing and\ndistribution free; and more powerful programming languages mean development\nteams can be smaller. These changes have pushed the cost of starting a startup\ndown into the noise. In a lot of startups\u2014probaby most startups funded by Y\nCombinator\u2014the biggest expense is simply the founders' living expenses. We've\nhad startups that were profitable on revenues of $3000 a month.  \n  \n$3000 is insignificant as revenues go. Why should anyone care about a startup\nmaking $3000 a month? Because, although insignificant as _revenue_ , this\namount of money can change a startup's _funding_ situation completely.  \n  \nSomeone running a startup is always calculating in the back of their mind how\nmuch \"runway\" they have\u2014how long they have till the money in the bank runs out\nand they either have to be profitable, raise more money, or go out of\nbusiness. Once you cross the threshold of profitability, however low, your\nrunway becomes infinite. It's a qualitative change, like the stars turning\ninto lines and disappearing when the Enterprise accelerates to warp speed.\nOnce you're profitable you don't need investors' money. And because Internet\nstartups have become so cheap to run, the threshold of profitability can be\ntrivially low. Which means many Internet startups don't need VC-scale\ninvestments anymore. For many startups, VC funding has, in the language of\nVCs, gone from a must-have to a nice-to-have.  \n  \nThis change happened while no one was looking, and its effects have been\nlargely masked so far. It was during the trough after the Internet Bubble that\nit became trivially cheap to start a startup, but few realized it because\nstartups were so out of fashion. When startups came back into fashion, around\n2005, investors were starting to write checks again. And while founders may\nnot have needed VC money the way they used to, they were willing to take it if\noffered\u2014partly because there was a tradition of startups taking VC money, and\npartly because startups, like dogs, tend to eat when given the opportunity. As\nlong as VCs were writing checks, founders were never forced to explore the\nlimits of how little they needed them. There were a few startups who hit these\nlimits accidentally because of their unusual circumstances\u2014most famously\n37signals, which hit the limit because they crossed into startup land from the\nother direction: they started as a consulting firm, so they had revenue before\nthey had a product.  \n  \nVCs and founders are like two components that used to be bolted together.\nAround 2000 the bolt was removed. Because the components have so far been\nsubjected to the same forces, they still seem to be joined together, but\nreally one is just resting on the other. A sharp impact would make them fly\napart. And the present recession could be that impact.  \n  \nBecause of Y Combinator's position at the extreme end of the spectrum, we'd be\nthe first to see signs of a separation between founders and investors, and we\nare in fact seeing it. For example, though the stock market crash does seem to\nhave made investors more cautious, it doesn't seem to have had any effect on\nthe number of people who want to start startups. We take applications for\nfunding every 6 months. Applications for the current funding cycle closed on\nOctober 17, well after the markets tanked, and even so we got a record number,\nup 40% from the same cycle a year before.  \n  \nMaybe things will be different a year from now, if the economy continues to\nget worse, but so far there is zero slackening of interest among potential\nfounders. That's different from the way things felt in 2001. Then there was a\nwidespread feeling among potential founders that startups were over, and that\none should just go to grad school. That isn't happening this time, and part of\nthe reason is that even in a bad economy it's not that hard to build something\nthat makes $3000 a month. If investors stop writing checks, who cares?  \n  \nWe also see signs of a divergence between founders and investors in the\nattitudes of existing startups we've funded. I was talking to one recently\nthat had a round fall through at the last minute over the sort of trifle that\nbreaks deals when investors feel they have the upper hand\u2014over an uncertainty\nabout whether the founders had correctly filed their 83(b) forms, if you can\nbelieve that. And yet this startup is obviously going to succeed: their\ntraffic and revenue graphs look like a jet taking off. So I asked them if they\nwanted me to introduce them to more investors. To my surprise, they said\nno\u2014that they'd just spent four months dealing with investors, and they were\nactually a lot happier now that they didn't have to. There was a friend they\nwanted to hire with the investor money, and now they'd have to postpone that.\nBut otherwise they felt they had enough in the bank to make it to\nprofitability. To make sure, they were moving to a cheaper apartment. And in\nthis economy I bet they got a good deal on it.  \n  \nI've detected this \"investors aren't worth the trouble\" vibe from several YC\nfounders I've talked to recently. At least one startup from the most recent\n(summer) cycle may not even raise angel money, let alone VC.\n[Ticketstumbler](http://ticketstumbler.com) made it to profitability on Y\nCombinator's $15,000 investment and they hope not to need more. This surprised\neven us. Although YC is based on the idea of it being cheap to start a\nstartup, we never anticipated that founders would grow successful startups on\nnothing more than YC funding.  \n  \nIf founders decide VCs aren't worth the trouble, that could be bad for VCs.\nWhen the economy bounces back in a few years and they're ready to write checks\nagain, they may find that founders have moved on.  \n  \nThere is a founder community just as there's a VC community. They all know one\nanother, and techniques spread rapidly between them. If one tries a new\nprogramming language or a new hosting provider and gets good results, 6 months\nlater half of them are using it. And the same is true for funding. The current\ngeneration of founders want to raise money from VCs, and Sequoia specifically,\nbecause Larry and Sergey took money from VCs, and Sequoia specifically.\nImagine what it would do to the VC business if the next hot company didn't\ntake VC at all.  \n  \nVCs think they're playing a zero sum game. In fact, it's not even that. If you\nlose a deal to Benchmark, you lose that deal, but VC as an industry still\nwins. If you lose a deal to None, all VCs lose.  \n  \nThis recession may be different from the one after the Internet Bubble. This\ntime founders may keep starting startups. And if they do, VCs will have to\nkeep writing checks, or they could become irrelevant.  \n  \n  \n  \n  \n  \n  \n  \n**Thanks** to Sam Altman, Trevor Blackwell, David Hornik, Jessica Livingston,\nRobert Morris, and Fred Wilson for reading drafts of this.  \n  \n\nMarch 2021  \n  \nThe secret curse of the nonprofit world is restricted donations. If you\nhaven't been involved with nonprofits, you may never have heard this phrase\nbefore. But if you have been, it probably made you wince.  \n  \nRestricted donations mean donations where the donor limits what can be done\nwith the money. This is common with big donations, perhaps the default. And\nyet it's usually a bad idea. Usually the way the donor wants the money spent\nis not the way the nonprofit would have chosen. Otherwise there would have\nbeen no need to restrict the donation. But who has a better understanding of\nwhere money needs to be spent, the nonprofit or the donor?  \n  \nIf a nonprofit doesn't understand better than its donors where money needs to\nbe spent, then it's incompetent and you shouldn't be donating to it at all.  \n  \nWhich means a restricted donation is inherently suboptimal. It's either a\ndonation to a bad nonprofit, or a donation for the wrong things.  \n  \nThere are a couple exceptions to this principle. One is when the nonprofit is\nan umbrella organization. It's reasonable to make a restricted donation to a\nuniversity, for example, because a university is only nominally a single\nnonprofit. Another exception is when the donor actually does know as much as\nthe nonprofit about where money needs to be spent. The Gates Foundation, for\nexample, has specific goals and often makes restricted donations to individual\nnonprofits to accomplish them. But unless you're a domain expert yourself or\ndonating to an umbrella organization, your donation would do more good if it\nwere unrestricted.  \n  \nIf restricted donations do less good than unrestricted ones, why do donors so\noften make them? Partly because doing good isn't donors' only motive. They\noften have other motives as well \u2014 to make a mark, or to generate good\npublicity [1], or to comply with regulations or corporate policies. Many\ndonors may simply never have considered the distinction between restricted and\nunrestricted donations. They may believe that donating money for some specific\npurpose is just how donation works. And to be fair, nonprofits don't try very\nhard to discourage such illusions. They can't afford to. People running\nnonprofits are almost always anxious about money. They can't afford to talk\nback to big donors.  \n  \nYou can't expect candor in a relationship so asymmetric. So I'll tell you what\nnonprofits wish they could tell you. If you want to donate to a nonprofit,\ndonate unrestricted. If you trust them to spend your money, trust them to\ndecide how.  \n  \n  \n  \n  \n  \n**Note**  \n  \n[1] Unfortunately restricted donations tend to generate more publicity than\nunrestricted ones. \"X donates money to build a school in Africa\" is not only\nmore interesting than \"X donates money to Y nonprofit to spend as Y chooses,\"\nbut also focuses more attention on X.  \n  \n**Thanks** to Chase Adam, Ingrid Bassett, Trevor Blackwell, and Edith Elliot\nfor reading drafts of this.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nJuly 2013  \n  \nOne of the most common types of advice we give at Y Combinator is to do things\nthat don't scale. A lot of would-be founders believe that startups either take\noff or don't. You build something, make it available, and if you've made a\nbetter mousetrap, people beat a path to your door as promised. Or they don't,\nin which case the market must not exist. [1]  \n  \nActually startups take off because the founders make them take off. There may\nbe a handful that just grew by themselves, but usually it takes some sort of\npush to get them going. A good metaphor would be the cranks that car engines\nhad before they got electric starters. Once the engine was going, it would\nkeep going, but there was a separate and laborious process to get it going.  \n  \n**Recruit**  \n  \nThe most common unscalable thing founders have to do at the start is to\nrecruit users manually. Nearly all startups have to. You can't wait for users\nto come to you. You have to go out and get them.  \n  \nStripe is one of the most successful startups we've funded, and the problem\nthey solved was an urgent one. If anyone could have sat back and waited for\nusers, it was Stripe. But in fact they're famous within YC for aggressive\nearly user acquisition.  \n  \nStartups building things for other startups have a big pool of potential users\nin the other companies we've funded, and none took better advantage of it than\nStripe. At YC we use the term \"Collison installation\" for the technique they\ninvented. More diffident founders ask \"Will you try our beta?\" and if the\nanswer is yes, they say \"Great, we'll send you a link.\" But the Collison\nbrothers weren't going to wait. When anyone agreed to try Stripe they'd say\n\"Right then, give me your laptop\" and set them up on the spot.  \n  \nThere are two reasons founders resist going out and recruiting users\nindividually. One is a combination of shyness and laziness. They'd rather sit\nat home writing code than go out and talk to a bunch of strangers and probably\nbe rejected by most of them. But for a startup to succeed, at least one\nfounder (usually the CEO) will have to spend a lot of time on sales and\nmarketing. [2]  \n  \nThe other reason founders ignore this path is that the absolute numbers seem\nso small at first. This can't be how the big, famous startups got started,\nthey think. The mistake they make is to underestimate the power of compound\ngrowth. We encourage every startup to measure their progress by weekly [growth\nrate](growth.html). If you have 100 users, you need to get 10 more next week\nto grow 10% a week. And while 110 may not seem much better than 100, if you\nkeep growing at 10% a week you'll be surprised how big the numbers get. After\na year you'll have 14,000 users, and after 2 years you'll have 2 million.  \n  \nYou'll be doing different things when you're acquiring users a thousand at a\ntime, and growth has to slow down eventually. But if the market exists you can\nusually start by recruiting users manually and then gradually switch to less\nmanual methods. [3]  \n  \nAirbnb is a classic example of this technique. Marketplaces are so hard to get\nrolling that you should expect to take heroic measures at first. In Airbnb's\ncase, these consisted of going door to door in New York, recruiting new users\nand helping existing ones improve their listings. When I remember the Airbnbs\nduring YC, I picture them with rolly bags, because when they showed up for\ntuesday dinners they'd always just flown back from somewhere.  \n  \n**Fragile**  \n  \nAirbnb now seems like an unstoppable juggernaut, but early on it was so\nfragile that about 30 days of going out and engaging in person with users made\nthe difference between success and failure.  \n  \nThat initial fragility was not a unique feature of Airbnb. Almost all startups\nare fragile initially. And that's one of the biggest things inexperienced\nfounders and investors (and reporters and know-it-alls on forums) get wrong\nabout them. They unconsciously judge larval startups by the standards of\nestablished ones. They're like someone looking at a newborn baby and\nconcluding \"there's no way this tiny creature could ever accomplish anything.\"  \n  \nIt's harmless if reporters and know-it-alls dismiss your startup. They always\nget things wrong. It's even ok if investors dismiss your startup; they'll\nchange their minds when they see growth. The big danger is that you'll dismiss\nyour startup yourself. I've seen it happen. I often have to encourage founders\nwho don't see the full potential of what they're building. Even Bill Gates\nmade that mistake. He returned to Harvard for the fall semester after starting\nMicrosoft. He didn't stay long, but he wouldn't have returned at all if he'd\nrealized Microsoft was going to be even a fraction of the size it turned out\nto be. [4]  \n  \nThe question to ask about an early stage startup is not \"is this company\ntaking over the world?\" but \"how big could this company get if the founders\ndid the right things?\" And the right things often seem both laborious and\ninconsequential at the time. Microsoft can't have seemed very impressive when\nit was just a couple guys in Albuquerque writing Basic interpreters for a\nmarket of a few thousand hobbyists (as they were then called), but in\nretrospect that was the optimal path to dominating microcomputer software. And\nI know Brian Chesky and Joe Gebbia didn't feel like they were en route to the\nbig time as they were taking \"professional\" photos of their first hosts'\napartments. They were just trying to survive. But in retrospect that too was\nthe optimal path to dominating a big market.  \n  \nHow do you find users to recruit manually? If you build something to solve\n[your own problems](startupideas.html), then you only have to find your peers,\nwhich is usually straightforward. Otherwise you'll have to make a more\ndeliberate effort to locate the most promising vein of users. The usual way to\ndo that is to get some initial set of users by doing a comparatively\nuntargeted launch, and then to observe which kind seem most enthusiastic, and\nseek out more like them. For example, Ben Silbermann noticed that a lot of the\nearliest Pinterest users were interested in design, so he went to a conference\nof design bloggers to recruit users, and that worked well. [5]  \n  \n**Delight**  \n  \nYou should take extraordinary measures not just to acquire users, but also to\nmake them happy. For as long as they could (which turned out to be\nsurprisingly long), Wufoo sent each new user a hand-written thank you note.\nYour first users should feel that signing up with you was one of the best\nchoices they ever made. And you in turn should be racking your brains to think\nof new ways to delight them.  \n  \nWhy do we have to teach startups this? Why is it counterintuitive for\nfounders? Three reasons, I think.  \n  \nOne is that a lot of startup founders are trained as engineers, and customer\nservice is not part of the training of engineers. You're supposed to build\nthings that are robust and elegant, not be slavishly attentive to individual\nusers like some kind of salesperson. Ironically, part of the reason\nengineering is traditionally averse to handholding is that its traditions date\nfrom a time when engineers were less powerful \u2014 when they were only in charge\nof their narrow domain of building things, rather than running the whole show.\nYou can be ornery when you're Scotty, but not when you're Kirk.  \n  \nAnother reason founders don't focus enough on individual customers is that\nthey worry it won't scale. But when founders of larval startups worry about\nthis, I point out that in their current state they have nothing to lose. Maybe\nif they go out of their way to make existing users super happy, they'll one\nday have too many to do so much for. That would be a great problem to have.\nSee if you can make it happen. And incidentally, when it does, you'll find\nthat delighting customers scales better than you expected. Partly because you\ncan usually find ways to make anything scale more than you would have\npredicted, and partly because delighting customers will by then have permeated\nyour culture.  \n  \nI have never once seen a startup lured down a blind alley by trying too hard\nto make their initial users happy.  \n  \nBut perhaps the biggest thing preventing founders from realizing how attentive\nthey could be to their users is that they've never experienced such attention\nthemselves. Their standards for customer service have been set by the\ncompanies they've been customers of, which are mostly big ones. Tim Cook\ndoesn't send you a hand-written note after you buy a laptop. He can't. But you\ncan. That's one advantage of being small: you can provide a level of service\nno big company can. [6]  \n  \nOnce you realize that existing conventions are not the upper bound on user\nexperience, it's interesting in a very pleasant way to think about how far you\ncould go to delight your users.  \n  \n**Experience**  \n  \nI was trying to think of a phrase to convey how extreme your attention to\nusers should be, and I realized Steve Jobs had already done it: insanely\ngreat. Steve wasn't just using \"insanely\" as a synonym for \"very.\" He meant it\nmore literally \u2014 that one should focus on quality of execution to a degree\nthat in everyday life would be considered pathological.  \n  \nAll the most successful startups we've funded have, and that probably doesn't\nsurprise would-be founders. What novice founders don't get is what insanely\ngreat translates to in a larval startup. When Steve Jobs started using that\nphrase, Apple was already an established company. He meant the Mac (and its\ndocumentation and even packaging \u2014 such is the nature of obsession) should be\ninsanely well designed and manufactured. That's not hard for engineers to\ngrasp. It's just a more extreme version of designing a robust and elegant\nproduct.  \n  \nWhat founders have a hard time grasping (and Steve himself might have had a\nhard time grasping) is what insanely great morphs into as you roll the time\nslider back to the first couple months of a startup's life. It's not the\nproduct that should be insanely great, but the experience of being your user.\nThe product is just one component of that. For a big company it's necessarily\nthe dominant one. But you can and should give users an insanely great\nexperience with an early, incomplete, buggy product, if you make up the\ndifference with attentiveness.  \n  \nCan, perhaps, but should? Yes. Over-engaging with early users is not just a\npermissible technique for getting growth rolling. For most successful startups\nit's a necessary part of the feedback loop that makes the product good. Making\na better mousetrap is not an atomic operation. Even if you start the way most\nsuccessful startups have, by building something you yourself need, the first\nthing you build is never quite right. And except in domains with big penalties\nfor making mistakes, it's often better not to aim for perfection initially. In\nsoftware, especially, it usually works best to get something in front of users\nas soon as it has a quantum of utility, and then see what they do with it.\nPerfectionism is often an excuse for procrastination, and in any case your\ninitial model of users is always inaccurate, even if you're one of them. [7]  \n  \nThe feedback you get from engaging directly with your earliest users will be\nthe best you ever get. When you're so big you have to resort to focus groups,\nyou'll wish you could go over to your users' homes and offices and watch them\nuse your stuff like you did when there were only a handful of them.  \n  \n**Fire**  \n  \nSometimes the right unscalable trick is to focus on a deliberately narrow\nmarket. It's like keeping a fire contained at first to get it really hot\nbefore adding more logs.  \n  \nThat's what Facebook did. At first it was just for Harvard students. In that\nform it only had a potential market of a few thousand people, but because they\nfelt it was really for them, a critical mass of them signed up. After Facebook\nstopped being for Harvard students, it remained for students at specific\ncolleges for quite a while. When I interviewed Mark Zuckerberg at Startup\nSchool, he said that while it was a lot of work creating course lists for each\nschool, doing that made students feel the site was their natural home.  \n  \nAny startup that could be described as a marketplace usually has to start in a\nsubset of the market, but this can work for other startups as well. It's\nalways worth asking if there's a subset of the market in which you can get a\ncritical mass of users quickly. [8]  \n  \nMost startups that use the contained fire strategy do it unconsciously. They\nbuild something for themselves and their friends, who happen to be the early\nadopters, and only realize later that they could offer it to a broader market.\nThe strategy works just as well if you do it unconsciously. The biggest danger\nof not being consciously aware of this pattern is for those who naively\ndiscard part of it. E.g. if you don't build something for yourself and your\nfriends, or even if you do, but you come from the corporate world and your\nfriends are not early adopters, you'll no longer have a perfect initial market\nhanded to you on a platter.  \n  \nAmong companies, the best early adopters are usually other startups. They're\nmore open to new things both by nature and because, having just been started,\nthey haven't made all their choices yet. Plus when they succeed they grow\nfast, and you with them. It was one of many unforeseen advantages of the YC\nmodel (and specifically of making YC big) that B2B startups now have an\ninstant market of hundreds of other startups ready at hand.  \n  \n**Meraki**  \n  \nFor [hardware startups](hw.html) there's a variant of doing things that don't\nscale that we call \"pulling a Meraki.\" Although we didn't fund Meraki, the\nfounders were Robert Morris's grad students, so we know their history. They\ngot started by doing something that really doesn't scale: assembling their\nrouters themselves.  \n  \nHardware startups face an obstacle that software startups don't. The minimum\norder for a factory production run is usually several hundred thousand\ndollars. Which can put you in a catch-22: without a product you can't generate\nthe growth you need to raise the money to manufacture your product. Back when\nhardware startups had to rely on investors for money, you had to be pretty\nconvincing to overcome this. The arrival of crowdfunding (or more precisely,\npreorders) has helped a lot. But even so I'd advise startups to pull a Meraki\ninitially if they can. That's what Pebble did. The Pebbles\n[assembled](https://sep.turbifycdn.com/ty/cdn/paulgraham/eric.jpg?t=1688221954&)\nthe first several hundred watches themselves. If they hadn't gone through that\nphase, they probably wouldn't have sold $10 million worth of watches when they\ndid go on Kickstarter.  \n  \nLike paying excessive attention to early customers, fabricating things\nyourself turns out to be valuable for hardware startups. You can tweak the\ndesign faster when you're the factory, and you learn things you'd never have\nknown otherwise. Eric Migicovsky of Pebble said one of the things he learned\nwas \"how valuable it was to source good screws.\" Who knew?  \n  \n**Consult**  \n  \nSometimes we advise founders of B2B startups to take over-engagement to an\nextreme, and to pick a single user and act as if they were consultants\nbuilding something just for that one user. The initial user serves as the form\nfor your mold; keep tweaking till you fit their needs perfectly, and you'll\nusually find you've made something other users want too. Even if there aren't\nmany of them, there are probably adjacent territories that have more. As long\nas you can find just one user who really needs something and can act on that\nneed, you've got a toehold in making something people want, and that's as much\nas any startup needs initially. [9]  \n  \nConsulting is the canonical example of work that doesn't scale. But (like\nother ways of bestowing one's favors liberally) it's safe to do it so long as\nyou're not being paid to. That's where companies cross the line. So long as\nyou're a product company that's merely being extra attentive to a customer,\nthey're very grateful even if you don't solve all their problems. But when\nthey start paying you specifically for that attentiveness \u2014 when they start\npaying you by the hour \u2014 they expect you to do everything.  \n  \nAnother consulting-like technique for recruiting initially lukewarm users is\nto use your software yourselves on their behalf. We did that at Viaweb. When\nwe approached merchants asking if they wanted to use our software to make\nonline stores, some said no, but they'd let us make one for them. Since we\nwould do anything to get users, we did. We felt pretty lame at the time.\nInstead of organizing big strategic e-commerce partnerships, we were trying to\nsell luggage and pens and men's shirts. But in retrospect it was exactly the\nright thing to do, because it taught us how it would feel to merchants to use\nour software. Sometimes the feedback loop was near instantaneous: in the\nmiddle of building some merchant's site I'd find I needed a feature we didn't\nhave, so I'd spend a couple hours implementing it and then resume building the\nsite.  \n  \n**Manual**  \n  \nThere's a more extreme variant where you don't just use your software, but are\nyour software. When you only have a small number of users, you can sometimes\nget away with doing by hand things that you plan to automate later. This lets\nyou launch faster, and when you do finally automate yourself out of the loop,\nyou'll know exactly what to build because you'll have muscle memory from doing\nit yourself.  \n  \nWhen manual components look to the user like software, this technique starts\nto have aspects of a practical joke. For example, the way Stripe delivered\n\"instant\" merchant accounts to its first users was that the founders manually\nsigned them up for traditional merchant accounts behind the scenes.  \n  \nSome startups could be entirely manual at first. If you can find someone with\na problem that needs solving and you can solve it manually, go ahead and do\nthat for as long as you can, and then gradually automate the bottlenecks. It\nwould be a little frightening to be solving users' problems in a way that\nwasn't yet automatic, but less frightening than the far more common case of\nhaving something automatic that doesn't yet solve anyone's problems.  \n  \n**Big**  \n  \nI should mention one sort of initial tactic that usually doesn't work: the Big\nLaunch. I occasionally meet founders who seem to believe startups are\nprojectiles rather than powered aircraft, and that they'll make it big if and\nonly if they're launched with sufficient initial velocity. They want to launch\nsimultaneously in 8 different publications, with embargoes. And on a tuesday,\nof course, since they read somewhere that's the optimum day to launch\nsomething.  \n  \nIt's easy to see how little launches matter. Think of some successful\nstartups. How many of their launches do you remember? All you need from a\nlaunch is some initial core of users. How well you're doing a few months later\nwill depend more on how happy you made those users than how many there were of\nthem. [10]  \n  \nSo why do founders think launches matter? A combination of solipsism and\nlaziness. They think what they're building is so great that everyone who hears\nabout it will immediately sign up. Plus it would be so much less work if you\ncould get users merely by broadcasting your existence, rather than recruiting\nthem one at a time. But even if what you're building really is great, getting\nusers will always be a gradual process \u2014 partly because great things are\nusually also novel, but mainly because users have other things to think about.  \n  \nPartnerships too usually don't work. They don't work for startups in general,\nbut they especially don't work as a way to get growth started. It's a common\nmistake among inexperienced founders to believe that a partnership with a big\ncompany will be their big break. Six months later they're all saying the same\nthing: that was way more work than we expected, and we ended up getting\npractically nothing out of it. [11]  \n  \nIt's not enough just to do something extraordinary initially. You have to make\nan extraordinary _effort_ initially. Any strategy that omits the effort \u2014\nwhether it's expecting a big launch to get you users, or a big partner \u2014 is\nipso facto suspect.  \n  \n**Vector**  \n  \nThe need to do something unscalably laborious to get started is so nearly\nuniversal that it might be a good idea to stop thinking of startup ideas as\nscalars. Instead we should try thinking of them as pairs of what you're going\nto build, plus the unscalable thing(s) you're going to do initially to get the\ncompany going.  \n  \nIt could be interesting to start viewing startup ideas this way, because now\nthat there are two components you can try to be imaginative about the second\nas well as the first. But in most cases the second component will be what it\nusually is \u2014 recruit users manually and give them an overwhelmingly good\nexperience \u2014 and the main benefit of treating startups as vectors will be to\nremind founders they need to work hard in two dimensions. [12]  \n  \nIn the best case, both components of the vector contribute to your company's\nDNA: the unscalable things you have to do to get started are not merely a\nnecessary evil, but change the company permanently for the better. If you have\nto be aggressive about user acquisition when you're small, you'll probably\nstill be aggressive when you're big. If you have to manufacture your own\nhardware, or use your software on users's behalf, you'll learn things you\ncouldn't have learned otherwise. And most importantly, if you have to work\nhard to delight users when you only have a handful of them, you'll keep doing\nit when you have a lot.  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] Actually Emerson never mentioned mousetraps specifically. He wrote \"If a\nman has good corn or wood, or boards, or pigs, to sell, or can make better\nchairs or knives, crucibles or church organs, than anybody else, you will find\na broad hard-beaten road to his house, though it be in the woods.\"  \n  \n[2] Thanks to Sam Altman for suggesting I make this explicit. And no, you\ncan't avoid doing sales by hiring someone to do it for you. You have to do\nsales yourself initially. Later you can hire a real salesperson to replace\nyou.  \n  \n[3] The reason this works is that as you get bigger, your size helps you grow.\nPatrick Collison wrote \"At some point, there was a very noticeable change in\nhow Stripe felt. It tipped from being this boulder we had to push to being a\ntrain car that in fact had its own momentum.\"  \n  \n[4] One of the more subtle ways in which YC can help founders is by\ncalibrating their ambitions, because we know exactly how a lot of successful\nstartups looked when they were just getting started.  \n  \n[5] If you're building something for which you can't easily get a small set of\nusers to observe \u2014 e.g. enterprise software \u2014 and in a domain where you have\nno connections, you'll have to rely on cold calls and introductions. But\nshould you even be working on such an idea?  \n  \n[6] Garry Tan pointed out an interesting trap founders fall into in the\nbeginning. They want so much to seem big that they imitate even the flaws of\nbig companies, like indifference to individual users. This seems to them more\n\"professional.\" Actually it's better to embrace the fact that you're small and\nuse whatever advantages that brings.  \n  \n[7] Your user model almost couldn't be perfectly accurate, because users'\nneeds often change in response to what you build for them. Build them a\nmicrocomputer, and suddenly they need to run spreadsheets on it, because the\narrival of your new microcomputer causes someone to invent the spreadsheet.  \n  \n[8] If you have to choose between the subset that will sign up quickest and\nthose that will pay the most, it's usually best to pick the former, because\nthose are probably the early adopters. They'll have a better influence on your\nproduct, and they won't make you expend as much effort on sales. And though\nthey have less money, you don't need that much to maintain your target growth\nrate early on.  \n  \n[9] Yes, I can imagine cases where you could end up making something that was\nreally only useful for one user. But those are usually obvious, even to\ninexperienced founders. So if it's not obvious you'd be making something for a\nmarket of one, don't worry about that danger.  \n  \n[10] There may even be an inverse correlation between launch magnitude and\nsuccess. The only launches I remember are famous flops like the Segway and\nGoogle Wave. Wave is a particularly alarming example, because I think it was\nactually a great idea that was killed partly by its overdone launch.  \n  \n[11] Google grew big on the back of Yahoo, but that wasn't a partnership.\nYahoo was their customer.  \n  \n[12] It will also remind founders that an idea where the second component is\nempty \u2014 an idea where there is nothing you can do to get going, e.g. because\nyou have no way to find users to recruit manually \u2014 is probably a bad idea, at\nleast for those founders.  \n  \n**Thanks** to Sam Altman, Paul Buchheit, Patrick Collison, Kevin Hale, Steven\nLevy, Jessica Livingston, Geoff Ralston, and Garry Tan for reading drafts of\nthis.  \n  \n\nOctober 2020  \n  \nOne of the biggest things holding people back from doing great work is the\nfear of making something lame. And this fear is not an irrational one. Many\ngreat projects go through a stage early on where they don't seem very\nimpressive, even to their creators. You have to push through this stage to\nreach the great work that lies beyond. But many people don't. Most people\ndon't even reach the stage of making something they're embarrassed by, let\nalone continue past it. They're too frightened even to start.  \n  \nImagine if we could turn off the fear of making something lame. Imagine how\nmuch more we'd do.  \n  \nIs there any hope of turning it off? I think so. I think the habits at work\nhere are not very deeply rooted.  \n  \nMaking new things is itself a new thing for us as a species. It has always\nhappened, but till the last few centuries it happened so slowly as to be\ninvisible to individual humans. And since we didn't need customs for dealing\nwith new ideas, we didn't develop any.  \n  \nWe just don't have enough experience with early versions of ambitious projects\nto know how to respond to them. We judge them as we would judge more finished\nwork, or less ambitious projects. We don't realize they're a special case.  \n  \nOr at least, most of us don't. One reason I'm confident we can do better is\nthat it's already starting to happen. There are already a few places that are\nliving in the future in this respect. Silicon Valley is one of them: an\nunknown person working on a strange-sounding idea won't automatically be\ndismissed the way they would back home. In Silicon Valley, people have learned\nhow dangerous that is.  \n  \nThe right way to deal with new ideas is to treat them as a challenge to your\nimagination \u0097 not just to have lower standards, but to [_switch\npolarity_](altair.html) entirely, from listing the reasons an idea won't work\nto trying to think of ways it could. That's what I do when I meet people with\nnew ideas. I've become quite good at it, but I've had a lot of practice. Being\na partner at Y Combinator means being practically immersed in strange-sounding\nideas proposed by unknown people. Every six months you get thousands of new\nones thrown at you and have to sort through them, knowing that in a world with\na power-law distribution of outcomes, it will be painfully obvious if you miss\nthe needle in this haystack. Optimism becomes urgent.  \n  \nBut I'm hopeful that, with time, this kind of optimism can become widespread\nenough that it becomes a social custom, not just a trick used by a few\nspecialists. It is after all an extremely lucrative trick, and those tend to\nspread quickly.  \n  \nOf course, inexperience is not the only reason people are too harsh on early\nversions of ambitious projects. They also do it to seem clever. And in a field\nwhere the new ideas are risky, like startups, those who dismiss them are in\nfact more likely to be right. Just not when their predictions are [_weighted\nby outcome_](swan.html).  \n  \nBut there is another more sinister reason people dismiss new ideas. If you try\nsomething ambitious, many of those around you will hope, consciously or\nunconsciously, that you'll fail. They worry that if you try something\nambitious and succeed, it will put you above them. In some countries this is\nnot just an individual failing but part of the national culture.  \n  \nI wouldn't claim that people in Silicon Valley overcome these impulses because\nthey're morally better. [1] The reason many hope you'll succeed is that they\nhope to rise with you. For investors this incentive is particularly explicit.\nThey want you to succeed because they hope you'll make them rich in the\nprocess. But many other people you meet can hope to benefit in some way from\nyour success. At the very least they'll be able to say, when you're famous,\nthat they've known you since way back.  \n  \nBut even if Silicon Valley's encouraging attitude is rooted in self-interest,\nit has over time actually grown into a sort of benevolence. Encouraging\nstartups has been practiced for so long that it has become a custom. Now it\njust seems that that's what one does with startups.  \n  \nMaybe Silicon Valley is too optimistic. Maybe it's too easily fooled by\nimpostors. Many less optimistic journalists want to believe that. But the\nlists of impostors they cite are suspiciously short, and plagued with\nasterisks. [2] If you use revenue as the test, Silicon Valley's optimism seems\nbetter tuned than the rest of the world's. And because it works, it will\nspread.  \n  \nThere's a lot more to new ideas than new startup ideas, of course. The fear of\nmaking something lame holds people back in every field. But Silicon Valley\nshows how quickly customs can evolve to support new ideas. And that in turn\nproves that dismissing new ideas is not so deeply rooted in human nature that\nit can't be unlearnt.  \n  \n___________  \n  \nUnfortunately, if you want to do new things, you'll face a force more powerful\nthan other people's skepticism: your own skepticism. You too will judge your\nearly work too harshly. How do you avoid that?  \n  \nThis is a difficult problem, because you don't want to completely eliminate\nyour horror of making something lame. That's what steers you toward doing good\nwork. You just want to turn it off temporarily, the way a painkiller\ntemporarily turns off pain.  \n  \nPeople have already discovered several techniques that work. Hardy mentions\ntwo in _A Mathematician's Apology_ :\n\n> Good work is not done by \"humble\" men. It is one of the first duties of a\n> professor, for example, in any subject, to exaggerate a little both the\n> importance of his subject and his importance in it.\n\nIf you overestimate the importance of what you're working on, that will\ncompensate for your mistakenly harsh judgment of your initial results. If you\nlook at something that's 20% of the way to a goal worth 100 and conclude that\nit's 10% of the way to a goal worth 200, your estimate of its expected value\nis correct even though both components are wrong.  \n  \nIt also helps, as Hardy suggests, to be slightly overconfident. I've noticed\nin many fields that the most successful people are slightly overconfident. On\nthe face of it this seems implausible. Surely it would be optimal to have\nexactly the right estimate of one's abilities. How could it be an advantage to\nbe mistaken? Because this error compensates for other sources of error in the\nopposite direction: being slightly overconfident armors you against both other\npeople's skepticism and your own.  \n  \nIgnorance has a similar effect. It's safe to make the mistake of judging early\nwork as finished work if you're a sufficiently lax judge of finished work. I\ndoubt it's possible to cultivate this kind of ignorance, but empirically it's\na real advantage, especially for the young.  \n  \nAnother way to get through the lame phase of ambitious projects is to surround\nyourself with the right people \u0097 to create an eddy in the social headwind. But\nit's not enough to collect people who are always encouraging. You'd learn to\ndiscount that. You need colleagues who can actually tell an ugly duckling from\na baby swan. The people best able to do this are those working on similar\nprojects of their own, which is why university departments and research labs\nwork so well. You don't need institutions to collect colleagues. They\nnaturally coalesce, given the chance. But it's very much worth accelerating\nthis process by seeking out other people trying to do new things.  \n  \nTeachers are in effect a special case of colleagues. It's a teacher's job both\nto see the promise of early work and to encourage you to continue. But\nteachers who are good at this are unfortunately quite rare, so if you have the\nopportunity to learn from one, take it. [3]  \n  \nFor some it might work to rely on sheer discipline: to tell yourself that you\njust have to press on through the initial crap phase and not get discouraged.\nBut like a lot of \"just tell yourself\" advice, this is harder than it sounds.\nAnd it gets still harder as you get older, because your standards rise. The\nold do have one compensating advantage though: they've been through this\nbefore.  \n  \nIt can help if you focus less on where you are and more on the rate of change.\nYou won't worry so much about doing bad work if you can see it improving.\nObviously the faster it improves, the easier this is. So when you start\nsomething new, it's good if you can spend a lot of time on it. That's another\nadvantage of being young: you tend to have bigger blocks of time.  \n  \nAnother common trick is to start by considering new work to be of a different,\nless exacting type. To start a painting saying that it's just a sketch, or a\nnew piece of software saying that it's just a quick hack. Then you judge your\ninitial results by a lower standard. Once the project is rolling you can\nsneakily convert it to something more. [4]  \n  \nThis will be easier if you use a medium that lets you work fast and doesn't\nrequire too much commitment up front. It's easier to convince yourself that\nsomething is just a sketch when you're drawing in a notebook than when you're\ncarving stone. Plus you get initial results faster. [5] [6]  \n  \nIt will be easier to try out a risky project if you think of it as a way to\nlearn and not just as a way to make something. Then even if the project truly\nis a failure, you'll still have gained by it. If the problem is sharply enough\ndefined, failure itself is knowledge: if the theorem you're trying to prove\nturns out to be false, or you use a structural member of a certain size and it\nfails under stress, you've learned something, even if it isn't what you wanted\nto learn. [7]  \n  \nOne motivation that works particularly well for me is curiosity. I like to try\nnew things just to see how they'll turn out. We started Y Combinator in this\nspirit, and it was one of main things that kept me going while I was working\non [_Bel_](bel.html). Having worked for so long with various dialects of Lisp,\nI was very curious to see what its inherent shape was: what you'd end up with\nif you followed the axiomatic approach all the way.  \n  \nBut it's a bit strange that you have to play mind games with yourself to avoid\nbeing discouraged by lame-looking early efforts. The thing you're trying to\ntrick yourself into believing is in fact the truth. A lame-looking early\nversion of an ambitious project truly is more valuable than it seems. So the\nultimate solution may be to teach yourself that.  \n  \nOne way to do it is to study the histories of people who've done great work.\nWhat were they thinking early on? What was the very first thing they did? It\ncan sometimes be hard to get an accurate answer to this question, because\npeople are often embarrassed by their earliest work and make little effort to\npublish it. (They too misjudge it.) But when you can get an accurate picture\nof the first steps someone made on the path to some great work, they're often\npretty feeble. [8]  \n  \nPerhaps if you study enough such cases, you can teach yourself to be a better\njudge of early work. Then you'll be immune both to other people's skepticism\nand your own fear of making something lame. You'll see early work for what it\nis.  \n  \nCuriously enough, the solution to the problem of judging early work too\nharshly is to realize that our attitudes toward it are themselves early work.\nHolding everything to the same standard is a crude version 1. We're already\nevolving better customs, and we can already see signs of how big the payoff\nwill be.  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] This assumption may be too conservative. There is some evidence that\nhistorically the Bay Area has attracted a [_different sort of\nperson_](cities.html) than, say, New York City.  \n  \n[2] One of their great favorites is Theranos. But the most conspicuous feature\nof Theranos's cap table is the absence of Silicon Valley firms. Journalists\nwere fooled by Theranos, but Silicon Valley investors weren't.  \n  \n[3] I made two mistakes about teachers when I was younger. I cared more about\nprofessors' research than their reputations as teachers, and I was also wrong\nabout what it meant to be a good teacher. I thought it simply meant to be good\nat explaining things.  \n  \n[4] Patrick Collison points out that you can go past treating something as a\nhack in the sense of a prototype and onward to the sense of the word that\nmeans something closer to a practical joke:\n\n> I think there may be something related to being a hack that can be powerful\n> \u0097 the idea of making the tenuousness and implausibility _a feature_. \"Yes,\n> it's a bit ridiculous, right? I'm just trying to see how far such a naive\n> approach can get.\" YC seemed to me to have this characteristic.\n\n[5] Much of the advantage of switching from physical to digital media is not\nthe software per se but that it lets you start something new with little\nupfront commitment.  \n  \n[6] John Carmack adds:\n\n> The value of a medium without a vast gulf between the early work and the\n> final work is exemplified in game mods. The original Quake game was a golden\n> age for mods, because everything was very flexible, but so crude due to\n> technical limitations, that quick hacks to try out a gameplay idea weren't\n> all _that_ far from the official game. Many careers were born from that, but\n> as the commercial game quality improved over the years, it became almost a\n> full time job to make a successful mod that would be appreciated by the\n> community. This was dramatically reversed with Minecraft and later Roblox,\n> where the entire esthetic of the experience was so explicitly crude that\n> innovative gameplay concepts became the overriding value. These \"crude\" game\n> mods by single authors are now often bigger deals than massive professional\n> teams' work.\n\n[7] Lisa Randall suggests that we\n\n> treat new things as experiments. That way there's no such thing as failing,\n> since you learn something no matter what. You treat it like an experiment in\n> the sense that if it really rules something out, you give up and move on,\n> but if there's some way to vary it to make it work better, go ahead and do\n> that\n\n[8] Michael Nielsen points out that the internet has made this easier, because\nyou can see programmers' first commits, musicians' first videos, and so on.  \n  \n  \n  \n**Thanks** to Trevor Blackwell, John Carmack, Patrick Collison, Jessica\nLivingston, Michael Nielsen, and Lisa Randall for reading drafts of this.  \n  \n\nDecember 2020  \n  \nJessica and I have certain words that have special significance when we're\ntalking about startups. The highest compliment we can pay to founders is to\ndescribe them as \"earnest.\" This is not by itself a guarantee of success. You\ncould be earnest but incapable. But when founders are both formidable (another\nof our words) and earnest, they're as close to unstoppable as you get.  \n  \nEarnestness sounds like a boring, even Victorian virtue. It seems a bit of an\nanachronism that people in Silicon Valley would care about it. Why does this\nmatter so much?  \n  \nWhen you call someone earnest, you're making a statement about their motives.\nIt means both that they're doing something for the right reasons, and that\nthey're trying as hard as they can. If we imagine motives as vectors, it means\nboth the direction and the magnitude are right. Though these are of course\nrelated: when people are doing something for the right reasons, they try\nharder. [1]  \n  \nThe reason motives matter so much in Silicon Valley is that so many people\nthere have the wrong ones. Starting a successful startup makes you rich and\nfamous. So a lot of the people trying to start them are doing it for those\nreasons. Instead of what? Instead of interest in the problem for its own sake.\nThat is the root of earnestness. [2]  \n  \nIt's also the hallmark of a nerd. Indeed, when people describe themselves as\n\"x nerds,\" what they mean is that they're interested in x for its own sake,\nand not because it's cool to be interested in x, or because of what they can\nget from it. They're saying they care so much about x that they're willing to\nsacrifice seeming cool for its sake.  \n  \nA [_genuine interest_](genius.html) in something is a very powerful motivator\n\u0097 for some people, the most powerful motivator of all. [3] Which is why it's\nwhat Jessica and I look for in founders. But as well as being a source of\nstrength, it's also a source of vulnerability. Caring constrains you. The\nearnest can't easily reply in kind to mocking banter, or put on a cool facade\nof nihil admirari. They care too much. They are doomed to be the straight man.\nThat's a real disadvantage in your [_teenage years_](nerds.html), when mocking\nbanter and nihil admirari often have the upper hand. But it becomes an\nadvantage later.  \n  \nIt's a commonplace now that the kids who were nerds in high school become the\ncool kids' bosses later on. But people misunderstand why this happens. It's\nnot just because the nerds are smarter, but also because they're more earnest.\nWhen the problems get harder than the fake ones you're given in high school,\ncaring about them starts to matter.  \n  \nDoes it always matter? Do the earnest always win? Not always. It probably\ndoesn't matter much in politics, or in crime, or in certain types of business\nthat are similar to crime, like gambling, personal injury law, patent\ntrolling, and so on. Nor does it matter in academic fields at the more\n[_bogus_](https://scholar.google.com/scholar?hl=en&as_sdt=0%2C5&q=hermeneutic+dialectics+hegemonic+phenomenology+intersectionality)\nend of the spectrum. And though I don't know enough to say for sure, it may\nnot matter in some kinds of humor: it may be possible to be completely cynical\nand still be very funny. [4]  \n  \nLooking at the list of fields I mentioned, there's an obvious pattern. Except\npossibly for humor, these are all types of work I'd avoid like the plague. So\nthat could be a useful heuristic for deciding which fields to work in: how\nmuch does earnestness matter? Which can in turn presumably be inferred from\nthe prevalence of nerds at the top.  \n  \nAlong with \"nerd,\" another word that tends to be associated with earnestness\nis \"naive.\" The earnest often seem naive. It's not just that they don't have\nthe motives other people have. They often don't fully grasp that such motives\nexist. Or they may know intellectually that they do, but because they don't\nfeel them, they forget about them. [5]  \n  \nIt works to be slightly naive not just about motives but also, believe it or\nnot, about the problems you're working on. Naive optimism can compensate for\nthe bit rot that [_rapid change_](ecw.html) causes in established beliefs. You\nplunge into some problem saying \"How hard can it be?\", and then after solving\nit you learn that it was till recently insoluble.  \n  \nNaivete is an obstacle for anyone who wants to seem sophisticated, and this is\none reason would-be intellectuals find it so difficult to understand Silicon\nValley. It hasn't been safe for such people to use the word \"earnest\" outside\nscare quotes since Oscar Wilde wrote \"The Importance of Being Earnest\" in\n1895. And yet when you zoom in on Silicon Valley, right into [_Jessica\nLivingston's brain_](jessica.html), that's what her x-ray vision is seeking\nout in founders. Earnestness! Who'd have guessed? Reporters literally can't\nbelieve it when founders making piles of money say that they started their\ncompanies to make the world better. The situation seems made for mockery. How\ncan these founders be so naive as not to realize how implausible they sound?  \n  \nThough those asking this question don't realize it, that's not a rhetorical\nquestion.  \n  \nA lot of founders are faking it, of course, particularly the smaller fry, and\nthe soon to be smaller fry. But not all of them. There are a significant\nnumber of founders who really are interested in the problem they're solving\nmainly for its own sake.  \n  \nWhy shouldn't there be? We have no difficulty believing that people would be\ninterested in history or math or even old bus tickets for their own sake. Why\ncan't there be people interested in self-driving cars or social networks for\ntheir own sake? When you look at the question from this side, it seems obvious\nthere would be. And isn't it likely that having a deep interest in something\nwould be a source of great energy and resilience? It is in every other field.  \n  \nThe question really is why we have a blind spot about business. And the answer\nto that is obvious if you know enough history. For most of history, making\nlarge amounts of money has not been very intellectually interesting. In\npreindustrial times it was never far from robbery, and some areas of business\nstill retain that character, except using lawyers instead of soldiers.  \n  \nBut there are other areas of business where the work is genuinely interesting.\nHenry Ford got to spend much of his time working on interesting technical\nproblems, and for the last several decades the trend in that direction has\nbeen accelerating. It's much easier now to make a lot of money by working on\nsomething you're interested in than it was [_50 years ago_](re.html). And\nthat, rather than how fast they grow, may be the most important change that\nstartups represent. Though indeed, the fact that the work is genuinely\ninteresting is a big part of why it gets done so fast. [6]  \n  \nCan you imagine a more important change than one in the relationship between\nintellectual curiosity and money? These are two of the most powerful forces in\nthe world, and in my lifetime they've become significantly more aligned. How\ncould you not be fascinated to watch something like this happening in real\ntime?  \n  \nI meant this essay to be about earnestness generally, and now I've gone and\ntalked about startups again. But I suppose at least it serves as an example of\nan x nerd in the wild.  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] It's interesting how many different ways there are _not_ to be earnest: to\nbe cleverly cynical, to be superficially brilliant, to be conspicuously\nvirtuous, to be cool, to be sophisticated, to be orthodox, to be a snob, to\nbully, to pander, to be on the make. This pattern suggests that earnestness is\nnot one end of a continuum, but a target one can fall short of in multiple\ndimensions.  \n  \nAnother thing I notice about this list is that it sounds like a list of the\nways people behave on Twitter. Whatever else social media is, it's a vivid\ncatalogue of ways not to be earnest.  \n  \n[2] People's motives are as mixed in Silicon Valley as anywhere else. Even the\nfounders motivated mostly by money tend to be at least somewhat interested in\nthe problem they're solving, and even the founders most interested in the\nproblem they're solving also like the idea of getting rich. But there's great\nvariation in the relative proportions of different founders' motivations.  \n  \nAnd when I talk about \"wrong\" motives, I don't mean morally wrong. There's\nnothing morally wrong with starting a startup to make money. I just mean that\nthose startups don't do as well.  \n  \n[3] The most powerful motivator for most people is probably family. But there\nare some for whom intellectual curiosity comes first. In his (wonderful)\nautobiography, Paul Halmos says explicitly that for a mathematician, math must\ncome before anything else, including family. Which at least implies that it\ndid for him.  \n  \n[4] Interestingly, just as the word \"nerd\" implies earnestness even when used\nas a metaphor, the word \"politics\" implies the opposite. It's not only in\nactual politics that earnestness seems to be a handicap, but also in office\npolitics and academic politics.  \n  \n[5] It's a bigger social error to seem naive in most European countries than\nit is in America, and this may be one of subtler reasons startups are less\ncommon there. Founder culture is completely at odds with sophisticated\ncynicism.  \n  \nThe most earnest part of Europe is Scandinavia, and not surprisingly this is\nalso the region with the highest number of successful startups per capita.  \n  \n[6] Much of business is schleps, and probably always will be. But even being a\nprofessor is largely schleps. It would be interesting to collect statistics\nabout the schlep ratios of different jobs, but I suspect they'd rarely be less\nthan 30%.  \n  \n  \n  \n**Thanks** to Trevor Blackwell, Patrick Collison, Suhail Doshi, Jessica\nLivingston, Mattias Ljungman, Harj Taggar, and Kyle Vogt for reading drafts of\nthis.  \n  \n\nJuly 2007  \n  \nAn investor wants to give you money for a certain percentage of your startup.\nShould you take it? You're about to hire your first employee. How much stock\nshould you give him?  \n  \nThese are some of the hardest questions founders face. And yet both have the\nsame answer:  \n  \n1/(1 - n)  \n  \nWhenever you're trading stock in your company for anything, whether it's money\nor an employee or a deal with another company, the test for whether to do it\nis the same. You should give up n% of your company if what you trade it for\nimproves your average outcome enough that the (100 - n)% you have left is\nworth more than the whole company was before.  \n  \nFor example, if an investor wants to buy half your company, how much does that\ninvestment have to improve your average outcome for you to break even?\nObviously it has to double: if you trade half your company for something that\nmore than doubles the company's average outcome, you're net ahead. You have\nhalf as big a share of something worth more than twice as much.  \n  \nIn the general case, if n is the fraction of the company you're giving up, the\ndeal is a good one if it makes the company worth more than 1/(1 - n).  \n  \nFor example, suppose Y Combinator offers to fund you in return for 7% of your\ncompany. In this case, n is .07 and 1/(1 - n) is 1.075. So you should take the\ndeal if you believe we can improve your average outcome by more than 7.5%. If\nwe improve your outcome by 10%, you're net ahead, because the remaining .93\nyou hold is worth .93 x 1.1 = 1.023. [1]  \n  \nOne of the things the equity equation shows us is that, financially at least,\ntaking money from a top VC firm can be a really good deal. Greg Mcadoo from\nSequoia recently said at a YC dinner that when Sequoia invests alone they like\nto take about 30% of a company. 1/.7 = 1.43, meaning that deal is worth taking\nif they can improve your outcome by more than 43%. For the average startup,\nthat would be an extraordinary bargain. It would improve the average startup's\nprospects by more than 43% just to be able to _say_ they were funded by\nSequoia, even if they never actually got the money.  \n  \nThe reason Sequoia is such a good deal is that the percentage of the company\nthey take is artificially low. They don't even try to get market price for\ntheir investment; they limit their holdings to leave the founders enough stock\nto feel the company is still theirs.  \n  \nThe catch is that Sequoia gets about 6000 business plans a year and funds\nabout 20 of them, so the odds of getting this great deal are 1 in 300. The\ncompanies that make it through are not average startups.  \n  \nOf course, there are other factors to consider in a VC deal. It's never just a\nstraight trade of money for stock. But if it were, taking money from a top\nfirm would generally be a bargain.  \n  \nYou can use the same formula when giving stock to employees, but it works in\nthe other direction. If i is the average outcome for the company with the\naddition of some new person, then they're worth n such that i = 1/(1 - n).\nWhich means n = (i - 1)/i.  \n  \nFor example, suppose you're just two founders and you want to hire an\nadditional hacker who's so good you feel he'll increase the average outcome of\nthe whole company by 20%. n = (1.2 - 1)/1.2 = .167. So you'll break even if\nyou trade 16.7% of the company for him.  \n  \nThat doesn't mean 16.7% is the right amount of stock to give him. Stock is not\nthe only cost of hiring someone: there's usually salary and overhead as well.\nAnd if the company merely breaks even on the deal, there's no reason to do it.  \n  \nI think to translate salary and overhead into stock you should multiply the\nannual rate by about 1.5. Most startups grow fast or die; if you die you don't\nhave to pay the guy, and if you grow fast you'll be paying next year's salary\nout of next year's valuation, which should be 3x this year's. If your\nvaluation grows 3x a year, the total cost in stock of a new hire's salary and\noverhead is 1.5 years' cost at the present valuation. [2]  \n  \nHow much of an additional margin should the company need as the \"activation\nenergy\" for the deal? Since this is in effect the company's profit on a hire,\nthe market will determine that: if you're a hot opportunity, you can charge\nmore.  \n  \nLet's run through an example. Suppose the company wants to make a \"profit\" of\n50% on the new hire mentioned above. So subtract a third from 16.7% and we\nhave 11.1% as his \"retail\" price. Suppose further that he's going to cost $60k\na year in salary and overhead, x 1.5 = $90k total. If the company's valuation\nis $2 million, $90k is 4.5%. 11.1% - 4.5% = an offer of 6.6%.  \n  \nIncidentally, notice how important it is for early employees to take little\nsalary. It comes right out of stock that could otherwise be given to them.  \n  \nObviously there is a great deal of play in these numbers. I'm not claiming\nthat stock grants can now be reduced to a formula. Ultimately you always have\nto guess. But at least know what you're guessing. If you choose a number based\non your gut feel, or a table of typical grant sizes supplied by a VC firm,\nunderstand what those are estimates of.  \n  \nAnd more generally, when you make any decision involving equity, run it\nthrough 1/(1 - n) to see if it makes sense. You should always feel richer\nafter trading equity. If the trade didn't increase the value of your remaining\nshares enough to put you net ahead, you wouldn't have (or shouldn't have) done\nit.  \n  \n  \n  \n**Notes**  \n  \n[1] This is why we can't believe anyone would think Y Combinator was a bad\ndeal. Does anyone really think we're so useless that in three months we can't\nimprove a startup's prospects by 7.5%?  \n  \n[2] The obvious choice for your present valuation is the post-money valuation\nof your last funding round. This probably undervalues the company, though,\nbecause (a) unless your last round just happened, the company is presumably\nworth more, and (b) the valuation of an early funding round usually reflects\nsome other contribution by the investors.  \n  \n**Thanks** to Sam Altman, Trevor Blackwell, Paul Buchheit, Hutch Fishman,\nDavid Hornik, Paul Kedrosky, Jessica Livingston, Gary Sabot, and Joshua\nSchachter for reading drafts of this.  \n  \n\nSeptember 2004  \n  \nRemember the essays you had to write in high school? Topic sentence,\nintroductory paragraph, supporting paragraphs, conclusion. The conclusion\nbeing, say, that Ahab in _Moby Dick_ was a Christ-like figure.  \n  \nOy. So I'm going to try to give the other side of the story: what an essay\nreally is, and how you write one. Or at least, how I write one.  \n  \n**Mods**  \n  \nThe most obvious difference between real essays and the things one has to\nwrite in school is that real essays are not exclusively about English\nliterature. Certainly schools should teach students how to write. But due to a\nseries of historical accidents the teaching of writing has gotten mixed\ntogether with the study of literature. And so all over the country students\nare writing not about how a baseball team with a small budget might compete\nwith the Yankees, or the role of color in fashion, or what constitutes a good\ndessert, but about symbolism in Dickens.  \n  \nWith the result that writing is made to seem boring and pointless. Who cares\nabout symbolism in Dickens? Dickens himself would be more interested in an\nessay about color or baseball.  \n  \nHow did things get this way? To answer that we have to go back almost a\nthousand years. Around 1100, Europe at last began to catch its breath after\ncenturies of chaos, and once they had the luxury of curiosity they\nrediscovered what we call \"the classics.\" The effect was rather as if we were\nvisited by beings from another solar system. These earlier civilizations were\nso much more sophisticated that for the next several centuries the main work\nof European scholars, in almost every field, was to assimilate what they knew.  \n  \nDuring this period the study of ancient texts acquired great prestige. It\nseemed the essence of what scholars did. As European scholarship gained\nmomentum it became less and less important; by 1350 someone who wanted to\nlearn about science could find better teachers than Aristotle in his own era.\n[1] But schools change slower than scholarship. In the 19th century the study\nof ancient texts was still the backbone of the curriculum.  \n  \nThe time was then ripe for the question: if the study of ancient texts is a\nvalid field for scholarship, why not modern texts? The answer, of course, is\nthat the original raison d'etre of classical scholarship was a kind of\nintellectual archaeology that does not need to be done in the case of\ncontemporary authors. But for obvious reasons no one wanted to give that\nanswer. The archaeological work being mostly done, it implied that those\nstudying the classics were, if not wasting their time, at least working on\nproblems of minor importance.  \n  \nAnd so began the study of modern literature. There was a good deal of\nresistance at first. The first courses in English literature seem to have been\noffered by the newer colleges, particularly American ones. Dartmouth, the\nUniversity of Vermont, Amherst, and University College, London taught English\nliterature in the 1820s.  But Harvard didn't have a professor of English\nliterature until 1876, and Oxford not till 1885. (Oxford had a chair of\nChinese before it had one of English.) [2]  \n  \nWhat tipped the scales, at least in the US, seems to have been the idea that\nprofessors should do research as well as teach. This idea (along with the PhD,\nthe department, and indeed the whole concept of the modern university) was\nimported from Germany in the late 19th century. Beginning at Johns Hopkins in\n1876, the new model spread rapidly.  \n  \nWriting was one of the casualties. Colleges had long taught English\ncomposition. But how do you do research on composition? The professors who\ntaught math could be required to do original math, the professors who taught\nhistory could be required to write scholarly articles about history, but what\nabout the professors who taught rhetoric or composition? What should they do\nresearch on? The closest thing seemed to be English literature. [3]  \n  \nAnd so in the late 19th century the teaching of writing was inherited by\nEnglish professors. This had two drawbacks: (a) an expert on literature need\nnot himself be a good writer, any more than an art historian has to be a good\npainter, and (b) the subject of writing now tends to be literature, since\nthat's what the professor is interested in.  \n  \nHigh schools imitate universities. The seeds of our miserable high school\nexperiences were sown in 1892, when the National Education Association\n\"formally recommended that literature and composition be unified in the high\nschool course.\" [4] The 'riting component of the 3 Rs then morphed into\nEnglish, with the bizarre consequence that high school students now had to\nwrite about English literature-- to write, without even realizing it,\nimitations of whatever English professors had been publishing in their\njournals a few decades before.  \n  \nIt's no wonder if this seems to the student a pointless exercise, because\nwe're now three steps removed from real work: the students are imitating\nEnglish professors, who are imitating classical scholars, who are merely the\ninheritors of a tradition growing out of what was, 700 years ago, fascinating\nand urgently needed work.  \n  \n**No Defense**  \n  \nThe other big difference between a real essay and the things they make you\nwrite in school is that a real essay doesn't take a position and then defend\nit. That principle, like the idea that we ought to be writing about\nliterature, turns out to be another intellectual hangover of long forgotten\norigins.  \n  \nIt's often mistakenly believed that medieval universities were mostly\nseminaries. In fact they were more law schools. And at least in our tradition\nlawyers are advocates, trained to take either side of an argument and make as\ngood a case for it as they can. Whether cause or effect, this spirit pervaded\nearly universities. The study of rhetoric, the art of arguing persuasively,\nwas a third of the undergraduate curriculum. [5] And after the lecture the\nmost common form of discussion was the disputation. This is at least nominally\npreserved in our present-day thesis defense: most people treat the words\nthesis and dissertation as interchangeable, but originally, at least, a thesis\nwas a position one took and the dissertation was the argument by which one\ndefended it.  \n  \nDefending a position may be a necessary evil in a legal dispute, but it's not\nthe best way to get at the truth, as I think lawyers would be the first to\nadmit. It's not just that you miss subtleties this way. The real problem is\nthat you can't change the question.  \n  \nAnd yet this principle is built into the very structure of the things they\nteach you to write in high school. The topic sentence is your thesis, chosen\nin advance, the supporting paragraphs the blows you strike in the conflict,\nand the conclusion-- uh, what is the conclusion? I was never sure about that\nin high school. It seemed as if we were just supposed to restate what we said\nin the first paragraph, but in different enough words that no one could tell.\nWhy bother? But when you understand the origins of this sort of \"essay,\" you\ncan see where the conclusion comes from. It's the concluding remarks to the\njury.  \n  \nGood writing should be convincing, certainly, but it should be convincing\nbecause you got the right answers, not because you did a good job of arguing.\nWhen I give a draft of an essay to friends, there are two things I want to\nknow: which parts bore them, and which seem unconvincing. The boring bits can\nusually be fixed by cutting. But I don't try to fix the unconvincing bits by\narguing more cleverly. I need to talk the matter over.  \n  \nAt the very least I must have explained something badly. In that case, in the\ncourse of the conversation I'll be forced to come up a with a clearer\nexplanation, which I can just incorporate in the essay. More often than not I\nhave to change what I was saying as well. But the aim is never to be\nconvincing per se. As the reader gets smarter, convincing and true become\nidentical, so if I can convince smart readers I must be near the truth.  \n  \nThe sort of writing that attempts to persuade may be a valid (or at least\ninevitable) form, but it's historically inaccurate to call it an essay. An\nessay is something else.  \n  \n**Trying**  \n  \nTo understand what a real essay is, we have to reach back into history again,\nthough this time not so far. To Michel de Montaigne, who in 1580 published a\nbook of what he called \"essais.\" He was doing something quite different from\nwhat lawyers do, and the difference is embodied in the name. _Essayer_ is the\nFrench verb meaning \"to try\" and an _essai_ is an attempt. An essay is\nsomething you write to try to figure something out.  \n  \nFigure out what? You don't know yet. And so you can't begin with a thesis,\nbecause you don't have one, and may never have one. An essay doesn't begin\nwith a statement, but with a question. In a real essay, you don't take a\nposition and defend it. You notice a door that's ajar, and you open it and\nwalk in to see what's inside.  \n  \nIf all you want to do is figure things out, why do you need to write anything,\nthough? Why not just sit and think? Well, there precisely is Montaigne's great\ndiscovery. Expressing ideas helps to form them. Indeed, helps is far too weak\na word. Most of what ends up in my essays I only thought of when I sat down to\nwrite them. That's why I write them.  \n  \nIn the things you write in school you are, in theory, merely explaining\nyourself to the reader. In a real essay you're writing for yourself. You're\nthinking out loud.  \n  \nBut not quite. Just as inviting people over forces you to clean up your\napartment, writing something that other people will read forces you to think\nwell. So it does matter to have an audience. The things I've written just for\nmyself are no good. They tend to peter out. When I run into difficulties, I\nfind I conclude with a few vague questions and then drift off to get a cup of\ntea.  \n  \nMany published essays peter out in the same way. Particularly the sort written\nby the staff writers of newsmagazines. Outside writers tend to supply\neditorials of the defend-a-position variety, which make a beeline toward a\nrousing (and foreordained) conclusion. But the staff writers feel obliged to\nwrite something \"balanced.\" Since they're writing for a popular magazine, they\nstart with the most radioactively controversial questions, from which--\nbecause they're writing for a popular magazine-- they then proceed to recoil\nin terror. Abortion, for or against? This group says one thing. That group\nsays another. One thing is certain: the question is a complex one. (But don't\nget mad at us. We didn't draw any conclusions.)  \n  \n**The River**  \n  \nQuestions aren't enough. An essay has to come up with answers. They don't\nalways, of course. Sometimes you start with a promising question and get\nnowhere. But those you don't publish. Those are like experiments that get\ninconclusive results. An essay you publish ought to tell the reader something\nhe didn't already know.  \n  \nBut _what_ you tell him doesn't matter, so long as it's interesting. I'm\nsometimes accused of meandering. In defend-a-position writing that would be a\nflaw. There you're not concerned with truth. You already know where you're\ngoing, and you want to go straight there, blustering through obstacles, and\nhand-waving your way across swampy ground. But that's not what you're trying\nto do in an essay. An essay is supposed to be a search for truth. It would be\nsuspicious if it didn't meander.  \n  \nThe Meander (aka Menderes) is a river in Turkey. As you might expect, it winds\nall over the place. But it doesn't do this out of frivolity. The path it has\ndiscovered is the most economical route to the sea. [6]  \n  \nThe river's algorithm is simple. At each step, flow down. For the essayist\nthis translates to: flow interesting. Of all the places to go next, choose the\nmost interesting. One can't have quite as little foresight as a river. I\nalways know generally what I want to write about. But not the specific\nconclusions I want to reach; from paragraph to paragraph I let the ideas take\ntheir course.  \n  \nThis doesn't always work. Sometimes, like a river, one runs up against a wall.\nThen I do the same thing the river does: backtrack. At one point in this essay\nI found that after following a certain thread I ran out of ideas. I had to go\nback seven paragraphs and start over in another direction.  \n  \nFundamentally an essay is a train of thought-- but a cleaned-up train of\nthought, as dialogue is cleaned-up conversation. Real thought, like real\nconversation, is full of false starts. It would be exhausting to read. You\nneed to cut and fill to emphasize the central thread, like an illustrator\ninking over a pencil drawing. But don't change so much that you lose the\nspontaneity of the original.  \n  \nErr on the side of the river. An essay is not a reference work. It's not\nsomething you read looking for a specific answer, and feel cheated if you\ndon't find it. I'd much rather read an essay that went off in an unexpected\nbut interesting direction than one that plodded dutifully along a prescribed\ncourse.  \n  \n**Surprise**  \n  \nSo what's interesting? For me, interesting means surprise. Interfaces, as\nGeoffrey James has said, should follow the principle of least astonishment. A\nbutton that looks like it will make a machine stop should make it stop, not\nspeed up. Essays should do the opposite. Essays should aim for maximum\nsurprise.  \n  \nI was afraid of flying for a long time and could only travel vicariously. When\nfriends came back from faraway places, it wasn't just out of politeness that I\nasked what they saw. I really wanted to know. And I found the best way to get\ninformation out of them was to ask what surprised them. How was the place\ndifferent from what they expected? This is an extremely useful question. You\ncan ask it of the most unobservant people, and it will extract information\nthey didn't even know they were recording.  \n  \nSurprises are things that you not only didn't know, but that contradict things\nyou thought you knew. And so they're the most valuable sort of fact you can\nget. They're like a food that's not merely healthy, but counteracts the\nunhealthy effects of things you've already eaten.  \n  \nHow do you find surprises? Well, therein lies half the work of essay writing.\n(The other half is expressing yourself well.) The trick is to use yourself as\na proxy for the reader. You should only write about things you've thought\nabout a lot. And anything you come across that surprises you, who've thought\nabout the topic a lot, will probably surprise most readers.  \n  \nFor example, in a recent [essay](gh.html) I pointed out that because you can\nonly judge computer programmers by working with them, no one knows who the\nbest programmers are overall. I didn't realize this when I began that essay,\nand even now I find it kind of weird. That's what you're looking for.  \n  \nSo if you want to write essays, you need two ingredients: a few topics you've\nthought about a lot, and some ability to ferret out the unexpected.  \n  \nWhat should you think about? My guess is that it doesn't matter-- that\nanything can be interesting if you get deeply enough into it. One possible\nexception might be things that have deliberately had all the variation sucked\nout of them, like working in fast food. In retrospect, was there anything\ninteresting about working at Baskin-Robbins? Well, it was interesting how\nimportant color was to the customers. Kids a certain age would point into the\ncase and say that they wanted yellow. Did they want French Vanilla or Lemon?\nThey would just look at you blankly. They wanted yellow. And then there was\nthe mystery of why the perennial favorite Pralines 'n' Cream was so appealing.\n(I think now it was the salt.)  And the difference in the way fathers and\nmothers bought ice cream for their kids: the fathers like benevolent kings\nbestowing largesse, the mothers harried, giving in to pressure. So, yes, there\ndoes seem to be some material even in fast food.  \n  \nI didn't notice those things at the time, though. At sixteen I was about as\nobservant as a lump of rock. I can see more now in the fragments of memory I\npreserve of that age than I could see at the time from having it all happening\nlive, right in front of me.  \n  \n**Observation**  \n  \nSo the ability to ferret out the unexpected must not merely be an inborn one.\nIt must be something you can learn. How do you learn it?  \n  \nTo some extent it's like learning history. When you first read history, it's\njust a whirl of names and dates. Nothing seems to stick. But the more you\nlearn, the more hooks you have for new facts to stick onto-- which means you\naccumulate knowledge at an exponential rate. Once you remember that Normans\nconquered England in 1066, it will catch your attention when you hear that\nother Normans conquered southern Italy at about the same time. Which will make\nyou wonder about Normandy, and take note when a third book mentions that\nNormans were not, like most of what is now called France, tribes that flowed\nin as the Roman empire collapsed, but Vikings (norman = north man) who arrived\nfour centuries later in 911. Which makes it easier to remember that Dublin was\nalso established by Vikings in the 840s. Etc, etc squared.  \n  \nCollecting surprises is a similar process. The more anomalies you've seen, the\nmore easily you'll notice new ones. Which means, oddly enough, that as you\ngrow older, life should become more and more surprising. When I was a kid, I\nused to think adults had it all figured out. I had it backwards. Kids are the\nones who have it all figured out. They're just mistaken.  \n  \nWhen it comes to surprises, the rich get richer. But (as with wealth) there\nmay be habits of mind that will help the process along. It's good to have a\nhabit of asking questions, especially questions beginning with Why. But not in\nthe random way that three year olds ask why. There are an infinite number of\nquestions. How do you find the fruitful ones?  \n  \nI find it especially useful to ask why about things that seem wrong. For\nexample, why should there be a connection between humor and misfortune? Why do\nwe find it funny when a character, even one we like, slips on a banana peel?\nThere's a whole essay's worth of surprises there for sure.  \n  \nIf you want to notice things that seem wrong, you'll find a degree of\nskepticism helpful. I take it as an axiom that we're only achieving 1% of what\nwe could. This helps counteract the rule that gets beaten into our heads as\nchildren: that things are the way they are because that is how things have to\nbe. For example, everyone I've talked to while writing this essay felt the\nsame about English classes-- that the whole process seemed pointless. But none\nof us had the balls at the time to hypothesize that it was, in fact, all a\nmistake. We all thought there was just something we weren't getting.  \n  \nI have a hunch you want to pay attention not just to things that seem wrong,\nbut things that seem wrong in a humorous way. I'm always pleased when I see\nsomeone laugh as they read a draft of an essay. But why should I be? I'm\naiming for good ideas. Why should good ideas be funny? The connection may be\nsurprise. Surprises make us laugh, and surprises are what one wants to\ndeliver.  \n  \nI write down things that surprise me in notebooks. I never actually get around\nto reading them and using what I've written, but I do tend to reproduce the\nsame thoughts later. So the main value of notebooks may be what writing things\ndown leaves in your head.  \n  \nPeople trying to be cool will find themselves at a disadvantage when\ncollecting surprises. To be surprised is to be mistaken. And the essence of\ncool, as any fourteen year old could tell you, is _nil admirari._ When you're\nmistaken, don't dwell on it; just act like nothing's wrong and maybe no one\nwill notice.  \n  \nOne of the keys to coolness is to avoid situations where inexperience may make\nyou look foolish. If you want to find surprises you should do the opposite.\nStudy lots of different things, because some of the most interesting surprises\nare unexpected connections between different fields. For example, jam, bacon,\npickles, and cheese, which are among the most pleasing of foods, were all\noriginally intended as methods of preservation. And so were books and\npaintings.  \n  \nWhatever you study, include history-- but social and economic history, not\npolitical history. History seems to me so important that it's misleading to\ntreat it as a mere field of study. Another way to describe it is _all the data\nwe have so far._  \n  \nAmong other things, studying history gives one confidence that there are good\nideas waiting to be discovered right under our noses. Swords evolved during\nthe Bronze Age out of daggers, which (like their flint predecessors) had a\nhilt separate from the blade. Because swords are longer the hilts kept\nbreaking off. But it took five hundred years before someone thought of casting\nhilt and blade as one piece.  \n  \n**Disobedience**  \n  \nAbove all, make a habit of paying attention to things you're not supposed to,\neither because they're \"[inappropriate](say.html),\" or not important, or not\nwhat you're supposed to be working on. If you're curious about something,\ntrust your instincts. Follow the threads that attract your attention. If\nthere's something you're really interested in, you'll find they have an\nuncanny way of leading back to it anyway, just as the conversation of people\nwho are especially proud of something always tends to lead back to it.  \n  \nFor example, I've always been fascinated by comb-overs, especially the extreme\nsort that make a man look as if he's wearing a beret made of his own hair.\nSurely this is a lowly sort of thing to be interested in-- the sort of\nsuperficial quizzing best left to teenage girls. And yet there is something\nunderneath. The key question, I realized, is how does the comber-over not see\nhow odd he looks? And the answer is that he got to look that way\n_incrementally._ What began as combing his hair a little carefully over a thin\npatch has gradually, over 20 years, grown into a monstrosity. Gradualness is\nvery powerful. And that power can be used for constructive purposes too: just\nas you can trick yourself into looking like a freak, you can trick yourself\ninto creating something so grand that you would never have dared to _plan_\nsuch a thing. Indeed, this is just how most good software gets created. You\nstart by writing a stripped-down kernel (how hard can it be?) and gradually it\ngrows into a complete operating system. Hence the next leap: could you do the\nsame thing in painting, or in a novel?  \n  \nSee what you can extract from a frivolous question? If there's one piece of\nadvice I would give about writing essays, it would be: don't do as you're\ntold. Don't believe what you're supposed to. Don't write the essay readers\nexpect; one learns nothing from what one expects. And don't write the way they\ntaught you to in school.  \n  \nThe most important sort of disobedience is to write essays at all.\nFortunately, this sort of disobedience shows signs of becoming\n[rampant](http://www.ojr.org/ojr/glaser/1056050270.php). It used to be that\nonly a tiny number of officially approved writers were allowed to write\nessays. Magazines published few of them, and judged them less by what they\nsaid than who wrote them; a magazine might publish a story by an unknown\nwriter if it was good enough, but if they published an essay on x it had to be\nby someone who was at least forty and whose job title had x in it. Which is a\nproblem, because there are a lot of things insiders can't say precisely\nbecause they're insiders.  \n  \nThe Internet is changing that. Anyone can publish an essay on the Web, and it\ngets judged, as any writing should, by what it says, not who wrote it. Who are\nyou to write about x? You are whatever you wrote.  \n  \nPopular magazines made the period between the spread of literacy and the\narrival of TV the golden age of the short story. The Web may well make this\nthe golden age of the essay. And that's certainly not something I realized\nwhen I started writing this.  \n  \n  \n  \n**Notes**  \n  \n[1] I'm thinking of Oresme (c. 1323-82). But it's hard to pick a date, because\nthere was a sudden drop-off in scholarship just as Europeans finished\nassimilating classical science. The cause may have been the plague of 1347;\nthe trend in scientific progress matches the population curve.  \n  \n[2] Parker, William R. \"Where Do College English Departments Come From?\"\n_College English_ 28 (1966-67), pp. 339-351. Reprinted in Gray, Donald J.\n(ed). _The Department of English at Indiana University Bloomington 1868-1970._\nIndiana University Publications.  \n  \nDaniels, Robert V. _The University of Vermont: The First Two Hundred Years._\nUniversity of Vermont, 1991.  \n  \nMueller, Friedrich M. Letter to the _Pall Mall Gazette._ 1886/87. Reprinted in\nBacon, Alan (ed). _The Nineteenth-Century History of English Studies._\nAshgate, 1998.  \n  \n[3] I'm compressing the story a bit. At first literature took a back seat to\nphilology, which (a) seemed more serious and (b) was popular in Germany, where\nmany of the leading scholars of that generation had been trained.  \n  \nIn some cases the writing teachers were transformed _in situ_ into English\nprofessors. Francis James Child, who had been Boylston Professor of Rhetoric\nat Harvard since 1851, became in 1876 the university's first professor of\nEnglish.  \n  \n[4] Parker, _op. cit._ , p. 25.  \n  \n[5] The undergraduate curriculum or _trivium_ (whence \"trivial\") consisted of\nLatin grammar, rhetoric, and logic. Candidates for masters' degrees went on to\nstudy the _quadrivium_ of arithmetic, geometry, music, and astronomy. Together\nthese were the seven liberal arts.  \n  \nThe study of rhetoric was inherited directly from Rome, where it was\nconsidered the most important subject. It would not be far from the truth to\nsay that education in the classical world meant training landowners' sons to\nspeak well enough to defend their interests in political and legal disputes.  \n  \n[6] Trevor Blackwell points out that this isn't strictly true, because the\noutside edges of curves erode faster.  \n  \n**Thanks** to Ken Anderson, Trevor Blackwell, Sarah Harlin, Jessica\nLivingston, Jackie McDonough, and Robert Morris for reading drafts of this.  \n  \n  \n\nAugust 2003  \n  \nWe may be able to improve the accuracy of Bayesian spam filters by having them\nfollow links to see what's waiting at the other end. Richard Jowsey of\n[death2spam](http://death2spam.com) now does this in borderline cases, and\nreports that it works well.  \n  \nWhy only do it in borderline cases? And why only do it once?  \n  \nAs I mentioned in [Will Filters Kill Spam?](wfks.html), following all the urls\nin a spam would have an amusing side-effect. If popular email clients did this\nin order to filter spam, the spammer's servers would take a serious pounding.\nThe more I think about this, the better an idea it seems. This isn't just\namusing; it would be hard to imagine a more perfectly targeted counterattack\non spammers.  \n  \nSo I'd like to suggest an additional feature to those working on spam filters:\na \"punish\" mode which, if turned on, would spider every url in a suspected\nspam n times, where n could be set by the user. [1]  \n  \nAs many people have noted, one of the problems with the current email system\nis that it's too passive. It does whatever you tell it. So far all the\nsuggestions for fixing the problem seem to involve new protocols. This one\nwouldn't.  \n  \nIf widely used, auto-retrieving spam filters would make the email system\n_rebound._ The huge volume of the spam, which has so far worked in the\nspammer's favor, would now work against him, like a branch snapping back in\nhis face. Auto-retrieving spam filters would drive the spammer's\n[costs](http://www.bork.ca/pics/?path=incoming&img=bill.jpg) up, and his sales\ndown: his bandwidth usage would go through the roof, and his servers would\ngrind to a halt under the load, which would make them unavailable to the\npeople who would have responded to the spam.  \n  \nPump out a million emails an hour, get a million hits an hour on your servers.  \n  \nWe would want to ensure that this is only done to suspected spams. As a rule,\nany url sent to millions of people is likely to be a spam url, so submitting\nevery http request in every email would work fine nearly all the time. But\nthere are a few cases where this isn't true: the urls at the bottom of mails\nsent from free email services like Yahoo Mail and Hotmail, for example.  \n  \nTo protect such sites, and to prevent abuse, auto-retrieval should be combined\nwith blacklists of spamvertised sites. Only sites on a blacklist would get\ncrawled, and sites would be blacklisted only after being inspected by humans.\nThe lifetime of a spam must be several hours at least, so it should be easy to\nupdate such a list in time to interfere with a spam promoting a new site. [2]  \n  \nHigh-volume auto-retrieval would only be practical for users on high-bandwidth\nconnections, but there are enough of those to cause spammers serious trouble.\nIndeed, this solution neatly mirrors the problem. The problem with spam is\nthat in order to reach a few gullible people the spammer sends mail to\neveryone. The non-gullible recipients are merely collateral damage. But the\nnon-gullible majority won't stop getting spam until they can stop (or threaten\nto stop) the gullible from responding to it. Auto-retrieving spam filters\noffer them a way to do this.  \n  \nWould that kill spam? Not quite. The biggest spammers could probably protect\ntheir servers against auto-retrieving filters. However, the easiest and\ncheapest way for them to do it would be to include working unsubscribe links\nin their mails. And this would be a necessity for smaller fry, and for\n\"legitimate\" sites that hired spammers to promote them. So if auto-retrieving\nfilters became widespread, they'd become auto-unsubscribing filters.  \n  \nIn this scenario, spam would, like OS crashes, viruses, and popups, become one\nof those plagues that only afflict people who don't bother to use the right\nsoftware.  \n  \n  \n  \n**Notes**  \n  \n[1] Auto-retrieving filters will have to follow redirects, and should in some\ncases (e.g. a page that just says \"click here\") follow more than one level of\nlinks. Make sure too that the http requests are indistinguishable from those\nof popular Web browsers, including the order and referrer.  \n  \nIf the response doesn't come back within x amount of time, default to some\nfairly high spam probability.  \n  \nInstead of making n constant, it might be a good idea to make it a function of\nthe number of spams that have been seen mentioning the site. This would add a\nfurther level of protection against abuse and accidents.  \n  \n[2] The original version of this article used the term \"whitelist\" instead of\n\"blacklist\". Though they were to work like blacklists, I preferred to call\nthem whitelists because it might make them less vulnerable to legal attack.\nThis just seems to have confused readers, though.  \n  \nThere should probably be multiple blacklists. A single point of failure would\nbe vulnerable both to attack and abuse.  \n  \n  \n  \n**Thanks** to Brian Burton, Bill Yerazunis, Dan Giffin, Eric Raymond, and\nRichard Jowsey for reading drafts of this.  \n  \n\nJanuary 2020  \n  \n _(I originally intended this for startup founders, who are often surprised by\nthe attention they get as their companies grow, but it applies equally to\nanyone who becomes famous.)_  \n  \nIf you become sufficiently famous, you'll acquire some fans who like you too\nmuch. These people are sometimes called \"fanboys,\" and though I dislike that\nterm, I'm going to have to use it here. We need some word for them, because\nthis is a distinct phenomenon from someone simply liking your work.  \n  \nA fanboy is obsessive and uncritical. Liking you becomes part of their\nidentity, and they create an image of you in their own head that is much\nbetter than reality. Everything you do is good, because you do it. If you do\nsomething bad, they find a way to see it as good. And their love for you is\nnot, usually, a quiet, private one. They want everyone to know how great you\nare.  \n  \nWell, you may be thinking, I could do without this kind of obsessive fan, but\nI know there are all kinds of people in the world, and if this is the worst\nconsequence of fame, that's not so bad.  \n  \nUnfortunately this is not the worst consequence of fame. As well as fanboys,\nyou'll have haters.  \n  \nA hater is obsessive and uncritical. Disliking you becomes part of their\nidentity, and they create an image of you in their own head that is much worse\nthan reality. Everything you do is bad, because you do it. If you do something\ngood, they find a way to see it as bad. And their dislike for you is not,\nusually, a quiet, private one. They want everyone to know how awful you are.  \n  \nIf you're thinking of checking, I'll save you the trouble. The second and\nfifth paragraphs are identical except for \"good\" being switched to \"bad\" and\nso on.  \n  \nI spent years puzzling about haters. What are they, and where do they come\nfrom? Then one day it dawned on me. Haters are just fanboys with the sign\nswitched.  \n  \nNote that by haters, I don't simply mean trolls. I'm not talking about people\nwho say bad things about you and then move on. I'm talking about the much\nsmaller group of people for whom this becomes a kind of obsession and who do\nit repeatedly over a long period.  \n  \nLike fans, haters seem to be an automatic consequence of fame. Anyone\nsufficiently famous will have them. And like fans, haters are energized by the\nfame of whoever they hate. They hear a song by some pop singer. They don't\nlike it much. If the singer were an obscure one, they'd just forget about it.\nBut instead they keep hearing her name, and this seems to drive some people\ncrazy. Everyone's always going on about this singer, but she's no good! She's\na fraud!  \n  \nThat word \"fraud\" is an important one. It's the spectral signature of a hater\nto regard the object of their hatred as a\n[_fraud_](https://twitter.com/search?q=Musk%20fraud&src=typed_query&f=live).\nThey can't deny their fame. Indeed, their fame is if anything exaggerated in\nthe hater's mind. They notice every mention of the singer's name, because\nevery mention makes them angrier. In their own minds they exaggerate both the\nsinger's fame and her lack of talent, and the only way to reconcile those two\nideas is to conclude that she has tricked everyone.  \n  \nWhat sort of people become haters? Can anyone become one? I'm not sure about\nthis, but I've noticed some patterns. Haters are generally losers in a very\nspecific sense: although they are occasionally talented, they have never\nachieved much. And indeed, anyone successful enough to have achieved\nsignificant fame would be unlikely to regard another famous person as a fraud\non that account, because anyone famous knows how random fame is.  \n  \nBut haters are not always complete losers. They are not always the proverbial\nguy living in his mom's basement. Many are, but some have some amount of\ntalent. In fact I suspect that a sense of frustrated talent is what drives\nsome people to become haters. They're not just saying \"It's unfair that so-\nand-so is famous,\" but \"It's unfair that so-and-so is famous, and not me.\"  \n  \nCould a hater be cured if they achieved something impressive? My guess is\nthat's a moot point, because they [_never will_](mean.html). I've been able to\nobserve for long enough that I'm fairly confident the pattern works both ways:\nnot only do people who do great work never become haters, haters never do\ngreat work. Although I dislike the word \"fanboy,\" it's evocative of something\nimportant about both haters and fanboys. It implies that the fanboy is so\nslavishly predictable in his admiration that he's diminished as a result, that\nhe's less than a man.  \n  \nHaters seem even more diminished. I can imagine being a fanboy. I can think of\npeople whose work I admire so much that I could abase myself before them out\nof sheer gratitude. If P. G. Wodehouse were still alive, I could see myself\nbeing a Wodehouse fanboy. But I could not imagine being a hater.  \n  \nKnowing that haters are just fanboys with the sign bit flipped makes it much\neasier to deal with them. We don't need a separate theory of haters. We can\njust use existing techniques for dealing with obsessive fans.  \n  \nThe most important of which is simply not to think much about them. If you're\nlike most people who become famous enough to acquire haters, your initial\nreaction will be one of mystification. Why does this guy seem to have it in\nfor me? Where does his obsessive energy come from, and what makes him so\nappallingly nasty? What did I do to set him off? Is it something I can fix?  \n  \nThe mistake here is to think of the hater as someone you have a dispute with.\nWhen you have a dispute with someone, it's usually a good idea to try to\nunderstand why they're upset and then fix things if you can. Disputes are\ndistracting. But it's a false analogy to think of a hater as someone you have\na dispute with. It's an understandable mistake, if you've never encountered\nhaters before. But when you realize that you're dealing with a hater, and what\na hater is, it's clear that it's a waste of time even to think about them. If\nyou have obsessive fans, do you spend any time wondering what makes them love\nyou so much? No, you just think \"some people are kind of crazy,\" and that's\nthe end of it.  \n  \nSince haters are equivalent to fanboys, that's the way to deal with them too.\nThere may have been something that set them off. But it's not something that\nwould have set off a normal person, so there's no reason to spend any time\nthinking about it. It's not you, it's them.  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] There are of course some people who are genuine frauds. How can you\ndistinguish between x calling y a fraud because x is a hater, and because y is\na fraud? Look at neutral opinion. Actual frauds are usually pretty\nconspicuous. Thoughtful people are rarely taken in by them. So if there are\nsome thoughtful people who like y, you can usually assume y is not a fraud.  \n  \n[2] I would make an exception for teenagers, who sometimes act in such extreme\nways that they are literally not themselves. I can imagine a teenage kid being\na hater and then growing out of it. But not anyone over 25.  \n  \n[3] I have a much worse memory for misdeeds than my wife Jessica, who is a\nconnoisseur of character, but I don't wish it were better. Most disputes are a\nwaste of time even if you're in the right, and it's easy to bury the hatchet\nwith someone if you can't remember why you were mad at them.  \n  \n[4] A competent hater will not merely attack you individually but will try to\nget mobs after you. In some cases you may want to refute whatever bogus claim\nthey made in order to do so. But err on the side of not, because ultimately it\nprobably won't matter.  \n  \n  \n  \n**Thanks** to Austen Allred, Trevor Blackwell, Patrick Collison, Christine\nFord, Daniel Gackle, Jessica Livingston, Robert Morris, Elon Musk, Harj\nTaggar, and Peter Thiel for reading drafts of this.  \n  \n\nKevin Kelleher suggested an interesting way to compare programming languages:\nto describe each in terms of the problem it fixes. The surprising thing is how\nmany, and how well, languages can be described this way.  \n  \n\n**Algol:** Assembly language is too low-level.  \n  \n**Pascal:** Algol doesn't have enough data types.  \n  \n**Modula:** Pascal is too wimpy for systems programming.  \n  \n**Simula:** Algol isn't good enough at simulations.  \n  \n**Smalltalk:** Not everything in Simula is an object.  \n  \n**Fortran:** Assembly language is too low-level.  \n  \n**Cobol:** Fortran is scary.  \n  \n**PL/1:** Fortran doesn't have enough data types.  \n  \n**Ada:** Every existing language is missing something.  \n  \n**Basic:** Fortran is scary.  \n  \n**APL:** Fortran isn't good enough at manipulating arrays.  \n  \n**J:** APL requires its own character set.  \n  \n**C:** Assembly language is too low-level.  \n  \n**C++:** C is too low-level.  \n  \n**Java:** C++ is a kludge. And Microsoft is going to crush us.  \n  \n**C#:** Java is controlled by Sun.  \n  \n**Lisp:** Turing Machines are an awkward way to describe computation.  \n  \n**Scheme:** MacLisp is a kludge.  \n  \n**T:** Scheme has no libraries.  \n  \n**Common Lisp:** There are too many dialects of Lisp.  \n  \n**Dylan:** Scheme has no libraries, and Lisp syntax is scary.  \n  \n**Perl:** Shell scripts/awk/sed are not enough like programming languages.  \n  \n**Python:** Perl is a kludge.  \n  \n**Ruby:** Perl is a kludge, and Lisp syntax is scary.  \n  \n**Prolog:** Programming is not enough like logic.  \n  \n  \n  \n  \n  \n\nMay 2021  \n  \nMost people think of nerds as quiet, diffident people. In ordinary social\nsituations they are \u2014 as quiet and diffident as the star quarterback would be\nif he found himself in the middle of a physics symposium. And for the same\nreason: they are fish out of water. But the apparent diffidence of nerds is an\nillusion due to the fact that when non-nerds observe them, it's usually in\nordinary social situations. In fact some nerds are quite fierce.  \n  \nThe fierce nerds are a small but interesting group. They are as a rule\nextremely competitive \u2014 more competitive, I'd say, than highly competitive\nnon-nerds. Competition is more personal for them. Partly perhaps because\nthey're not emotionally mature enough to distance themselves from it, but also\nbecause there's less randomness in the kinds of competition they engage in,\nand they are thus more justified in taking the results personally.  \n  \nFierce nerds also tend to be somewhat overconfident, especially when young. It\nmight seem like it would be a disadvantage to be mistaken about one's\nabilities, but empirically it isn't. Up to a point, confidence is a self-\nfullfilling prophecy.  \n  \nAnother quality you find in most fierce nerds is intelligence. Not all nerds\nare smart, but the fierce ones are always at least moderately so. If they\nweren't, they wouldn't have the confidence to be fierce. [1]  \n  \nThere's also a natural connection between nerdiness and [_independent-\nmindedness_](think.html). It's hard to be independent-minded without being\nsomewhat socially awkward, because conventional beliefs are so often mistaken,\nor at least arbitrary. No one who was both independent-minded and ambitious\nwould want to waste the effort it takes to fit in. And the independent-\nmindedness of the fierce nerds will obviously be of the\n[_aggressive_](conformism.html) rather than the passive type: they'll be\nannoyed by rules, rather than dreamily unaware of them.  \n  \nI'm less sure why fierce nerds are impatient, but most seem to be. You notice\nit first in conversation, where they tend to interrupt you. This is merely\nannoying, but in the more promising fierce nerds it's connected to a deeper\nimpatience about solving problems. Perhaps the competitiveness and impatience\nof fierce nerds are not separate qualities, but two manifestations of a single\nunderlying drivenness.  \n  \nWhen you combine all these qualities in sufficient quantities, the result is\nquite formidable. The most vivid example of fierce nerds in action may be\nJames Watson's _The Double Helix_. The first sentence of the book is \"I have\nnever seen Francis Crick in a modest mood,\" and the portrait he goes on to\npaint of Crick is the quintessential fierce nerd: brilliant, socially awkward,\ncompetitive, independent-minded, overconfident. But so is the implicit\nportrait he paints of himself. Indeed, his lack of social awareness makes both\nportraits that much more realistic, because he baldly states all sorts of\nopinions and motivations that a smoother person would conceal. And moreover\nit's clear from the story that Crick and Watson's fierce nerdiness was\nintegral to their success. Their independent-mindedness caused them to\nconsider approaches that most others ignored, their overconfidence allowed\nthem to work on problems they only half understood (they were literally\ndescribed as \"clowns\" by one eminent insider), and their impatience and\ncompetitiveness got them to the answer ahead of two other groups that would\notherwise have found it within the next year, if not the next several months.\n[2]  \n  \nThe idea that there could be fierce nerds is an unfamiliar one not just to\nmany normal people but even to some young nerds. Especially early on, nerds\nspend so much of their time in ordinary social situations and so little doing\nreal work that they get a lot more evidence of their awkwardness than their\npower. So there will be some who read this description of the fierce nerd and\nrealize \"Hmm, that's me.\" And it is to you, young fierce nerd, that I now\nturn.  \n  \nI have some good news, and some bad news. The good news is that your\nfierceness will be a great help in solving difficult problems. And not just\nthe kind of scientific and technical problems that nerds have traditionally\nsolved. As the world progresses, the number of things you can win at by\ngetting the right answer increases. Recently [_getting rich_](richnow.html)\nbecame one of them: 7 of the 8 richest people in America are now fierce nerds.  \n  \nIndeed, being a fierce nerd is probably even more helpful in business than in\nnerds' original territory of scholarship. Fierceness seems optional there.\nDarwin for example doesn't seem to have been especially fierce. Whereas it's\nimpossible to be the CEO of a company over a certain size without being\nfierce, so now that nerds can win at business, fierce nerds will increasingly\nmonopolize the really big successes.  \n  \nThe bad news is that if it's not exercised, your fierceness will turn to\nbitterness, and you will become an intellectual playground bully: the grumpy\nsysadmin, the forum troll, the [_hater_](fh.html), the shooter down of [_new\nideas_](newideas.html).  \n  \nHow do you avoid this fate? Work on ambitious projects. If you succeed, it\nwill bring you a kind of satisfaction that neutralizes bitterness. But you\ndon't need to have succeeded to feel this; merely working on hard projects\ngives most fierce nerds some feeling of satisfaction. And those it doesn't, it\nat least keeps busy. [3]  \n  \nAnother solution may be to somehow turn off your fierceness, by devoting\nyourself to meditation or psychotherapy or something like that. Maybe that's\nthe right answer for some people. I have no idea. But it doesn't seem the\noptimal solution to me. If you're given a sharp knife, it seems to me better\nto use it than to blunt its edge to avoid cutting yourself.  \n  \nIf you do choose the ambitious route, you'll have a tailwind behind you. There\nhas never been a better time to be a nerd. In the past century we've seen a\ncontinuous transfer of power from dealmakers to technicians \u2014 from the\ncharismatic to the competent \u2014 and I don't see anything on the horizon that\nwill end it. At least not till the nerds end it themselves by bringing about\nthe singularity.  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] To be a nerd is to be socially awkward, and there are two distinct ways to\ndo that: to be playing the same game as everyone else, but badly, and to be\nplaying a different game. The smart nerds are the latter type.  \n  \n[2] The same qualities that make fierce nerds so effective can also make them\nvery annoying. Fierce nerds would do well to remember this, and (a) try to\nkeep a lid on it, and (b) seek out organizations and types of work where\ngetting the right answer matters more than preserving social harmony. In\npractice that means small groups working on hard problems. Which fortunately\nis the most fun kind of environment anyway.  \n  \n[3] If success neutralizes bitterness, why are there some people who are at\nleast moderately successful and yet still quite bitter? Because people's\npotential bitterness varies depending on how naturally bitter their\npersonality is, and how ambitious they are: someone who's naturally very\nbitter will still have a lot left after success neutralizes some of it, and\nsomeone who's very ambitious will need proportionally more success to satisfy\nthat ambition.  \n  \nSo the worst-case scenario is someone who's both naturally bitter and\nextremely ambitious, and yet only moderately successful.  \n  \n  \n  \n**Thanks** to Trevor Blackwell, Steve Blank, Patrick Collison, Jessica\nLivingston, Amjad Masad, and Robert Morris for reading drafts of this.  \n  \n\nJanuary 2007  \n  \n _(Foreword to Jessica Livingston's[Founders at\nWork](http://www.amazon.com/gp/product/1590597141).)_  \n  \nApparently sprinters reach their highest speed right out of the blocks, and\nspend the rest of the race slowing down. The winners slow down the least. It's\nthat way with most startups too. The earliest phase is usually the most\nproductive. That's when they have the really big ideas. Imagine what Apple was\nlike when 100% of its employees were either Steve Jobs or Steve Wozniak.  \n  \nThe striking thing about this phase is that it's completely different from\nmost people's idea of what business is like. If you looked in people's heads\n(or stock photo collections) for images representing \"business,\" you'd get\nimages of people dressed up in suits, groups sitting around conference tables\nlooking serious, Powerpoint presentations, people producing thick reports for\none another to read. Early stage startups are the exact opposite of this. And\nyet they're probably the most productive part of the whole economy.  \n  \nWhy the disconnect? I think there's a general principle at work here: the less\nenergy people expend on performance, the more they expend on appearances to\ncompensate. More often than not the energy they expend on seeming impressive\nmakes their actual performance worse. A few years ago I read an article in\nwhich a car magazine modified the \"sports\" model of some production car to get\nthe fastest possible standing quarter mile. You know how they did it? They cut\noff all the crap the manufacturer had bolted onto the car to make it _look_\nfast.  \n  \nBusiness is broken the same way that car was. The effort that goes into\nlooking productive is not merely wasted, but actually makes organizations less\nproductive. Suits, for example. Suits do not help people to think better. I\nbet most executives at big companies do their best thinking when they wake up\non Sunday morning and go downstairs in their bathrobe to make a cup of coffee.\nThat's when you have ideas. Just imagine what a company would be like if\npeople could think that well at work. People do in startups, at least some of\nthe time. (Half the time you're in a panic because your servers are on fire,\nbut the other half you're thinking as deeply as most people only get to\nsitting alone on a Sunday morning.)  \n  \nDitto for most of the other differences between startups and what passes for\nproductivity in big companies. And yet conventional ideas of professionalism\nhave such an iron grip on our minds that even startup founders are affected by\nthem. In our startup, when outsiders came to visit we tried hard to seem\n\"professional.\" We'd clean up our offices, wear better clothes, try to arrange\nthat a lot of people were there during conventional office hours. In fact,\nprogramming didn't get done by well-dressed people at clean desks during\noffice hours. It got done by badly dressed people (I was notorious for\nprogrammming wearing just a towel) in offices strewn with junk at 2 in the\nmorning. But no visitor would understand that. Not even investors, who are\nsupposed to be able to recognize real productivity when they see it. Even we\nwere affected by the conventional wisdom. We thought of ourselves as\nimpostors, succeeding despite being totally unprofessional. It was as if we'd\ncreated a Formula 1 car but felt sheepish because it didn't look like a car\nwas supposed to look.  \n  \nIn the car world, there are at least some people who know that a high\nperformance car looks like a Formula 1 racecar, not a sedan with giant rims\nand a fake spoiler bolted to the trunk. Why not in business? Probably because\nstartups are so small. The really dramatic growth happens when a startup only\nhas three or four people, so only three or four people see that, whereas tens\nof thousands see business as it's practiced by Boeing or Philip Morris.  \n  \nThis book can help fix that problem, by showing everyone what, till now, only\na handful people got to see: what happens in the first year of a startup. This\nis what real productivity looks like. This is the Formula 1 racecar. It looks\nweird, but it goes fast.  \n  \nOf course, big companies won't be able to do everything these startups do. In\nbig companies there's always going to be more politics, and less scope for\nindividual decisions. But seeing what startups are really like will at least\nshow other organizations what to aim for. The time may soon be coming when\ninstead of startups trying to seem more corporate, corporations will try to\nseem more like startups. That would be a good thing.  \n  \n  \n  \n[Japanese\nTranslation](http://www.aoky.net/articles/paul_graham/foundersatwork.htm)  \n  \n\n* * *\n\n  \n  \n\nDecember 2019  \n  \nI've seen the same pattern in many different fields: even though lots of\npeople have worked hard in the field, only a small fraction of the space of\npossibilities has been explored, because they've all worked on similar things.  \n  \nEven the smartest, most imaginative people are surprisingly conservative when\ndeciding what to work on. People who would never dream of being fashionable in\nany other way get sucked into working on fashionable problems.  \n  \nIf you want to try working on unfashionable problems, one of the best places\nto look is in fields that people think have already been fully explored:\nessays, Lisp, venture funding \u0097 you may notice a pattern here. If you can find\na new approach into a big but apparently played out field, the value of\nwhatever you discover will be [_multiplied_](sun.html) by its enormous surface\narea.  \n  \nThe best protection against getting drawn into working on the same things as\neveryone else may be to [_genuinely love_](genius.html) what you're doing.\nThen you'll continue to work on it even if you make the same mistake as other\npeople and think that it's too marginal to matter.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nSeptember 2013  \n  \nMost startups that raise money do it more than once. A typical trajectory\nmight be (1) to get started with a few tens of thousands from something like Y\nCombinator or individual angels, then (2) raise a few hundred thousand to a\nfew million to build the company, and then (3) once the company is clearly\nsucceeding, raise one or more later rounds to accelerate growth.  \n  \nReality can be messier. Some companies raise money twice in phase 2\\. Others\nskip phase 1 and go straight to phase 2. And at Y Combinator we get an\nincreasing number of companies that have already raised amounts in the\nhundreds of thousands. But the three phase path is at least the one about\nwhich individual startups' paths oscillate.  \n  \nThis essay focuses on phase 2 fundraising. That's the type the startups we\nfund are doing on Demo Day, and this essay is the advice we give them.  \n  \n**Forces**  \n  \nFundraising is hard in both senses: hard like lifting a heavy weight, and hard\nlike solving a puzzle. It's hard like lifting a weight because it's\nintrinsically hard to convince people to part with large sums of money. That\nproblem is irreducible; it should be hard. But much of the other kind of\ndifficulty can be eliminated. Fundraising only seems a puzzle because it's an\nalien world to most founders, and I hope to fix that by supplying a map\nthrough it.  \n  \nTo founders, the behavior of investors is often opaque \u2014 partly because their\nmotivations are obscure, but partly because they deliberately mislead you. And\nthe misleading ways of investors combine horribly with the wishful thinking of\ninexperienced founders. At YC we're always warning founders about this danger,\nand investors are probably more circumspect with YC startups than with other\ncompanies they talk to, and even so we witness a constant series of explosions\nas these two volatile components combine. [1]  \n  \nIf you're an inexperienced founder, the only way to survive is by imposing\nexternal constraints on yourself. You can't trust your intuitions. I'm going\nto give you a set of rules here that will get you through this process if\nanything will. At certain moments you'll be tempted to ignore them. So rule\nnumber zero is: these rules exist for a reason. You wouldn't need a rule to\nkeep you going in one direction if there weren't powerful forces pushing you\nin another.  \n  \nThe ultimate source of the forces acting on you are the forces acting on\ninvestors. Investors are pinched between two kinds of fear: fear of investing\nin startups that fizzle, and fear of missing out on startups that take off.\nThe cause of all this fear is the very thing that makes startups such\nattractive investments: the successful ones grow very fast. But that fast\ngrowth means investors can't wait around. If you wait till a startup is\nobviously a success, it's too late. To get the really high returns, you have\nto invest in startups when it's still unclear how they'll do. But that in turn\nmakes investors nervous they're about to invest in a flop. As indeed they\noften are.  \n  \nWhat investors would like to do, if they could, is wait. When a startup is\nonly a few months old, every week that passes gives you significantly more\ninformation about them. But if you wait too long, other investors might take\nthe deal away from you. And of course the other investors are all subject to\nthe same forces. So what tends to happen is that they all wait as long as they\ncan, then when some act the rest have to.  \n  \n**Don't raise money unless you want it and it wants you.**  \n  \nSuch a high proportion of successful startups raise money that it might seem\nfundraising is one of the defining qualities of a startup. Actually it isn't.\n[Rapid growth](growth.html) is what makes a company a startup. Most companies\nin a position to grow rapidly find that (a) taking outside money helps them\ngrow faster, and (b) their growth potential makes it easy to attract such\nmoney. It's so common for both (a) and (b) to be true of a successful startup\nthat practically all do raise outside money. But there may be cases where a\nstartup either wouldn't want to grow faster, or outside money wouldn't help\nthem to, and if you're one of them, don't raise money.  \n  \nThe other time not to raise money is when you won't be able to. If you try to\nraise money before you can [convince](convince.html) investors, you'll not\nonly waste your time, but also burn your reputation with those investors.  \n  \n**Be in fundraising mode or not.**  \n  \nOne of the things that surprises founders most about fundraising is how\ndistracting it is. When you start fundraising, everything else grinds to a\nhalt. The problem is not the time fundraising consumes but that it becomes the\n[top idea in your mind](top.html). A startup can't endure that level of\ndistraction for long. An early stage startup grows mostly because the founders\n[make](ds.html) it grow, and if the founders look away, growth usually drops\nsharply.  \n  \nBecause fundraising is so distracting, a startup should either be in\nfundraising mode or not. And when you do decide to raise money, you should\nfocus your whole attention on it so you can get it done quickly and get back\nto work. [2]  \n  \nYou can take money from investors when you're not in fundraising mode. You\njust can't expend any attention on it. There are two things that take\nattention: convincing investors, and negotiating with them. So when you're not\nin fundraising mode, you should take money from investors only if they require\nno convincing, and are willing to invest on terms you'll take without\nnegotiation. For example, if a reputable investor is willing to invest on a\nconvertible note, using standard paperwork, that is either uncapped or capped\nat a good valuation, you can take that without having to think. [3] The terms\nwill be whatever they turn out to be in your next equity round. And \"no\nconvincing\" means just that: zero time spent meeting with investors or\npreparing materials for them. If an investor says they're ready to invest, but\nthey need you to come in for one meeting to meet some of the partners, tell\nthem no, if you're not in fundraising mode, because that's fundraising. [4]\nTell them politely; tell them you're focusing on the company right now, and\nthat you'll get back to them when you're fundraising; but do not get sucked\ndown the slippery slope.  \n  \nInvestors will try to lure you into fundraising when you're not. It's great\nfor them if they can, because they can thereby get a shot at you before\neveryone else. They'll send you emails saying they want to meet to learn more\nabout you. If you get cold-emailed by an associate at a VC firm, you shouldn't\nmeet even if you are in fundraising mode. Deals don't happen that way. [5] But\neven if you get an email from a partner you should try to delay meeting till\nyou're in fundraising mode. They may say they just want to meet and chat, but\ninvestors never just want to meet and chat. What if they like you? What if\nthey start to talk about giving you money? Will you be able to resist having\nthat conversation? Unless you're experienced enough at fundraising to have a\ncasual conversation with investors that stays casual, it's safer to tell them\nthat you'd be happy to later, when you're fundraising, but that right now you\nneed to focus on the company. [6]  \n  \nCompanies that are successful at raising money in phase 2 sometimes tack on a\nfew investors after leaving fundraising mode. This is fine; if fundraising\nwent well, you'll be able to do it without spending time convincing them or\nnegotiating about terms.  \n  \n**Get introductions to investors.**  \n  \nBefore you can talk to investors, you have to be introduced to them. If you're\npresenting at a Demo Day, you'll be introduced to a whole bunch\nsimultaneously. But even if you are, you should supplement these with intros\nyou collect yourself.  \n  \nDo you have to be introduced? In phase 2, yes. Some investors will let you\nemail them a business plan, but you can tell from the way their sites are\norganized that they don't really want startups to approach them directly.  \n  \nIntros vary greatly in effectiveness. The best type of intro is from a well-\nknown investor who has just invested in you. So when you get an investor to\ncommit, ask them to introduce you to other investors they respect. [7] The\nnext best type of intro is from a founder of a company they've funded. You can\nalso get intros from other people in the startup community, like lawyers and\nreporters.  \n  \nThere are now sites like AngelList, FundersClub, and WeFunder that can\nintroduce you to investors. We recommend startups treat them as auxiliary\nsources of money. Raise money first from leads you get yourself. Those will on\naverage be better investors. Plus you'll have an easier time raising money on\nthese sites once you can say you've already raised some from well-known\ninvestors.  \n  \n**Hear no till you hear yes.**  \n  \nTreat investors as saying no till they unequivocally say yes, in the form of a\ndefinite offer with no contingencies.  \n  \nI mentioned earlier that investors prefer to wait if they can. What's\nparticularly dangerous for founders is the way they wait. Essentially, they\nlead you on. They seem like they're about to invest right up till the moment\nthey say no. If they even say no. Some of the worse ones never actually do say\nno; they just stop replying to your emails. They hope that way to get a free\noption on investing. If they decide later that they want to invest \u2014 usually\nbecause they've heard you're a hot deal \u2014 they can pretend they just got\ndistracted and then restart the conversation as if they'd been about to. [8]  \n  \nThat's not the worst thing investors will do. Some will use language that\nmakes it sound as if they're committing, but which doesn't actually commit\nthem. And wishful thinking founders are happy to meet them half way. [9]  \n  \nFortunately, the next rule is a tactic for neutralizing this behavior. But to\nwork it depends on you not being tricked by the no that sounds like yes. It's\nso common for founders to be misled/mistaken about this that we designed a\n[protocol](http://ycombinator.com/hdp.html) to fix the problem. If you believe\nan investor has committed, get them to confirm it. If you and they have\ndifferent views of reality, whether the source of the discrepancy is their\nsketchiness or your wishful thinking, the prospect of confirming a commitment\nin writing will flush it out. And till they confirm, regard them as saying no.  \n  \n**Do breadth-first search weighted by expected value.**  \n  \nWhen you talk to investors your m.o. should be breadth-first search, weighted\nby expected value. You should always talk to investors in parallel rather than\nserially. You can't afford the time it takes to talk to investors serially,\nplus if you only talk to one investor at a time, they don't have the pressure\nof other investors to make them act. But you shouldn't pay the same attention\nto every investor, because some are more promising prospects than others. The\noptimal solution is to talk to all potential investors in parallel, but give\nhigher priority to the more promising ones. [10]  \n  \nExpected value = how likely an investor is to say yes, multiplied by how good\nit would be if they did. So for example, an eminent investor who would invest\na lot, but will be hard to convince, might have the same expected value as an\nobscure angel who won't invest much, but will be easy to convince. Whereas an\nobscure angel who will only invest a small amount, and yet needs to meet\nmultiple times before making up his mind, has very low expected value. Meet\nsuch investors last, if at all. [11]  \n  \nDoing breadth-first search weighted by expected value will save you from\ninvestors who never explicitly say no but merely drift away, because you'll\ndrift away from them at the same rate. It protects you from investors who\nflake in much the same way that a distributed algorithm protects you from\nprocessors that fail. If some investor isn't returning your emails, or wants\nto have lots of meetings but isn't progressing toward making you an offer, you\nautomatically focus less on them. But you have to be disciplined about\nassigning probabilities. You can't let how much you want an investor influence\nyour estimate of how much they want you.  \n  \n**Know where you stand.**  \n  \nHow do you judge how well you're doing with an investor, when investors\nhabitually seem more positive than they are? By looking at their actions\nrather than their words. Every investor has some track they need to move along\nfrom the first conversation to wiring the money, and you should always know\nwhat that track consists of, where you are on it, and how fast you're moving\nforward.  \n  \nNever leave a meeting with an investor without asking what happens next. What\nmore do they need in order to decide? Do they need another meeting with you?\nTo talk about what? And how soon? Do they need to do something internally,\nlike talk to their partners, or investigate some issue? How long do they\nexpect it to take? Don't be too pushy, but know where you stand. If investors\nare vague or resist answering such questions, assume the worst; investors who\nare seriously interested in you will usually be happy to talk about what has\nto happen between now and wiring the money, because they're already running\nthrough that in their heads. [12]  \n  \nIf you're experienced at negotiations, you already know how to ask such\nquestions. [13] If you're not, there's a trick you can use in this situation.\nInvestors know you're inexperienced at raising money. Inexperience there\ndoesn't make you unattractive. Being a noob at technology would, if you're\nstarting a technology startup, but not being a noob at fundraising. Larry and\nSergey were noobs at fundraising. So you can just confess that you're\ninexperienced at this and ask how their process works and where you are in it.\n[14]  \n  \n**Get the first commitment.**  \n  \nThe biggest factor in most investors' opinions of you is the opinion of [other\ninvestors](herd.html). Once you start getting investors to commit, it becomes\nincreasingly easy to get more to. But the other side of this coin is that it's\noften hard to get the first commitment.  \n  \nGetting the first substantial offer can be half the total difficulty of\nfundraising. What counts as a substantial offer depends on who it's from and\nhow much it is. Money from friends and family doesn't usually count, no matter\nhow much. But if you get $50k from a well known VC firm or angel investor,\nthat will usually be enough to set things rolling. [15]  \n  \n**Close committed money.**  \n  \nIt's not a deal till the money's in the bank. I often hear inexperienced\nfounders say things like \"We've raised $800,000,\" only to discover that zero\nof it is in the bank so far. Remember the twin fears that torment investors?\nThe fear of missing out that makes them jump early, and the fear of jumping\nonto a turd that results? This is a market where people are exceptionally\nprone to buyer's remorse. And it's also one that furnishes them plenty of\nexcuses to gratify it. The public markets snap startup investing around like a\nwhip. If the Chinese economy blows up tomorrow, all bets are off. But there\nare lots of surprises for individual startups too, and they tend to be\nconcentrated around fundraising. Tomorrow a big competitor could appear, or\nyou could get C&Ded, or your cofounder could quit. [16]  \n  \nEven a day's delay can bring news that causes an investor to change their\nmind. So when someone commits, get the money. Knowing where you stand doesn't\nend when they say they'll invest. After they say yes, know what the timetable\nis for getting the money, and then babysit that process till it happens.\nInstitutional investors have people in charge of wiring money, but you may\nhave to hunt angels down in person to collect a check.  \n  \nInexperienced investors are the ones most likely to get buyer's remorse.\nEstablished ones have learned to treat saying yes as like diving off a diving\nboard, and they also have more brand to preserve. But I've heard of cases of\neven top-tier VC firms welching on deals.  \n  \n**Avoid investors who don't \"lead.\"**  \n  \nSince getting the first offer is most of the difficulty of fundraising, that\nshould be part of your calculation of expected value when you start. You have\nto estimate not just the probability that an investor will say yes, but the\nprobability that they'd be the _first_ to say yes, and the latter is not\nsimply a constant fraction of the former. Some investors are known for\ndeciding quickly, and those are extra valuable early on.  \n  \nConversely, an investor who will only invest once other investors have is\nworthless initially. And while most investors are influenced by how interested\nother investors are in you, there are some who have an explicit policy of only\ninvesting after other investors have. You can recognize this contemptible\nsubspecies of investor because they often talk about \"leads.\" They say that\nthey don't lead, or that they'll invest once you have a lead. Sometimes they\neven claim to be willing to lead themselves, by which they mean they won't\ninvest till you get $x from other investors. (It's great if by \"lead\" they\nmean they'll invest unilaterally, and in addition will help you raise more.\nWhat's lame is when they use the term to mean they won't invest unless you can\nraise more elsewhere.) [17]  \n  \nWhere does this term \"lead\" come from? Up till a few years ago, startups\nraising money in phase 2 would usually raise equity rounds in which several\ninvestors invested at the same time using the same paperwork. You'd negotiate\nthe terms with one \"lead\" investor, and then all the others would sign the\nsame documents and all the money change hands at the closing.  \n  \nSeries A rounds still work that way, but things now work differently for most\nfundraising prior to the series A. Now there are rarely actual rounds before\nthe A round, or leads for them. Now startups simply raise money from investors\none at a time till they feel they have enough.  \n  \nSince there are no longer leads, why do investors use that term? Because it's\na more legitimate-sounding way of saying what they really mean. All they\nreally mean is that their interest in you is a function of other investors'\ninterest in you. I.e. the spectral signature of all mediocre investors. But\nwhen phrased in terms of leads, it sounds like there is something structural\nand therefore legitimate about their behavior.  \n  \nWhen an investor tells you \"I want to invest in you, but I don't lead,\"\ntranslate that in your mind to \"No, except yes if you turn out to be a hot\ndeal.\" And since that's the default opinion of any investor about any startup,\nthey've essentially just told you nothing.  \n  \nWhen you first start fundraising, the expected value of an investor who won't\n\"lead\" is zero, so talk to such investors last if at all.  \n  \n**Have multiple plans.**  \n  \nMany investors will ask how much you're planning to raise. This question makes\nfounders feel they should be planning to raise a specific amount. But in fact\nyou shouldn't. It's a mistake to have fixed plans in an undertaking as\nunpredictable as fundraising.  \n  \nSo why do investors ask how much you plan to raise? For much the same reasons\na salesperson in a store will ask \"How much were you planning to spend?\" if\nyou walk in looking for a gift for a friend. You probably didn't have a\nprecise amount in mind; you just want to find something good, and if it's\ninexpensive, so much the better. The salesperson asks you this not because\nyou're supposed to have a plan to spend a specific amount, but so they can\nshow you only things that cost the most you'll pay.  \n  \nSimilarly, when investors ask how much you plan to raise, it's not because\nyou're supposed to have a plan. It's to see whether you'd be a suitable\nrecipient for the size of investment they like to make, and also to judge your\nambition, reasonableness, and how far you are along with fundraising.  \n  \nIf you're a wizard at fundraising, you can say \"We plan to raise a $7 million\nseries A round, and we'll be accepting termsheets next tuesday.\" I've known a\nhandful of founders who could pull that off without having VCs laugh in their\nfaces. But if you're in the inexperienced but earnest majority, the solution\nis analogous to the solution I recommend for [pitching](convince.html) your\nstartup: do the right thing and then just tell investors what you're doing.  \n  \nAnd the right strategy, in fundraising, is to have multiple plans depending on\nhow much you can raise. Ideally you should be able to tell investors something\nlike: we can make it to profitability without raising any more money, but if\nwe raise a few hundred thousand we can hire one or two smart friends, and if\nwe raise a couple million, we can hire a whole engineering team, etc.  \n  \nDifferent plans match different investors. If you're talking to a VC firm that\nonly does series A rounds (though there are few of those left), it would be a\nwaste of time talking about any but your most expensive plan. Whereas if\nyou're talking to an angel who invests $20k at a time and you haven't raised\nany money yet, you probably want to focus on your least expensive plan.  \n  \nIf you're so fortunate as to have to think about the upper limit on what you\nshould raise, a good rule of thumb is to multiply the number of people you\nwant to hire times $15k times 18 months. In most startups, nearly all the\ncosts are a function of the number of people, and $15k per month is the\nconventional total cost (including benefits and even office space) per person.\n$15k per month is high, so don't actually spend that much. But it's ok to use\na high estimate when fundraising to add a margin for error. If you have\nadditional expenses, like manufacturing, add in those at the end. Assuming you\nhave none and you think you might hire 20 people, the most you'd want to raise\nis 20 x $15k x 18 = $5.4 million. [18]  \n  \n**Underestimate how much you want.**  \n  \nThough you can focus on different plans when talking to different types of\ninvestors, you should on the whole err on the side of underestimating the\namount you hope to raise.  \n  \nFor example, if you'd like to raise $500k, it's better to say initially that\nyou're trying to raise $250k. Then when you reach $150k you're more than half\ndone. That sends two useful signals to investors: that you're doing well, and\nthat they have to decide quickly because you're running out of room. Whereas\nif you'd said you were raising $500k, you'd be less than a third done at\n$150k. If fundraising stalled there for an appreciable time, you'd start to\nread as a failure.  \n  \nSaying initially that you're raising $250k doesn't limit you to raising that\nmuch. When you reach your initial target and you still have investor interest,\nyou can just decide to raise more. Startups do that all the time. In fact,\nmost startups that are very successful at fundraising end up raising more than\nthey originally intended.  \n  \nI'm not saying you should lie, but that you should lower your expectations\ninitially. There is almost no downside in starting with a low number. It not\nonly won't cap the amount you raise, but will on the whole tend to increase\nit.  \n  \nA good metaphor here is angle of attack. If you try to fly at too steep an\nangle of attack, you just stall. If you say right out of the gate that you\nwant to raise a $5 million series A round, unless you're in a very strong\nposition, you not only won't get that but won't get anything. Better to start\nat a low angle of attack, build up speed, and then gradually increase the\nangle if you want.  \n  \n**Be profitable if you can.**  \n  \nYou will be in a much stronger position if your collection of plans includes\none for raising zero dollars \u2014 i.e. if you can make it to profitability\nwithout raising any additional money. Ideally you want to be able to say to\ninvestors \"We'll succeed no matter what, but raising money will help us do it\nfaster.\"  \n  \nThere are many analogies between fundraising and dating, and this is one of\nthe strongest. No one wants you if you seem desperate. And the best way not to\nseem desperate is not to _be_ desperate. That's one reason we urge startups\nduring YC to keep expenses low and to try to make it to [ramen\nprofitability](ramenprofitable.html) before Demo Day. Though it sounds\nslightly paradoxical, if you want to raise money, the best thing you can do is\nget yourself to the point where you don't need to.  \n  \nThere are almost two distinct modes of fundraising: one in which founders who\nneed money knock on doors seeking it, knowing that otherwise the company will\ndie or at the very least people will have to be fired, and one in which\nfounders who don't need money take some to grow faster than they could merely\non their own revenues. To emphasize the distinction I'm going to name them:\ntype A fundraising is when you don't need money, and type B fundraising is\nwhen you do.  \n  \nInexperienced founders read about famous startups doing what was type A\nfundraising, and decide they should raise money too, since that seems to be\nhow startups work. Except when they raise money they don't have a clear path\nto profitability and are thus doing type B fundraising. And they are then\nsurprised how difficult and unpleasant it is.  \n  \nOf course not all startups can make it to ramen profitability in a few months.\nAnd some that don't still manage to have the upper hand over investors, if\nthey have some other advantage like extraordinary growth numbers or\nexceptionally formidable founders. But as time passes it gets increasingly\ndifficult to fundraise from a position of strength without being profitable.\n[19]  \n  \n**Don't optimize for valuation.**  \n  \nWhen you raise money, what should your valuation be? The most important thing\nto understand about valuation is that it's not that important.  \n  \nFounders who raise money at high valuations tend to be unduly proud of it.\nFounders are often competitive people, and since valuation is usually the only\nvisible number attached to a startup, they end up competing to raise money at\nthe highest valuation. This is stupid, because fundraising is not the test\nthat matters. The real test is revenue. Fundraising is just a means to that\nend. Being proud of how well you did at fundraising is like being proud of\nyour college grades.  \n  \nNot only is fundraising not the test that matters, valuation is not even the\nthing to optimize about fundraising. The number one thing you want from phase\n2 fundraising is to get the money you need, so you can get back to focusing on\nthe real test, the success of your company. Number two is good investors.\nValuation is at best third.  \n  \nThe empirical evidence shows just how unimportant it is. Dropbox and Airbnb\nare the most successful companies we've funded so far, and they raised money\nafter Y Combinator at premoney valuations of $4 million and $2.6 million\nrespectively. Prices are so much higher now that if you can raise money at all\nyou'll probably raise it at higher valuations than Dropbox and Airbnb. So let\nthat satisfy your competitiveness. You're doing better than Dropbox and\nAirbnb! At a test that doesn't matter.  \n  \nWhen you start fundraising, your initial valuation (or valuation cap) will be\nset by the deal you make with the first investor who commits. You can increase\nthe price for later investors, if you get a lot of interest, but by default\nthe valuation you got from the first investor becomes your asking price.  \n  \nSo if you're raising money from multiple investors, as most companies do in\nphase 2, you have to be careful to avoid raising the first from an over-eager\ninvestor at a price you won't be able to sustain. You can of course lower your\nprice if you need to (in which case you should give the same terms to\ninvestors who invested earlier at a higher price), but you may lose a bunch of\nleads in the process of realizing you need to do this.  \n  \nWhat you can do if you have eager first investors is raise money from them on\nan uncapped convertible note with an MFN clause. This is essentially a way of\nsaying that the valuation cap of the note will be determined by the next\ninvestors you raise money from.  \n  \nIt will be easier to raise money at a lower valuation. It shouldn't be, but it\nis. Since phase 2 prices vary at most 10x and the big successes generate\nreturns of at least 100x, investors should pick startups entirely based on\ntheir estimate of the probability that the company will be a big success and\nhardly at all on price. But although it's a mistake for investors to care\nabout price, a significant number do. A startup that investors seem to like\nbut won't invest in at a cap of $x will have an easier time at $x/2. [20]  \n  \n**Yes/no before valuation.**  \n  \nSome investors want to know what your valuation is before they even talk to\nyou about investing. If your valuation has already been set by a prior\ninvestment at a specific valuation or cap, you can tell them that number. But\nif it isn't set because you haven't closed anyone yet, and they try to push\nyou to name a price, resist doing so. If this would be the first investor\nyou've closed, then this could be the tipping point of fundraising. That means\nclosing this investor is the first priority, and you need to get the\nconversation onto that instead of being dragged sideways into a discussion of\nprice.  \n  \nFortunately there is a way to avoid naming a price in this situation. And it\nis not just a negotiating trick; it's how you (both) should be operating. Tell\nthem that valuation is not the most important thing to you and that you\nhaven't thought much about it, that you are looking for investors you want to\npartner with and who want to partner with you, and that you should talk first\nabout whether they want to invest at all. Then if they decide they do want to\ninvest, you can figure out a price. But first things first.  \n  \nSince valuation isn't that important and getting fundraising rolling is, we\nusually tell founders to give the first investor who commits as low a price as\nthey need to. This is a safe technique so long as you combine it with the next\none. [21]  \n  \n**Beware \"valuation sensitive\" investors.**  \n  \nOccasionally you'll encounter investors who describe themselves as \"valuation\nsensitive.\" What this means in practice is that they are compulsive\nnegotiators who will suck up a lot of your time trying to push your price\ndown. You should therefore never approach such investors first. While you\nshouldn't chase high valuations, you also don't want your valuation to be set\nartificially low because the first investor who committed happened to be a\ncompulsive negotiator. Some such investors have value, but the time to\napproach them is near the end of fundraising, when you're in a position to say\n\"this is the price everyone else has paid; take it or leave it\" and not mind\nif they leave it. This way, you'll not only get market price, but it will also\ntake less time.  \n  \nIdeally you know which investors have a reputation for being \"valuation\nsensitive\" and can postpone dealing with them till last, but occasionally one\nyou didn't know about will pop up early on. The rule of doing breadth first\nsearch weighted by expected value already tells you what to do in this case:\nslow down your interactions with them.  \n  \nThere are a handful of investors who will try to invest at a lower valuation\neven when your price has already been set. Lowering your price is a backup\nplan you resort to when you discover you've let the price get set too high to\nclose all the money you need. So you'd only want to talk to this sort of\ninvestor if you were about to do that anyway. But since investor meetings have\nto be arranged at least a few days in advance and you can't predict when\nyou'll need to resort to lowering your price, this means in practice that you\nshould approach this type of investor last if at all.  \n  \nIf you're surprised by a lowball offer, treat it as a backup offer and delay\nresponding to it. When someone makes an offer in good faith, you have a moral\nobligation to respond in a reasonable time. But lowballing you is a dick move\nthat should be met with the corresponding countermove.  \n  \n**Accept offers greedily.**  \n  \nI'm a little leery of using the term \"greedily\" when writing about fundraising\nlest non-programmers misunderstand me, but a greedy algorithm is simply one\nthat doesn't try to look into the future. A greedy algorithm takes the best of\nthe options in front of it right now. And that is how startups should approach\nfundraising in phases 2 and later. Don't try to look into the future because\n(a) the future is unpredictable, and indeed in this business you're often\nbeing deliberately misled about it and (b) your first priority in fundraising\nshould be to get it finished and get back to work anyway.  \n  \nIf someone makes you an acceptable offer, take it. If you have multiple\nincompatible offers, take the best. Don't reject an acceptable offer in the\nhope of getting a better one in the future.  \n  \nThese simple rules cover a wide variety of cases. If you're raising money from\nmany investors, roll them up as they say yes. As you start to feel you've\nraised enough, the threshold for acceptable will start to get higher.  \n  \nIn practice offers exist for stretches of time, not points. So when you get an\nacceptable offer that would be incompatible with others (e.g. an offer to\ninvest most of the money you need), you can tell the other investors you're\ntalking to that you have an offer good enough to accept, and give them a few\ndays to make their own. This could lose you some that might have made an offer\nif they had more time. But by definition you don't care; the initial offer was\nacceptable.  \n  \nSome investors will try to prevent others from having time to decide by giving\nyou an \"exploding\" offer, meaning one that's only valid for a few days. Offers\nfrom the very best investors explode less frequently and less rapidly \u2014 Fred\nWilson never gives exploding offers, for example \u2014 because they're confident\nyou'll pick them. But lower-tier investors sometimes give offers with very\nshort fuses, because they believe no one who had other options would choose\nthem. A deadline of three working days is acceptable. You shouldn't need more\nthan that if you've been talking to investors in parallel. But a deadline any\nshorter is a sign you're dealing with a sketchy investor. You can usually call\ntheir bluff, and you may need to. [22]  \n  \nIt might seem that instead of accepting offers greedily, your goal should be\nto get the best investors as partners. That is certainly a good goal, but in\nphase 2 \"get the best investors\" only rarely conflicts with \"accept offers\ngreedily,\" because the best investors don't usually take any longer to decide\nthan the others. The only case where the two strategies give conflicting\nadvice is when you have to forgo an offer from an acceptable investor to see\nif you'll get an offer from a better one. If you talk to investors in parallel\nand push back on exploding offers with excessively short deadlines, that will\nalmost never happen. But if it does, \"get the best investors\" is in the\naverage case bad advice. The best investors are also the most selective,\nbecause they get their pick of all the startups. They reject nearly everyone\nthey talk to, which means in the average case it's a bad trade to exchange a\ndefinite offer from an acceptable investor for a potential offer from a better\none.  \n  \n(The situation is different in phase 1. You can't apply to all the incubators\nin parallel, because some offset their schedules to prevent this. In phase 1,\n\"accept offers greedily\" and \"get the best investors\" do conflict, so if you\nwant to apply to multiple incubators, you should do it in such a way that the\nones you want most decide first.)  \n  \nSometimes when you're raising money from multiple investors, a series A will\nemerge out of those conversations, and these rules even cover what to do in\nthat case. When an investor starts to talk to you about a series A, keep\ntaking smaller investments till they actually give you a termsheet. There's no\npractical difficulty. If the smaller investments are on convertible notes,\nthey'll just convert into the series A round. The series A investor won't like\nhaving all these other random investors as bedfellows, but if it bothers them\nso much they should get on with giving you a termsheet. Till they do, you\ndon't know for sure they will, and the greedy algorithm tells you what to do.\n[23]  \n  \n**Don't sell more than 25% in phase 2.**  \n  \nIf you do well, you will probably raise a series A round eventually. I say\nprobably because things are changing with series A rounds. Startups may start\nto skip them. But only one company we've funded has so far, so tentatively\nassume the path to huge passes through an A round. [24]  \n  \nWhich means you should avoid doing things in earlier rounds that will mess up\nraising an A round. For example, if you've sold more than about 40% of your\ncompany total, it starts to get harder to raise an A round, because VCs worry\nthere will not be enough stock left to keep the founders motivated.  \n  \nOur rule of thumb is not to sell more than 25% in phase 2, on top of whatever\nyou sold in phase 1, which should be less than 15%. If you're raising money on\nuncapped notes, you'll have to guess what the eventual equity round valuation\nmight be. Guess conservatively.  \n  \n(Since the goal of this rule is to avoid messing up the series A, there's\nobviously an exception if you end up raising a series A in phase 2, as a\nhandful of startups do.)  \n  \n**Have one person handle fundraising.**  \n  \nIf you have multiple founders, pick one to handle fundraising so the other(s)\ncan keep working on the company. And since the danger of fundraising is not\nthe time taken up by the actual meetings but that it becomes the top idea in\nyour mind, the founder who handles fundraising should make a conscious effort\nto insulate the other founder(s) from the details of the process. [25]  \n  \n(If the founders mistrust one another, this could cause some friction. But if\nthe founders mistrust one another, you have worse problems to worry about than\nhow to organize fundraising.)  \n  \nThe founder who handles fundraising should be the CEO, who should in turn be\nthe most formidable of the founders. Even if the CEO is a programmer and\nanother founder is a salesperson? Yes. If you happen to be that type of\nfounding team, you're effectively a single founder when it comes to\nfundraising.  \n  \nIt's ok to bring all the founders to meet an investor who will invest a lot,\nand who needs this meeting as the final step before deciding. But wait till\nthat point. Introducing an investor to your cofounder(s) should be like\nintroducing a girl/boyfriend to your parents \u2014 something you do only when\nthings reach a certain stage of seriousness.  \n  \nEven if there are still one or more founders focusing on the company during\nfundraising, growth will slow. But try to get as much growth as you can,\nbecause fundraising is a segment of time, not a point, and what happens to the\ncompany during that time affects the outcome. If your numbers grow\nsignificantly between two investor meetings, investors will be hot to close,\nand if your numbers are flat or down they'll start to get cold feet.  \n  \n**You'll need an executive summary and (maybe) a deck.**  \n  \nTraditionally phase 2 fundraising consists of presenting a slide deck in\nperson to investors. Sequoia describes what such a deck should\n[contain](http://www.sequoiacap.com/ideas), and since they're the customer you\ncan take their word for it.  \n  \nI say \"traditionally\" because I'm ambivalent about decks, and (though perhaps\nthis is wishful thinking) they seem to be on the way out. A lot of the most\nsuccessful startups we fund never make decks in phase 2. They just talk to\ninvestors and explain what they plan to do. Fundraising usually takes off fast\nfor the startups that are most successful at it, and they're thus able to\nexcuse themselves by saying that they haven't had time to make a deck.  \n  \nYou'll also want an executive summary, which should be no more than a page\nlong and describe in the most matter of fact language what you plan to do, why\nit's a good idea, and what progress you've made so far. The point of the\nsummary is to remind the investor (who may have met many startups that day)\nwhat you talked about.  \n  \nAssume that if you give someone a copy of your deck or executive summary, it\nwill be passed on to whoever you'd least like to have it. But don't refuse on\nthat account to give copies to investors you meet. You just have to treat such\nleaks as a cost of doing business. In practice it's not that high a cost.\nThough founders are rightly indignant when their plans get leaked to\ncompetitors, I can't think of a startup whose outcome has been affected by it.  \n  \nSometimes an investor will ask you to send them your deck and/or executive\nsummary before they decide whether to meet with you. I wouldn't do that. It's\na sign they're not really interested.  \n  \n**Stop fundraising when it stops working.**  \n  \nWhen do you stop fundraising? Ideally when you've raised enough. But what if\nyou haven't raised as much as you'd like? When do you give up?  \n  \nIt's hard to give general advice about this, because there have been cases of\nstartups that kept trying to raise money even when it seemed hopeless, and\nmiraculously succeeded. But what I usually tell founders is to stop\nfundraising when you start to get a lot of air in the straw. When you're\ndrinking through a straw, you can tell when you get to the end of the liquid\nbecause you start to get a lot of air in the straw. When your fundraising\noptions run out, they usually run out in the same way. Don't keep sucking on\nthe straw if you're just getting air. It's not going to get better.  \n  \n**Don't get addicted to fundraising.**  \n  \nFundraising is a chore for most founders, but some find it more interesting\nthan working on their startup. The work at an early stage startup often\nconsists of unglamorous [schleps](schlep.html). Whereas fundraising, when it's\ngoing well, can be quite the opposite. Instead of sitting in your grubby\napartment listening to users complain about bugs in your software, you're\nbeing offered millions of dollars by famous investors over lunch at a nice\nrestaurant. [26]  \n  \nThe danger of fundraising is particularly acute for people who are good at it.\nIt's always fun to work on something you're good at. If you're one of these\npeople, beware. Fundraising is not what will make your company successful.\nListening to users complain about bugs in your software is what will make you\nsuccessful. And the big danger of getting addicted to fundraising is not\nmerely that you'll spend too long on it or raise too much money. It's that\nyou'll start to think of yourself as being already successful, and lose your\ntaste for the schleps you need to undertake to actually be successful.\nStartups can be destroyed by this.  \n  \nWhen I see a startup with young founders that is fabulously successful at\nfundraising, I mentally decrease my estimate of the probability that they'll\nsucceed. The press may be writing about them as if they'd been anointed as the\nnext Google, but I'm thinking \"this is going to end badly.\"  \n  \n**Don't raise too much.**  \n  \nThough only a handful of startups have to worry about this, it is possible to\nraise too much. The dangers of raising too much are subtle but insidious. One\nis that it will set impossibly high expectations. If you raise an excessive\namount of money, it will be at a high valuation, and the danger of raising\nmoney at too high a valuation is that you won't be able to increase it\nsufficiently the next time you raise money.  \n  \nA company's valuation is expected to rise each time it raises money. If not\nit's a sign of a company in trouble, which makes you unattractive to\ninvestors. So if you raise money in phase 2 at a post-money valuation of $30\nmillion, the pre-money valuation of your next round, if you want to raise one,\nis going to have to be at least $50 million. And you have to be doing really,\nreally well to raise money at $50 million.  \n  \nIt's very dangerous to let the competitiveness of your current round set the\nperformance threshold you have to meet to raise your next one, because the two\nare only loosely coupled.  \n  \nBut the money itself may be more dangerous than the valuation. The more you\nraise, the more you spend, and spending a lot of money can be disastrous for\nan early stage startup. Spending a lot makes it harder to become profitable,\nand perhaps even worse, it makes you more rigid, because the main way to spend\nmoney is people, and the more people you have, the harder it is to change\ndirections. So if you do raise a huge amount of money, don't spend it. (You\nwill find that advice almost impossible to follow, so hot will be the money\nburning a hole in your pocket, but I feel obliged at least to try.)  \n  \n**Be nice.**  \n  \nStartups raising money occasionally alienate investors by seeming arrogant.\nSometimes because they are arrogant, and sometimes because they're noobs\nclumsily attempting to mimic the toughness they've observed in experienced\nfounders.  \n  \nIt's a mistake to behave arrogantly to investors. While there are certain\nsituations in which certain investors like certain kinds of arrogance,\ninvestors vary greatly in this respect, and a flick of the whip that will\nbring one to heel will make another roar with indignation. The only safe\nstrategy is never to seem arrogant at all.  \n  \nThat will require some diplomacy if you follow the advice I've given here,\nbecause the advice I've given is essentially how to play hardball back. When\nyou refuse to meet an investor because you're not in fundraising mode, or slow\ndown your interactions with an investor who moves too slow, or treat a\ncontingent offer as the no it actually is and then, by accepting offers\ngreedily, end up leaving that investor out, you're going to be doing things\ninvestors don't like. So you must cushion the blow with soft words. At YC we\ntell startups they can blame us. And now that I've written this, everyone else\ncan blame me if they want. That plus the inexperience card should work in most\nsituations: sorry, we think you're great, but PG said startups shouldn't ___,\nand since we're new to fundraising, we feel like we have to play it safe.  \n  \nThe danger of behaving arrogantly is greatest when you're doing well. When\neveryone wants you, it's hard not to let it go to your head. Especially if\ntill recently no one wanted you. But restrain yourself. The startup world is a\nsmall place, and startups have lots of ups and downs. This is a domain where\nit's more true than usual that pride goeth before a fall. [27]  \n  \nBe nice when investors reject you as well. The best investors are not wedded\nto their initial opinion of you. If they reject you in phase 2 and you end up\ndoing well, they'll often invest in phase 3\\. In fact investors who reject you\nare some of your warmest leads for future fundraising. Any investor who spent\nsignificant time deciding probably came close to saying yes. Often you have\nsome internal champion who only needs a little more evidence to convince the\nskeptics. So it's wise not merely to be nice to investors who reject you, but\n(unless they behaved badly) to treat it as the beginning of a relationship.  \n  \n**The bar will be higher next time.**  \n  \nAssume the money you raise in phase 2 will be the last you ever raise. You\nmust make it to profitability on this money if you can.  \n  \nOver the past several years, the investment community has evolved from a\nstrategy of anointing a small number of winners early and then supporting them\nfor years to a strategy of spraying money at early stage startups and then\nruthlessly culling them at the next stage. This is probably the optimal\nstrategy for investors. It's too hard to pick winners early on. Better to let\nthe market do it for you. But it often comes as a surprise to startups how\nmuch harder it is to raise money in phase 3.  \n  \nWhen your company is only a couple months old, all it has to be is a promising\nexperiment that's worth funding to see how it turns out. The next time you\nraise money, the experiment has to have worked. You have to be on a trajectory\nthat leads to going public. And while there are some ideas where the proof\nthat the experiment worked might consist of e.g. query response times, usually\nthe proof is profitability. Usually phase 3 fundraising has to be type A\nfundraising.  \n  \nIn practice there are two ways startups hose themselves between phases 2 and\n3. Some are just too slow to become profitable. They raise enough money to\nlast for two years. There doesn't seem any particular urgency to be\nprofitable. So they don't make any effort to make money for a year. But by\nthat time, not making money has become habitual. When they finally decide to\ntry, they find they can't.  \n  \nThe other way companies hose themselves is by letting their expenses grow too\nfast. Which almost always means hiring too many people. You usually shouldn't\ngo out and hire 8 people as soon as you raise money at phase 2. Usually you\nwant to wait till you have growth (and thus usually revenues) to justify them.\nA lot of VCs will encourage you to hire aggressively. VCs generally tell you\nto spend too much, partly because as money people they err on the side of\nsolving problems by spending money, and partly because they want you to sell\nthem more of your company in subsequent rounds. Don't listen to them.  \n  \n**Don't make things complicated.**  \n  \nI realize it may seem odd to sum up this huge treatise by saying that my\noverall advice is not to make fundraising too complicated, but if you go back\nand look at this list you'll see it's basically a simple recipe with a lot of\nimplications and edge cases. Avoid investors till you decide to raise money,\nand then when you do, talk to them all in parallel, prioritized by expected\nvalue, and accept offers greedily. That's fundraising in one sentence. Don't\nintroduce complicated optimizations, and don't let investors introduce\ncomplications either.  \n  \nFundraising is not what will make you successful. It's just a means to an end.\nYour primary goal should be to get it over with and get back to what will make\nyou successful \u2014 making things and talking to users \u2014 and the path I've\ndescribed will for most startups be the surest way to that destination.  \n  \nBe good, take care of yourselves, and _don't leave the path_.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] The worst explosions happen when unpromising-seeming startups encounter\nmediocre investors. Good investors don't lead startups on; their reputations\nare too valuable. And startups that seem promising can usually get enough\nmoney from good investors that they don't have to talk to mediocre ones. It is\nthe unpromising-seeming startups that have to resort to raising money from\nmediocre investors. And it's particularly damaging when these investors flake,\nbecause unpromising-seeming startups are usually more desperate for money.  \n  \n(Not all unpromising-seeming startups do badly. Some are merely ugly ducklings\nin the sense that they violate current startup fashions.)  \n  \n[2] One YC founder told me:\n\n> I think in general we've done ok at fundraising, but I managed to screw up\n> twice at the exact same thing \u2014 trying to focus on building the company and\n> fundraising at the same time.\n\n[3] There is one subtle danger you have to watch out for here, which I warn\nabout later: beware of getting too high a valuation from an eager investor,\nlest that set an impossibly high target when raising additional money.  \n  \n[4] If they really need a meeting, then they're not ready to invest,\nregardless of what they say. They're still deciding, which means you're being\nasked to come in and convince them. Which is fundraising.  \n  \n[5] Associates at VC firms regularly cold email startups. Naive founders think\n\"Wow, a VC is interested in us!\" But an associate is not a VC. They have no\ndecision-making power. And while they may introduce startups they like to\npartners at their firm, the partners discriminate against deals that come to\nthem this way. I don't know of a single VC investment that began with an\nassociate cold-emailing a startup. If you want to approach a specific firm,\nget an intro to a partner from someone they respect.  \n  \nIt's ok to talk to an associate if you get an intro to a VC firm or they see\nyou at a Demo Day and they begin by having an associate vet you. That's not a\npromising lead and should therefore get low priority, but it's not as\ncompletely worthless as a cold email.  \n  \nBecause the title \"associate\" has gotten a bad reputation, a few VC firms have\nstarted to give their associates the title \"partner,\" which can make things\nvery confusing. If you're a YC startup you can ask us who's who; otherwise you\nmay have to do some research online. There may be a special title for actual\npartners. If someone speaks for the firm in the press or a blog on the firm's\nsite, they're probably a real partner. If they're on boards of directors\nthey're probably a real partner.  \n  \nThere are titles between \"associate\" and \"partner,\" including \"principal\" and\n\"venture partner.\" The meanings of these titles vary too much to generalize.  \n  \n[6] For similar reasons, avoid casual conversations with potential acquirers.\nThey can lead to distractions even more dangerous than fundraising. Don't even\ntake a meeting with a potential acquirer unless you want to sell your company\nright now.  \n  \n[7] Joshua Reeves specifically suggests asking each investor to intro you to\ntwo more investors.  \n  \nDon't ask investors who say no for introductions to other investors. That will\nin many cases be an anti-recommendation.  \n  \n[8] This is not always as deliberate as its sounds. A lot of the delays and\ndisconnects between founders and investors are induced by the customs of the\nventure business, which have evolved the way they have because they suit\ninvestors' interests.  \n  \n[9] One YC founder who read a draft of this essay wrote:\n\n> This is the most important section. I think it might bear stating even more\n> clearly. \"Investors will deliberately affect more interest than they have to\n> preserve optionality. If an investor seems very interested in you, they\n> still probably won't invest. The solution for this is to assume the worst \u2014\n> that an investor is just feigning interest \u2014 until you get a definite\n> commitment.\"\n\n[10] Though you should probably pack investor meetings as closely as you can,\nJeff Byun mentions one reason not to: if you pack investor meetings too\nclosely, you'll have less time for your pitch to evolve.  \n  \nSome founders deliberately schedule a handful of lame investors first, to get\nthe bugs out of their pitch.  \n  \n[11] There is not an efficient market in this respect. Some of the most\nuseless investors are also the highest maintenance.  \n  \n[12] Incidentally, this paragraph is sales 101. If you want to see it in\naction, go talk to a car dealer.  \n  \n[13] I know one very smooth founder who used to end investor meetings with\n\"So, can I count you in?\" delivered as if it were \"Can you pass the salt?\"\nUnless you're very smooth (if you're not sure...), do not do this yourself.\nThere is nothing more unconvincing, for an investor, than a nerdy founder\ntrying to deliver the lines meant for a smooth one.  \n  \nInvestors are fine with funding nerds. So if you're a nerd, just try to be a\ngood nerd, rather than doing a bad imitation of a smooth salesman.  \n  \n[14] Ian Hogarth suggests a good way to tell how serious potential investors\nare: the resources they expend on you after the first meeting. An investor\nwho's seriously interested will already be working to help you even before\nthey've committed.  \n  \n[15] In principle you might have to think about so-called \"signalling risk.\"\nIf a prestigious VC makes a small seed investment in you, what if they don't\nwant to invest the next time you raise money? Other investors might assume\nthat the VC knows you well, since they're an existing investor, and if they\ndon't want to invest in your next round, that must mean you suck. The reason I\nsay \"in principle\" is that in practice signalling hasn't been much of a\nproblem so far. It rarely arises, and in the few cases where it does, the\nstartup in question usually is doing badly and is doomed anyway.  \n  \nIf you have the luxury of choosing among seed investors, you can play it safe\nby excluding VC firms. But it isn't critical to.  \n  \n[16] Sometimes a competitor will deliberately threaten you with a lawsuit just\nas you start fundraising, because they know you'll have to disclose the threat\nto potential investors and they hope this will make it harder for you to raise\nmoney. If this happens it will probably frighten you more than investors.\nExperienced investors know about this trick, and know the actual lawsuits\nrarely happen. So if you're attacked in this way, be forthright with\ninvestors. They'll be more alarmed if you seem evasive than if you tell them\neverything.  \n  \n[17] A related trick is to claim that they'll only invest contingently on\nother investors doing so because otherwise you'd be \"undercapitalized.\" This\nis almost always bullshit. They can't estimate your minimum capital needs that\nprecisely.  \n  \n[18] You won't hire all those 20 people at once, and you'll probably have some\nrevenues before 18 months are out. But those too are acceptable or at least\naccepted additions to the margin for error.  \n  \n[19] Type A fundraising is so much better that it might even be worth doing\nsomething different if it gets you there sooner. One YC founder told me that\nif he were a first-time founder again he'd \"leave ideas that are up-front\ncapital intensive to founders with established reputations.\"  \n  \n[20] I don't know whether this happens because they're innumerate, or because\nthey believe they have zero ability to predict startup outcomes (in which case\nthis behavior at least wouldn't be irrational). In either case the\nimplications are similar.  \n  \n[21] If you're a YC startup and you have an investor who for some reason\ninsists that you decide the price, any YC partner can estimate a market price\nfor you.  \n  \n[22] You should respond in kind when investors behave upstandingly too. When\nan investor makes you a clean offer with no deadline, you have a moral\nobligation to respond promptly.  \n  \n[23] Tell the investors talking to you about an A round about the smaller\ninvestments you raise as you raise them. You owe them such updates on your cap\ntable, and this is also a good way to pressure them to act. They won't like\nyou raising other money and may pressure you to stop, but they can't\nlegitimately ask you to commit to them till they also commit to you. If they\nwant you to stop raising money, the way to do it is to give you a series A\ntermsheet with a no-shop clause.  \n  \nYou can relent a little if the potential series A investor has a great\nreputation and they're clearly working fast to get you a termsheet,\nparticularly if a third party like YC is involved to ensure there are no\nmisunderstandings. But be careful.  \n  \n[24] The company is Weebly, which made it to profitability on a seed\ninvestment of $650k. They did try to raise a series A in the fall of 2008 but\n(no doubt partly because it was the fall of 2008) the terms they were offered\nwere so bad that they decided to skip raising an A round.  \n  \n[25] Another advantage of having one founder take fundraising meetings is that\nyou never have to negotiate in real time, which is something inexperienced\nfounders should avoid. One YC founder told me:\n\n> Investors are professional negotiators and can negotiate on the spot very\n> easily. If only one founder is in the room, you can say \"I need to circle\n> back with my co-founder\" before making any commitments. I used to do this\n> all the time.\n\n[26] You'll be lucky if fundraising feels pleasant enough to become addictive.\nMore often you have to worry about the other extreme \u2014 becoming demoralized\nwhen investors reject you. As one (very successful) YC founder wrote after\nreading a draft of this:\n\n> It's hard to mentally deal with the sheer scale of rejection in fundraising\n> and if you are not in the right mindset you will fail. Users may love you\n> but these supposedly smart investors may not understand you at all. At this\n> point for me, rejection still rankles but I've come to accept that investors\n> are just not super thoughtful for the most part and you need to play the\n> game according to certain somewhat depressing rules (many of which you are\n> listing) in order to win.\n\n[27] The actual sentence in the King James Bible is \"Pride goeth before\ndestruction, and an haughty spirit before a fall.\"  \n  \n**Thanks** to Slava Akhmechet, Sam Altman, Nate Blecharczyk, Adora Cheung,\nBill Clerico, John Collison, Patrick Collison, Parker Conrad, Ron Conway,\nTravis Deyle, Jason Freedman, Joe Gebbia, Mattan Griffel, Kevin Hale, Jacob\nHeller, Ian Hogarth, Justin Kan, Professor Moriarty, Nikhil Nirmel, David\nPetersen, Geoff Ralston, Joshua Reeves, Yuri Sagalov, Emmett Shear, Rajat\nSuri, Garry Tan, and Nick Tomarello for reading drafts of this.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nAugust 2008  \n  \nRaising money is the second hardest part of starting a startup. The hardest\npart is making something people want: most startups that die, die because they\ndidn't do that. But the second biggest cause of death is probably the\ndifficulty of raising money. Fundraising is brutal.  \n  \nOne reason it's so brutal is simply the brutality of markets. People who've\nspent most of their lives in schools or big companies may not have been\nexposed to that. Professors and bosses usually feel some sense of\nresponsibility toward you; if you make a valiant effort and fail, they'll cut\nyou a break. Markets are less forgiving. Customers don't care how hard you\nworked, only whether you solved their problems.  \n  \nInvestors evaluate startups the way customers evaluate products, not the way\nbosses evaluate employees. If you're making a valiant effort and failing,\nmaybe they'll invest in your next startup, but not this one.  \n  \nBut raising money from investors is harder than selling to customers, because\nthere are so few of them. There's nothing like an efficient market. You're\nunlikely to have more than 10 who are interested; it's difficult to talk to\nmore. So the randomness of any one investor's behavior can really affect you.  \n  \nProblem number 3: investors are very random. All investors, including us, are\nby ordinary standards incompetent. We constantly have to make decisions about\nthings we don't understand, and more often than not we're wrong.  \n  \nAnd yet a lot is at stake. The amounts invested by different types of\ninvestors vary from five thousand dollars to fifty million, but the amount\nusually seems large for whatever type of investor it is. Investment decisions\nare big decisions.  \n  \nThat combination\u2014making big decisions about things they don't understand\u2014tends\nto make investors very skittish. VCs are notorious for leading founders on.\nSome of the more unscrupulous do it deliberately. But even the most well-\nintentioned investors can behave in a way that would seem crazy in everyday\nlife. One day they're full of enthusiasm and seem ready to write you a check\non the spot; the next they won't return your phone calls. They're not playing\ngames with you. They just can't make up their minds. [1]  \n  \nIf that weren't bad enough, these wildly fluctuating nodes are all linked\ntogether. Startup investors all know one another, and (though they hate to\nadmit it) the biggest factor in their opinion of you is the opinion of other\ninvestors. [2] Talk about a recipe for an unstable system. You get the\nopposite of the damping that the fear/greed balance usually produces in\nmarkets. No one is interested in a startup that's a \"bargain\" because everyone\nelse hates it.  \n  \nSo the inefficient market you get because there are so few players is\nexacerbated by the fact that they act less than independently. The result is a\nsystem like some kind of primitive, multi-celled sea creature, where you\nirritate one extremity and the whole thing contracts violently.  \n  \nY Combinator is working to fix this. We're trying to increase the number of\ninvestors just as we're increasing the number of startups. We hope that as the\nnumber of both increases we'll get something more like an efficient market. As\nt approaches infinity, Demo Day approaches an auction.  \n  \nUnfortunately, t is still very far from infinity. What does a startup do now,\nin the imperfect world we currently inhabit? The most important thing is not\nto let fundraising get you down. Startups live or die on morale. If you let\nthe difficulty of raising money destroy your morale, it will become a self-\nfulfilling prophecy.  \n  \n**Bootstrapping (= Consulting)**  \n  \nSome would-be founders may by now be thinking, why deal with investors at all?\nIf raising money is so painful, why do it?  \n  \nOne answer to that is obvious: because you need money to live on. It's a fine\nidea in principle to finance your startup with its own revenues, but you can't\ncreate instant customers. Whatever you make, you have to sell a certain amount\nto break even. It will take time to grow your sales to that point, and it's\nhard to predict, till you try, how long it will take.  \n  \nWe could not have bootstrapped Viaweb, for example. We charged quite a lot for\nour software\u2014about $140 per user per month\u2014but it was at least a year before\nour revenues would have covered even our paltry costs. We didn't have enough\nsaved to live on for a year.  \n  \nIf you factor out the \"bootstrapped\" companies that were actually funded by\ntheir founders through savings or a day job, the remainder either (a) got\nreally lucky, which is hard to do on demand, or (b) began life as consulting\ncompanies and gradually transformed themselves into product companies.  \n  \nConsulting is the only option you can count on. But consulting is far from\nfree money. It's not as painful as raising money from investors, perhaps, but\nthe pain is spread over a longer period. Years, probably. And for many types\nof startup, that delay could be fatal. If you're working on something so\nunusual that no one else is likely to think of it, you can take your time.\nJoshua Schachter gradually built Delicious on the side while working on Wall\nStreet. He got away with it because no one else realized it was a good idea.\nBut if you were building something as obviously necessary as online store\nsoftware at about the same time as Viaweb, and you were working on it on the\nside while spending most of your time on client work, you were not in a good\nposition.  \n  \nBootstrapping sounds great in principle, but this apparently verdant territory\nis one from which few startups emerge alive. The mere fact that bootstrapped\nstartups tend to be famous on that account should set off alarm bells. If it\nworked so well, it would be the norm. [3]  \n  \nBootstrapping may get easier, because starting a company is getting cheaper.\nBut I don't think we'll ever reach the point where most startups can do\nwithout outside funding. Technology tends to get dramatically cheaper, but\nliving expenses don't.  \n  \nThe upshot is, you can choose your pain: either the short, sharp pain of\nraising money, or the chronic ache of consulting. For a given total amount of\npain, raising money is the better choice, because new technology is usually\nmore valuable now than later.  \n  \nBut although for most startups raising money will be the lesser evil, it's\nstill a pretty big evil\u2014so big that it can easily kill you. Not merely in the\nobvious sense that if you fail to raise money you might have to shut the\ncompany down, but because the _process_ of raising money itself can kill you.  \n  \nTo survive it you need a set of techniques mostly orthogonal to the ones used\nin convincing investors, just as mountain climbers need to know survival\ntechniques that are mostly orthogonal to those used in physically getting up\nand down mountains.  \n  \n**1\\. Have low expectations.**  \n  \nThe reason raising money destroys so many startups' morale is not simply that\nit's hard, but that it's so much harder than they expected. What kills you is\nthe disappointment. And the lower your expectations, the harder it is to be\ndisappointed.  \n  \nStartup founders tend to be optimistic. This can work well in technology, at\nleast some of the time, but it's the wrong way to approach raising money.\nBetter to assume investors will always let you down. Acquirers too, while\nwe're at it. At YC one of our secondary mantras is \"Deals fall through.\" No\nmatter what deal you have going on, assume it will fall through. The\npredictive power of this simple rule is amazing.  \n  \nThere will be a tendency, as a deal progresses, to start to believe it will\nhappen, and then to depend on it happening. You must resist this. Tie yourself\nto the mast. This is what kills you. Deals do not have a trajectory like most\nother human interactions, where shared plans solidify linearly over time.\nDeals often fall through at the last moment. Often the other party doesn't\nreally think about what they want till the last moment. So you can't use your\neveryday intuitions about shared plans as a guide. When it comes to deals, you\nhave to consciously turn them off and become pathologically cynical.  \n  \nThis is harder to do than it sounds. It's very flattering when eminent\ninvestors seem interested in funding you. It's easy to start to believe that\nraising money will be quick and straightforward. But it hardly ever is.  \n  \n**2\\. Keep working on your startup.**  \n  \nIt sounds obvious to say that you should keep working on your startup while\nraising money. Actually this is hard to do. Most startups don't manage to.  \n  \nRaising money has a mysterious capacity to suck up all your attention. Even if\nyou only have one meeting a day with investors, somehow that one meeting will\nburn up your whole day. It costs not just the time of the actual meeting, but\nthe time getting there and back, and the time preparing for it beforehand and\nthinking about it afterward.  \n  \nThe best way to survive the distraction of meeting with investors is probably\nto partition the company: to pick one founder to deal with investors while the\nothers keep the company going. This works better when a startup has 3 founders\nthan 2, and better when the leader of the company is not also the lead\ndeveloper. In the best case, the company keeps moving forward at about half\nspeed.  \n  \nThat's the best case, though. More often than not the company comes to a\nstandstill while raising money. And that is dangerous for so many reasons.\nRaising money always takes longer than you expect. What seems like it's going\nto be a 2 week interruption turns into a 4 month interruption. That can be\nvery demoralizing. And worse still, it can make you less attractive to\ninvestors. They want to invest in companies that are dynamic. A company that\nhasn't done anything new in 4 months doesn't seem dynamic, so they start to\nlose interest. Investors rarely grasp this, but much of what they're\nresponding to when they lose interest in a startup is the damage done by their\nown indecision.  \n  \nThe solution: put the startup first. Fit meetings with investors into the\nspare moments in your development schedule, rather than doing development in\nthe spare moments between meetings with investors. If you keep the company\nmoving forward\u2014releasing new features, increasing traffic, doing deals,\ngetting written about\u2014those investor meetings are more likely to be\nproductive. Not just because your startup will seem more alive, but also\nbecause it will be better for your own morale, which is one of the main ways\ninvestors judge you.  \n  \n**3\\. Be conservative.**  \n  \nAs conditions get worse, the optimal strategy becomes more conservative. When\nthings go well you can take risks; when things are bad you want to play it\nsafe.  \n  \nI advise approaching fundraising as if it were always going badly. The reason\nis that between your ability to delude yourself and the wildly unstable nature\nof the system you're dealing with, things probably either already are or could\neasily become much worse than they seem.  \n  \nWhat I tell most startups we fund is that if someone reputable offers you\nfunding on reasonable terms, take it. There have been startups that ignored\nthis advice and got away with it\u2014startups that ignored a good offer in the\nhope of getting a better one, and actually did. But in the same position I'd\ngive the same advice again. Who knows how many bullets were in the gun they\nwere playing Russian roulette with?  \n  \nCorollary: if an investor seems interested, don't just let them sit. You can't\nassume someone interested in investing will stay interested. In fact, you\ncan't even tell (_they_ can't even tell) if they're really interested till you\ntry to convert that interest into money. So if you have hot prospect, either\nclose them now or write them off. And unless you already have enough funding,\nthat reduces to: close them now.  \n  \nStartups don't win by getting great funding rounds, but by making great\nproducts. So finish raising money and get back to work.  \n  \n**4\\. Be flexible.**  \n  \nThere are two questions VCs ask that you shouldn't answer: \"Who else are you\ntalking to?\" and \"How much are you trying to raise?\"  \n  \nVCs don't expect you to answer the first question. They ask it just in case.\n[4] They do seem to expect an answer to the second. But I don't think you\nshould just tell them a number. Not as a way to play games with them, but\nbecause you shouldn't _have_ a fixed amount you need to raise.  \n  \nThe custom of a startup needing a fixed amount of funding is an obsolete one\nleft over from the days when startups were more expensive. A company that\nneeded to build a factory or hire 50 people obviously needed to raise a\ncertain minimum amount. But few technology startups are in that position\ntoday.  \n  \nWe advise startups to tell investors there are several different routes they\ncould take depending on how much they raised. As little as $50k could pay for\nfood and rent for the founders for a year. A couple hundred thousand would let\nthem get office space and hire some smart people they know from school. A\ncouple million would let them really blow this thing out. The message (and not\njust the message, but the fact) should be: we're going to succeed no matter\nwhat. Raising more money just lets us do it faster.  \n  \nIf you're raising an angel round, the size of the round can even change on the\nfly. In fact, it's just as well to make the round small initially, then expand\nas needed, rather than trying to raise a large round and risk losing the\ninvestors you already have if you can't raise the full amount. You may even\nwant to do a \"rolling close,\" where the round has no predetermined size, but\ninstead you sell stock to investors one at a time as they say yes. That helps\nbreak deadlocks, because you can start as soon as the first one is ready to\nbuy. [5]  \n  \n**5\\. Be independent.**  \n  \nA startup with a couple founders in their early twenties can have expenses so\nlow that they could be profitable on as little as $2000 per month. That's\nnegligible as corporate revenues go, but the effect on your morale and your\nbargaining position is anything but. At YC we use the phrase \"ramen\nprofitable\" to describe the situation where you're making just enough to pay\nyour living expenses. Once you cross into ramen profitable, everything\nchanges. You may still need investment to make it big, but you don't need it\nthis month.  \n  \nYou can't plan when you start a startup how long it will take to become\nprofitable. But if you find yourself in a position where a little more effort\nexpended on sales would carry you over the threshold of ramen profitable, do\nit.  \n  \nInvestors like it when you're ramen profitable. It shows you've thought about\nmaking money, instead of just working on amusing technical problems; it shows\nyou have the discipline to keep your expenses low; but above all, it means you\ndon't need them.  \n  \nThere is nothing investors like more than a startup that seems like it's going\nto succeed even without them. Investors like it when they can help a startup,\nbut they don't like startups that would die without that help.  \n  \nAt YC we spend a lot of time trying to predict how the startups we've funded\nwill do, because we're trying to learn how to pick winners. We've now watched\nthe trajectories of so many startups that we're getting better at predicting\nthem. And when we're talking about startups we think are likely to succeed,\nwhat we find ourselves saying is things like \"Oh, those guys can take care of\nthemselves. They'll be fine.\" Not \"those guys are really smart\" or \"those guys\nare working on a great idea.\" [6] When we predict good outcomes for startups,\nthe qualities that come up in the supporting arguments are toughness,\nadaptability, determination. Which means to the extent we're correct, those\nare the qualities you need to win.  \n  \nInvestors know this, at least unconsciously. The reason they like it when you\ndon't need them is not simply that they like what they can't have, but because\nthat quality is what makes founders succeed.  \n  \n[Sam Altman](http://www.youtube.com/watch?v=KhhId_WG7RA) has it. You could\nparachute him into an island full of cannibals and come back in 5 years and\nhe'd be the king. If you're Sam Altman, you don't have to be profitable to\nconvey to investors that you'll succeed with or without them. (He wasn't, and\nhe did.) Not everyone has Sam's deal-making ability. I myself don't. But if\nyou don't, you can let the numbers speak for you.  \n  \n**6\\. Don't take rejection personally.**  \n  \nGetting rejected by investors can make you start to doubt yourself. After all,\nthey're more experienced than you. If they think your startup is lame, aren't\nthey probably right?  \n  \nMaybe, maybe not. The way to handle rejection is with precision. You shouldn't\nsimply ignore rejection. It might mean something. But you shouldn't\nautomatically get demoralized either.  \n  \nTo understand what rejection means, you have to understand first of all how\ncommon it is. Statistically, the average VC is a rejection machine. David\nHornik, a partner at August, told me:\n\n> The numbers for me ended up being something like 500 to 800 plans received\n> and read, somewhere between 50 and 100 initial 1 hour meetings held, about\n> 20 companies that I got interested in, about 5 that I got serious about and\n> did a bunch of work, 1 to 2 deals done in a year. So the odds are against\n> you. You may be a great entrepreneur, working on interesting stuff, etc. but\n> it is still incredibly unlikely that you get funded.\n\nThis is less true with angels, but VCs reject practically everyone. The\nstructure of their business means a partner does at most 2 new investments a\nyear, no matter how many good startups approach him.  \n  \nIn addition to the odds being terrible, the average investor is, as I\nmentioned, a pretty bad judge of startups. It's harder to judge startups than\nmost other things, because great startup ideas tend to seem wrong. A good\nstartup idea has to be not just good but novel. And to be both good and novel,\nan idea probably has to seem bad to most people, or someone would already be\ndoing it and it wouldn't be novel.  \n  \nThat makes judging startups harder than most other things one judges. You have\nto be an intellectual contrarian to be a good startup investor. That's a\nproblem for VCs, most of whom are not particularly imaginative. VCs are mostly\nmoney guys, not people who make things. [7] Angels are better at appreciating\nnovel ideas, because most were founders themselves.  \n  \nSo when you get a rejection, use the data that's in it, and not what's not. If\nan investor gives you specific reasons for not investing, look at your startup\nand ask if they're right. If they're real problems, fix them. But don't just\ntake their word for it. You're supposed to be the domain expert; you have to\ndecide.  \n  \nThough a rejection doesn't necessarily tell you anything about your startup,\nit does suggest your pitch could be improved. Figure out what's not working\nand change it. Don't just think \"investors are stupid.\" Often they are, but\nfigure out precisely where you lose them.  \n  \nDon't let rejections pile up as a depressing, undifferentiated heap. Sort them\nand analyze them, and then instead of thinking \"no one likes us,\" you'll know\nprecisely how big a problem you have, and what to do about it.  \n  \n**7\\. Be able to downshift into consulting (if appropriate).**  \n  \nConsulting, as I mentioned, is a dangerous way to finance a startup. But it's\nbetter than dying. It's a bit like anaerobic respiration: not the optimum\nsolution for the long term, but it can save you from an immediate threat. If\nyou're having trouble raising money from investors at all, it could save you\nto be able to shift toward consulting.  \n  \nThis works better for some startups than others. It wouldn't have been a\nnatural fit for, say, Google, but if your company was making software for\nbuilding web sites, you could degrade fairly gracefully into consulting by\nbuilding sites for clients with it.  \n  \nSo long as you were careful not to get sucked permanently into consulting,\nthis could even have advantages. You'd understand your users well if you were\nusing the software for them. Plus as a consulting company you might be able to\nget big-name users using your software that you wouldn't have gotten as a\nproduct company.  \n  \nAt Viaweb we were forced to operate like a consulting company initially,\nbecause we were so desperate for users that we'd offer to build merchants'\nsites for them if they'd sign up. But we never charged for such work, because\nwe didn't want them to start treating us like actual consultants, and calling\nus every time they wanted something changed on their site. We knew we had to\nstay a product company, because only that scales.  \n  \n**8\\. Avoid inexperienced investors.**  \n  \nThough novice investors seem unthreatening they can be the most dangerous\nsort, because they're so nervous. Especially in proportion to the amount they\ninvest. Raising $20,000 from a first-time angel investor can be as much work\nas raising $2 million from a VC fund.  \n  \nTheir lawyers are generally inexperienced too. But while the investors can\nadmit they don't know what they're doing, their lawyers can't. One YC startup\nnegotiated terms for a tiny round with an angel, only to receive a 70-page\nagreement from his lawyer. And since the lawyer could never admit, in front of\nhis client, that he'd screwed up, he instead had to insist on retaining all\nthe draconian terms in it, so the deal fell through.  \n  \nOf course, someone has to take money from novice investors, or there would\nnever be any experienced ones. But if you do, either (a) drive the process\nyourself, including supplying the\n[paperwork](http://ycombinator.com/seriesaa.html), or (b) use them only to\nfill up a larger round led by someone else.  \n  \n**9\\. Know where you stand.**  \n  \nThe most dangerous thing about investors is their indecisiveness. The worst\ncase scenario is the long no, the no that comes after months of meetings.\nRejections from investors are like design flaws: inevitable, but much less\ncostly if you discover them early.  \n  \nSo while you're talking to investors, constantly look for signs of where you\nstand. How likely are they to offer you a term sheet? What do they have to be\nconvinced of first? You shouldn't necessarily always be asking these questions\noutright\u2014that could get annoying\u2014but you should always be collecting data\nabout them.  \n  \nInvestors tend to resist committing except to the extent you push them to.\nIt's in their interest to collect the maximum amount of information while\nmaking the minimum number of decisions. The best way to force them to act is,\nof course, competing investors. But you can also apply some force by focusing\nthe discussion: by asking what specific questions they need answered to make\nup their minds, and then answering them. If you get through several obstacles\nand they keep raising new ones, assume that ultimately they're going to flake.  \n  \nYou have to be disciplined when collecting data about investors' intentions.\nOtherwise their desire to lead you on will combine with your own desire to be\nled on to produce completely inaccurate impressions.  \n  \nUse the data to weight your strategy. You'll probably be talking to several\ninvestors. Focus on the ones that are most likely to say yes. The value of a\npotential investor is a combination of how good it would be if they said yes,\nand how likely they are to say it. Put the most weight on the second factor.\nPartly because the most important quality in an investor is simply investing.\nBut also because, as I mentioned, the biggest factor in investors' opinion of\nyou is other investors' opinion of you. If you're talking to several investors\nand you manage to get one over the threshold of saying yes, it will make the\nothers much more interested. So you're not sacrificing the lukewarm investors\nif you focus on the hot ones; convincing the hot investors is the best way to\nconvince the lukewarm ones.  \n  \n**Future**  \n  \nI'm hopeful things won't always be so awkward. I hope that as startups get\ncheaper and the number of investors increases, raising money will become, if\nnot easy, at least straightforward.  \n  \nIn the meantime, the brokenness of the funding process offers a big\nopportunity. Most investors have no idea how dangerous they are. They'd be\nsurprised to hear that raising money from them is something that has to be\ntreated as a threat to a company's survival. They just think they need a\nlittle more information to make up their minds. They don't get that there are\n10 other investors who also want a little more information, and that the\nprocess of talking to them all can bring a startup to a standstill for months.  \n  \nBecause investors don't understand the cost of dealing with them, they don't\nrealize how much room there is for a potential competitor to undercut them. I\nknow from my own experience how much faster investors could decide, because\nwe've brought our own time down to 20 minutes (5 minutes of reading an\napplication plus a 10 minute interview plus 5 minutes of discussion). If you\nwere investing more money you'd want to take longer, of course. But if we can\ndecide in 20 minutes, should it take anyone longer than a couple days?  \n  \nOpportunities like this don't sit unexploited forever, even in an industry as\nconservative as venture capital. So either existing investors will start to\nmake up their minds faster, or new investors will emerge who do.  \n  \nIn the meantime founders have to treat raising money as a dangerous process.\nFortunately, I can fix the biggest danger right here. The biggest danger is\nsurprise. It's that startups will underestimate the difficulty of raising\nmoney\u2014that they'll cruise through all the initial steps, but when they turn to\nraising money they'll find it surprisingly hard, get demoralized, and give up.\nSo I'm telling you in advance: raising money is hard.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] When investors can't make up their minds, they sometimes describe it as if\nit were a property of the startup. \"You're too early for us,\" they sometimes\nsay. But which of them, if they were taken back in a time machine to the hour\nGoogle was founded, wouldn't offer to invest at any valuation the founders\nchose? An hour old is not too early if it's the right startup. What \"you're\ntoo early\" really means is \"we can't figure out yet whether you'll succeed.\"  \n  \n[2] Investors influence one another both directly and indirectly. They\ninfluence one another directly through the \"buzz\" that surrounds a hot\nstartup. But they also influence one another indirectly _through the\nfounders._ When a lot of investors are interested in you, it increases your\nconfidence in a way that makes you much more attractive to investors.  \n  \nNo VC will admit they're influenced by buzz. Some genuinely aren't. But there\nare few who can say they're not influenced by confidence.  \n  \n[3] One VC who read this essay wrote:  \n  \n\"We try to avoid companies that got bootstrapped with consulting. It creates\nvery bad behaviors/instincts that are hard to erase from a company's culture.\"  \n  \n[4] The optimal way to answer the first question is to say that it would be\nimproper to name names, while simultaneously implying that you're talking to a\nbunch of other VCs who are all about to give you term sheets. If you're the\nsort of person who understands how to do that, go ahead. If not, don't even\ntry. Nothing annoys VCs more than clumsy efforts to manipulate them.  \n  \n[5] The disadvantage of expanding a round on the fly is that the valuation is\nfixed at the start, so if you get a sudden rush of interest, you may have to\ndecide between turning some investors away and selling more of the company\nthan you meant to. That's a good problem to have, however.  \n  \n[6] I wouldn't say that intelligence doesn't matter in startups. We're only\ncomparing YC startups, who've already made it over a certain threshold.  \n  \n[7] But not all are. Though most VCs are suits at heart, the most successful\nones tend not to be. Oddly enough, the best VCs tend to be the least VC-like.  \n  \n**Thanks** to Trevor Blackwell, David Hornik, Jessica Livingston, Robert\nMorris, and Fred Wilson for reading drafts of this.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nAugust 2010  \n  \nTwo years ago I [wrote](http://www.paulgraham.com/googles.html#next) about\nwhat I called \"a huge, unexploited opportunity in startup funding:\" the\ngrowing disconnect between VCs, whose current business model requires them to\ninvest large amounts, and a large class of startups that need less than they\nused to. Increasingly, startups want a couple hundred thousand dollars, not a\ncouple million. [1]  \n  \nThe opportunity is a lot less unexploited now. Investors have poured into this\nterritory from both directions. VCs are much more likely to make angel-sized\ninvestments than they were a year ago. And meanwhile the past year has seen a\ndramatic increase in a new type of investor: the super-angel, who operates\nlike an angel, but using other people's money, like a VC.  \n  \nThough a lot of investors are entering this territory, there is still room for\nmore. The distribution of investors should mirror the distribution of\nstartups, which has the usual power law dropoff. So there should be a lot more\npeople investing tens or hundreds of thousands than millions. [2]  \n  \nIn fact, it may be good for angels that there are more people doing angel-\nsized deals, because if angel rounds become more legitimate, then startups may\nstart to opt for angel rounds even when they could, if they wanted, raise\nseries A rounds from VCs. One reason startups prefer series A rounds is that\nthey're more prestigious. But if angel investors become more active and better\nknown, they'll increasingly be able to compete with VCs in brand.  \n  \nOf course, prestige isn't the main reason to prefer a series A round. A\nstartup will probably get more attention from investors in a series A round\nthan an angel round. So if a startup is choosing between an angel round and an\nA round from a good VC fund, I usually advise them to take the A round. [3]  \n  \nBut while series A rounds aren't going away, I think VCs should be more\nworried about super-angels than vice versa. Despite their name, the super-\nangels are really mini VC funds, and they clearly have existing VCs in their\nsights.  \n  \nThey would seem to have history on their side. The pattern here seems the same\none we see when startups and established companies enter a new market. Online\nvideo becomes possible, and YouTube plunges right in, while existing media\ncompanies embrace it only half-willingly, driven more by fear than hope, and\naiming more to protect their turf than to do great things for users. Ditto for\nPayPal. This pattern is repeated over and over, and it's usually the invaders\nwho win. In this case the super-angels are the invaders. Angel rounds are\ntheir whole business, as online video was for YouTube. Whereas VCs who make\nangel investments mostly do it as a way to generate deal flow for series A\nrounds. [4]  \n  \nOn the other hand, startup investing is a very strange business. Nearly all\nthe returns are concentrated in a few big winners. If the super-angels merely\nfail to invest in (and to some extent produce) the big winners, they'll be out\nof business, even if they invest in all the others.  \n  \n**VCs**  \n  \nWhy don't VCs start doing smaller series A rounds? The sticking point is board\nseats. In a traditional series A round, the partner whose deal it is takes a\nseat on the startup's board. If we assume the average startup runs for 6 years\nand a partner can bear to be on 12 boards at once, then a VC fund can do 2\nseries A deals per partner per year.  \n  \nIt has always seemed to me the solution is to take fewer board seats. You\ndon't have to be on the board to help a startup. Maybe VCs feel they need the\npower that comes with board membership to ensure their money isn't wasted. But\nhave they tested that theory? Unless they've tried not taking board seats and\nfound their returns are lower, they're not bracketing the problem.  \n  \nI'm not saying VCs don't help startups. The good ones help them a lot. What\nI'm saying is that the kind of help that matters, you may not have to be a\nboard member to give. [5]  \n  \nHow will this all play out? Some VCs will probably adapt, by doing more,\nsmaller deals. I wouldn't be surprised if by streamlining their selection\nprocess and taking fewer board seats, VC funds could do 2 to 3 times as many\nseries A rounds with no loss of quality.  \n  \nBut other VCs will make no more than superficial changes. VCs are\nconservative, and the threat to them isn't mortal. The VC funds that don't\nadapt won't be violently displaced. They'll edge gradually into a different\nbusiness without realizing it. They'll still do what they will call series A\nrounds, but these will increasingly be de facto series B rounds. [6]  \n  \nIn such rounds they won't get the 25 to 40% of the company they do now. You\ndon't give up as much of the company in later rounds unless something is\nseriously wrong. Since the VCs who don't adapt will be investing later, their\nreturns from winners may be smaller. But investing later should also mean they\nhave fewer losers. So their ratio of risk to return may be the same or even\nbetter. They'll just have become a different, more conservative, type of\ninvestment.  \n  \n**Angels**  \n  \nIn the big angel rounds that increasingly compete with series A rounds, the\ninvestors won't take as much equity as VCs do now. And VCs who try to compete\nwith angels by doing more, smaller deals will probably find they have to take\nless equity to do it. Which is good news for founders: they'll get to keep\nmore of the company.  \n  \nThe deal terms of angel rounds will become less restrictive too\u2014not just less\nrestrictive than series A terms, but less restrictive than angel terms have\ntraditionally been.  \n  \nIn the future, angel rounds will less often be for specific amounts or have a\nlead investor. In the old days, the standard m.o. for startups was to find one\nangel to act as the lead investor. You'd negotiate a round size and valuation\nwith the lead, who'd supply some but not all of the money. Then the startup\nand the lead would cooperate to find the rest.  \n  \nThe future of angel rounds looks more like this: instead of a fixed round\nsize, startups will do a rolling close, where they take money from investors\none at a time till they feel they have enough. [7] And though there's going to\nbe one investor who gives them the first check, and his or her help in\nrecruiting other investors will certainly be welcome, this initial investor\nwill no longer be the lead in the old sense of managing the round. The startup\nwill now do that themselves.  \n  \nThere will continue to be lead investors in the sense of investors who take\nthe lead in _advising_ a startup. They may also make the biggest investment.\nBut they won't always have to be the one terms are negotiated with, or be the\nfirst money in, as they have in the past. Standardized paperwork will do away\nwith the need to negotiate anything except the valuation, and that will get\neasier too.  \n  \nIf multiple investors have to share a valuation, it will be whatever the\nstartup can get from the first one to write a check, limited by their guess at\nwhether this will make later investors balk. But there may not have to be just\none valuation. Startups are increasingly raising money on convertible notes,\nand convertible notes have not valuations but at most valuation _caps_ : caps\non what the effective valuation will be when the debt converts to equity (in a\nlater round, or upon acquisition if that happens first). That's an important\ndifference because it means a startup could do multiple notes at once with\ndifferent caps. This is now starting to happen, and I predict it will become\nmore common.  \n  \n**Sheep**  \n  \nThe reason things are moving this way is that the old way sucked for startups.\nLeads could (and did) use a fixed size round as a legitimate-seeming way of\nsaying what all founders hate to hear: I'll invest if other people will. Most\ninvestors, unable to judge startups for themselves, rely instead on the\nopinions of other investors. If everyone wants in, they want in too; if not,\nnot. Founders hate this because it's a recipe for deadlock, and delay is the\nthing a startup can least afford. Most investors know this m.o. is lame, and\nfew say openly that they're doing it. But the craftier ones achieve the same\nresult by offering to lead rounds of fixed size and supplying only part of the\nmoney. If the startup can't raise the rest, the lead is out too. How could\nthey go ahead with the deal? The startup would be underfunded!  \n  \nIn the future, investors will increasingly be unable to offer investment\nsubject to contingencies like other people investing. Or rather, investors who\ndo that will get last place in line. Startups will go to them only to fill up\nrounds that are mostly subscribed. And since hot startups tend to have rounds\nthat are oversubscribed, being last in line means they'll probably miss the\nhot deals. Hot deals and successful startups are not identical, but there is a\nsignificant correlation. [8] So investors who won't invest unilaterally will\nhave lower returns.  \n  \nInvestors will probably find they do better when deprived of this crutch\nanyway. Chasing hot deals doesn't make investors choose better; it just makes\nthem feel better about their choices. I've seen feeding frenzies both form and\nfall apart many times, and as far as I can tell they're mostly random. [9] If\ninvestors can no longer rely on their herd instincts, they'll have to think\nmore about each startup before investing. They may be surprised how well this\nworks.  \n  \nDeadlock wasn't the only disadvantage of letting a lead investor manage an\nangel round. The investors would not infrequently collude to push down the\nvaluation. And rounds took too long to close, because however motivated the\nlead was to get the round closed, he was not a tenth as motivated as the\nstartup.  \n  \nIncreasingly, startups are taking charge of their own angel rounds. Only a few\ndo so far, but I think we can already declare the old way dead, because those\nfew are the best startups. They're the ones in a position to tell investors\nhow the round is going to work. And if the startups you want to invest in do\nthings a certain way, what difference does it make what the others do?  \n  \n**Traction**  \n  \nIn fact, it may be slightly misleading to say that angel rounds will\nincreasingly take the place of series A rounds. What's really happening is\nthat startup-controlled rounds are taking the place of investor-controlled\nrounds.  \n  \nThis is an instance of a very important meta-trend, one that Y Combinator\nitself has been based on from the beginning: founders are becoming\nincreasingly powerful relative to investors. So if you want to predict what\nthe future of venture funding will be like, just ask: how would founders like\nit to be? One by one, all the things founders dislike about raising money are\ngoing to get eliminated. [10]  \n  \nUsing that heuristic, I'll predict a couple more things. One is that investors\nwill increasingly be unable to wait for startups to have \"traction\" before\nthey put in significant money. It's hard to predict in advance which startups\nwill succeed. So most investors prefer, if they can, to wait till the startup\nis already succeeding, then jump in quickly with an offer. Startups hate this\nas well, partly because it tends to create deadlock, and partly because it\nseems kind of slimy. If you're a promising startup but don't yet have\nsignificant growth, all the investors are your friends in words, but few are\nin actions. They all say they love you, but they all wait to invest. Then when\nyou start to see growth, they claim they were your friend all along, and are\naghast at the thought you'd be so disloyal as to leave them out of your round.\nIf founders become more powerful, they'll be able to make investors give them\nmore money upfront.  \n  \n(The worst variant of this behavior is the tranched deal, where the investor\nmakes a small initial investment, with more to follow if the startup does\nwell. In effect, this structure gives the investor a free option on the next\nround, which they'll only take if it's worse for the startup than they could\nget in the open market. Tranched deals are an abuse. They're increasingly\nrare, and they're going to get rarer.) [11]  \n  \nInvestors don't like trying to predict which startups will succeed, but\nincreasingly they'll have to. Though the way that happens won't necessarily be\nthat the behavior of existing investors will change; it may instead be that\nthey'll be replaced by other investors with different behavior\u2014that investors\nwho understand startups well enough to take on the hard problem of predicting\ntheir trajectory will tend to displace suits whose skills lie more in raising\nmoney from LPs.  \n  \n**Speed**  \n  \nThe other thing founders hate most about fundraising is how long it takes. So\nas founders become more powerful, rounds should start to close faster.  \n  \nFundraising is still terribly distracting for startups. If you're a founder in\nthe middle of raising a round, the round is the [top idea in your\nmind](top.html), which means working on the company isn't. If a round takes 2\nmonths to close, which is reasonably fast by present standards, that means 2\nmonths during which the company is basically treading water. That's the worst\nthing a startup could do.  \n  \nSo if investors want to get the best deals, the way to do it will be to close\nfaster. Investors don't need weeks to make up their minds anyway. We decide\nbased on about 10 minutes of reading an application plus 10 minutes of in\nperson interview, and we only regret about 10% of our decisions. If we can\ndecide in 20 minutes, surely the next round of investors can decide in a\ncouple days. [12]  \n  \nThere are a lot of institutionalized delays in startup funding: the multi-week\nmating dance with investors; the distinction between termsheets and deals; the\nfact that each series A has enormously elaborate, custom paperwork. Both\nfounders and investors tend to take these for granted. It's the way things\nhave always been. But ultimately the reason these delays exist is that they're\nto the advantage of investors. More time gives investors more information\nabout a startup's trajectory, and it also tends to make startups more pliable\nin negotiations, since they're usually short of money.  \n  \nThese conventions weren't designed to drag out the funding process, but that's\nwhy they're allowed to persist. Slowness is to the advantage of investors, who\nhave in the past been the ones with the most power. But there is no need for\nrounds to take months or even weeks to close, and once founders realize that,\nit's going to stop. Not just in angel rounds, but in series A rounds too. The\nfuture is simple deals with standard terms, done quickly.  \n  \nOne minor abuse that will get corrected in the process is option pools. In a\ntraditional series A round, before the VCs invest they make the company set\naside a block of stock for future hires\u2014usually between 10 and 30% of the\ncompany. The point is to ensure this dilution is borne by the existing\nshareholders. The practice isn't dishonest; founders know what's going on. But\nit makes deals unnecessarily complicated. In effect the valuation is 2\nnumbers. There's no need to keep doing this. [13]  \n  \nThe final thing founders want is to be able to sell some of their own stock in\nlater rounds. This won't be a change, because the practice is now quite\ncommon. A lot of investors hated the idea, but the world hasn't exploded as a\nresult, so it will happen more, and more openly.  \n  \n**Surprise**  \n  \nI've talked here about a bunch of changes that will be forced on investors as\nfounders become more powerful. Now the good news: investors may actually make\nmore money as a result.  \n  \nA couple days ago an interviewer [asked\nme](http://techcrunch.tv/watch?id=Q3amZtMTryrpiP80cbUtsV2ah92eZP2m) if\nfounders having more power would be better or worse for the world. I was\nsurprised, because I'd never considered that question. Better or worse, it's\nhappening. But after a second's reflection, the answer seemed obvious.\nFounders understand their companies better than investors, and it has to be\nbetter if the people with more knowledge have more power.  \n  \nOne of the mistakes novice pilots make is overcontrolling the aircraft:\napplying corrections too vigorously, so the aircraft oscillates about the\ndesired configuration instead of approaching it asymptotically. It seems\nprobable that investors have till now on average been overcontrolling their\nportfolio companies. In a lot of startups, the biggest source of stress for\nthe founders is not competitors but investors. Certainly it was for us at\nViaweb. And this is not a new phenomenon: investors were James Watt's biggest\nproblem too. If having less power prevents investors from overcontrolling\nstartups, it should be better not just for founders but for investors too.  \n  \nInvestors may end up with less stock per startup, but startups will probably\ndo better with founders more in control, and there will almost certainly be\nmore of them. Investors all compete with one another for deals, but they\naren't one another's main competitor. Our main competitor is employers. And so\nfar that competitor is crushing us. Only a tiny fraction of people who could\nstart a startup do. Nearly all customers choose the competing product, a job.\nWhy? Well, let's look at the product we're offering. An unbiased review would\ngo something like this:\n\n> Starting a startup gives you more freedom and the opportunity to make a lot\n> more money than a job, but it's also hard work and at times very stressful.\n\nMuch of the stress comes from dealing with investors. If reforming the\ninvestment process removed that stress, we'd make our product much more\nattractive. The kind of people who make good startup founders don't mind\ndealing with technical problems\u2014they enjoy technical problems\u2014but they hate\nthe type of problems investors cause.  \n  \nInvestors have no idea that when they maltreat one startup, they're preventing\n10 others from happening, but they are. Indirectly, but they are. So when\ninvestors stop trying to squeeze a little more out of their existing deals,\nthey'll find they're net ahead, because so many more new deals appear.  \n  \nOne of our axioms at Y Combinator is not to think of deal flow as a zero-sum\ngame. Our main focus is to encourage more startups to happen, not to win a\nlarger share of the existing stream. We've found this principle very useful,\nand we think as it spreads outward it will help later stage investors as well.  \n  \n\"Make something people want\" applies to us too.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] In this essay I'm talking mainly about software startups. These points\ndon't apply to types of startups that are still expensive to start, e.g. in\nenergy or biotech.  \n  \nEven the cheap kinds of startups will generally raise large amounts at some\npoint, when they want to hire a lot of people. What has changed is how much\nthey can get done before that.  \n  \n[2] It's not the distribution of good startups that has a power law dropoff,\nbut the distribution of potentially good startups, which is to say, good\ndeals. There are lots of potential winners, from which a few actual winners\nemerge with superlinear certainty.  \n  \n[3] As I was writing this, I asked some founders who'd taken series A rounds\nfrom top VC funds whether it was worth it, and they unanimously said yes.  \n  \nThe quality of investor is more important than the type of round, though. I'd\ntake an angel round from good angels over a series A from a mediocre VC.  \n  \n[4] Founders also worry that taking an angel investment from a VC means\nthey'll look bad if the VC declines to participate in the next round. The\ntrend of VC angel investing is so new that it's hard to say how justified this\nworry is.  \n  \nAnother danger, pointed out by Mitch Kapor, is that if VCs are only doing\nangel deals to generate series A deal flow, then their incentives aren't\naligned with the founders'. The founders want the valuation of the next round\nto be high, and the VCs want it to be low. Again, hard to say yet how much of\na problem this will be.  \n  \n[5] Josh Kopelman pointed out that another way to be on fewer boards at once\nis to take board seats for shorter periods.  \n  \n[6] Google was in this respect as so many others the pattern for the future.\nIt would be great for VCs if the similarity extended to returns. That's\nprobably too much to hope for, but the returns may be somewhat higher, as I\nexplain later.  \n  \n[7] Doing a rolling close doesn't mean the company is always raising money.\nThat would be a distraction. The point of a rolling close is to make\nfundraising take less time, not more. With a classic fixed sized round, you\ndon't get any money till all the investors agree, and that often creates a\nsituation where they all sit waiting for the others to act. A rolling close\nusually prevents this.  \n  \n[8] There are two (non-exclusive) causes of hot deals: the quality of the\ncompany, and domino effects among investors. The former is obviously a better\npredictor of success.  \n  \n[9] Some of the randomness is concealed by the fact that investment is a self\nfulfilling prophecy.  \n  \n[10] The shift in power to founders is exaggerated now because it's a seller's\nmarket. On the next downtick it will seem like I overstated the case. But on\nthe next uptick after that, founders will seem more powerful than ever.  \n  \n[11] More generally, it will become less common for the same investor to\ninvest in successive rounds, except when exercising an option to maintain\ntheir percentage. When the same investor invests in successive rounds, it\noften means the startup isn't getting market price. They may not care; they\nmay prefer to work with an investor they already know; but as the investment\nmarket becomes more efficient, it will become increasingly easy to get market\nprice if they want it. Which in turn means the investment community will tend\nto become more stratified.  \n  \n[12] The two 10 minuteses have 3 weeks between them so founders can get cheap\nplane tickets, but except for that they could be adjacent.  \n  \n[13] I'm not saying option pools themselves will go away. They're an\nadministrative convenience. What will go away is investors requiring them.  \n  \n  \n  \n**Thanks** to Sam Altman, John Bautista, Trevor Blackwell, Paul Buchheit, Jeff\nClavier, Patrick Collison, Ron Conway, Matt Cohler, Chris Dixon, Mitch Kapor,\nJosh Kopelman, Pete Koomen, Carolynn Levy, Jessica Livingston, Ariel Poler,\nGeoff Ralston, Naval Ravikant, Dan Siroker, Harj Taggar, and Fred Wilson for\nreading drafts of this.  \n  \n\nNovember 2019  \n  \nEveryone knows that to do great work you need both natural ability and\ndetermination. But there's a third ingredient that's not as well understood:\nan obsessive interest in a particular topic.  \n  \nTo explain this point I need to burn my reputation with some group of people,\nand I'm going to choose bus ticket collectors. There are people who collect\nold bus tickets. Like many collectors, they have an obsessive interest in the\nminutiae of what they collect. They can keep track of distinctions between\ndifferent types of bus tickets that would be hard for the rest of us to\nremember. Because we don't care enough. What's the point of spending so much\ntime thinking about old bus tickets?  \n  \nWhich leads us to the second feature of this kind of obsession: there is no\npoint. A bus ticket collector's love is disinterested. They're not doing it to\nimpress us or to make themselves rich, but for its own sake.  \n  \nWhen you look at the lives of people who've done great work, you see a\nconsistent pattern. They often begin with a bus ticket collector's obsessive\ninterest in something that would have seemed pointless to most of their\ncontemporaries. One of the most striking features of Darwin's book about his\nvoyage on the Beagle is the sheer depth of his interest in natural history.\nHis curiosity seems infinite. Ditto for Ramanujan, sitting by the hour working\nout on his slate what happens to series.  \n  \nIt's a mistake to think they were \"laying the groundwork\" for the discoveries\nthey made later. There's too much intention in that metaphor. Like bus ticket\ncollectors, they were doing it because they liked it.  \n  \nBut there is a difference between Ramanujan and a bus ticket collector. Series\nmatter, and bus tickets don't.  \n  \nIf I had to put the recipe for genius into one sentence, that might be it: to\nhave a disinterested obsession with something that matters.  \n  \nAren't I forgetting about the other two ingredients? Less than you might\nthink. An obsessive interest in a topic is both a proxy for ability and a\nsubstitute for determination. Unless you have sufficient mathematical\naptitude, you won't find series interesting. And when you're obsessively\ninterested in something, you don't need as much determination: you don't need\nto push yourself as hard when curiosity is pulling you.  \n  \nAn obsessive interest will even bring you luck, to the extent anything can.\nChance, as Pasteur said, favors the prepared mind, and if there's one thing an\nobsessed mind is, it's prepared.  \n  \nThe disinterestedness of this kind of obsession is its most important feature.\nNot just because it's a filter for earnestness, but because it helps you\ndiscover new ideas.  \n  \nThe paths that lead to new ideas tend to look unpromising. If they looked\npromising, other people would already have explored them. How do the people\nwho do great work discover these paths that others overlook? The popular story\nis that they simply have better vision: because they're so talented, they see\npaths that others miss. But if you look at the way great discoveries are made,\nthat's not what happens. Darwin didn't pay closer attention to individual\nspecies than other people because he saw that this would lead to great\ndiscoveries, and they didn't. He was just really, really interested in such\nthings.  \n  \nDarwin couldn't turn it off. Neither could Ramanujan. They didn't discover the\nhidden paths that they did because they seemed promising, but because they\ncouldn't help it. That's what allowed them to follow paths that someone who\nwas merely ambitious would have ignored.  \n  \nWhat rational person would decide that the way to write great novels was to\nbegin by spending several years creating an imaginary elvish language, like\nTolkien, or visiting every household in southwestern Britain, like Trollope?\nNo one, including Tolkien and Trollope.  \n  \nThe bus ticket theory is similar to Carlyle's famous definition of genius as\nan infinite capacity for taking pains. But there are two differences. The bus\nticket theory makes it clear that the source of this infinite capacity for\ntaking pains is not infinite diligence, as Carlyle seems to have meant, but\nthe sort of infinite interest that collectors have. It also adds an important\nqualification: an infinite capacity for taking pains about something that\nmatters.  \n  \nSo what matters? You can never be sure. It's precisely because no one can tell\nin advance which paths are promising that you can discover new ideas by\nworking on what you're interested in.  \n  \nBut there are some heuristics you can use to guess whether an obsession might\nbe one that matters. For example, it's more promising if you're creating\nsomething, rather than just consuming something someone else creates. It's\nmore promising if something you're interested in is difficult, especially if\nit's [_more difficult for other people_](work.html) than it is for you. And\nthe obsessions of talented people are more likely to be promising. When\ntalented people become interested in random things, they're not truly random.  \n  \nBut you can never be sure. In fact, here's an interesting idea that's also\nrather alarming if it's true: it may be that to do great work, you also have\nto waste a lot of time.  \n  \nIn many different areas, reward is proportionate to risk. If that rule holds\nhere, then the way to find paths that lead to truly great work is to be\nwilling to expend a lot of effort on things that turn out to be every bit as\nunpromising as they seem.  \n  \nI'm not sure if this is true. On one hand, it seems surprisingly difficult to\nwaste your time so long as you're working hard on something interesting. So\nmuch of what you do ends up being useful. But on the other hand, the rule\nabout the relationship between risk and reward is so powerful that it seems to\nhold wherever risk occurs. [_Newton's_](disc.html) case, at least, suggests\nthat the risk/reward rule holds here. He's famous for one particular obsession\nof his that turned out to be unprecedentedly fruitful: using math to describe\nthe world. But he had two other obsessions, alchemy and theology, that seem to\nhave been complete wastes of time. He ended up net ahead. His bet on what we\nnow call physics paid off so well that it more than compensated for the other\ntwo. But were the other two necessary, in the sense that he had to take big\nrisks to make such big discoveries? I don't know.  \n  \nHere's an even more alarming idea: might one make all bad bets? It probably\nhappens quite often. But we don't know how often, because these people don't\nbecome famous.  \n  \nIt's not merely that the returns from following a path are hard to predict.\nThey change dramatically over time. 1830 was a really good time to be\nobsessively interested in natural history. If Darwin had been born in 1709\ninstead of 1809, we might never have heard of him.  \n  \nWhat can one do in the face of such uncertainty? One solution is to hedge your\nbets, which in this case means to follow the obviously promising paths instead\nof your own private obsessions. But as with any hedge, you're decreasing\nreward when you decrease risk. If you forgo working on what you like in order\nto follow some more conventionally ambitious path, you might miss something\nwonderful that you'd otherwise have discovered. That too must happen all the\ntime, perhaps even more often than the genius whose bets all fail.  \n  \nThe other solution is to let yourself be interested in lots of different\nthings. You don't decrease your upside if you switch between equally genuine\ninterests based on which seems to be working so far. But there is a danger\nhere too: if you work on too many different projects, you might not get deeply\nenough into any of them.  \n  \nOne interesting thing about the bus ticket theory is that it may help explain\nwhy different types of people excel at different kinds of work. Interest is\nmuch more unevenly distributed than ability. If natural ability is all you\nneed to do great work, and natural ability is evenly distributed, you have to\ninvent elaborate theories to explain the skewed distributions we see among\nthose who actually do great work in various fields. But it may be that much of\nthe skew has a simpler explanation: different people are interested in\ndifferent things.  \n  \nThe bus ticket theory also explains why people are less likely to do great\nwork after they have children. Here interest has to compete not just with\nexternal obstacles, but with another interest, and one that for most people is\nextremely powerful. It's harder to find time for work after you have kids, but\nthat's the easy part. The real change is that you don't want to.  \n  \nBut the most exciting implication of the bus ticket theory is that it suggests\nways to encourage great work. If the recipe for genius is simply natural\nability plus hard work, all we can do is hope we have a lot of ability, and\nwork as hard as we can. But if interest is a critical ingredient in genius, we\nmay be able, by cultivating interest, to cultivate genius.  \n  \nFor example, for the very ambitious, the bus ticket theory suggests that the\nway to do great work is to relax a little. Instead of gritting your teeth and\ndiligently pursuing what all your peers agree is the most promising line of\nresearch, maybe you should try doing something just for fun. And if you're\nstuck, that may be the vector along which to break out.  \n  \nI've always liked [_Hamming's_](hamming.html) famous double-barrelled\nquestion: what are the most important problems in your field, and why aren't\nyou working on one of them? It's a great way to shake yourself up. But it may\nbe overfitting a bit. It might be at least as useful to ask yourself: if you\ncould take a year off to work on something that probably wouldn't be important\nbut would be really interesting, what would it be?  \n  \nThe bus ticket theory also suggests a way to avoid slowing down as you get\nolder. Perhaps the reason people have fewer new ideas as they get older is not\nsimply that they're losing their edge. It may also be because once you become\nestablished, you can no longer mess about with irresponsible side projects the\nway you could when you were young and no one cared what you did.  \n  \nThe solution to that is obvious: remain irresponsible. It will be hard,\nthough, because the apparently random projects you take up to stave off\ndecline will read to outsiders as evidence of it. And you yourself won't know\nfor sure that they're wrong. But it will at least be more fun to work on what\nyou want.  \n  \nIt may even be that we can cultivate a habit of intellectual bus ticket\ncollecting in kids. The usual plan in education is to start with a broad,\nshallow focus, then gradually become more specialized. But I've done the\nopposite with my kids. I know I can count on their school to handle the broad,\nshallow part, so I take them deep.  \n  \nWhen they get interested in something, however random, I encourage them to go\npreposterously, bus ticket collectorly, deep. I don't do this because of the\nbus ticket theory. I do it because I want them to feel the joy of learning,\nand they're never going to feel that about something I'm making them learn. It\nhas to be something they're interested in. I'm just following the path of\nleast resistance; depth is a byproduct. But if in trying to show them the joy\nof learning I also end up training them to go deep, so much the better.  \n  \nWill it have any effect? I have no idea. But that uncertainty may be the most\ninteresting point of all. There is so much more to learn about how to do great\nwork. As old as human civilization feels, it's really still very young if we\nhaven't nailed something so basic. It's exciting to think there are still\ndiscoveries to make about discovery. If that's the sort of thing you're\ninterested in.  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] There are other types of collecting that illustrate this point better than\nbus tickets, but they're also more popular. It seemed just as well to use an\ninferior example rather than offend more people by telling them their hobby\ndoesn't matter.  \n  \n[2] I worried a little about using the word \"disinterested,\" since some people\nmistakenly believe it means not interested. But anyone who expects to be a\ngenius will have to know the meaning of such a basic word, so I figure they\nmay as well start now.  \n  \n[3] Think how often genius must have been nipped in the bud by people being\ntold, or telling themselves, to stop messing about and be responsible.\nRamanujan's mother was a huge enabler. Imagine if she hadn't been. Imagine if\nhis parents had made him go out and get a job instead of sitting around at\nhome doing math.  \n  \nOn the other hand, anyone quoting the preceding paragraph to justify not\ngetting a job is probably mistaken.  \n  \n[4] 1709 Darwin is to time what the [_Milanese Leonardo_](cities.html) is to\nspace.  \n  \n[5] \"An infinite capacity for taking pains\" is a paraphrase of what Carlyle\nwrote. What he wrote, in his _History of Frederick the Great_ , was \"... it is\nthe fruit of 'genius' (which means transcendent capacity of taking trouble,\nfirst of all)....\" Since the paraphrase seems the name of the idea at this\npoint, I kept it.  \n  \nCarlyle's _History_ was published in 1858. In 1785 H\u00e9rault de S\u00e9chelles quoted\nBuffon as saying \"Le g\u00e9nie n'est qu'une plus grande aptitude \u00e0 la patience.\"\n(Genius is only a greater aptitude for patience.)  \n  \n[6] Trollope was establishing the system of postal routes. He himself sensed\nthe obsessiveness with which he pursued this goal.\n\n> It is amusing to watch how a passion will grow upon a man. During those two\n> years it was the ambition of my life to cover the country with rural letter-\n> carriers.\n\nEven Newton occasionally sensed the degree of his obsessiveness. After\ncomputing pi to 15 digits, he wrote in a letter to a friend:\n\n> I am ashamed to tell you to how many figures I carried these computations,\n> having no other business at the time.\n\nIncidentally, Ramanujan was also a compulsive calculator. As Kanigel writes in\nhis excellent biography:\n\n> One Ramanujan scholar, B. M. Wilson, later told how Ramanujan's research\n> into number theory was often \"preceded by a table of numerical results,\n> carried usually to a length from which most of us would shrink.\"\n\n[7] Working to understand the natural world counts as creating rather than\nconsuming.  \n  \nNewton tripped over this distinction when he chose to work on theology. His\nbeliefs did not allow him to see it, but chasing down paradoxes in nature is\nfruitful in a way that chasing down paradoxes in sacred texts is not.  \n  \n[8] How much of people's propensity to become interested in a topic is inborn?\nMy experience so far suggests the answer is: most of it. Different kids get\ninterested in different things, and it's hard to make a child interested in\nsomething they wouldn't otherwise be. Not in a way that sticks. The most you\ncan do on behalf of a topic is to make sure it gets a fair showing \u0097 to make\nit clear to them, for example, that there's more to math than the dull drills\nthey do in school. After that it's up to the child.  \n  \n  \n  \n**Thanks** to Marc Andreessen, Trevor Blackwell, Patrick Collison, Kevin\nLacker, Jessica Livingston, Jackie McDonough, Robert Morris, Lisa Randall, Zak\nStone, and [_my 7 year\nold_](https://twitter.com/paulg/status/1196537802621669376) for reading drafts\nof this.  \n  \n\nJanuary 2023  \n  \n _([_Someone_](https://twitter.com/stef/status/1617222428727586816) fed my\nessays into GPT to make something that could answer questions based on them,\nthen asked it where good ideas come from. The answer was ok, but not what I\nwould have said. This is what I would have said.)_  \n  \nThe way to get new ideas is to notice anomalies: what seems strange, or\nmissing, or broken? You can see anomalies in everyday life (much of standup\ncomedy is based on this), but the best place to look for them is at the\nfrontiers of knowledge.  \n  \nKnowledge grows fractally. From a distance its edges look smooth, but when you\nlearn enough to get close to one, you'll notice it's full of gaps. These gaps\nwill seem obvious; it will seem inexplicable that no one has tried x or\nwondered about y. In the best case, exploring such gaps yields whole new\nfractal buds.  \n  \n\nApril 2008  \n  \n _(This essay is derived from a talk at the 2008 Startup School.)_  \n  \nAbout a month after we started Y Combinator we came up with the phrase that\nbecame our motto: Make something people want. We've learned a lot since then,\nbut if I were choosing now that's still the one I'd pick.  \n  \nAnother thing we tell founders is not to worry too much about the business\nmodel, at least at first. Not because making money is unimportant, but because\nit's so much easier than building something great.  \n  \nA couple weeks ago I realized that if you put those two ideas together, you\nget something surprising. Make something people want. Don't worry too much\nabout making money. What you've got is a description of a charity.  \n  \nWhen you get an unexpected result like this, it could either be a bug or a new\ndiscovery. Either businesses aren't supposed to be like charities, and we've\nproven by reductio ad absurdum that one or both of the principles we began\nwith is false. Or we have a new idea.  \n  \nI suspect it's the latter, because as soon as this thought occurred to me, a\nwhole bunch of other things fell into place.  \n  \n**Examples**  \n  \nFor example, Craigslist. It's not a charity, but they run it like one. And\nthey're astoundingly successful. When you scan down the list of most popular\nweb sites, the number of employees at Craigslist looks like a misprint. Their\nrevenues aren't as high as they could be, but most startups would be happy to\ntrade places with them.  \n  \nIn Patrick O'Brian's novels, his captains always try to get upwind of their\nopponents. If you're upwind, you decide when and if to engage the other ship.\nCraigslist is effectively upwind of enormous revenues. They'd face some\nchallenges if they wanted to make more, but not the sort you face when you're\ntacking upwind, trying to force a crappy product on ambivalent users by\nspending ten times as much on sales as on development. [1]  \n  \nI'm not saying startups should aim to end up like Craigslist. They're a\nproduct of unusual circumstances. But they're a good model for the early\nphases.  \n  \nGoogle looked a lot like a charity in the beginning. They didn't have ads for\nover a year. At year 1, Google was indistinguishable from a nonprofit. If a\nnonprofit or government organization had started a project to index the web,\nGoogle at year 1 is the limit of what they'd have produced.  \n  \nBack when I was working on spam filters I thought it would be a good idea to\nhave a web-based email service with good spam filtering. I wasn't thinking of\nit as a company. I just wanted to keep people from getting spammed. But as I\nthought more about this project, I realized it would probably have to be a\ncompany. It would cost something to run, and it would be a pain to fund with\ngrants and donations.  \n  \nThat was a surprising realization. Companies often claim to be benevolent, but\nit was surprising to realize there were purely benevolent projects that had to\nbe embodied as companies to work.  \n  \nI didn't want to start another company, so I didn't do it. But if someone had,\nthey'd probably be quite rich now. There was a window of about two years when\nspam was increasing rapidly but all the big email services had terrible\nfilters. If someone had launched a new, spam-free mail service, users would\nhave flocked to it.  \n  \nNotice the pattern here? From either direction we get to the same spot. If you\nstart from successful startups, you find they often behaved like nonprofits.\nAnd if you start from ideas for nonprofits, you find they'd often make good\nstartups.  \n  \n**Power**  \n  \nHow wide is this territory? Would all good nonprofits be good companies?\nPossibly not. What makes Google so valuable is that their users have money. If\nyou make people with money love you, you can probably get some of it. But\ncould you also base a successful startup on behaving like a nonprofit to\npeople who don't have money? Could you, for example, grow a successful startup\nout of curing an unfashionable but deadly disease like malaria?  \n  \nI'm not sure, but I suspect that if you pushed this idea, you'd be surprised\nhow far it would go. For example, people who apply to Y Combinator don't\ngenerally have much money, and yet we can profit by helping them, because with\nour help they could make money. Maybe the situation is similar with malaria.\nMaybe an organization that helped lift its weight off a country could benefit\nfrom the resulting growth.  \n  \nI'm not proposing this is a serious idea. I don't know anything about malaria.\nBut I've been kicking ideas around long enough to know when I come across a\npowerful one.  \n  \nOne way to guess how far an idea extends is to ask yourself at what point\nyou'd bet against it. The thought of betting against benevolence is alarming\nin the same way as saying that something is technically impossible. You're\njust asking to be made a fool of, because these are such powerful forces. [2]  \n  \nFor example, initially I thought maybe this principle only applied to Internet\nstartups. Obviously it worked for Google, but what about Microsoft? Surely\nMicrosoft isn't benevolent? But when I think back to the beginning, they were.\nCompared to IBM they were like Robin Hood. When IBM introduced the PC, they\nthought they were going to make money selling hardware at high prices. But by\ngaining control of the PC standard, Microsoft opened up the market to any\nmanufacturer. Hardware prices plummeted, and lots of people got to have\ncomputers who couldn't otherwise have afforded them. It's the sort of thing\nyou'd expect Google to do.  \n  \nMicrosoft isn't so benevolent now. Now when one thinks of what Microsoft does\nto users, all the verbs that come to mind begin with F. [3] And yet it doesn't\nseem to pay. Their stock price has been flat for years. Back when they were\nRobin Hood, their stock price rose like Google's. Could there be a connection?  \n  \nYou can see how there would be. When you're small, you can't bully customers,\nso you have to charm them. Whereas when you're big you can maltreat them at\nwill, and you tend to, because it's easier than satisfying them. You grow big\nby being nice, but you can stay big by being mean.  \n  \nYou get away with it till the underlying conditions change, and then all your\nvictims escape. So \"Don't be evil\" may be the most valuable thing Paul\nBuchheit made for Google, because it may turn out to be an elixir of corporate\nyouth. I'm sure they find it constraining, but think how valuable it will be\nif it saves them from lapsing into the fatal laziness that afflicted Microsoft\nand IBM.  \n  \nThe curious thing is, this elixir is freely available to any other company.\nAnyone can adopt \"Don't be evil.\" The catch is that people will hold you to\nit. So I don't think you're going to see record labels or tobacco companies\nusing this discovery.  \n  \n**Morale**  \n  \nThere's a lot of external evidence that benevolence works. But how does it\nwork? One advantage of investing in a large number of startups is that you get\na lot of data about how they work. From what we've seen, being good seems to\nhelp startups in three ways: it improves their morale, it makes other people\nwant to help them, and above all, it helps them be decisive.  \n  \nMorale is tremendously important to a startup\u2014so important that morale alone\nis almost enough to determine success. Startups are often described as\nemotional roller-coasters. One minute you're going to take over the world, and\nthe next you're doomed. The problem with feeling you're doomed is not just\nthat it makes you unhappy, but that it makes you _stop working_. So the\ndownhills of the roller-coaster are more of a self fulfilling prophecy than\nthe uphills. If feeling you're going to succeed makes you work harder, that\nprobably improves your chances of succeeding, but if feeling you're going to\nfail makes you stop working, that practically guarantees you'll fail.  \n  \nHere's where benevolence comes in. If you feel you're really helping people,\nyou'll keep working even when it seems like your startup is doomed. Most of us\nhave some amount of natural benevolence. The mere fact that someone needs you\nmakes you want to help them. So if you start the kind of startup where users\ncome back each day, you've basically built yourself a giant tamagotchi. You've\nmade something you need to take care of.  \n  \nBlogger is a famous example of a startup that went through really low lows and\nsurvived. At one point they ran out of money and everyone left. Evan Williams\ncame in to work the next day, and there was no one but him. What kept him\ngoing? Partly that users needed him. He was hosting thousands of people's\nblogs. He couldn't just let the site die.  \n  \nThere are many advantages of launching quickly, but the most important may be\nthat once you have users, the tamagotchi effect kicks in. Once you have users\nto take care of, you're forced to figure out what will make them happy, and\nthat's actually very valuable information.  \n  \nThe added confidence that comes from trying to help people can also help you\nwith investors. One of the founders of [Chatterous](http://chatterous.com)\ntold me recently that he and his cofounder had decided that this service was\nsomething the world needed, so they were going to keep working on it no matter\nwhat, even if they had to move back to Canada and live in their parents'\nbasements.  \n  \nOnce they realized this, they stopped caring so much what investors thought\nabout them. They still met with them, but they weren't going to die if they\ndidn't get their money. And you know what? The investors got a lot more\ninterested. They could sense that the Chatterouses were going to do this\nstartup with or without them.  \n  \nIf you're really committed and your startup is cheap to run, you become very\nhard to kill. And practically all startups, even the most successful, come\nclose to death at some point. So if doing good for people gives you a sense of\nmission that makes you harder to kill, that alone more than compensates for\nwhatever you lose by not choosing a more selfish project.  \n  \n**Help**  \n  \nAnother advantage of being good is that it makes other people want to help\nyou. This too seems to be an inborn trait in humans.  \n  \nOne of the startups we've funded, [Octopart](http://octopart.com), is\ncurrently locked in a classic battle of good versus evil. They're a search\nsite for industrial components. A lot of people need to search for components,\nand before Octopart there was no good way to do it. That, it turned out, was\nno coincidence.  \n  \nOctopart built the right way to search for components. Users like it and\nthey've been growing rapidly. And yet for most of Octopart's life, the biggest\ndistributor, Digi-Key, has been trying to force them take their prices off the\nsite. Octopart is sending them customers for free, and yet Digi-Key is trying\nto make that traffic stop. Why? Because their current business model depends\non overcharging people who have incomplete information about prices. They\ndon't want search to work.  \n  \nThe Octoparts are the nicest guys in the world. They dropped out of the PhD\nprogram in physics at Berkeley to do this. They just wanted to fix a problem\nthey encountered in their research. Imagine how much time you could save the\nworld's engineers if they could do searches online. So when I hear that a big,\nevil company is trying to stop them in order to keep search broken, it makes\nme really want to help them. It makes me spend more time on the Octoparts than\nI do with most of the other startups we've funded. It just made me spend\nseveral minutes telling you how great they are. Why? Because they're good guys\nand they're trying to help the world.  \n  \nIf you're benevolent, people will rally around you: investors, customers,\nother companies, and potential employees. In the long term the most important\nmay be the potential employees. I think everyone knows now that [good\nhackers](gh.html) are much better than mediocre ones. If you can attract the\nbest hackers to work for you, as Google has, you have a big advantage. And the\nvery best hackers tend to be idealistic. They're not desperate for a job. They\ncan work wherever they want. So most want to work on things that will make the\nworld better.  \n  \n**Compass**  \n  \nBut the most important advantage of being good is that it acts as a compass.\nOne of the hardest parts of doing a startup is that you have so many choices.\nThere are just two or three of you, and a thousand things you could do. How do\nyou decide?  \n  \nHere's the answer: Do whatever's best for your users. You can hold onto this\nlike a rope in a hurricane, and it will save you if anything can. Follow it\nand it will take you through everything you need to do.  \n  \nIt's even the answer to questions that seem unrelated, like how to convince\ninvestors to give you money. If you're a good salesman, you could try to just\ntalk them into it. But the more reliable route is to convince them through\nyour users: if you make something users love enough to tell their friends, you\ngrow exponentially, and that will convince any investor.  \n  \nBeing good is a particularly useful strategy for making decisions in complex\nsituations because it's stateless. It's like telling the truth. The trouble\nwith lying is that you have to remember everything you've said in the past to\nmake sure you don't contradict yourself. If you tell the truth you don't have\nto remember anything, and that's a really useful property in domains where\nthings happen fast.  \n  \nFor example, Y Combinator has now invested in 80 startups, 57 of which are\nstill alive. (The rest have died or merged or been acquired.) When you're\ntrying to advise 57 startups, it turns out you have to have a stateless\nalgorithm. You can't have ulterior motives when you have 57 things going on at\nonce, because you can't remember them. So our rule is just to do whatever's\nbest for the founders. Not because we're particularly benevolent, but because\nit's the only algorithm that works on that scale.  \n  \nWhen you write something telling people to be good, you seem to be claiming to\nbe good yourself. So I want to say explicitly that I am not a particularly\ngood person. When I was a kid I was firmly in the camp of bad. The way adults\nused the word good, it seemed to be synonymous with quiet, so I grew up very\nsuspicious of it.  \n  \nYou know how there are some people whose names come up in conversation and\neveryone says \"He's _such_ a great guy?\" People never say that about me. The\nbest I get is \"he means well.\" I am not claiming to be good. At best I speak\ngood as a second language.  \n  \nSo I'm not suggesting you be good in the usual sanctimonious way. I'm\nsuggesting it because it works. It will work not just as a statement of\n\"values,\" but as a guide to strategy, and even a design spec for software.\nDon't just not be evil. Be good.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] Fifty years ago it would have seemed shocking for a public company not to\npay dividends. Now many tech companies don't. The markets seem to have figured\nout how to value potential dividends. Maybe that isn't the last step in this\nevolution. Maybe markets will eventually get comfortable with potential\nearnings. (VCs already are, and at least some of them consistently make\nmoney.)  \n  \nI realize this sounds like the stuff one used to hear about the \"new economy\"\nduring the Bubble. Believe me, I was not drinking that kool-aid at the time.\nBut I'm convinced there were some [good ideas](bubble.html) buried in Bubble\nthinking. For example, it's ok to focus on growth instead of profits\u2014but only\nif the growth is genuine. You can't be buying users; that's a pyramid scheme.\nBut a company with rapid, genuine growth is valuable, and eventually markets\nlearn how to value valuable things.  \n  \n[2] The idea of starting a company with benevolent aims is currently\nundervalued, because the kind of people who currently make that their explicit\ngoal don't usually do a very good job.  \n  \nIt's one of the standard career paths of trustafarians to start some vaguely\nbenevolent business. The problem with most of them is that they either have a\nbogus political agenda or are feebly executed. The trustafarians' ancestors\ndidn't get rich by preserving their traditional culture; maybe people in\nBolivia don't want to either. And starting an organic farm, though it's at\nleast straightforwardly benevolent, doesn't help people on the scale that\nGoogle does.  \n  \nMost explicitly benevolent projects don't hold themselves sufficiently\naccountable. They act as if having good intentions were enough to guarantee\ngood effects.  \n  \n[3] Users dislike their new operating system so much that they're starting\npetitions to save the old one. And the old one was nothing special. The\nhackers within Microsoft must know in their hearts that if the company really\ncared about users they'd just advise them to switch to OSX.  \n  \n**Thanks** to Trevor Blackwell, Paul Buchheit, Jessica Livingston, and Robert\nMorris for reading drafts of this.  \n  \n  \n  \n  \n\nDecember 2006  \n  \nI grew up believing that taste is just a matter of personal preference. Each\nperson has things they like, but no one's preferences are any better than\nanyone else's. There is no such thing as _good_ taste.  \n  \nLike a lot of things I grew up believing, this turns out to be false, and I'm\ngoing to try to explain why.  \n  \nOne problem with saying there's no such thing as good taste is that it also\nmeans there's no such thing as good art. If there were good art, then people\nwho liked it would have better taste than people who didn't. So if you discard\ntaste, you also have to discard the idea of art being good, and artists being\ngood at making it.  \n  \nIt was pulling on that thread that unravelled my childhood faith in\nrelativism. When you're trying to make things, taste becomes a practical\nmatter. You have to decide what to do next. Would it make the painting better\nif I changed that part? If there's no such thing as better, it doesn't matter\nwhat you do. In fact, it doesn't matter if you paint at all. You could just go\nout and buy a ready-made blank canvas. If there's no such thing as good, that\nwould be just as great an achievement as the ceiling of the Sistine Chapel.\nLess laborious, certainly, but if you can achieve the same level of\nperformance with less effort, surely that's more impressive, not less.  \n  \nYet that doesn't seem quite right, does it?  \n  \n**Audience**  \n  \nI think the key to this puzzle is to remember that art has an audience. Art\nhas a purpose, which is to interest its audience. Good art (like good\nanything) is art that achieves its purpose particularly well. The meaning of\n\"interest\" can vary. Some works of art are meant to shock, and others to\nplease; some are meant to jump out at you, and others to sit quietly in the\nbackground. But all art has to work on an audience, and\u2014here's the critical\npoint\u2014members of the audience share things in common.  \n  \nFor example, nearly all humans find human faces engaging. It seems to be wired\ninto us. Babies can recognize faces practically from birth. In fact, faces\nseem to have co-evolved with our interest in them; the face is the body's\nbillboard. So all other things being equal, a painting with faces in it will\ninterest people more than one without. [1]  \n  \nOne reason it's easy to believe that taste is merely personal preference is\nthat, if it isn't, how do you pick out the people with better taste? There are\nbillions of people, each with their own opinion; on what grounds can you\nprefer one to another? [2]  \n  \nBut if audiences have a lot in common, you're not in a position of having to\nchoose one out of a random set of individual biases, because the set isn't\nrandom. All humans find faces engaging\u2014practically by definition: face\nrecognition is in our DNA. And so having a notion of good art, in the sense of\nart that does its job well, doesn't require you to pick out a few individuals\nand label their opinions as correct. No matter who you pick, they'll find\nfaces engaging.  \n  \nOf course, space aliens probably wouldn't find human faces engaging. But there\nmight be other things they shared in common with us. The most likely source of\nexamples is math. I expect space aliens would agree with us most of the time\nabout which of two proofs was better. Erdos thought so. He called a maximally\nelegant proof one out of God's book, and presumably God's book is universal.\n[3]  \n  \nOnce you start talking about audiences, you don't have to argue simply that\nthere are or aren't standards of taste. Instead tastes are a series of\nconcentric rings, like ripples in a pond. There are some things that will\nappeal to you and your friends, others that will appeal to most people your\nage, others that will appeal to most humans, and perhaps others that would\nappeal to most sentient beings (whatever that means).  \n  \nThe picture is slightly more complicated than that, because in the middle of\nthe pond there are overlapping sets of ripples. For example, there might be\nthings that appealed particularly to men, or to people from a certain culture.  \n  \nIf good art is art that interests its audience, then when you talk about art\nbeing good, you also have to say for what audience. So is it meaningless to\ntalk about art simply being good or bad? No, because one audience is the set\nof all possible humans. I think that's the audience people are implicitly\ntalking about when they say a work of art is good: they mean it would engage\nany human. [4]  \n  \nAnd that is a meaningful test, because although, like any everyday concept,\n\"human\" is fuzzy around the edges, there are a lot of things practically all\nhumans have in common. In addition to our interest in faces, there's something\nspecial about primary colors for nearly all of us, because it's an artifact of\nthe way our eyes work. Most humans will also find images of 3D objects\nengaging, because that also seems to be built into our visual perception. [5]\nAnd beneath that there's edge-finding, which makes images with definite shapes\nmore engaging than mere blur.  \n  \nHumans have a lot more in common than this, of course. My goal is not to\ncompile a complete list, just to show that there's some solid ground here.\nPeople's preferences aren't random. So an artist working on a painting and\ntrying to decide whether to change some part of it doesn't have to think \"Why\nbother? I might as well flip a coin.\" Instead he can ask \"What would make the\npainting more interesting to people?\" And the reason you can't equal\nMichelangelo by going out and buying a blank canvas is that the ceiling of the\nSistine Chapel is more interesting to people.  \n  \nA lot of philosophers have had a hard time believing it was possible for there\nto be objective standards for art. It seemed obvious that beauty, for example,\nwas something that happened in the head of the observer, not something that\nwas a property of objects. It was thus \"subjective\" rather than \"objective.\"\nBut in fact if you narrow the definition of beauty to something that works a\ncertain way on humans, and you observe how much humans have in common, it\nturns out to be a property of objects after all. You don't have to choose\nbetween something being a property of the subject or the object if subjects\nall react similarly. Being good art is thus a property of objects as much as,\nsay, being toxic to humans is: it's good art if it consistently affects humans\nin a certain way.  \n  \n**Error**  \n  \nSo could we figure out what the best art is by taking a vote? After all, if\nappealing to humans is the test, we should be able to just ask them, right?  \n  \nWell, not quite. For products of nature that might work. I'd be willing to eat\nthe apple the world's population had voted most delicious, and I'd probably be\nwilling to visit the beach they voted most beautiful, but having to look at\nthe painting they voted the best would be a crapshoot.  \n  \nMan-made stuff is different. For one thing, artists, unlike apple trees, often\ndeliberately try to trick us. Some tricks are quite subtle. For example, any\nwork of art sets expectations by its level of finish. You don't expect\nphotographic accuracy in something that looks like a quick sketch. So one\nwidely used trick, especially among illustrators, is to intentionally make a\npainting or drawing look like it was done faster than it was. The average\nperson looks at it and thinks: how amazingly skillful. It's like saying\nsomething clever in a conversation as if you'd thought of it on the spur of\nthe moment, when in fact you'd worked it out the day before.  \n  \nAnother much less subtle influence is brand. If you go to see the Mona Lisa,\nyou'll probably be disappointed, because it's hidden behind a thick glass wall\nand surrounded by a frenzied crowd taking pictures of themselves in front of\nit. At best you can see it the way you see a friend across the room at a\ncrowded party. The Louvre might as well replace it with copy; no one would be\nable to tell. And yet the Mona Lisa is a small, dark painting. If you found\npeople who'd never seen an image of it and sent them to a museum in which it\nwas hanging among other paintings with a tag labelling it as a portrait by an\nunknown fifteenth century artist, most would walk by without giving it a\nsecond look.  \n  \nFor the average person, brand dominates all other factors in the judgement of\nart. Seeing a painting they recognize from reproductions is so overwhelming\nthat their response to it as a painting is drowned out.  \n  \nAnd then of course there are the tricks people play on themselves. Most adults\nlooking at art worry that if they don't like what they're supposed to, they'll\nbe thought uncultured. This doesn't just affect what they claim to like; they\nactually make themselves like things they're supposed to.  \n  \nThat's why you can't just take a vote. Though appeal to people is a meaningful\ntest, in practice you can't measure it, just as you can't find north using a\ncompass with a magnet sitting next to it. There are sources of error so\npowerful that if you take a vote, all you're measuring is the error.  \n  \nWe can, however, approach our goal from another direction, by using ourselves\nas guinea pigs. You're human. If you want to know what the basic human\nreaction to a piece of art would be, you can at least approach that by getting\nrid of the sources of error in your own judgements.  \n  \nFor example, while anyone's reaction to a famous painting will be warped at\nfirst by its fame, there are ways to decrease its effects. One is to come back\nto the painting over and over. After a few days the fame wears off, and you\ncan start to see it as a painting. Another is to stand close. A painting\nfamiliar from reproductions looks more familiar from ten feet away; close in\nyou see details that get lost in reproductions, and which you're therefore\nseeing for the first time.  \n  \nThere are two main kinds of error that get in the way of seeing a work of art:\nbiases you bring from your own circumstances, and tricks played by the artist.\nTricks are straightforward to correct for. Merely being aware of them usually\nprevents them from working. For example, when I was ten I used to be very\nimpressed by airbrushed lettering that looked like shiny metal. But once you\nstudy how it's done, you see that it's a pretty cheesy trick\u2014one of the sort\nthat relies on pushing a few visual buttons really hard to temporarily\noverwhelm the viewer. It's like trying to convince someone by shouting at\nthem.  \n  \nThe way not to be vulnerable to tricks is to explicitly seek out and catalog\nthem. When you notice a whiff of dishonesty coming from some kind of art, stop\nand figure out what's going on. When someone is obviously pandering to an\naudience that's easily fooled, whether it's someone making shiny stuff to\nimpress ten year olds, or someone making conspicuously avant-garde stuff to\nimpress would-be intellectuals, learn how they do it. Once you've seen enough\nexamples of specific types of tricks, you start to become a connoisseur of\ntrickery in general, just as professional magicians are.  \n  \nWhat counts as a trick? Roughly, it's something done with contempt for the\naudience. For example, the guys designing Ferraris in the 1950s were probably\ndesigning cars that they themselves admired. Whereas I suspect over at General\nMotors the marketing people are telling the designers, \"Most people who buy\nSUVs do it to seem manly, not to drive off-road. So don't worry about the\nsuspension; just make that sucker as big and tough-looking as you can.\" [6]  \n  \nI think with some effort you can make yourself nearly immune to tricks. It's\nharder to escape the influence of your own circumstances, but you can at least\nmove in that direction. The way to do it is to travel widely, in both time and\nspace. If you go and see all the different kinds of things people like in\nother cultures, and learn about all the different things people have liked in\nthe past, you'll probably find it changes what you like. I doubt you could\never make yourself into a completely universal person, if only because you can\nonly travel in one direction in time. But if you find a work of art that would\nappeal equally to your friends, to people in Nepal, and to the ancient Greeks,\nyou're probably onto something.  \n  \nMy main point here is not how to have good taste, but that there can even be\nsuch a thing. And I think I've shown that. There is such a thing as good art.\nIt's art that interests its human audience, and since humans have a lot in\ncommon, what interests them is not random. Since there's such a thing as good\nart, there's also such a thing as good taste, which is the ability to\nrecognize it.  \n  \nIf we were talking about the taste of apples, I'd agree that taste is just\npersonal preference. Some people like certain kinds of apples and others like\nother kinds, but how can you say that one is right and the other wrong? [7]  \n  \nThe thing is, art isn't apples. Art is man-made. It comes with a lot of\ncultural baggage, and in addition the people who make it often try to trick\nus. Most people's judgement of art is dominated by these extraneous factors;\nthey're like someone trying to judge the taste of apples in a dish made of\nequal parts apples and jalapeno peppers. All they're tasting is the peppers.\nSo it turns out you can pick out some people and say that they have better\ntaste than others: they're the ones who actually taste art like apples.  \n  \nOr to put it more prosaically, they're the people who (a) are hard to trick,\nand (b) don't just like whatever they grew up with. If you could find people\nwho'd eliminated all such influences on their judgement, you'd probably still\nsee variation in what they liked. But because humans have so much in common,\nyou'd also find they agreed on a lot. They'd nearly all prefer the ceiling of\nthe Sistine Chapel to a blank canvas.  \n  \n**Making It**  \n  \nI wrote this essay because I was tired of hearing \"taste is subjective\" and\nwanted to kill it once and for all. Anyone who makes things knows intuitively\nthat's not true. When you're trying to make art, the temptation to be lazy is\nas great as in any other kind of work. Of course it matters to do a good job.\nAnd yet you can see how great a hold \"taste is subjective\" has even in the art\nworld by how nervous it makes people to talk about art being good or bad.\nThose whose jobs require them to judge art, like curators, mostly resort to\neuphemisms like \"significant\" or \"important\" or (getting dangerously close)\n\"realized.\" [8]  \n  \nI don't have any illusions that being able to talk about art being good or bad\nwill cause the people who talk about it to have anything more useful to say.\nIndeed, one of the reasons \"taste is subjective\" found such a receptive\naudience is that, historically, the things people have said about good taste\nhave generally been such nonsense.  \n  \nIt's not for the people who talk about art that I want to free the idea of\ngood art, but for those who [make](taste.html) it. Right now, ambitious kids\ngoing to art school run smack into a brick wall. They arrive hoping one day to\nbe as good as the famous artists they've seen in books, and the first thing\nthey learn is that the concept of good has been retired. Instead everyone is\njust supposed to explore their own personal vision. [9]  \n  \nWhen I was in art school, we were looking one day at a slide of some great\nfifteenth century painting, and one of the students asked \"Why don't artists\npaint like that now?\" The room suddenly got quiet. Though rarely asked out\nloud, this question lurks uncomfortably in the back of every art student's\nmind. It was as if someone had brought up the topic of lung cancer in a\nmeeting within Philip Morris.  \n  \n\"Well,\" the professor replied, \"we're interested in different questions now.\"\nHe was a pretty nice guy, but at the time I couldn't help wishing I could send\nhim back to fifteenth century Florence to explain in person to Leonardo & Co.\nhow we had moved beyond their early, limited concept of art. Just imagine that\nconversation.  \n  \nIn fact, one of the reasons artists in fifteenth century Florence made such\ngreat things was that they believed you could make great things. [10] They\nwere intensely competitive and were always trying to outdo one another, like\nmathematicians or physicists today\u2014maybe like anyone who has ever done\nanything really well.  \n  \nThe idea that you could make great things was not just a useful illusion. They\nwere actually right. So the most important consequence of realizing there can\nbe good art is that it frees artists to try to make it. To the ambitious kids\narriving at art school this year hoping one day to make great things, I say:\ndon't believe it when they tell you this is a naive and outdated ambition.\nThere is such a thing as good art, and if you try to make it, there are people\nwho will notice.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] This is not to say, of course, that good paintings must have faces in\nthem, just that everyone's visual piano has that key on it. There are\nsituations in which you want to avoid faces, precisely because they attract so\nmuch attention. But you can see how universally faces work by their prevalence\nin advertising.  \n  \n[2] The other reason it's easy to believe is that it makes people feel good.\nTo a kid, this idea is crack. In every other respect they're constantly being\ntold that they have a lot to learn. But in this they're perfect. Their opinion\ncarries the same weight as any adult's. You should probably question anything\nyou believed as a kid that you'd want to believe this much.  \n  \n[3] It's conceivable that the elegance of proofs is quantifiable, in the sense\nthat there may be some formal measure that turns out to coincide with\nmathematicians' judgements. Perhaps it would be worth trying to make a formal\nlanguage for proofs in which those considered more elegant consistently came\nout shorter (perhaps after being macroexpanded or compiled).  \n  \n[4] Maybe it would be possible to make art that would appeal to space aliens,\nbut I'm not going to get into that because (a) it's too hard to answer, and\n(b) I'm satisfied if I can establish that good art is a meaningful idea for\nhuman audiences.  \n  \n[5] If early abstract paintings seem more interesting than later ones, it may\nbe because the first abstract painters were trained to paint from life, and\ntheir hands thus tended to make the kind of gestures you use in representing\nphysical things. In effect they were saying \"scaramara\" instead of \"uebfgbsb.\"  \n  \n[6] It's a bit more complicated, because sometimes artists unconsciously use\ntricks by imitating art that does.  \n  \n[7] I phrased this in terms of the taste of apples because if people can see\nthe apples, they can be fooled. When I was a kid most apples were a variety\ncalled Red Delicious that had been bred to look appealing in stores, but which\ndidn't taste very good.  \n  \n[8] To be fair, curators are in a difficult position. If they're dealing with\nrecent art, they have to include things in shows that they think are bad.\nThat's because the test for what gets included in shows is basically the\nmarket price, and for recent art that is largely determined by successful\nbusinessmen and their wives. So it's not always intellectual dishonesty that\nmakes curators and dealers use neutral-sounding language.  \n  \n[9] What happens in practice is that everyone gets really good at _talking_\nabout art. As the art itself gets more random, the effort that would have gone\ninto the work goes instead into the intellectual sounding theory behind it.\n\"My work represents an exploration of gender and sexuality in an urban\ncontext,\" etc. Different people win at that game.  \n  \n[10] There were several other reasons, including that Florence was then the\nrichest and most sophisticated city in the world, and that they lived in a\ntime before photography had (a) killed portraiture as a source of income and\n(b) made brand the dominant factor in the sale of art.  \n  \nIncidentally, I'm not saying that good art = fifteenth century European art.\nI'm not saying we should make what they made, but that we should work like\nthey worked. There are fields now in which many people work with the same\nenergy and honesty that fifteenth century artists did, but art is not one of\nthem.  \n  \n**Thanks** to Trevor Blackwell, Jessica Livingston, and Robert Morris for\nreading drafts of this, and to Paul Watson for permission to use the image at\nthe top.  \n  \n  \n  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nApril 2008  \n  \nUmair Haque\n[wrote](http://discussionleader.hbsp.com/haque/2008/04/i_agree_and_i.html)\nrecently that the reason there aren't more Googles is that most startups get\nbought before they can change the world.\n\n> Google, despite serious interest from Microsoft and Yahoo\u2014what must have\n> seemed like lucrative interest at the time\u2014didn't sell out. Google might\n> simply have been nothing but Yahoo's or MSN's search box.  \n>  \n> Why isn't it? Because Google had a deeply felt sense of purpose: a\n> conviction to change the world for the better.\n\nThis has a nice sound to it, but it isn't true. Google's founders were willing\nto sell early on. They just wanted more than acquirers were willing to pay.  \n  \nIt was the same with Facebook. They would have sold, but Yahoo blew it by\noffering too little.  \n  \nTip for acquirers: when a startup turns you down, consider raising your offer,\nbecause there's a good chance the outrageous price they want will later seem a\nbargain. [1]  \n  \nFrom the evidence I've seen so far, startups that turn down acquisition offers\nusually end up doing better. Not always, but usually there's a bigger offer\ncoming, or perhaps even an IPO.  \n  \nOf course, the reason startups do better when they turn down acquisition\noffers is not necessarily that all such offers undervalue startups. More\nlikely the reason is that the kind of founders who have the balls to turn down\na big offer also tend to be very successful. That spirit is exactly what you\nwant in a startup.  \n  \nWhile I'm sure Larry and Sergey do want to change the world, at least now, the\nreason Google survived to become a big, independent company is the same reason\nFacebook has so far remained independent: acquirers underestimated them.  \n  \nCorporate M&A is a strange business in that respect. They consistently lose\nthe best deals, because turning down reasonable offers is the most reliable\ntest you could invent for whether a startup will make it big.  \n  \n**VCs**  \n  \nSo what's the real reason there aren't more Googles? Curiously enough, it's\nthe same reason Google and Facebook have remained independent: money guys\nundervalue the most innovative startups.  \n  \nThe reason there aren't more Googles is not that investors encourage\ninnovative startups to sell out, but that they won't even fund them. I've\nlearned a lot about VCs during the 3 years we've been doing Y Combinator,\nbecause we often have to work quite closely with them. The most surprising\nthing I've learned is how conservative they are. VC firms present an image of\nboldly encouraging innovation. Only a handful actually do, and even they are\nmore conservative in reality than you'd guess from reading their sites.  \n  \nI used to think of VCs as piratical: bold but unscrupulous. On closer\nacquaintance they turn out to be more like bureaucrats. They're more\nupstanding than I used to think (the good ones, at least), but less bold.\nMaybe the VC industry has changed. Maybe they used to be bolder. But I suspect\nit's the startup world that has changed, not them. The low cost of starting a\nstartup means the average good bet is a riskier one, but most existing VC\nfirms still operate as if they were investing in hardware startups in 1985.  \n  \nHoward Aiken said \"Don't worry about people stealing your ideas. If your ideas\nare any good, you'll have to ram them down people's throats.\" I have a similar\nfeeling when I'm trying to convince VCs to invest in startups Y Combinator has\nfunded. They're terrified of really novel ideas, unless the founders are good\nenough salesmen to compensate.  \n  \nBut it's the bold ideas that generate the biggest returns. Any really good new\nidea will seem bad to most people; otherwise someone would already be doing\nit. And yet most VCs are driven by consensus, not just within their firms, but\nwithin the VC community. The biggest factor determining how a VC will feel\nabout your startup is how other VCs feel about it. I doubt they realize it,\nbut this algorithm guarantees they'll miss all the very best ideas. The more\npeople who have to like a new idea, the more outliers you lose.  \n  \nWhoever the next Google is, they're probably being told right now by VCs to\ncome back when they have more \"traction.\"  \n  \nWhy are VCs so conservative? It's probably a combination of factors. The large\nsize of their investments makes them conservative. Plus they're investing\nother people's money, which makes them worry they'll get in trouble if they do\nsomething risky and it fails. Plus most of them are money guys rather than\ntechnical guys, so they don't understand what the startups they're investing\nin do.  \n  \n**What's Next**  \n  \nThe exciting thing about market economies is that stupidity equals\nopportunity. And so it is in this case. There is a huge, unexploited\nopportunity in startup investing. Y Combinator funds startups at the very\nbeginning. VCs will fund them once they're already starting to succeed. But\nbetween the two there is a substantial gap.  \n  \nThere are companies that will give $20k to a startup that has nothing more\nthan the founders, and there are companies that will give $2 million to a\nstartup that's already taking off, but there aren't enough investors who will\ngive $200k to a startup that seems very promising but still has some things to\nfigure out. This territory is occupied mostly by individual angel\ninvestors\u2014people like Andy Bechtolsheim, who gave Google $100k when they\nseemed promising but still had some things to figure out. I like angels, but\nthere just aren't enough of them, and investing is for most of them a part\ntime job.  \n  \nAnd yet as it gets cheaper to start startups, this sparsely occupied territory\nis becoming more and more valuable. Nowadays a lot of startups don't want to\nraise multi-million dollar series A rounds. They don't need that much money,\nand they don't want the hassles that come with it. The median startup coming\nout of Y Combinator wants to raise $250-500k. When they go to VC firms they\nhave to ask for more because they know VCs aren't interested in such small\ndeals.  \n  \nVCs are money managers. They're looking for ways to put large sums to work.\nBut the startup world is evolving away from their current model.  \n  \nStartups have gotten cheaper. That means they want less money, but also that\nthere are more of them. So you can still get large returns on large amounts of\nmoney; you just have to spread it more broadly.  \n  \nI've tried to explain this to VC firms. Instead of making one $2 million\ninvestment, make five $400k investments. Would that mean sitting on too many\nboards? Don't sit on their boards. Would that mean too much due diligence? Do\nless. If you're investing at a tenth the valuation, you only have to be a\ntenth as sure.  \n  \nIt seems obvious. But I've proposed to several VC firms that they set aside\nsome money and designate one partner to make more, smaller bets, and they\nreact as if I'd proposed the partners all get nose rings. It's remarkable how\nwedded they are to their standard m.o.  \n  \nBut there is a big opportunity here, and one way or the other it's going to\nget filled. Either VCs will evolve down into this gap or, more likely, new\ninvestors will appear to fill it. That will be a good thing when it happens,\nbecause these new investors will be compelled by the structure of the\ninvestments they make to be ten times bolder than present day VCs. And that\nwill get us a lot more Googles. At least, as long as acquirers remain stupid.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] Another tip: If you want to get all that value, don't destroy the startup\nafter you buy it. Give the founders enough autonomy that they can grow the\nacquisition into what it would have become.  \n  \n**Thanks** to Sam Altman, Paul Buchheit, David Hornik, Jessica Livingston,\nRobert Morris, and Fred Wilson for reading drafts of this.  \n  \n\nJuly 2023  \n  \nIf you collected lists of techniques for doing great work in a lot of\ndifferent fields, what would the intersection look like? I decided to find out\nby making it.  \n  \nPartly my goal was to create a guide that could be used by someone working in\nany field. But I was also curious about the shape of the intersection. And one\nthing this exercise shows is that it does have a definite shape; it's not just\na point labelled \"work hard.\"  \n  \nThe following recipe assumes you're very ambitious.  \n  \n  \n  \n  \n  \nThe first step is to decide what to work on. The work you choose needs to have\nthree qualities: it has to be something you have a natural aptitude for, that\nyou have a deep interest in, and that offers scope to do great work.  \n  \nIn practice you don't have to worry much about the third criterion. Ambitious\npeople are if anything already too conservative about it. So all you need to\ndo is find something you have an aptitude for and great interest in. [1]  \n  \nThat sounds straightforward, but it's often quite difficult. When you're young\nyou don't know what you're good at or what different kinds of work are like.\nSome kinds of work you end up doing may not even exist yet. So while some\npeople know what they want to do at 14, most have to figure it out.  \n  \nThe way to figure out what to work on is by working. If you're not sure what\nto work on, guess. But pick something and get going. You'll probably guess\nwrong some of the time, but that's fine. It's good to know about multiple\nthings; some of the biggest discoveries come from noticing connections between\ndifferent fields.  \n  \nDevelop a habit of working on your own projects. Don't let \"work\" mean\nsomething other people tell you to do. If you do manage to do great work one\nday, it will probably be on a project of your own. It may be within some\nbigger project, but you'll be driving your part of it.  \n  \nWhat should your projects be? Whatever seems to you excitingly ambitious. As\nyou grow older and your taste in projects evolves, exciting and important will\nconverge. At 7 it may seem excitingly ambitious to build huge things out of\nLego, then at 14 to teach yourself calculus, till at 21 you're starting to\nexplore unanswered questions in physics. But always preserve excitingness.  \n  \nThere's a kind of excited curiosity that's both the engine and the rudder of\ngreat work. It will not only drive you, but if you let it have its way, will\nalso show you what to work on.  \n  \nWhat are you excessively curious about \u2014 curious to a degree that would bore\nmost other people? That's what you're looking for.  \n  \nOnce you've found something you're excessively interested in, the next step is\nto learn enough about it to get you to one of the frontiers of knowledge.\nKnowledge expands fractally, and from a distance its edges look smooth, but\nonce you learn enough to get close to one, they turn out to be full of gaps.  \n  \nThe next step is to notice them. This takes some skill, because your brain\nwants to ignore such gaps in order to make a simpler model of the world. Many\ndiscoveries have come from asking questions about things that everyone else\ntook for granted. [2]  \n  \nIf the answers seem strange, so much the better. Great work often has a\ntincture of strangeness. You see this from painting to math. It would be\naffected to try to manufacture it, but if it appears, embrace it.  \n  \nBoldly chase outlier ideas, even if other people aren't interested in them \u2014\nin fact, especially if they aren't. If you're excited about some possibility\nthat everyone else ignores, and you have enough expertise to say precisely\nwhat they're all overlooking, that's as good a bet as you'll find. [3]  \n  \nFour steps: choose a field, learn enough to get to the frontier, notice gaps,\nexplore promising ones. This is how practically everyone who's done great work\nhas done it, from painters to physicists.  \n  \nSteps two and four will require hard work. It may not be possible to prove\nthat you have to work hard to do great things, but the empirical evidence is\non the scale of the evidence for mortality. That's why it's essential to work\non something you're deeply interested in. Interest will drive you to work\nharder than mere diligence ever could.  \n  \nThe three most powerful motives are curiosity, delight, and the desire to do\nsomething impressive. Sometimes they converge, and that combination is the\nmost powerful of all.  \n  \nThe big prize is to discover a new fractal bud. You notice a crack in the\nsurface of knowledge, pry it open, and there's a whole world inside.  \n  \n  \n  \n  \n  \nLet's talk a little more about the complicated business of figuring out what\nto work on. The main reason it's hard is that you can't tell what most kinds\nof work are like except by doing them. Which means the four steps overlap: you\nmay have to work at something for years before you know how much you like it\nor how good you are at it. And in the meantime you're not doing, and thus not\nlearning about, most other kinds of work. So in the worst case you choose late\nbased on very incomplete information. [4]  \n  \nThe nature of ambition exacerbates this problem. Ambition comes in two forms,\none that precedes interest in the subject and one that grows out of it. Most\npeople who do great work have a mix, and the more you have of the former, the\nharder it will be to decide what to do.  \n  \nThe educational systems in most countries pretend it's easy. They expect you\nto commit to a field long before you could know what it's really like. And as\na result an ambitious person on an optimal trajectory will often read to the\nsystem as an instance of breakage.  \n  \nIt would be better if they at least admitted it \u2014 if they admitted that the\nsystem not only can't do much to help you figure out what to work on, but is\ndesigned on the assumption that you'll somehow magically guess as a teenager.\nThey don't tell you, but I will: when it comes to figuring out what to work\non, you're on your own. Some people get lucky and do guess correctly, but the\nrest will find themselves scrambling diagonally across tracks laid down on the\nassumption that everyone does.  \n  \nWhat should you do if you're young and ambitious but don't know what to work\non? What you should _not_ do is drift along passively, assuming the problem\nwill solve itself. You need to take action. But there is no systematic\nprocedure you can follow. When you read biographies of people who've done\ngreat work, it's remarkable how much luck is involved. They discover what to\nwork on as a result of a chance meeting, or by reading a book they happen to\npick up. So you need to make yourself a big target for luck, and the way to do\nthat is to be curious. Try lots of things, meet lots of people, read lots of\nbooks, ask lots of questions. [5]  \n  \nWhen in doubt, optimize for interestingness. Fields change as you learn more\nabout them. What mathematicians do, for example, is very different from what\nyou do in high school math classes. So you need to give different types of\nwork a chance to show you what they're like. But a field should become\n_increasingly_ interesting as you learn more about it. If it doesn't, it's\nprobably not for you.  \n  \nDon't worry if you find you're interested in different things than other\npeople. The stranger your tastes in interestingness, the better. Strange\ntastes are often strong ones, and a strong taste for work means you'll be\nproductive. And you're more likely to find new things if you're looking where\nfew have looked before.  \n  \nOne sign that you're suited for some kind of work is when you like even the\nparts that other people find tedious or frightening.  \n  \nBut fields aren't people; you don't owe them any loyalty. If in the course of\nworking on one thing you discover another that's more exciting, don't be\nafraid to switch.  \n  \nIf you're making something for people, make sure it's something they actually\nwant. The best way to do this is to make something you yourself want. Write\nthe story you want to read; build the tool you want to use. Since your friends\nprobably have similar interests, this will also get you your initial audience.  \n  \nThis _should_ follow from the excitingness rule. Obviously the most exciting\nstory to write will be the one you want to read. The reason I mention this\ncase explicitly is that so many people get it wrong. Instead of making what\nthey want, they try to make what some imaginary, more sophisticated audience\nwants. And once you go down that route, you're lost. [6]  \n  \nThere are a lot of forces that will lead you astray when you're trying to\nfigure out what to work on. Pretentiousness, fashion, fear, money, politics,\nother people's wishes, eminent frauds. But if you stick to what you find\ngenuinely interesting, you'll be proof against all of them. If you're\ninterested, you're not astray.  \n  \n  \n  \n  \n  \nFollowing your interests may sound like a rather passive strategy, but in\npractice it usually means following them past all sorts of obstacles. You\nusually have to risk rejection and failure. So it does take a good deal of\nboldness.  \n  \nBut while you need boldness, you don't usually need much planning. In most\ncases the recipe for doing great work is simply: work hard on excitingly\nambitious projects, and something good will come of it. Instead of making a\nplan and then executing it, you just try to preserve certain invariants.  \n  \nThe trouble with planning is that it only works for achievements you can\ndescribe in advance. You can win a gold medal or get rich by deciding to as a\nchild and then tenaciously pursuing that goal, but you can't discover natural\nselection that way.  \n  \nI think for most people who want to do great work, the right strategy is not\nto plan too much. At each stage do whatever seems most interesting and gives\nyou the best options for the future. I call this approach \"staying upwind.\"\nThis is how most people who've done great work seem to have done it.  \n  \n  \n  \n  \n  \nEven when you've found something exciting to work on, working on it is not\nalways straightforward. There will be times when some new idea makes you leap\nout of bed in the morning and get straight to work. But there will also be\nplenty of times when things aren't like that.  \n  \nYou don't just put out your sail and get blown forward by inspiration. There\nare headwinds and currents and hidden shoals. So there's a technique to\nworking, just as there is to sailing.  \n  \nFor example, while you must work hard, it's possible to work too hard, and if\nyou do that you'll find you get diminishing returns: fatigue will make you\nstupid, and eventually even damage your health. The point at which work yields\ndiminishing returns depends on the type. Some of the hardest types you might\nonly be able to do for four or five hours a day.  \n  \nIdeally those hours will be contiguous. To the extent you can, try to arrange\nyour life so you have big blocks of time to work in. You'll shy away from hard\ntasks if you know you might be interrupted.  \n  \nIt will probably be harder to start working than to keep working. You'll often\nhave to trick yourself to get over that initial threshold. Don't worry about\nthis; it's the nature of work, not a flaw in your character. Work has a sort\nof activation energy, both per day and per project. And since this threshold\nis fake in the sense that it's higher than the energy required to keep going,\nit's ok to tell yourself a lie of corresponding magnitude to get over it.  \n  \nIt's usually a mistake to lie to yourself if you want to do great work, but\nthis is one of the rare cases where it isn't. When I'm reluctant to start work\nin the morning, I often trick myself by saying \"I'll just read over what I've\ngot so far.\" Five minutes later I've found something that seems mistaken or\nincomplete, and I'm off.  \n  \nSimilar techniques work for starting new projects. It's ok to lie to yourself\nabout how much work a project will entail, for example. Lots of great things\nbegan with someone saying \"How hard could it be?\"  \n  \nThis is one case where the young have an advantage. They're more optimistic,\nand even though one of the sources of their optimism is ignorance, in this\ncase ignorance can sometimes beat knowledge.  \n  \nTry to finish what you start, though, even if it turns out to be more work\nthan you expected. Finishing things is not just an exercise in tidiness or\nself-discipline. In many projects a lot of the best work happens in what was\nmeant to be the final stage.  \n  \nAnother permissible lie is to exaggerate the importance of what you're working\non, at least in your own mind. If that helps you discover something new, it\nmay turn out not to have been a lie after all. [7]  \n  \n  \n  \n  \n  \nSince there are two senses of starting work \u2014 per day and per project \u2014 there\nare also two forms of procrastination. Per-project procrastination is far the\nmore dangerous. You put off starting that ambitious project from year to year\nbecause the time isn't quite right. When you're procrastinating in units of\nyears, you can get a lot not done. [8]  \n  \nOne reason per-project procrastination is so dangerous is that it usually\ncamouflages itself as work. You're not just sitting around doing nothing;\nyou're working industriously on something else. So per-project procrastination\ndoesn't set off the alarms that per-day procrastination does. You're too busy\nto notice it.  \n  \nThe way to beat it is to stop occasionally and ask yourself: Am I working on\nwhat I most want to work on? When you're young it's ok if the answer is\nsometimes no, but this gets increasingly dangerous as you get older. [9]  \n  \n  \n  \n  \n  \nGreat work usually entails spending what would seem to most people an\nunreasonable amount of time on a problem. You can't think of this time as a\ncost, or it will seem too high. You have to find the work sufficiently\nengaging as it's happening.  \n  \nThere may be some jobs where you have to work diligently for years at things\nyou hate before you get to the good part, but this is not how great work\nhappens. Great work happens by focusing consistently on something you're\ngenuinely interested in. When you pause to take stock, you're surprised how\nfar you've come.  \n  \nThe reason we're surprised is that we underestimate the cumulative effect of\nwork. Writing a page a day doesn't sound like much, but if you do it every day\nyou'll write a book a year. That's the key: consistency. People who do great\nthings don't get a lot done every day. They get something done, rather than\nnothing.  \n  \nIf you do work that compounds, you'll get exponential growth. Most people who\ndo this do it unconsciously, but it's worth stopping to think about. Learning,\nfor example, is an instance of this phenomenon: the more you learn about\nsomething, the easier it is to learn more. Growing an audience is another: the\nmore fans you have, the more new fans they'll bring you.  \n  \nThe trouble with exponential growth is that the curve feels flat in the\nbeginning. It isn't; it's still a wonderful exponential curve. But we can't\ngrasp that intuitively, so we underrate exponential growth in its early\nstages.  \n  \nSomething that grows exponentially can become so valuable that it's worth\nmaking an extraordinary effort to get it started. But since we underrate\nexponential growth early on, this too is mostly done unconsciously: people\npush through the initial, unrewarding phase of learning something new because\nthey know from experience that learning new things always takes an initial\npush, or they grow their audience one fan at a time because they have nothing\nbetter to do. If people consciously realized they could invest in exponential\ngrowth, many more would do it.  \n  \n  \n  \n  \n  \nWork doesn't just happen when you're trying to. There's a kind of undirected\nthinking you do when walking or taking a shower or lying in bed that can be\nvery powerful. By letting your mind wander a little, you'll often solve\nproblems you were unable to solve by frontal attack.  \n  \nYou have to be working hard in the normal way to benefit from this phenomenon,\nthough. You can't just walk around daydreaming. The daydreaming has to be\ninterleaved with deliberate work that feeds it questions. [10]  \n  \nEveryone knows to avoid distractions at work, but it's also important to avoid\nthem in the other half of the cycle. When you let your mind wander, it wanders\nto whatever you care about most at that moment. So avoid the kind of\ndistraction that pushes your work out of the top spot, or you'll waste this\nvaluable type of thinking on the distraction instead. (Exception: Don't avoid\nlove.)  \n  \n  \n  \n  \n  \nConsciously cultivate your taste in the work done in your field. Until you\nknow which is the best and what makes it so, you don't know what you're aiming\nfor.  \n  \nAnd that _is_ what you're aiming for, because if you don't try to be the best,\nyou won't even be good. This observation has been made by so many people in so\nmany different fields that it might be worth thinking about why it's true. It\ncould be because ambition is a phenomenon where almost all the error is in one\ndirection \u2014 where almost all the shells that miss the target miss by falling\nshort. Or it could be because ambition to be the best is a qualitatively\ndifferent thing from ambition to be good. Or maybe being good is simply too\nvague a standard. Probably all three are true. [11]  \n  \nFortunately there's a kind of economy of scale here. Though it might seem like\nyou'd be taking on a heavy burden by trying to be the best, in practice you\noften end up net ahead. It's exciting, and also strangely liberating. It\nsimplifies things. In some ways it's easier to try to be the best than to try\nmerely to be good.  \n  \nOne way to aim high is to try to make something that people will care about in\na hundred years. Not because their opinions matter more than your\ncontemporaries', but because something that still seems good in a hundred\nyears is more likely to be genuinely good.  \n  \n  \n  \n  \n  \nDon't try to work in a distinctive style. Just try to do the best job you can;\nyou won't be able to help doing it in a distinctive way.  \n  \nStyle is doing things in a distinctive way without trying to. Trying to is\naffectation.  \n  \nAffectation is in effect to pretend that someone other than you is doing the\nwork. You adopt an impressive but fake persona, and while you're pleased with\nthe impressiveness, the fakeness is what shows in the work. [12]  \n  \nThe temptation to be someone else is greatest for the young. They often feel\nlike nobodies. But you never need to worry about that problem, because it's\nself-solving if you work on sufficiently ambitious projects. If you succeed at\nan ambitious project, you're not a nobody; you're the person who did it. So\njust do the work and your identity will take care of itself.  \n  \n  \n  \n  \n  \n\"Avoid affectation\" is a useful rule so far as it goes, but how would you\nexpress this idea positively? How would you say what to be, instead of what\nnot to be? The best answer is earnest. If you're earnest you avoid not just\naffectation but a whole set of similar vices.  \n  \nThe core of being earnest is being intellectually honest. We're taught as\nchildren to be honest as an unselfish virtue \u2014 as a kind of sacrifice. But in\nfact it's a source of power too. To see new ideas, you need an exceptionally\nsharp eye for the truth. You're trying to see more truth than others have seen\nso far. And how can you have a sharp eye for the truth if you're\nintellectually dishonest?  \n  \nOne way to avoid intellectual dishonesty is to maintain a slight positive\npressure in the opposite direction. Be aggressively willing to admit that\nyou're mistaken. Once you've admitted you were mistaken about something,\nyou're free. Till then you have to carry it. [13]  \n  \nAnother more subtle component of earnestness is informality. Informality is\nmuch more important than its grammatically negative name implies. It's not\nmerely the absence of something. It means focusing on what matters instead of\nwhat doesn't.  \n  \nWhat formality and affectation have in common is that as well as doing the\nwork, you're trying to seem a certain way as you're doing it. But any energy\nthat goes into how you seem comes out of being good. That's one reason nerds\nhave an advantage in doing great work: they expend little effort on seeming\nanything. In fact that's basically the definition of a nerd.  \n  \nNerds have a kind of innocent boldness that's exactly what you need in doing\ngreat work. It's not learned; it's preserved from childhood. So hold onto it.\nBe the one who puts things out there rather than the one who sits back and\noffers sophisticated-sounding criticisms of them. \"It's easy to criticize\" is\ntrue in the most literal sense, and the route to great work is never easy.  \n  \nThere may be some jobs where it's an advantage to be cynical and pessimistic,\nbut if you want to do great work it's an advantage to be optimistic, even\nthough that means you'll risk looking like a fool sometimes. There's an old\ntradition of doing the opposite. The Old Testament says it's better to keep\nquiet lest you look like a fool. But that's advice for _seeming_ smart. If you\nactually want to discover new things, it's better to take the risk of telling\npeople your ideas.  \n  \nSome people are naturally earnest, and with others it takes a conscious\neffort. Either kind of earnestness will suffice. But I doubt it would be\npossible to do great work without being earnest. It's so hard to do even if\nyou are. You don't have enough margin for error to accommodate the distortions\nintroduced by being affected, intellectually dishonest, orthodox, fashionable,\nor cool. [14]  \n  \n  \n  \n  \n  \nGreat work is consistent not only with who did it, but with itself. It's\nusually all of a piece. So if you face a decision in the middle of working on\nsomething, ask which choice is more consistent.  \n  \nYou may have to throw things away and redo them. You won't necessarily have\nto, but you have to be willing to. And that can take some effort; when there's\nsomething you need to redo, status quo bias and laziness will combine to keep\nyou in denial about it. To beat this ask: If I'd already made the change,\nwould I want to revert to what I have now?  \n  \nHave the confidence to cut. Don't keep something that doesn't fit just because\nyou're proud of it, or because it cost you a lot of effort.  \n  \nIndeed, in some kinds of work it's good to strip whatever you're doing to its\nessence. The result will be more concentrated; you'll understand it better;\nand you won't be able to lie to yourself about whether there's anything real\nthere.  \n  \nMathematical elegance may sound like a mere metaphor, drawn from the arts.\nThat's what I thought when I first heard the term \"elegant\" applied to a\nproof. But now I suspect it's conceptually prior \u2014 that the main ingredient in\nartistic elegance is mathematical elegance. At any rate it's a useful standard\nwell beyond math.  \n  \nElegance can be a long-term bet, though. Laborious solutions will often have\nmore prestige in the short term. They cost a lot of effort and they're hard to\nunderstand, both of which impress people, at least temporarily.  \n  \nWhereas some of the very best work will seem like it took comparatively little\neffort, because it was in a sense already there. It didn't have to be built,\njust seen. It's a very good sign when it's hard to say whether you're creating\nsomething or discovering it.  \n  \nWhen you're doing work that could be seen as either creation or discovery, err\non the side of discovery. Try thinking of yourself as a mere conduit through\nwhich the ideas take their natural shape.  \n  \n(Strangely enough, one exception is the problem of choosing a problem to work\non. This is usually seen as search, but in the best case it's more like\ncreating something. In the best case you create the field in the process of\nexploring it.)  \n  \nSimilarly, if you're trying to build a powerful tool, make it gratuitously\nunrestrictive. A powerful tool almost by definition will be used in ways you\ndidn't expect, so err on the side of eliminating restrictions, even if you\ndon't know what the benefit will be.  \n  \nGreat work will often be tool-like in the sense of being something others\nbuild on. So it's a good sign if you're creating ideas that others could use,\nor exposing questions that others could answer. The best ideas have\nimplications in many different areas.  \n  \nIf you express your ideas in the most general form, they'll be truer than you\nintended.  \n  \n  \n  \n  \n  \nTrue by itself is not enough, of course. Great ideas have to be true and new.\nAnd it takes a certain amount of ability to see new ideas even once you've\nlearned enough to get to one of the frontiers of knowledge.  \n  \nIn English we give this ability names like originality, creativity, and\nimagination. And it seems reasonable to give it a separate name, because it\ndoes seem to some extent a separate skill. It's possible to have a great deal\nof ability in other respects \u2014 to have a great deal of what's often called\n_technical_ ability \u2014 and yet not have much of this.  \n  \nI've never liked the term \"creative process.\" It seems misleading. Originality\nisn't a process, but a habit of mind. Original thinkers throw off new ideas\nabout whatever they focus on, like an angle grinder throwing off sparks. They\ncan't help it.  \n  \nIf the thing they're focused on is something they don't understand very well,\nthese new ideas might not be good. One of the most original thinkers I know\ndecided to focus on dating after he got divorced. He knew roughly as much\nabout dating as the average 15 year old, and the results were spectacularly\ncolorful. But to see originality separated from expertise like that made its\nnature all the more clear.  \n  \nI don't know if it's possible to cultivate originality, but there are\ndefinitely ways to make the most of however much you have. For example, you're\nmuch more likely to have original ideas when you're working on something.\nOriginal ideas don't come from trying to have original ideas. They come from\ntrying to build or understand something slightly too difficult. [15]  \n  \nTalking or writing about the things you're interested in is a good way to\ngenerate new ideas. When you try to put ideas into words, a missing idea\ncreates a sort of vacuum that draws it out of you. Indeed, there's a kind of\nthinking that can only be done by writing.  \n  \nChanging your context can help. If you visit a new place, you'll often find\nyou have new ideas there. The journey itself often dislodges them. But you may\nnot have to go far to get this benefit. Sometimes it's enough just to go for a\nwalk. [16]  \n  \nIt also helps to travel in topic space. You'll have more new ideas if you\nexplore lots of different topics, partly because it gives the angle grinder\nmore surface area to work on, and partly because analogies are an especially\nfruitful source of new ideas.  \n  \nDon't divide your attention _evenly_ between many topics though, or you'll\nspread yourself too thin. You want to distribute it according to something\nmore like a power law. [17] Be professionally curious about a few topics and\nidly curious about many more.  \n  \nCuriosity and originality are closely related. Curiosity feeds originality by\ngiving it new things to work on. But the relationship is closer than that.\nCuriosity is itself a kind of originality; it's roughly to questions what\noriginality is to answers. And since questions at their best are a big\ncomponent of answers, curiosity at its best is a creative force.  \n  \n  \n  \n  \n  \nHaving new ideas is a strange game, because it usually consists of seeing\nthings that were right under your nose. Once you've seen a new idea, it tends\nto seem obvious. Why did no one think of this before?  \n  \nWhen an idea seems simultaneously novel and obvious, it's probably a good one.  \n  \nSeeing something obvious sounds easy. And yet empirically having new ideas is\nhard. What's the source of this apparent contradiction? It's that seeing the\nnew idea usually requires you to change the way you look at the world. We see\nthe world through models that both help and constrain us. When you fix a\nbroken model, new ideas become obvious. But noticing and fixing a broken model\nis hard. That's how new ideas can be both obvious and yet hard to discover:\nthey're easy to see after you do something hard.  \n  \nOne way to discover broken models is to be stricter than other people. Broken\nmodels of the world leave a trail of clues where they bash against reality.\nMost people don't want to see these clues. It would be an understatement to\nsay that they're attached to their current model; it's what they think in; so\nthey'll tend to ignore the trail of clues left by its breakage, however\nconspicuous it may seem in retrospect.  \n  \nTo find new ideas you have to seize on signs of breakage instead of looking\naway. That's what Einstein did. He was able to see the wild implications of\nMaxwell's equations not so much because he was looking for new ideas as\nbecause he was stricter.  \n  \nThe other thing you need is a willingness to break rules. Paradoxical as it\nsounds, if you want to fix your model of the world, it helps to be the sort of\nperson who's comfortable breaking rules. From the point of view of the old\nmodel, which everyone including you initially shares, the new model usually\nbreaks at least implicit rules.  \n  \nFew understand the degree of rule-breaking required, because new ideas seem\nmuch more conservative once they succeed. They seem perfectly reasonable once\nyou're using the new model of the world they brought with them. But they\ndidn't at the time; it took the greater part of a century for the heliocentric\nmodel to be generally accepted, even among astronomers, because it felt so\nwrong.  \n  \nIndeed, if you think about it, a good new idea has to seem bad to most people,\nor someone would have already explored it. So what you're looking for is ideas\nthat seem crazy, but the right kind of crazy. How do you recognize these? You\ncan't with certainty. Often ideas that seem bad are bad. But ideas that are\nthe right kind of crazy tend to be exciting; they're rich in implications;\nwhereas ideas that are merely bad tend to be depressing.  \n  \nThere are two ways to be comfortable breaking rules: to enjoy breaking them,\nand to be indifferent to them. I call these two cases being aggressively and\npassively independent-minded.  \n  \nThe aggressively independent-minded are the naughty ones. Rules don't merely\nfail to stop them; breaking rules gives them additional energy. For this sort\nof person, delight at the sheer audacity of a project sometimes supplies\nenough activation energy to get it started.  \n  \nThe other way to break rules is not to care about them, or perhaps even to\nknow they exist. This is why novices and outsiders often make new discoveries;\ntheir ignorance of a field's assumptions acts as a source of temporary passive\nindependent-mindedness. Aspies also seem to have a kind of immunity to\nconventional beliefs. Several I know say that this helps them to have new\nideas.  \n  \nStrictness plus rule-breaking sounds like a strange combination. In popular\nculture they're opposed. But popular culture has a broken model in this\nrespect. It implicitly assumes that issues are trivial ones, and in trivial\nmatters strictness and rule-breaking _are_ opposed. But in questions that\nreally matter, only rule-breakers can be truly strict.  \n  \n  \n  \n  \n  \nAn overlooked idea often doesn't lose till the semifinals. You do see it,\nsubconsciously, but then another part of your subconscious shoots it down\nbecause it would be too weird, too risky, too much work, too controversial.\nThis suggests an exciting possibility: if you could turn off such filters, you\ncould see more new ideas.  \n  \nOne way to do that is to ask what would be good ideas for _someone else_ to\nexplore. Then your subconscious won't shoot them down to protect you.  \n  \nYou could also discover overlooked ideas by working in the other direction: by\nstarting from what's obscuring them. Every cherished but mistaken principle is\nsurrounded by a dead zone of valuable ideas that are unexplored because they\ncontradict it.  \n  \nReligions are collections of cherished but mistaken principles. So anything\nthat can be described either literally or metaphorically as a religion will\nhave valuable unexplored ideas in its shadow. Copernicus and Darwin both made\ndiscoveries of this type. [18]  \n  \nWhat are people in your field religious about, in the sense of being too\nattached to some principle that might not be as self-evident as they think?\nWhat becomes possible if you discard it?  \n  \n  \n  \n  \n  \nPeople show much more originality in solving problems than in deciding which\nproblems to solve. Even the smartest can be surprisingly conservative when\ndeciding what to work on. People who'd never dream of being fashionable in any\nother way get sucked into working on fashionable problems.  \n  \nOne reason people are more conservative when choosing problems than solutions\nis that problems are bigger bets. A problem could occupy you for years, while\nexploring a solution might only take days. But even so I think most people are\ntoo conservative. They're not merely responding to risk, but to fashion as\nwell. Unfashionable problems are undervalued.  \n  \nOne of the most interesting kinds of unfashionable problem is the problem that\npeople think has been fully explored, but hasn't. Great work often takes\nsomething that already exists and shows its latent potential. Durer and Watt\nboth did this. So if you're interested in a field that others think is tapped\nout, don't let their skepticism deter you. People are often wrong about this.  \n  \nWorking on an unfashionable problem can be very pleasing. There's no hype or\nhurry. Opportunists and critics are both occupied elsewhere. The existing work\noften has an old-school solidity. And there's a satisfying sense of economy in\ncultivating ideas that would otherwise be wasted.  \n  \nBut the most common type of overlooked problem is not explicitly unfashionable\nin the sense of being out of fashion. It just doesn't seem to matter as much\nas it actually does. How do you find these? By being self-indulgent \u2014 by\nletting your curiosity have its way, and tuning out, at least temporarily, the\nlittle voice in your head that says you should only be working on \"important\"\nproblems.  \n  \nYou do need to work on important problems, but almost everyone is too\nconservative about what counts as one. And if there's an important but\noverlooked problem in your neighborhood, it's probably already on your\nsubconscious radar screen. So try asking yourself: if you were going to take a\nbreak from \"serious\" work to work on something just because it would be really\ninteresting, what would you do? The answer is probably more important than it\nseems.  \n  \nOriginality in choosing problems seems to matter even more than originality in\nsolving them. That's what distinguishes the people who discover whole new\nfields. So what might seem to be merely the initial step \u2014 deciding what to\nwork on \u2014 is in a sense the key to the whole game.  \n  \n  \n  \n  \n  \nFew grasp this. One of the biggest misconceptions about new ideas is about the\nratio of question to answer in their composition. People think big ideas are\nanswers, but often the real insight was in the question.  \n  \nPart of the reason we underrate questions is the way they're used in schools.\nIn schools they tend to exist only briefly before being answered, like\nunstable particles. But a really good question can be much more than that. A\nreally good question is a partial discovery. How do new species arise? Is the\nforce that makes objects fall to earth the same as the one that keeps planets\nin their orbits? By even asking such questions you were already in excitingly\nnovel territory.  \n  \nUnanswered questions can be uncomfortable things to carry around with you. But\nthe more you're carrying, the greater the chance of noticing a solution \u2014 or\nperhaps even more excitingly, noticing that two unanswered questions are the\nsame.  \n  \nSometimes you carry a question for a long time. Great work often comes from\nreturning to a question you first noticed years before \u2014 in your childhood,\neven \u2014 and couldn't stop thinking about. People talk a lot about the\nimportance of keeping your youthful dreams alive, but it's just as important\nto keep your youthful questions alive. [19]  \n  \nThis is one of the places where actual expertise differs most from the popular\npicture of it. In the popular picture, experts are certain. But actually the\nmore puzzled you are, the better, so long as (a) the things you're puzzled\nabout matter, and (b) no one else understands them either.  \n  \nThink about what's happening at the moment just before a new idea is\ndiscovered. Often someone with sufficient expertise is puzzled about\nsomething. Which means that originality consists partly of puzzlement \u2014 of\nconfusion! You have to be comfortable enough with the world being full of\npuzzles that you're willing to see them, but not so comfortable that you don't\nwant to solve them. [20]  \n  \nIt's a great thing to be rich in unanswered questions. And this is one of\nthose situations where the rich get richer, because the best way to acquire\nnew questions is to try answering existing ones. Questions don't just lead to\nanswers, but also to more questions.  \n  \n  \n  \n  \n  \nThe best questions grow in the answering. You notice a thread protruding from\nthe current paradigm and try pulling on it, and it just gets longer and\nlonger. So don't require a question to be obviously big before you try\nanswering it. You can rarely predict that. It's hard enough even to notice the\nthread, let alone to predict how much will unravel if you pull on it.  \n  \nIt's better to be promiscuously curious \u2014 to pull a little bit on a lot of\nthreads, and see what happens. Big things start small. The initial versions of\nbig things were often just experiments, or side projects, or talks, which then\ngrew into something bigger. So start lots of small things.  \n  \nBeing prolific is underrated. The more different things you try, the greater\nthe chance of discovering something new. Understand, though, that trying lots\nof things will mean trying lots of things that don't work. You can't have a\nlot of good ideas without also having a lot of bad ones. [21]  \n  \nThough it sounds more responsible to begin by studying everything that's been\ndone before, you'll learn faster and have more fun by trying stuff. And you'll\nunderstand previous work better when you do look at it. So err on the side of\nstarting. Which is easier when starting means starting small; those two ideas\nfit together like two puzzle pieces.  \n  \nHow do you get from starting small to doing something great? By making\nsuccessive versions. Great things are almost always made in successive\nversions. You start with something small and evolve it, and the final version\nis both cleverer and more ambitious than anything you could have planned.  \n  \nIt's particularly useful to make successive versions when you're making\nsomething for people \u2014 to get an initial version in front of them quickly, and\nthen evolve it based on their response.  \n  \nBegin by trying the simplest thing that could possibly work. Surprisingly\noften, it does. If it doesn't, this will at least get you started.  \n  \nDon't try to cram too much new stuff into any one version. There are names for\ndoing this with the first version (taking too long to ship) and the second\n(the second system effect), but these are both merely instances of a more\ngeneral principle.  \n  \nAn early version of a new project will sometimes be dismissed as a toy. It's a\ngood sign when people do this. That means it has everything a new idea needs\nexcept scale, and that tends to follow. [22]  \n  \nThe alternative to starting with something small and evolving it is to plan in\nadvance what you're going to do. And planning does usually seem the more\nresponsible choice. It sounds more organized to say \"we're going to do x and\nthen y and then z\" than \"we're going to try x and see what happens.\" And it is\nmore _organized_ ; it just doesn't work as well.  \n  \nPlanning per se isn't good. It's sometimes necessary, but it's a necessary\nevil \u2014 a response to unforgiving conditions. It's something you have to do\nbecause you're working with inflexible media, or because you need to\ncoordinate the efforts of a lot of people. If you keep projects small and use\nflexible media, you don't have to plan as much, and your designs can evolve\ninstead.  \n  \n  \n  \n  \n  \nTake as much risk as you can afford. In an efficient market, risk is\nproportionate to reward, so don't look for certainty, but for a bet with high\nexpected value. If you're not failing occasionally, you're probably being too\nconservative.  \n  \nThough conservatism is usually associated with the old, it's the young who\ntend to make this mistake. Inexperience makes them fear risk, but it's when\nyou're young that you can afford the most.  \n  \nEven a project that fails can be valuable. In the process of working on it,\nyou'll have crossed territory few others have seen, and encountered questions\nfew others have asked. And there's probably no better source of questions than\nthe ones you encounter in trying to do something slightly too hard.  \n  \n  \n  \n  \n  \nUse the advantages of youth when you have them, and the advantages of age once\nyou have those. The advantages of youth are energy, time, optimism, and\nfreedom. The advantages of age are knowledge, efficiency, money, and power.\nWith effort you can acquire some of the latter when young and keep some of the\nformer when old.  \n  \nThe old also have the advantage of knowing which advantages they have. The\nyoung often have them without realizing it. The biggest is probably time. The\nyoung have no idea how rich they are in time. The best way to turn this time\nto advantage is to use it in slightly frivolous ways: to learn about something\nyou don't need to know about, just out of curiosity, or to try building\nsomething just because it would be cool, or to become freakishly good at\nsomething.  \n  \nThat \"slightly\" is an important qualification. Spend time lavishly when you're\nyoung, but don't simply waste it. There's a big difference between doing\nsomething you worry might be a waste of time and doing something you know for\nsure will be. The former is at least a bet, and possibly a better one than you\nthink. [23]  \n  \nThe most subtle advantage of youth, or more precisely of inexperience, is that\nyou're seeing everything with fresh eyes. When your brain embraces an idea for\nthe first time, sometimes the two don't fit together perfectly. Usually the\nproblem is with your brain, but occasionally it's with the idea. A piece of it\nsticks out awkwardly and jabs you when you think about it. People who are used\nto the idea have learned to ignore it, but you have the opportunity not to.\n[24]  \n  \nSo when you're learning about something for the first time, pay attention to\nthings that seem wrong or missing. You'll be tempted to ignore them, since\nthere's a 99% chance the problem is with you. And you may have to set aside\nyour misgivings temporarily to keep progressing. But don't forget about them.\nWhen you've gotten further into the subject, come back and check if they're\nstill there. If they're still viable in the light of your present knowledge,\nthey probably represent an undiscovered idea.  \n  \n  \n  \n  \n  \nOne of the most valuable kinds of knowledge you get from experience is to know\nwhat you _don't_ have to worry about. The young know all the things that could\nmatter, but not their relative importance. So they worry equally about\neverything, when they should worry much more about a few things and hardly at\nall about the rest.  \n  \nBut what you don't know is only half the problem with inexperience. The other\nhalf is what you do know that ain't so. You arrive at adulthood with your head\nfull of nonsense \u2014 bad habits you've acquired and false things you've been\ntaught \u2014 and you won't be able to do great work till you clear away at least\nthe nonsense in the way of whatever type of work you want to do.  \n  \nMuch of the nonsense left in your head is left there by schools. We're so used\nto schools that we unconsciously treat going to school as identical with\nlearning, but in fact schools have all sorts of strange qualities that warp\nour ideas about learning and thinking.  \n  \nFor example, schools induce passivity. Since you were a small child, there was\nan authority at the front of the class telling all of you what you had to\nlearn and then measuring whether you did. But neither classes nor tests are\nintrinsic to learning; they're just artifacts of the way schools are usually\ndesigned.  \n  \nThe sooner you overcome this passivity, the better. If you're still in school,\ntry thinking of your education as your project, and your teachers as working\nfor you rather than vice versa. That may seem a stretch, but it's not merely\nsome weird thought experiment. It's the truth economically, and in the best\ncase it's the truth intellectually as well. The best teachers don't want to be\nyour bosses. They'd prefer it if you pushed ahead, using them as a source of\nadvice, rather than being pulled by them through the material.  \n  \nSchools also give you a misleading impression of what work is like. In school\nthey tell you what the problems are, and they're almost always soluble using\nno more than you've been taught so far. In real life you have to figure out\nwhat the problems are, and you often don't know if they're soluble at all.  \n  \nBut perhaps the worst thing schools do to you is train you to win by hacking\nthe test. You can't do great work by doing that. You can't trick God. So stop\nlooking for that kind of shortcut. The way to beat the system is to focus on\nproblems and solutions that others have overlooked, not to skimp on the work\nitself.  \n  \n  \n  \n  \n  \nDon't think of yourself as dependent on some gatekeeper giving you a \"big\nbreak.\" Even if this were true, the best way to get it would be to focus on\ndoing good work rather than chasing influential people.  \n  \nAnd don't take rejection by committees to heart. The qualities that impress\nadmissions officers and prize committees are quite different from those\nrequired to do great work. The decisions of selection committees are only\nmeaningful to the extent that they're part of a feedback loop, and very few\nare.  \n  \n  \n  \n  \n  \nPeople new to a field will often copy existing work. There's nothing\ninherently bad about that. There's no better way to learn how something works\nthan by trying to reproduce it. Nor does copying necessarily make your work\nunoriginal. Originality is the presence of new ideas, not the absence of old\nones.  \n  \nThere's a good way to copy and a bad way. If you're going to copy something,\ndo it openly instead of furtively, or worse still, unconsciously. This is\nwhat's meant by the famously misattributed phrase \"Great artists steal.\" The\nreally dangerous kind of copying, the kind that gives copying a bad name, is\nthe kind that's done without realizing it, because you're nothing more than a\ntrain running on tracks laid down by someone else. But at the other extreme,\ncopying can be a sign of superiority rather than subordination. [25]  \n  \nIn many fields it's almost inevitable that your early work will be in some\nsense based on other people's. Projects rarely arise in a vacuum. They're\nusually a reaction to previous work. When you're first starting out, you don't\nhave any previous work; if you're going to react to something, it has to be\nsomeone else's. Once you're established, you can react to your own. But while\nthe former gets called derivative and the latter doesn't, structurally the two\ncases are more similar than they seem.  \n  \nOddly enough, the very novelty of the most novel ideas sometimes makes them\nseem at first to be more derivative than they are. New discoveries often have\nto be conceived initially as variations of existing things, _even by their\ndiscoverers_ , because there isn't yet the conceptual vocabulary to express\nthem.  \n  \nThere are definitely some dangers to copying, though. One is that you'll tend\nto copy old things \u2014 things that were in their day at the frontier of\nknowledge, but no longer are.  \n  \nAnd when you do copy something, don't copy every feature of it. Some will make\nyou ridiculous if you do. Don't copy the manner of an eminent 50 year old\nprofessor if you're 18, for example, or the idiom of a Renaissance poem\nhundreds of years later.  \n  \nSome of the features of things you admire are flaws they succeeded despite.\nIndeed, the features that are easiest to imitate are the most likely to be the\nflaws.  \n  \nThis is particularly true for behavior. Some talented people are jerks, and\nthis sometimes makes it seem to the inexperienced that being a jerk is part of\nbeing talented. It isn't; being talented is merely how they get away with it.  \n  \nOne of the most powerful kinds of copying is to copy something from one field\ninto another. History is so full of chance discoveries of this type that it's\nprobably worth giving chance a hand by deliberately learning about other kinds\nof work. You can take ideas from quite distant fields if you let them be\nmetaphors.  \n  \nNegative examples can be as inspiring as positive ones. In fact you can\nsometimes learn more from things done badly than from things done well;\nsometimes it only becomes clear what's needed when it's missing.  \n  \n  \n  \n  \n  \nIf a lot of the best people in your field are collected in one place, it's\nusually a good idea to visit for a while. It will increase your ambition, and\nalso, by showing you that these people are human, increase your self-\nconfidence. [26]  \n  \nIf you're earnest you'll probably get a warmer welcome than you might expect.\nMost people who are very good at something are happy to talk about it with\nanyone who's genuinely interested. If they're really good at their work, then\nthey probably have a hobbyist's interest in it, and hobbyists always want to\ntalk about their hobbies.  \n  \nIt may take some effort to find the people who are really good, though. Doing\ngreat work has such prestige that in some places, particularly universities,\nthere's a polite fiction that everyone is engaged in it. And that is far from\ntrue. People within universities can't say so openly, but the quality of the\nwork being done in different departments varies immensely. Some departments\nhave people doing great work; others have in the past; others never have.  \n  \n  \n  \n  \n  \nSeek out the best colleagues. There are a lot of projects that can't be done\nalone, and even if you're working on one that can be, it's good to have other\npeople to encourage you and to bounce ideas off.  \n  \nColleagues don't just affect your work, though; they also affect you. So work\nwith people you want to become like, because you will.  \n  \nQuality is more important than quantity in colleagues. It's better to have one\nor two great ones than a building full of pretty good ones. In fact it's not\nmerely better, but necessary, judging from history: the degree to which great\nwork happens in clusters suggests that one's colleagues often make the\ndifference between doing great work and not.  \n  \nHow do you know when you have sufficiently good colleagues? In my experience,\nwhen you do, you know. Which means if you're unsure, you probably don't. But\nit may be possible to give a more concrete answer than that. Here's an\nattempt: sufficiently good colleagues offer _surprising_ insights. They can\nsee and do things that you can't. So if you have a handful of colleagues good\nenough to keep you on your toes in this sense, you're probably over the\nthreshold.  \n  \nMost of us can benefit from collaborating with colleagues, but some projects\nrequire people on a larger scale, and starting one of those is not for\neveryone. If you want to run a project like that, you'll have to become a\nmanager, and managing well takes aptitude and interest like any other kind of\nwork. If you don't have them, there is no middle path: you must either force\nyourself to learn management as a second language, or avoid such projects.\n[27]  \n  \n  \n  \n  \n  \nHusband your morale. It's the basis of everything when you're working on\nambitious projects. You have to nurture and protect it like a living organism.  \n  \nMorale starts with your view of life. You're more likely to do great work if\nyou're an optimist, and more likely to if you think of yourself as lucky than\nif you think of yourself as a victim.  \n  \nIndeed, work can to some extent protect you from your problems. If you choose\nwork that's pure, its very difficulties will serve as a refuge from the\ndifficulties of everyday life. If this is escapism, it's a very productive\nform of it, and one that has been used by some of the greatest minds in\nhistory.  \n  \nMorale compounds via work: high morale helps you do good work, which increases\nyour morale and helps you do even better work. But this cycle also operates in\nthe other direction: if you're not doing good work, that can demoralize you\nand make it even harder to. Since it matters so much for this cycle to be\nrunning in the right direction, it can be a good idea to switch to easier work\nwhen you're stuck, just so you start to get something done.  \n  \nOne of the biggest mistakes ambitious people make is to allow setbacks to\ndestroy their morale all at once, like a balloon bursting. You can inoculate\nyourself against this by explicitly considering setbacks a part of your\nprocess. Solving hard problems always involves some backtracking.  \n  \nDoing great work is a depth-first search whose root node is the desire to. So\n\"If at first you don't succeed, try, try again\" isn't quite right. It should\nbe: If at first you don't succeed, either try again, or backtrack and then try\nagain.  \n  \n\"Never give up\" is also not quite right. Obviously there are times when it's\nthe right choice to eject. A more precise version would be: Never let setbacks\npanic you into backtracking more than you need to. Corollary: Never abandon\nthe root node.  \n  \nIt's not necessarily a bad sign if work is a struggle, any more than it's a\nbad sign to be out of breath while running. It depends how fast you're\nrunning. So learn to distinguish good pain from bad. Good pain is a sign of\neffort; bad pain is a sign of damage.  \n  \n  \n  \n  \n  \nAn audience is a critical component of morale. If you're a scholar, your\naudience may be your peers; in the arts, it may be an audience in the\ntraditional sense. Either way it doesn't need to be big. The value of an\naudience doesn't grow anything like linearly with its size. Which is bad news\nif you're famous, but good news if you're just starting out, because it means\na small but dedicated audience can be enough to sustain you. If a handful of\npeople genuinely love what you're doing, that's enough.  \n  \nTo the extent you can, avoid letting intermediaries come between you and your\naudience. In some types of work this is inevitable, but it's so liberating to\nescape it that you might be better off switching to an adjacent type if that\nwill let you go direct. [28]  \n  \nThe people you spend time with will also have a big effect on your morale.\nYou'll find there are some who increase your energy and others who decrease\nit, and the effect someone has is not always what you'd expect. Seek out the\npeople who increase your energy and avoid those who decrease it. Though of\ncourse if there's someone you need to take care of, that takes precedence.  \n  \nDon't marry someone who doesn't understand that you need to work, or sees your\nwork as competition for your attention. If you're ambitious, you need to work;\nit's almost like a medical condition; so someone who won't let you work either\ndoesn't understand you, or does and doesn't care.  \n  \nUltimately morale is physical. You think with your body, so it's important to\ntake care of it. That means exercising regularly, eating and sleeping well,\nand avoiding the more dangerous kinds of drugs. Running and walking are\nparticularly good forms of exercise because they're good for thinking. [29]  \n  \nPeople who do great work are not necessarily happier than everyone else, but\nthey're happier than they'd be if they didn't. In fact, if you're smart and\nambitious, it's dangerous _not_ to be productive. People who are smart and\nambitious but don't achieve much tend to become bitter.  \n  \n  \n  \n  \n  \nIt's ok to want to impress other people, but choose the right people. The\nopinion of people you respect is signal. Fame, which is the opinion of a much\nlarger group you might or might not respect, just adds noise.  \n  \nThe prestige of a type of work is at best a trailing indicator and sometimes\ncompletely mistaken. If you do anything well enough, you'll make it\nprestigious. So the question to ask about a type of work is not how much\nprestige it has, but how well it could be done.  \n  \nCompetition can be an effective motivator, but don't let it choose the problem\nfor you; don't let yourself get drawn into chasing something just because\nothers are. In fact, don't let competitors make you do anything much more\nspecific than work harder.  \n  \nCuriosity is the best guide. Your curiosity never lies, and it knows more than\nyou do about what's worth paying attention to.  \n  \n  \n  \n  \n  \nNotice how often that word has come up. If you asked an oracle the secret to\ndoing great work and the oracle replied with a single word, my bet would be on\n\"curiosity.\"  \n  \nThat doesn't translate directly to advice. It's not enough just to be curious,\nand you can't command curiosity anyway. But you can nurture it and let it\ndrive you.  \n  \nCuriosity is the key to all four steps in doing great work: it will choose the\nfield for you, get you to the frontier, cause you to notice the gaps in it,\nand drive you to explore them. The whole process is a kind of dance with\ncuriosity.  \n  \n  \n  \n  \n  \nBelieve it or not, I tried to make this essay as short as I could. But its\nlength at least means it acts as a filter. If you made it this far, you must\nbe interested in doing great work. And if so you're already further along than\nyou might realize, because the set of people willing to want to is small.  \n  \nThe factors in doing great work are factors in the literal, mathematical\nsense, and they are: ability, interest, effort, and luck. Luck by definition\nyou can't do anything about, so we can ignore that. And we can assume effort,\nif you do in fact want to do great work. So the problem boils down to ability\nand interest. Can you find a kind of work where your ability and interest will\ncombine to yield an explosion of new ideas?  \n  \nHere there are grounds for optimism. There are so many different ways to do\ngreat work, and even more that are still undiscovered. Out of all those\ndifferent types of work, the one you're most suited for is probably a pretty\nclose match. Probably a comically close match. It's just a question of finding\nit, and how far into it your ability and interest can take you. And you can\nonly answer that by trying.  \n  \nMany more people could try to do great work than do. What holds them back is a\ncombination of modesty and fear. It seems presumptuous to try to be Newton or\nShakespeare. It also seems hard; surely if you tried something like that,\nyou'd fail. Presumably the calculation is rarely explicit. Few people\nconsciously decide not to try to do great work. But that's what's going on\nsubconsciously; they shy away from the question.  \n  \nSo I'm going to pull a sneaky trick on you. Do you want to do great work, or\nnot? Now you have to decide consciously. Sorry about that. I wouldn't have\ndone it to a general audience. But we already know you're interested.  \n  \nDon't worry about being presumptuous. You don't have to tell anyone. And if\nit's too hard and you fail, so what? Lots of people have worse problems than\nthat. In fact you'll be lucky if it's the worst problem you have.  \n  \nYes, you'll have to work hard. But again, lots of people have to work hard.\nAnd if you're working on something you find very interesting, which you\nnecessarily will if you're on the right path, the work will probably feel less\nburdensome than a lot of your peers'.  \n  \nThe discoveries are out there, waiting to be made. Why not by you?  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] I don't think you could give a precise definition of what counts as great\nwork. Doing great work means doing something important so well that you expand\npeople's ideas of what's possible. But there's no threshold for importance.\nIt's a matter of degree, and often hard to judge at the time anyway. So I'd\nrather people focused on developing their interests rather than worrying about\nwhether they're important or not. Just try to do something amazing, and leave\nit to future generations to say if you succeeded.  \n  \n[2] A lot of standup comedy is based on noticing anomalies in everyday life.\n\"Did you ever notice...?\" New ideas come from doing this about nontrivial\nthings. Which may help explain why people's reaction to a new idea is often\nthe first half of laughing: Ha!  \n  \n[3] That second qualifier is critical. If you're excited about something most\nauthorities discount, but you can't give a more precise explanation than \"they\ndon't get it,\" then you're starting to drift into the territory of cranks.  \n  \n[4] Finding something to work on is not simply a matter of finding a match\nbetween the current version of you and a list of known problems. You'll often\nhave to coevolve with the problem. That's why it can sometimes be so hard to\nfigure out what to work on. The search space is huge. It's the cartesian\nproduct of all possible types of work, both known and yet to be discovered,\nand all possible future versions of you.  \n  \nThere's no way you could search this whole space, so you have to rely on\nheuristics to generate promising paths through it and hope the best matches\nwill be clustered. Which they will not always be; different types of work have\nbeen collected together as much by accidents of history as by the intrinsic\nsimilarities between them.  \n  \n[5] There are many reasons curious people are more likely to do great work,\nbut one of the more subtle is that, by casting a wide net, they're more likely\nto find the right thing to work on in the first place.  \n  \n[6] It can also be dangerous to make things for an audience you feel is less\nsophisticated than you, if that causes you to talk down to them. You can make\na lot of money doing that, if you do it in a sufficiently cynical way, but\nit's not the route to great work. Not that anyone using this m.o. would care.  \n  \n[7] This idea I learned from Hardy's _A Mathematician's Apology_ , which I\nrecommend to anyone ambitious to do great work, in any field.  \n  \n[8] Just as we overestimate what we can do in a day and underestimate what we\ncan do over several years, we overestimate the damage done by procrastinating\nfor a day and underestimate the damage done by procrastinating for several\nyears.  \n  \n[9] You can't usually get paid for doing exactly what you want, especially\nearly on. There are two options: get paid for doing work close to what you\nwant and hope to push it closer, or get paid for doing something else entirely\nand do your own projects on the side. Both can work, but both have drawbacks:\nin the first approach your work is compromised by default, and in the second\nyou have to fight to get time to do it.  \n  \n[10] If you set your life up right, it will deliver the focus-relax cycle\nautomatically. The perfect setup is an office you work in and that you walk to\nand from.  \n  \n[11] There may be some very unworldly people who do great work without\nconsciously trying to. If you want to expand this rule to cover that case, it\nbecomes: Don't try to be anything except the best.  \n  \n[12] This gets more complicated in work like acting, where the goal is to\nadopt a fake persona. But even here it's possible to be affected. Perhaps the\nrule in such fields should be to avoid _unintentional_ affectation.  \n  \n[13] It's safe to have beliefs that you treat as unquestionable if and only if\nthey're also unfalsifiable. For example, it's safe to have the principle that\neveryone should be treated equally under the law, because a sentence with a\n\"should\" in it isn't really a statement about the world and is therefore hard\nto disprove. And if there's no evidence that could disprove one of your\nprinciples, there can't be any facts you'd need to ignore in order to preserve\nit.  \n  \n[14] Affectation is easier to cure than intellectual dishonesty. Affectation\nis often a shortcoming of the young that burns off in time, while intellectual\ndishonesty is more of a character flaw.  \n  \n[15] Obviously you don't have to be working at the exact moment you have the\nidea, but you'll probably have been working fairly recently.  \n  \n[16] Some say psychoactive drugs have a similar effect. I'm skeptical, but\nalso almost totally ignorant of their effects.  \n  \n[17] For example you might give the nth most important topic (m-1)/m^n of your\nattention, for some m > 1\\. You couldn't allocate your attention so precisely,\nof course, but this at least gives an idea of a reasonable distribution.  \n  \n[18] The principles defining a religion have to be mistaken. Otherwise anyone\nmight adopt them, and there would be nothing to distinguish the adherents of\nthe religion from everyone else.  \n  \n[19] It might be a good exercise to try writing down a list of questions you\nwondered about in your youth. You might find you're now in a position to do\nsomething about some of them.  \n  \n[20] The connection between originality and uncertainty causes a strange\nphenomenon: because the conventional-minded are more certain than the\nindependent-minded, this tends to give them the upper hand in disputes, even\nthough they're generally stupider.\n\n> The best lack all conviction, while the worst  \n>  Are full of passionate intensity.\n\n[21] Derived from Linus Pauling's \"If you want to have good ideas, you must\nhave many ideas.\"  \n  \n[22] Attacking a project as a \"toy\" is similar to attacking a statement as\n\"inappropriate.\" It means that no more substantial criticism can be made to\nstick.  \n  \n[23] One way to tell whether you're wasting time is to ask if you're producing\nor consuming. Writing computer games is less likely to be a waste of time than\nplaying them, and playing games where you create something is less likely to\nbe a waste of time than playing games where you don't.  \n  \n[24] Another related advantage is that if you haven't said anything publicly\nyet, you won't be biased toward evidence that supports your earlier\nconclusions. With sufficient integrity you could achieve eternal youth in this\nrespect, but few manage to. For most people, having previously published\nopinions has an effect similar to ideology, just in quantity 1.  \n  \n[25] In the early 1630s Daniel Mytens made a painting of Henrietta Maria\nhanding a laurel wreath to Charles I. Van Dyck then painted his own version to\nshow how much better he was.  \n  \n[26] I'm being deliberately vague about what a place is. As of this writing,\nbeing in the same physical place has advantages that are hard to duplicate,\nbut that could change.  \n  \n[27] This is false when the work the other people have to do is very\nconstrained, as with SETI@home or Bitcoin. It may be possible to expand the\narea in which it's false by defining similarly restricted protocols with more\nfreedom of action in the nodes.  \n  \n[28] Corollary: Building something that enables people to go around\nintermediaries and engage directly with their audience is probably a good\nidea.  \n  \n[29] It may be helpful always to walk or run the same route, because that\nfrees attention for thinking. It feels that way to me, and there is some\nhistorical evidence for it.  \n  \n  \n  \n**Thanks** to Trevor Blackwell, Daniel Gackle, Pam Graham, Tom Howard, Patrick\nHsu, Steve Huffman, Jessica Livingston, Henry Lloyd-Baker, Bob Metcalfe, Ben\nMiller, Robert Morris, Michael Nielsen, Courtenay Pipkin, Joris Poort, Mieke\nRoos, Rajat Suri, Harj Taggar, Garry Tan, and my younger son for suggestions\nand for reading drafts.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nSeptember 2012  \n  \nA startup is a company designed to grow fast. Being newly founded does not in\nitself make a company a startup. Nor is it necessary for a startup to work on\ntechnology, or take venture funding, or have some sort of \"exit.\" The only\nessential thing is growth. Everything else we associate with startups follows\nfrom growth.  \n  \nIf you want to start one it's important to understand that. Startups are so\nhard that you can't be pointed off to the side and hope to succeed. You have\nto know that growth is what you're after. The good news is, if you get growth,\neverything else tends to fall into place. Which means you can use growth like\na compass to make almost every decision you face.  \n  \n**Redwoods**  \n  \nLet's start with a distinction that should be obvious but is often overlooked:\nnot every newly founded company is a startup. Millions of companies are\nstarted every year in the US. Only a tiny fraction are startups. Most are\nservice businesses \u2014 restaurants, barbershops, plumbers, and so on. These are\nnot startups, except in a few unusual cases. A barbershop isn't designed to\ngrow fast. Whereas a search engine, for example, is.  \n  \nWhen I say startups are designed to grow fast, I mean it in two senses. Partly\nI mean designed in the sense of intended, because most startups fail. But I\nalso mean startups are different by nature, in the same way a redwood seedling\nhas a different destiny from a bean sprout.  \n  \nThat difference is why there's a distinct word, \"startup,\" for companies\ndesigned to grow fast. If all companies were essentially similar, but some\nthrough luck or the efforts of their founders ended up growing very fast, we\nwouldn't need a separate word. We could just talk about super-successful\ncompanies and less successful ones. But in fact startups do have a different\nsort of DNA from other businesses. Google is not just a barbershop whose\nfounders were unusually lucky and hard-working. Google was different from the\nbeginning.  \n  \nTo grow rapidly, you need to make something you can sell to a big market.\nThat's the difference between Google and a barbershop. A barbershop doesn't\nscale.  \n  \nFor a company to grow really big, it must (a) make something lots of people\nwant, and (b) reach and serve all those people. Barbershops are doing fine in\nthe (a) department. Almost everyone needs their hair cut. The problem for a\nbarbershop, as for any retail establishment, is (b). A barbershop serves\ncustomers in person, and few will travel far for a haircut. And even if they\ndid, the barbershop couldn't accomodate them. [1]  \n  \nWriting software is a great way to solve (b), but you can still end up\nconstrained in (a). If you write software to teach Tibetan to Hungarian\nspeakers, you'll be able to reach most of the people who want it, but there\nwon't be many of them. If you make software to teach English to Chinese\nspeakers, however, you're in startup territory.  \n  \nMost businesses are tightly constrained in (a) or (b). The distinctive feature\nof successful startups is that they're not.  \n  \n**Ideas**  \n  \nIt might seem that it would always be better to start a startup than an\nordinary business. If you're going to start a company, why not start the type\nwith the most potential? The catch is that this is a (fairly) efficient\nmarket. If you write software to teach Tibetan to Hungarians, you won't have\nmuch competition. If you write software to teach English to Chinese speakers,\nyou'll face ferocious competition, precisely because that's such a larger\nprize. [2]  \n  \nThe constraints that limit ordinary companies also protect them. That's the\ntradeoff. If you start a barbershop, you only have to compete with other local\nbarbers. If you start a search engine you have to compete with the whole\nworld.  \n  \nThe most important thing that the constraints on a normal business protect it\nfrom is not competition, however, but the difficulty of coming up with new\nideas. If you open a bar in a particular neighborhood, as well as limiting\nyour potential and protecting you from competitors, that geographic constraint\nalso helps define your company. Bar + neighborhood is a sufficient idea for a\nsmall business. Similarly for companies constrained in (a). Your niche both\nprotects and defines you.  \n  \nWhereas if you want to start a startup, you're probably going to have to think\nof something fairly novel. A startup has to make something it can deliver to a\nlarge market, and ideas of that type are so valuable that all the obvious ones\nare already taken.  \n  \nThat space of ideas has been so thoroughly picked over that a startup\ngenerally has to work on something everyone else has overlooked. I was going\nto write that one has to make a conscious effort to find ideas everyone else\nhas overlooked. But that's not how most startups get started. Usually\nsuccessful startups happen because the founders are sufficiently different\nfrom other people that ideas few others can see seem obvious to them. Perhaps\nlater they step back and notice they've found an idea in everyone else's blind\nspot, and from that point make a deliberate effort to stay there. [3] But at\nthe moment when successful startups get started, much of the innovation is\nunconscious.  \n  \nWhat's different about successful founders is that they can see different\nproblems. It's a particularly good combination both to be good at technology\nand to face problems that can be solved by it, because technology changes so\nrapidly that formerly bad ideas often become good without anyone noticing.\nSteve Wozniak's problem was that he wanted his own computer. That was an\nunusual problem to have in 1975. But technological change was about to make it\na much more common one. Because he not only wanted a computer but knew how to\nbuild them, Wozniak was able to make himself one. And the problem he solved\nfor himself became one that Apple solved for millions of people in the coming\nyears. But by the time it was obvious to ordinary people that this was a big\nmarket, Apple was already established.  \n  \nGoogle has similar origins. Larry Page and Sergey Brin wanted to search the\nweb. But unlike most people they had the technical expertise both to notice\nthat existing search engines were not as good as they could be, and to know\nhow to improve them. Over the next few years their problem became everyone's\nproblem, as the web grew to a size where you didn't have to be a picky search\nexpert to notice the old algorithms weren't good enough. But as happened with\nApple, by the time everyone else realized how important search was, Google was\nentrenched.  \n  \nThat's one connection between startup ideas and technology. Rapid change in\none area uncovers big, soluble problems in other areas. Sometimes the changes\nare advances, and what they change is solubility. That was the kind of change\nthat yielded Apple; advances in chip technology finally let Steve Wozniak\ndesign a computer he could afford. But in Google's case the most important\nchange was the growth of the web. What changed there was not solubility but\nbigness.  \n  \nThe other connection between startups and technology is that startups create\nnew ways of doing things, and new ways of doing things are, in the broader\nsense of the word, new technology. When a startup both begins with an idea\nexposed by technological change and makes a product consisting of technology\nin the narrower sense (what used to be called \"high technology\"), it's easy to\nconflate the two. But the two connections are distinct and in principle one\ncould start a startup that was neither driven by technological change, nor\nwhose product consisted of technology except in the broader sense. [4]  \n  \n**Rate**  \n  \nHow fast does a company have to grow to be considered a startup? There's no\nprecise answer to that. \"Startup\" is a pole, not a threshold. Starting one is\nat first no more than a declaration of one's ambitions. You're committing not\njust to starting a company, but to starting a fast growing one, and you're\nthus committing to search for one of the rare ideas of that type. But at first\nyou have no more than commitment. Starting a startup is like being an actor in\nthat respect. \"Actor\" too is a pole rather than a threshold. At the beginning\nof his career, an actor is a waiter who goes to auditions. Getting work makes\nhim a successful actor, but he doesn't only become an actor when he's\nsuccessful.  \n  \nSo the real question is not what growth rate makes a company a startup, but\nwhat growth rate successful startups tend to have. For founders that's more\nthan a theoretical question, because it's equivalent to asking if they're on\nthe right path.  \n  \nThe growth of a successful startup usually has three phases:\n\n  1. There's an initial period of slow or no growth while the startup tries to figure out what it's doing.  \n  \n\n  2. As the startup figures out how to make something lots of people want and how to reach those people, there's a period of rapid growth.  \n  \n\n  3. Eventually a successful startup will grow into a big company. Growth will slow, partly due to internal limits and partly because the company is starting to bump up against the limits of the markets it serves. [5]\n\nTogether these three phases produce an S-curve. The phase whose growth defines\nthe startup is the second one, the ascent. Its length and slope determine how\nbig the company will be.  \n  \nThe slope is the company's growth rate. If there's one number every founder\nshould always know, it's the company's growth rate. That's the measure of a\nstartup. If you don't know that number, you don't even know if you're doing\nwell or badly.  \n  \nWhen I first meet founders and ask what their growth rate is, sometimes they\ntell me \"we get about a hundred new customers a month.\" That's not a rate.\nWhat matters is not the absolute number of new customers, but the ratio of new\ncustomers to existing ones. If you're really getting a constant number of new\ncustomers every month, you're in trouble, because that means your growth rate\nis decreasing.  \n  \nDuring Y Combinator we measure growth rate per week, partly because there is\nso little time before Demo Day, and partly because startups early on need\nfrequent feedback from their users to tweak what they're doing. [6]  \n  \nA good growth rate during YC is 5-7% a week. If you can hit 10% a week you're\ndoing exceptionally well. If you can only manage 1%, it's a sign you haven't\nyet figured out what you're doing.  \n  \nThe best thing to measure the growth rate of is revenue. The next best, for\nstartups that aren't charging initially, is active users. That's a reasonable\nproxy for revenue growth because whenever the startup does start trying to\nmake money, their revenues will probably be a constant multiple of active\nusers. [7]  \n  \n**Compass**  \n  \nWe usually advise startups to pick a growth rate they think they can hit, and\nthen just try to hit it every week. The key word here is \"just.\" If they\ndecide to grow at 7% a week and they hit that number, they're successful for\nthat week. There's nothing more they need to do. But if they don't hit it,\nthey've failed in the only thing that mattered, and should be correspondingly\nalarmed.  \n  \nProgrammers will recognize what we're doing here. We're turning starting a\nstartup into an optimization problem. And anyone who has tried optimizing code\nknows how wonderfully effective that sort of narrow focus can be. Optimizing\ncode means taking an existing program and changing it to use less of\nsomething, usually time or memory. You don't have to think about what the\nprogram should do, just make it faster. For most programmers this is very\nsatisfying work. The narrow focus makes it a sort of puzzle, and you're\ngenerally surprised how fast you can solve it.  \n  \nFocusing on hitting a growth rate reduces the otherwise bewilderingly\nmultifarious problem of starting a startup to a single problem. You can use\nthat target growth rate to make all your decisions for you; anything that gets\nyou the growth you need is ipso facto right. Should you spend two days at a\nconference? Should you hire another programmer? Should you focus more on\nmarketing? Should you spend time courting some big customer? Should you add x\nfeature? Whatever gets you your target growth rate. [8]  \n  \nJudging yourself by weekly growth doesn't mean you can look no more than a\nweek ahead. Once you experience the pain of missing your target one week (it\nwas the only thing that mattered, and you failed at it), you become interested\nin anything that could spare you such pain in the future. So you'll be willing\nfor example to hire another programmer, who won't contribute to this week's\ngrowth but perhaps in a month will have implemented some new feature that will\nget you more users. But only if (a) the distraction of hiring someone won't\nmake you miss your numbers in the short term, and (b) you're sufficiently\nworried about whether you can keep hitting your numbers without hiring someone\nnew.  \n  \nIt's not that you don't think about the future, just that you think about it\nno more than necessary.  \n  \nIn theory this sort of hill-climbing could get a startup into trouble. They\ncould end up on a local maximum. But in practice that never happens. Having to\nhit a growth number every week forces founders to act, and acting versus not\nacting is the high bit of succeeding. Nine times out of ten, sitting around\nstrategizing is just a form of procrastination. Whereas founders' intuitions\nabout which hill to climb are usually better than they realize. Plus the\nmaxima in the space of startup ideas are not spiky and isolated. Most fairly\ngood ideas are adjacent to even better ones.  \n  \nThe fascinating thing about optimizing for growth is that it can actually\ndiscover startup ideas. You can use the need for growth as a form of\nevolutionary pressure. If you start out with some initial plan and modify it\nas necessary to keep hitting, say, 10% weekly growth, you may end up with a\nquite different company than you meant to start. But anything that grows\nconsistently at 10% a week is almost certainly a better idea than you started\nwith.  \n  \nThere's a parallel here to small businesses. Just as the constraint of being\nlocated in a particular neighborhood helps define a bar, the constraint of\ngrowing at a certain rate can help define a startup.  \n  \nYou'll generally do best to follow that constraint wherever it leads rather\nthan being influenced by some initial vision, just as a scientist is better\noff following the truth wherever it leads rather than being influenced by what\nhe wishes were the case. When Richard Feynman said that the imagination of\nnature was greater than the imagination of man, he meant that if you just keep\nfollowing the truth you'll discover cooler things than you could ever have\nmade up. For startups, growth is a constraint much like truth. Every\nsuccessful startup is at least partly a product of the imagination of growth.\n[9]  \n  \n**Value**  \n  \nIt's hard to find something that grows consistently at several percent a week,\nbut if you do you may have found something surprisingly valuable. If we\nproject forward we see why.  \n  \nweeklyyearly  \n1%1.7x  \n2%2.8x  \n5%12.6x  \n7%33.7x  \n10%142.0x  \n  \nA company that grows at 1% a week will grow 1.7x a year, whereas a company\nthat grows at 5% a week will grow 12.6x. A company making $1000 a month (a\ntypical number early in YC) and growing at 1% a week will 4 years later be\nmaking $7900 a month, which is less than a good programmer makes in salary in\nSilicon Valley. A startup that grows at 5% a week will in 4 years be making\n$25 million a month. [10]  \n  \nOur ancestors must rarely have encountered cases of exponential growth,\nbecause our intuitions are no guide here. What happens to fast growing\nstartups tends to surprise even the founders.  \n  \nSmall variations in growth rate produce qualitatively different outcomes.\nThat's why there's a separate word for startups, and why startups do things\nthat ordinary companies don't, like raising money and getting acquired. And,\nstrangely enough, it's also why they fail so frequently.  \n  \nConsidering how valuable a successful startup can become, anyone familiar with\nthe concept of expected value would be surprised if the failure rate weren't\nhigh. If a successful startup could make a founder $100 million, then even if\nthe chance of succeeding were only 1%, the expected value of starting one\nwould be $1 million. And the probability of a group of sufficiently smart and\ndetermined founders succeeding on that scale might be significantly over 1%.\nFor the right people \u2014 e.g. the young Bill Gates \u2014 the probability might be\n20% or even 50%. So it's not surprising that so many want to take a shot at\nit. In an efficient market, the number of failed startups should be\nproportionate to the size of the successes. And since the latter is huge the\nformer should be too. [11]  \n  \nWhat this means is that at any given time, the great majority of startups will\nbe working on something that's never going to go anywhere, and yet glorifying\ntheir doomed efforts with the grandiose title of \"startup.\"  \n  \nThis doesn't bother me. It's the same with other high-beta vocations, like\nbeing an actor or a novelist. I've long since gotten used to it. But it seems\nto bother a lot of people, particularly those who've started ordinary\nbusinesses. Many are annoyed that these so-called startups get all the\nattention, when hardly any of them will amount to anything.  \n  \nIf they stepped back and looked at the whole picture they might be less\nindignant. The mistake they're making is that by basing their opinions on\nanecdotal evidence they're implicitly judging by the median rather than the\naverage. If you judge by the median startup, the whole concept of a startup\nseems like a fraud. You have to invent a bubble to explain why founders want\nto start them or investors want to fund them. But it's a mistake to use the\nmedian in a domain with so much variation. If you look at the average outcome\nrather than the median, you can understand why investors like them, and why,\nif they aren't median people, it's a rational choice for founders to start\nthem.  \n  \n**Deals**  \n  \nWhy do investors like startups so much? Why are they so hot to invest in\nphoto-sharing apps, rather than solid money-making businesses? Not only for\nthe obvious reason.  \n  \nThe test of any investment is the ratio of return to risk. Startups pass that\ntest because although they're appallingly risky, the returns when they do\nsucceed are so high. But that's not the only reason investors like startups.\nAn ordinary slower-growing business might have just as good a ratio of return\nto risk, if both were lower. So why are VCs interested only in high-growth\ncompanies? The reason is that they get paid by getting their capital back,\nideally after the startup IPOs, or failing that when it's acquired.  \n  \nThe other way to get returns from an investment is in the form of dividends.\nWhy isn't there a parallel VC industry that invests in ordinary companies in\nreturn for a percentage of their profits? Because it's too easy for people who\ncontrol a private company to funnel its revenues to themselves (e.g. by buying\noverpriced components from a supplier they control) while making it look like\nthe company is making little profit. Anyone who invested in private companies\nin return for dividends would have to pay close attention to their books.  \n  \nThe reason VCs like to invest in startups is not simply the returns, but also\nbecause such investments are so easy to oversee. The founders can't enrich\nthemselves without also enriching the investors. [12]  \n  \nWhy do founders want to take the VCs' money? Growth, again. The constraint\nbetween good ideas and growth operates in both directions. It's not merely\nthat you need a scalable idea to grow. If you have such an idea and don't grow\nfast enough, competitors will. Growing too slowly is particularly dangerous in\na business with network effects, which the best startups usually have to some\ndegree.  \n  \nAlmost every company needs some amount of funding to get started. But startups\noften raise money even when they are or could be profitable. It might seem\nfoolish to sell stock in a profitable company for less than you think it will\nlater be worth, but it's no more foolish than buying insurance. Fundamentally\nthat's how the most successful startups view fundraising. They could grow the\ncompany on its own revenues, but the extra money and help supplied by VCs will\nlet them grow even faster. Raising money lets you _choose_ your growth rate.  \n  \nMoney to grow faster is always at the command of the most successful startups,\nbecause the VCs need them more than they need the VCs. A profitable startup\ncould if it wanted just grow on its own revenues. Growing slower might be\nslightly dangerous, but chances are it wouldn't kill them. Whereas VCs need to\ninvest in startups, and in particular the most successful startups, or they'll\nbe out of business. Which means that any sufficiently promising startup will\nbe offered money on terms they'd be crazy to refuse. And yet because of the\nscale of the successes in the startup business, VCs can still make money from\nsuch investments. You'd have to be crazy to believe your company was going to\nbecome as valuable as a high growth rate can make it, but some do.  \n  \nPretty much every successful startup will get acquisition offers too. Why?\nWhat is it about startups that makes other companies want to buy them? [13]  \n  \nFundamentally the same thing that makes everyone else want the stock of\nsuccessful startups: a rapidly growing company is valuable. It's a good thing\neBay bought Paypal, for example, because Paypal is now responsible for 43% of\ntheir sales and probably more of their growth.  \n  \nBut acquirers have an additional reason to want startups. A rapidly growing\ncompany is not merely valuable, but dangerous. If it keeps expanding, it might\nexpand into the acquirer's own territory. Most product acquisitions have some\ncomponent of fear. Even if an acquirer isn't threatened by the startup itself,\nthey might be alarmed at the thought of what a competitor could do with it.\nAnd because startups are in this sense doubly valuable to acquirers, acquirers\nwill often pay more than an ordinary investor would. [14]  \n  \n**Understand**  \n  \nThe combination of founders, investors, and acquirers forms a natural\necosystem. It works so well that those who don't understand it are driven to\ninvent conspiracy theories to explain how neatly things sometimes turn out.\nJust as our ancestors did to explain the apparently too neat workings of the\nnatural world. But there is no secret cabal making it all work.  \n  \nIf you start from the mistaken assumption that Instagram was worthless, you\nhave to invent a secret boss to force Mark Zuckerberg to buy it. To anyone who\nknows Mark Zuckerberg, that is the reductio ad absurdum of the initial\nassumption. The reason he bought Instagram was that it was valuable and\ndangerous, and what made it so was growth.  \n  \nIf you want to understand startups, understand growth. Growth drives\neverything in this world. Growth is why startups usually work on technology \u2014\nbecause ideas for fast growing companies are so rare that the best way to find\nnew ones is to discover those recently made viable by change, and technology\nis the best source of rapid change. Growth is why it's a rational choice\neconomically for so many founders to try starting a startup: growth makes the\nsuccessful companies so valuable that the expected value is high even though\nthe risk is too. Growth is why VCs want to invest in startups: not just\nbecause the returns are high but also because generating returns from capital\ngains is easier to manage than generating returns from dividends. Growth\nexplains why the most successful startups take VC money even if they don't\nneed to: it lets them choose their growth rate. And growth explains why\nsuccessful startups almost invariably get acquisition offers. To acquirers a\nfast-growing company is not merely valuable but dangerous too.  \n  \nIt's not just that if you want to succeed in some domain, you have to\nunderstand the forces driving it. Understanding growth is what starting a\nstartup _consists_ of. What you're really doing (and to the dismay of some\nobservers, all you're really doing) when you start a startup is committing to\nsolve a harder type of problem than ordinary businesses do. You're committing\nto search for one of the rare ideas that generates rapid growth. Because these\nideas are so valuable, finding one is hard. The startup is the embodiment of\nyour discoveries so far. Starting a startup is thus very much like deciding to\nbe a research scientist: you're not committing to solve any specific problem;\nyou don't know for sure which problems are soluble; but you're committing to\ntry to discover something no one knew before. A startup founder is in effect\nan economic research scientist. Most don't discover anything that remarkable,\nbut some discover relativity.  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] Strictly speaking it's not lots of customers you need but a big market,\nmeaning a high product of number of customers times how much they'll pay. But\nit's dangerous to have too few customers even if they pay a lot, or the power\nthat individual customers have over you could turn you into a de facto\nconsulting firm. So whatever market you're in, you'll usually do best to err\non the side of making the broadest type of product for it.  \n  \n[2] One year at Startup School David Heinemeier Hansson encouraged programmers\nwho wanted to start businesses to use a restaurant as a model. What he meant,\nI believe, is that it's fine to start software companies constrained in (a) in\nthe same way a restaurant is constrained in (b). I agree. Most people should\nnot try to start startups.  \n  \n[3] That sort of stepping back is one of the things we focus on at Y\nCombinator. It's common for founders to have discovered something intuitively\nwithout understanding all its implications. That's probably true of the\nbiggest discoveries in any field.  \n  \n[4] I got it wrong in [\"How to Make Wealth\"](wealth.html) when I said that a\nstartup was a small company that takes on a hard technical problem. That is\nthe most common recipe but not the only one.  \n  \n[5] In principle companies aren't limited by the size of the markets they\nserve, because they could just expand into new markets. But there seem to be\nlimits on the ability of big companies to do that. Which means the slowdown\nthat comes from bumping up against the limits of one's markets is ultimately\njust another way in which internal limits are expressed.  \n  \nIt may be that some of these limits could be overcome by changing the shape of\nthe organization \u2014 specifically by sharding it.  \n  \n[6] This is, obviously, only for startups that have already launched or can\nlaunch during YC. A startup building a new database will probably not do that.\nOn the other hand, launching something small and then using growth rate as\nevolutionary pressure is such a valuable technique that any company that could\nstart this way probably should.  \n  \n[7] If the startup is taking the Facebook/Twitter route and building something\nthey hope will be very popular but from which they don't yet have a definite\nplan to make money, the growth rate has to be higher, even though it's a proxy\nfor revenue growth, because such companies need huge numbers of users to\nsucceed at all.  \n  \nBeware too of the edge case where something spreads rapidly but the churn is\nhigh as well, so that you have good net growth till you run through all the\npotential users, at which point it suddenly stops.  \n  \n[8] Within YC when we say it's ipso facto right to do whatever gets you\ngrowth, it's implicit that this excludes trickery like buying users for more\nthan their lifetime value, counting users as active when they're really not,\nbleeding out invites at a regularly increasing rate to manufacture a perfect\ngrowth curve, etc. Even if you were able to fool investors with such tricks,\nyou'd ultimately be hurting yourself, because you're throwing off your own\ncompass.  \n  \n[9] Which is why it's such a dangerous mistake to believe that successful\nstartups are simply the embodiment of some brilliant initial idea. What you're\nlooking for initially is not so much a great idea as an idea that could evolve\ninto a great one. The danger is that promising ideas are not merely blurry\nversions of great ones. They're often different in kind, because the early\nadopters you evolve the idea upon have different needs from the rest of the\nmarket. For example, the idea that evolves into Facebook isn't merely a subset\nof Facebook; the idea that evolves into Facebook is a site for Harvard\nundergrads.  \n  \n[10] What if a company grew at 1.7x a year for a really long time? Could it\nnot grow just as big as any successful startup? In principle yes, of course.\nIf our hypothetical company making $1000 a month grew at 1% a week for 19\nyears, it would grow as big as a company growing at 5% a week for 4 years. But\nwhile such trajectories may be common in, say, real estate development, you\ndon't see them much in the technology business. In technology, companies that\ngrow slowly tend not to grow as big.  \n  \n[11] Any expected value calculation varies from person to person depending on\ntheir utility function for money. I.e. the first million is worth more to most\npeople than subsequent millions. How much more depends on the person. For\nfounders who are younger or more ambitious the utility function is flatter.\nWhich is probably part of the reason the founders of the most successful\nstartups of all tend to be on the young side.  \n  \n[12] More precisely, this is the case in the biggest winners, which is where\nall the returns come from. A startup founder could pull the same trick of\nenriching himself at the company's expense by selling them overpriced\ncomponents. But it wouldn't be worth it for the founders of Google to do that.\nOnly founders of failing startups would even be tempted, but those are\nwriteoffs from the VCs' point of view anyway.  \n  \n[13] Acquisitions fall into two categories: those where the acquirer wants the\nbusiness, and those where the acquirer just wants the employees. The latter\ntype is sometimes called an HR acquisition. Though nominally acquisitions and\nsometimes on a scale that has a significant effect on the expected value\ncalculation for potential founders, HR acquisitions are viewed by acquirers as\nmore akin to hiring bonuses.  \n  \n[14] I once explained this to some founders who had recently arrived from\nRussia. They found it novel that if you threatened a company they'd pay a\npremium for you. \"In Russia they just kill you,\" they said, and they were only\npartly joking. Economically, the fact that established companies can't simply\neliminate new competitors may be one of the most valuable aspects of the rule\nof law. And so to the extent we see incumbents suppressing competitors via\nregulations or patent suits, we should worry, not because it's a departure\nfrom the rule of law per se but from what the rule of law is aiming at.  \n  \n**Thanks** to Sam Altman, Marc Andreessen, Paul Buchheit, Patrick Collison,\nJessica Livingston, Geoff Ralston, and Harj Taggar for reading drafts of this.  \n  \n\nApril 2007  \n  \n _(This essay is derived from a keynote talk at the 2007 ASES Summit at\nStanford.)_  \n  \nThe world of investors is a foreign one to most hackers\u2014partly because\ninvestors are so unlike hackers, and partly because they tend to operate in\nsecret. I've been dealing with this world for many years, both as a founder\nand an investor, and I still don't fully understand it.  \n  \nIn this essay I'm going to list some of the more surprising things I've\nlearned about investors. Some I only learned in the past year.  \n  \nTeaching hackers how to deal with investors is probably the second most\nimportant thing we do at Y Combinator. The most important thing for a startup\nis to make something good. But everyone knows that's important. The dangerous\nthing about investors is that hackers don't know how little they know about\nthis strange world.  \n  \n**1\\. The investors are what make a startup hub.**  \n  \nAbout a year ago I tried to figure out what you'd need to reproduce [Silicon\nValley](siliconvalley.html). I decided the critical ingredients were rich\npeople and nerds\u2014investors and founders. People are all you need to make\ntechnology, and all the other people will move.  \n  \nIf I had to narrow that down, I'd say investors are the limiting factor. Not\nbecause they contribute more to the startup, but simply because they're least\nwilling to move. They're rich. They're not going to move to Albuquerque just\nbecause there are some smart hackers there they could invest in. Whereas\nhackers will move to the Bay Area to find investors.  \n  \n**2\\. Angel investors are the most critical.**  \n  \nThere are several types of investors. The two main categories are angels and\nVCs: VCs invest other people's money, and angels invest their own.  \n  \nThough they're less well known, the angel investors are probably the more\ncritical ingredient in creating a silicon valley. Most companies that VCs\ninvest in would never have made it that far if angels hadn't invested first.\nVCs say between half and three quarters of companies that raise series A\nrounds have taken some outside investment already. [1]  \n  \nAngels are willing to fund riskier projects than VCs. They also give valuable\nadvice, because (unlike VCs) many have been startup founders themselves.  \n  \nGoogle's story shows the key role angels play. A lot of people know Google\nraised money from Kleiner and Sequoia. What most don't realize is how late.\nThat VC round was a series B round; the premoney valuation was $75 million.\nGoogle was already a successful company at that point. Really, Google was\nfunded with angel money.  \n  \nIt may seem odd that the canonical Silicon Valley startup was funded by\nangels, but this is not so surprising. Risk is always proportionate to reward.\nSo the most successful startup of all is likely to have seemed an extremely\nrisky bet at first, and that is exactly the kind VCs won't touch.  \n  \nWhere do angel investors come from? From other startups. So startup hubs like\nSilicon Valley benefit from something like the marketplace effect, but shifted\nin time: startups are there because startups were there.  \n  \n**3\\. Angels don't like publicity.**  \n  \nIf angels are so important, why do we hear more about VCs? Because VCs like\npublicity. They need to market themselves to the investors who are their\n\"customers\"\u2014the endowments and pension funds and rich families whose money\nthey invest\u2014and also to founders who might come to them for funding.  \n  \nAngels don't need to market themselves to investors because they invest their\nown money. Nor do they want to market themselves to founders: they don't want\nrandom people pestering them with business plans. Actually, neither do VCs.\nBoth angels and VCs get deals almost exclusively through personal\nintroductions. [2]  \n  \nThe reason VCs want a strong brand is not to draw in more business plans over\nthe transom, but so they win deals when competing against other VCs. Whereas\nangels are rarely in direct competition, because (a) they do fewer deals, (b)\nthey're happy to split them, and (c) they invest at a point where the stream\nis broader.  \n  \n**4\\. Most investors, especially VCs, are not like founders.**  \n  \nSome angels are, or were, hackers. But most VCs are a different type of\npeople: they're dealmakers.  \n  \nIf you're a hacker, here's a thought experiment you can run to understand why\nthere are basically no hacker VCs: How would you like a job where you never\ngot to make anything, but instead spent all your time listening to other\npeople pitch (mostly terrible) projects, deciding whether to fund them, and\nsitting on their boards if you did? That would not be fun for most hackers.\nHackers like to make things. This would be like being an administrator.  \n  \nBecause most VCs are a different species of people from founders, it's hard to\nknow what they're thinking. If you're a hacker, the last time you had to deal\nwith these guys was in high school. Maybe in college you walked past their\nfraternity on your way to the lab. But don't underestimate them. They're as\nexpert in their world as you are in yours. What they're good at is reading\npeople, and making deals work to their advantage. Think twice before you try\nto beat them at that.  \n  \n**5\\. Most investors are momentum investors.**  \n  \nBecause most investors are dealmakers rather than technology people, they\ngenerally don't understand what you're doing. I knew as a founder that most\nVCs didn't get technology. I also knew some made a lot of money. And yet it\nnever occurred to me till recently to put those two ideas together and ask\n\"How can VCs make money by investing in stuff they don't understand?\"  \n  \nThe answer is that they're like momentum investors. You can (or could once)\nmake a lot of money by noticing sudden changes in stock prices. When a stock\njumps upward, you buy, and when it suddenly drops, you sell. In effect you're\ninsider trading, without knowing what you know. You just know someone knows\nsomething, and that's making the stock move.  \n  \nThis is how most venture investors operate. They don't try to look at\nsomething and predict whether it will take off. They win by noticing that\nsomething _is_ taking off a little sooner than everyone else. That generates\nalmost as good returns as actually being able to pick winners. They may have\nto pay a little more than they would if they got in at the very beginning, but\nonly a little.  \n  \nInvestors always say what they really care about is the team. Actually what\nthey care most about is your traffic, then what other investors think, then\nthe team. If you don't yet have any traffic, they fall back on number 2, what\nother investors think. And this, as you can imagine, produces wild\noscillations in the \"stock price\" of a startup. One week everyone wants you,\nand they're begging not to be cut out of the deal. But all it takes is for one\nbig investor to cool on you, and the next week no one will return your phone\ncalls. We regularly have startups go from hot to cold or cold to hot in a\nmatter of days, and literally nothing has changed.  \n  \nThere are two ways to deal with this phenomenon. If you're feeling really\nconfident, you can try to ride it. You can start by asking a comparatively\nlowly VC for a small amount of money, and then after generating interest\nthere, ask more prestigious VCs for larger amounts, stirring up a crescendo of\nbuzz, and then \"sell\" at the top. This is extremely risky, and takes months\neven if you succeed. I wouldn't try it myself. My advice is to err on the side\nof safety: when someone offers you a decent deal, just take it and get on with\nbuilding the company. Startups win or lose based on the quality of their\nproduct, not the quality of their funding deals.  \n  \n**6\\. Most investors are looking for big hits.**  \n  \nVenture investors like companies that could go public. That's where the big\nreturns are. They know the odds of any individual startup going public are\nsmall, but they want to invest in those that at least have a _chance_ of going\npublic.  \n  \nCurrently the way VCs seem to operate is to invest in a bunch of companies,\nmost of which fail, and one of which is Google. Those few big wins compensate\nfor losses on their other investments. What this means is that most VCs will\nonly invest in you if you're a potential Google. They don't care about\ncompanies that are a safe bet to be acquired for $20 million. There needs to\nbe a chance, however small, of the company becoming really big.  \n  \nAngels are different in this respect. They're happy to invest in a company\nwhere the most likely outcome is a $20 million acquisition if they can do it\nat a low enough valuation. But of course they like companies that could go\npublic too. So having an ambitious long-term plan pleases everyone.  \n  \nIf you take VC money, you have to mean it, because the structure of VC deals\nprevents early acquisitions. If you take VC money, they won't let you sell\nearly.  \n  \n**7\\. VCs want to invest large amounts.**  \n  \nThe fact that they're running investment funds makes VCs want to invest large\namounts. A typical VC fund is now hundreds of millions of dollars. If $400\nmillion has to be invested by 10 partners, they have to invest $40 million\neach. VCs usually sit on the boards of companies they fund. If the average\ndeal size was $1 million, each partner would have to sit on 40 boards, which\nwould not be fun. So they prefer bigger deals, where they can put a lot of\nmoney to work at once.  \n  \nVCs don't regard you as a bargain if you don't need a lot of money. That may\neven make you less attractive, because it means their investment creates less\nof a barrier to entry for competitors.  \n  \nAngels are in a different position because they're investing their own money.\nThey're happy to invest small amounts\u2014sometimes as little as $20,000\u2014as long\nas the potential returns look good enough. So if you're doing something\ninexpensive, go to angels.  \n  \n**8\\. Valuations are fiction.**  \n  \nVCs admit that valuations are an artifact. They decide how much money you need\nand how much of the company they want, and those two constraints yield a\nvaluation.  \n  \nValuations increase as the size of the investment does. A company that an\nangel is willing to put $50,000 into at a valuation of a million can't take $6\nmillion from VCs at that valuation. That would leave the founders less than a\nseventh of the company between them (since the option pool would also come out\nof that seventh). Most VCs wouldn't want that, which is why you never hear of\ndeals where a VC invests $6 million at a premoney valuation of $1 million.  \n  \nIf valuations change depending on the amount invested, that shows how far they\nare from reflecting any kind of value of the company.  \n  \nSince valuations are made up, founders shouldn't care too much about them.\nThat's not the part to focus on. In fact, a high valuation can be a bad thing.\nIf you take funding at a premoney valuation of $10 million, you won't be\nselling the company for 20. You'll have to sell for over 50 for the VCs to get\neven a 5x return, which is low to them. More likely they'll want you to hold\nout for 100. But needing to get a high price decreases the chance of getting\nbought at all; many companies can buy you for $10 million, but only a handful\nfor 100. And since a startup is like a pass/fail course for the founders, what\nyou want to optimize is your chance of a good outcome, not the percentage of\nthe company you keep.  \n  \nSo why do founders chase high valuations? They're tricked by misplaced\nambition. They feel they've achieved more if they get a higher valuation. They\nusually know other founders, and if they get a higher valuation they can say\n\"mine is bigger than yours.\" But funding is not the real test. The real test\nis the final outcome for the founder, and getting too high a valuation may\njust make a good outcome less likely.  \n  \nThe one advantage of a high valuation is that you get less dilution. But there\nis another less sexy way to achieve that: just take less money.  \n  \n**9\\. Investors look for founders like the current stars.**  \n  \nTen years ago investors were looking for the next Bill Gates. This was a\nmistake, because Microsoft was a very anomalous startup. They started almost\nas a contract programming operation, and the reason they became huge was that\nIBM happened to drop the PC standard in their lap.  \n  \nNow all the VCs are looking for the next Larry and Sergey. This is a good\ntrend, because Larry and Sergey are closer to the ideal startup founders.  \n  \nHistorically investors thought it was important for a founder to be an expert\nin business. So they were willing to fund teams of MBAs who planned to use the\nmoney to pay programmers to build their product for them. This is like funding\nSteve Ballmer in the hope that the programmer he'll hire is Bill Gates\u2014kind of\nbackward, as the events of the Bubble showed. Now most VCs know they should be\nfunding technical guys. This is more pronounced among the very top funds; the\nlamer ones still want to fund MBAs.  \n  \nIf you're a hacker, it's good news that investors are looking for Larry and\nSergey. The bad news is, the only investors who can do it right are the ones\nwho knew them when they were a couple of CS grad students, not the confident\nmedia stars they are today. What investors still don't get is how clueless and\ntentative great founders can seem at the very beginning.  \n  \n**10\\. The contribution of investors tends to be underestimated.**  \n  \nInvestors do more for startups than give them money. They're helpful in doing\ndeals and arranging introductions, and some of the smarter ones, particularly\nangels, can give good advice about the product.  \n  \nIn fact, I'd say what separates the great investors from the mediocre ones is\nthe quality of their advice. Most investors give advice, but the top ones give\n_good_ advice.  \n  \nWhatever help investors give a startup tends to be underestimated. It's to\neveryone's advantage to let the world think the founders thought of\neverything. The goal of the investors is for the company to become valuable,\nand the company seems more valuable if it seems like all the good ideas came\nfrom within.  \n  \nThis trend is compounded by the obsession that the press has with founders. In\na company founded by two people, 10% of the ideas might come from the first\nguy they hire. Arguably they've done a bad job of hiring otherwise. And yet\nthis guy will be almost entirely overlooked by the press.  \n  \nI say this as a founder: the contribution of founders is always overestimated.\nThe danger here is that new founders, looking at existing founders, will think\nthat they're supermen that one couldn't possibly equal oneself. Actually they\nhave a hundred different types of support people just offscreen making the\nwhole show possible. [3]  \n  \n**11\\. VCs are afraid of looking bad.**  \n  \nI've been very surprised to discover how timid most VCs are. They seem to be\nafraid of looking bad to their partners, and perhaps also to the limited\npartners\u2014the people whose money they invest.  \n  \nYou can measure this fear in how much less risk VCs are willing to take. You\ncan tell they won't make investments for their fund that they might be willing\nto make themselves as angels. Though it's not quite accurate to say that VCs\nare less willing to take risks. They're less willing to do things that might\nlook bad. That's not the same thing.  \n  \nFor example, most VCs would be very reluctant to invest in a startup founded\nby a pair of 18 year old hackers, no matter how brilliant, because if the\nstartup failed their partners could turn on them and say \"What, you invested\n$x million of our money in a pair of 18 year olds?\" Whereas if a VC invested\nin a startup founded by three former banking executives in their 40s who\nplanned to outsource their product development\u2014which to my mind is actually a\nlot riskier than investing in a pair of really smart 18 year olds\u2014he couldn't\nbe faulted, if it failed, for making such an apparently prudent investment.  \n  \nAs a friend of mine said, \"Most VCs can't do anything that would sound bad to\nthe kind of doofuses who run pension funds.\" Angels can take greater risks\nbecause they don't have to answer to anyone.  \n  \n**12\\. Being turned down by investors doesn't mean much.**  \n  \nSome founders are quite dejected when they get turned down by investors. They\nshouldn't take it so much to heart. To start with, investors are often wrong.\nIt's hard to think of a successful startup that wasn't turned down by\ninvestors at some point. Lots of VCs rejected Google. So obviously the\nreaction of investors is not a very meaningful test.  \n  \nInvestors will often reject you for what seem to be superficial reasons. I\nread of one VC who [turned\ndown](http://ricksegal.typepad.com/pmv/2007/02/a_fatal_paper_c.html) a startup\nsimply because they'd given away so many little bits of stock that the deal\nrequired too many signatures to close. [4] The reason investors can get away\nwith this is that they see so many deals. It doesn't matter if they\nunderestimate you because of some surface imperfection, because the next best\ndeal will be [almost as good](judgement.html). Imagine picking out apples at a\ngrocery store. You grab one with a little bruise. Maybe it's just a surface\nbruise, but why even bother checking when there are so many other unbruised\napples to choose from?  \n  \nInvestors would be the first to admit they're often wrong. So when you get\nrejected by investors, don't think \"we suck,\" but instead ask \"do we suck?\"\nRejection is a question, not an answer.  \n  \n**13\\. Investors are emotional.**  \n  \nI've been surprised to discover how emotional investors can be. You'd expect\nthem to be cold and calculating, or at least businesslike, but often they're\nnot. I'm not sure if it's their position of power that makes them this way, or\nthe large sums of money involved, but investment negotiations can easily turn\npersonal. If you offend investors, they'll leave in a huff.  \n  \nA while ago an eminent VC firm offered a series A round to a startup we'd seed\nfunded. Then they heard a rival VC firm was also interested. They were so\nafraid that they'd be rejected in favor of this other firm that they gave the\nstartup what's known as an \"exploding termsheet.\" They had, I think, 24 hours\nto say yes or no, or the deal was off. Exploding termsheets are a somewhat\ndubious device, but not uncommon. What surprised me was their reaction when I\ncalled to talk about it. I asked if they'd still be interested in the startup\nif the rival VC didn't end up making an offer, and they said no. What rational\nbasis could they have had for saying that? If they thought the startup was\nworth investing in, what difference should it make what some other VC thought?\nSurely it was their duty to their limited partners simply to invest in the\nbest opportunities they found; they should be delighted if the other VC said\nno, because it would mean they'd overlooked a good opportunity. But of course\nthere was no rational basis for their decision. They just couldn't stand the\nidea of taking this rival firm's rejects.  \n  \nIn this case the exploding termsheet was not (or not only) a tactic to\npressure the startup. It was more like the high school trick of breaking up\nwith someone before they can break up with you. In an [earlier\nessay](startupfunding.html) I said that VCs were a lot like high school girls.\nA few VCs have joked about that characterization, but none have disputed it.  \n  \n**14\\. The negotiation never stops till the closing.**  \n  \nMost deals, for investment or acquisition, happen in two phases. There's an\ninitial phase of negotiation about the big questions. If this succeeds you get\na termsheet, so called because it outlines the key terms of a deal. A\ntermsheet is not legally binding, but it is a definite step. It's supposed to\nmean that a deal is going to happen, once the lawyers work out all the\ndetails. In theory these details are minor ones; by definition all the\nimportant points are supposed to be covered in the termsheet.  \n  \nInexperience and wishful thinking combine to make founders feel that when they\nhave a termsheet, they have a deal. They want there to be a deal; everyone\nacts like they have a deal; so there must be a deal. But there isn't and may\nnot be for several months. A lot can change for a startup in several months.\nIt's not uncommon for investors and acquirers to get buyer's remorse. So you\nhave to keep pushing, keep selling, all the way to the close. Otherwise all\nthe \"minor\" details left unspecified in the termsheet will be interpreted to\nyour disadvantage. The other side may even break the deal; if they do that,\nthey'll usually seize on some technicality or claim you misled them, rather\nthan admitting they changed their minds.  \n  \nIt can be hard to keep the pressure on an investor or acquirer all the way to\nthe closing, because the most effective pressure is competition from other\ninvestors or acquirers, and these tend to drop away when you get a termsheet.\nYou should try to stay as close friends as you can with these rivals, but the\nmost important thing is just to keep up the momentum in your startup. The\ninvestors or acquirers chose you because you seemed hot. Keep doing whatever\nmade you seem hot. Keep releasing new features; keep getting new users; keep\ngetting mentioned in the press and in blogs.  \n  \n**15\\. Investors like to co-invest.**  \n  \nI've been surprised how willing investors are to split deals. You might think\nthat if they found a good deal they'd want it all to themselves, but they seem\npositively eager to syndicate. This is understandable with angels; they invest\non a smaller scale and don't like to have too much money tied up in any one\ndeal. But VCs also share deals a lot. Why?  \n  \nPartly I think this is an artifact of the rule I quoted earlier: after\ntraffic, VCs care most what other VCs think. A deal that has multiple VCs\ninterested in it is more likely to close, so of deals that close, more will\nhave multiple investors.  \n  \nThere is one rational reason to want multiple VCs in a deal: Any investor who\nco-invests with you is one less investor who could fund a competitor.\nApparently Kleiner and Sequoia didn't like splitting the Google deal, but it\ndid at least have the advantage, from each one's point of view, that there\nprobably wouldn't be a competitor funded by the other. Splitting deals thus\nhas similar advantages to confusing paternity.  \n  \nBut I think the main reason VCs like splitting deals is the fear of looking\nbad. If another firm shares the deal, then in the event of failure it will\nseem to have been a prudent choice\u2014a consensus decision, rather than just the\nwhim of an individual partner.  \n  \n**16\\. Investors collude.**  \n  \nInvesting is not covered by antitrust law. At least, it better not be, because\ninvestors regularly do things that would be illegal otherwise. I know\npersonally of cases where one investor has talked another out of making a\ncompetitive offer, using the promise of sharing future deals.  \n  \nIn principle investors are all competing for the same deals, but the spirit of\ncooperation is stronger than the spirit of competition. The reason, again, is\nthat there are so many deals. Though a professional investor may have a closer\nrelationship with a founder he invests in than with other investors, his\nrelationship with the founder is only going to last a couple years, whereas\nhis relationship with other firms will last his whole career. There isn't so\nmuch at stake in his interactions with other investors, but there will be a\nlot of them. Professional investors are constantly trading little favors.  \n  \nAnother reason investors stick together is to preserve the power of investors\nas a whole. So you will not, as of this writing, be able to get investors into\nan auction for your series A round. They'd rather lose the deal than establish\na precedent of VCs competitively bidding against one another. An efficient\nstartup funding market may be coming in the distant future; things tend to\nmove in that direction; but it's certainly not here now.  \n  \n**17\\. Large-scale investors care about their portfolio, not any individual\ncompany.**  \n  \nThe reason startups work so well is that everyone with power also has equity.\nThe only way any of them can succeed is if they all do. This makes everyone\nnaturally pull in the same direction, subject to differences of opinion about\ntactics.  \n  \nThe problem is, larger scale investors don't have exactly the same motivation.\nClose, but not identical. They don't need any given startup to succeed, like\nfounders do, just their portfolio as a whole to. So in borderline cases the\nrational thing for them to do is to sacrifice unpromising startups.  \n  \nLarge-scale investors tend to put startups in three categories: successes,\nfailures, and the \"living dead\"\u2014companies that are plugging along but don't\nseem likely in the immediate future to get bought or go public. To the\nfounders, \"living dead\" sounds harsh. These companies may be far from failures\nby ordinary standards. But they might as well be from a venture investor's\npoint of view, and they suck up just as much time and attention as the\nsuccesses. So if such a company has two possible strategies, a conservative\none that's slightly more likely to work in the end, or a risky one that within\na short time will either yield a giant success or kill the company, VCs will\npush for the kill-or-cure option. To them the company is already a write-off.\nBetter to have resolution, one way or the other, as soon as possible.  \n  \nIf a startup gets into real trouble, instead of trying to save it VCs may just\nsell it at a low price to another of their portfolio companies. Philip\nGreenspun said in [_Founders at\nWork_](http://www.amazon.com/gp/product/1590597141) that Ars Digita's VCs did\nthis to them.  \n  \n**18\\. Investors have different risk profiles from founders.**  \n  \nMost people would rather a 100% chance of $1 million than a 20% chance of $10\nmillion. Investors are rich enough to be rational and prefer the latter. So\nthey'll always tend to encourage founders to keep rolling the dice. If a\ncompany is doing well, investors will want founders to turn down most\nacquisition offers. And indeed, most startups that turn down acquisition\noffers ultimately do better. But it's still hair-raising for the founders,\nbecause they might end up with nothing. When someone's offering to buy you for\na price at which your stock is worth $5 million, saying no is equivalent to\nhaving $5 million and betting it all on one spin of the roulette wheel.  \n  \nInvestors will tell you the company is worth more. And they may be right. But\nthat doesn't mean it's wrong to sell. Any financial advisor who put all his\nclient's assets in the stock of a single, private company would probably lose\nhis license for it.  \n  \nMore and more, investors are letting founders cash out partially. That should\ncorrect the problem. Most founders have such low standards that they'll feel\nrich with a sum that doesn't seem huge to investors. But this custom is\nspreading too slowly, because VCs are afraid of seeming irresponsible. No one\nwants to be the first VC to give someone fuck-you money and then actually get\ntold \"fuck you.\" But until this does start to happen, we know VCs are being\ntoo conservative.  \n  \n**19\\. Investors vary greatly.**  \n  \nBack when I was a founder I used to think all VCs were the same. And in fact\nthey do all [look](http://www.redpoint.com/team/) the same. They're all what\nhackers call \"suits.\" But since I've been dealing with VCs more I've learned\nthat some suits are smarter than others.  \n  \nThey're also in a business where winners tend to keep winning and losers to\nkeep losing. When a VC firm has been successful in the past, everyone wants\nfunding from them, so they get the pick of all the new deals. The self-\nreinforcing nature of the venture funding market means that the top ten firms\nlive in a completely different world from, say, the hundredth. As well as\nbeing smarter, they tend to be calmer and more upstanding; they don't need to\ndo iffy things to get an edge, and don't want to because they have more brand\nto protect.  \n  \nThere are only two kinds of VCs you want to take money from, if you have the\nluxury of choosing: the \"top tier\" VCs, meaning about the top 20 or so firms,\nplus a few new ones that are not among the top 20 only because they haven't\nbeen around long enough.  \n  \nIt's particularly important to raise money from a top firm if you're a hacker,\nbecause they're more confident. That means they're less likely to stick you\nwith a business guy as CEO, like VCs used to do in the 90s. If you seem smart\nand want to do it, they'll let you run the company.  \n  \n**20\\. Investors don't realize how much it costs to raise money from them.**  \n  \nRaising money is a huge time suck at just the point where startups can least\nafford it. It's not unusual for it to take five or six months to close a\nfunding round. Six weeks is fast. And raising money is not just something you\ncan leave running as a background process. When you're raising money, it's\ninevitably the main focus of the company. Which means building the product\nisn't.  \n  \nSuppose a Y Combinator company starts talking to VCs after demo day, and is\nsuccessful in raising money from them, closing the deal after a comparatively\nshort 8 weeks. Since demo day occurs after 10 weeks, the company is now 18\nweeks old. Raising money, rather than working on the product, has been the\ncompany's main focus for 44% of its existence. And mind you, this an example\nwhere things turned out _well_.  \n  \nWhen a startup does return to working on the product after a funding round\nfinally closes, it's as if they were returning to work after a months-long\nillness. They've lost most of their momentum.  \n  \nInvestors have no idea how much they damage the companies they invest in by\ntaking so long to do it. But companies do. So there is a big opportunity here\nfor a new kind of venture fund that invests smaller amounts at lower\nvaluations, but promises to either close or say no very quickly. If there were\nsuch a firm, I'd recommend it to startups in preference to any other, no\nmatter how prestigious. Startups live on speed and momentum.  \n  \n**21\\. Investors don't like to say no.**  \n  \nThe reason funding deals take so long to close is mainly that investors can't\nmake up their minds. VCs are not big companies; they can do a deal in 24 hours\nif they need to. But they usually let the initial meetings stretch out over a\ncouple weeks. The reason is the selection algorithm I mentioned earlier. Most\ndon't try to predict whether a startup will win, but to notice quickly that it\nalready is winning. They care what the market thinks of you and what other VCs\nthink of you, and they can't judge those just from meeting you.  \n  \nBecause they're investing in things that (a) change fast and (b) they don't\nunderstand, a lot of investors will reject you in a way that can later be\nclaimed not to have been a rejection. Unless you know this world, you may not\neven realize you've been rejected. Here's a VC saying no:\n\n> We're really excited about your project, and we want to keep in close touch\n> as you develop it further.\n\nTranslated into more straightforward language, this means: We're not investing\nin you, but we may change our minds if it looks like you're taking off.\nSometimes they're more candid and say explicitly that they need to \"see some\ntraction.\" They'll invest in you if you start to get lots of users. But so\nwould any VC. So all they're saying is that you're still at square 1.  \n  \nHere's a test for deciding whether a VC's response was yes or no. Look down at\nyour hands. Are you holding a termsheet?  \n  \n**22\\. You need investors.**  \n  \nSome founders say \"Who needs investors?\" Empirically the answer seems to be:\neveryone who wants to succeed. Practically every successful startup takes\noutside investment at some point.  \n  \nWhy? What the people who think they don't need investors forget is that they\nwill have competitors. The question is not whether you _need_ outside\ninvestment, but whether it could help you at all. If the answer is yes, and\nyou don't take investment, then competitors who do will have an advantage over\nyou. And in the startup world a little advantage can expand into a lot.  \n  \nMike Moritz famously said that he invested in Yahoo because he thought they\nhad a few weeks' lead over their competitors. That may not have mattered quite\nso much as he thought, because Google came along three years later and kicked\nYahoo's ass. But there is something in what he said. Sometimes a small lead\ncan grow into the yes half of a binary choice.  \n  \nMaybe as it gets cheaper to start a startup, it will start to be possible to\nsucceed in a competitive market without outside funding. There are certainly\ncosts to raising money. But as of this writing the empirical evidence says\nit's a net win.  \n  \n**23\\. Investors like it when you don't need them.**  \n  \nA lot of founders approach investors as if they needed their permission to\nstart a company\u2014as if it were like getting into college. But you don't need\ninvestors to start most companies; they just make it easier.  \n  \nAnd in fact, investors greatly prefer it if you don't need them. What excites\nthem, both consciously and unconsciously, is the sort of startup that\napproaches them saying \"the train's leaving the station; are you in or out?\"\nnot the one saying \"please can we have some money to start a company?\"  \n  \nMost investors are \"bottoms\" in the sense that the startups they like most are\nthose that are rough with them. When Google stuck Kleiner and Sequoia with a\n$75 million premoney valuation, their reaction was probably \"Ouch! That feels\nso good.\" And they were right, weren't they? That deal probably made them more\nthan any other they've done.  \n  \nThe thing is, VCs are pretty good at reading people. So don't try to act tough\nwith them unless you really are the next Google, or they'll see through you in\na second. Instead of acting tough, what most startups should do is simply\nalways have a backup plan. Always have some alternative plan for getting\nstarted if any given investor says no. Having one is the best insurance\nagainst needing one.  \n  \nSo you shouldn't start a startup that's expensive to start, because then\nyou'll be at the mercy of investors. If you ultimately want to do something\nthat will cost a lot, start by doing a cheaper subset of it, and expand your\nambitions when and if you raise more money.  \n  \nApparently the most likely animals to be left alive after a nuclear war are\ncockroaches, because they're so hard to kill. That's what you want to be as a\nstartup, initially. Instead of a beautiful but fragile flower that needs to\nhave its stem in a plastic tube to support itself, better to be small, ugly,\nand indestructible.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] I may be underestimating VCs. They may play some behind the scenes role in\nIPOs, which you ultimately need if you want to create a silicon valley.  \n  \n[2] A few VCs have an email address you can send your business plan to, but\nthe number of startups that get funded this way is basically zero. You should\nalways get a personal introduction\u2014and to a partner, not an associate.  \n  \n[3] Several people have told us that the most valuable thing about [startup\nschool](http://startupschool.org) was that they got to see famous startup\nfounders and realized they were just ordinary guys. Though we're happy to\nprovide this service, this is not generally the way we pitch startup school to\npotential speakers.  \n  \n[4] Actually this sounds to me like a VC who got buyer's remorse, then used a\ntechnicality to get out of the deal. But it's telling that it even seemed a\nplausible excuse.  \n  \n**Thanks** to Sam Altman, Paul Buchheit, Hutch Fishman, and Robert Morris for\nreading drafts of this, and to Kenneth King of ASES for inviting me to speak.  \n  \n[Comment](http://news.ycombinator.com/item?id=17947) on this essay.  \n  \n\nFebruary 2009  \n  \nHacker News was two years old last week. Initially it was supposed to be a\nside project\u2014an application to sharpen Arc on, and a place for current and\nfuture Y Combinator founders to exchange news. It's grown bigger and taken up\nmore time than I expected, but I don't regret that because I've learned so\nmuch from working on it.  \n  \n**Growth**  \n  \nWhen we launched in February 2007, weekday traffic was around 1600 daily\nuniques. It's since [grown](http://ycombinator.com/images/2yeartraffic.png) to\naround 22,000. This growth rate is a bit higher than I'd like. I'd like the\nsite to grow, since a site that isn't growing at least slowly is probably\ndead. But I wouldn't want it to grow as large as Digg or Reddit\u2014mainly because\nthat would dilute the character of the site, but also because I don't want to\nspend all my time dealing with scaling.  \n  \nI already have problems enough with that. Remember, the original motivation\nfor HN was to test a new programming language, and moreover one that's focused\non experimenting with language design, not performance. Every time the site\ngets slow, I fortify myself by recalling McIlroy and Bentley's famous quote\n\n> The key to performance is elegance, not battalions of special cases.\n\nand look for the bottleneck I can remove with least code. So far I've been\nable to keep up, in the sense that performance has remained consistently\nmediocre despite 14x growth. I don't know what I'll do next, but I'll probably\nthink of something.  \n  \nThis is my attitude to the site generally. Hacker News is an experiment, and\nan experiment in a very young field. Sites of this type are only a few years\nold. Internet conversation generally is only a few decades old. So we've\nprobably only discovered a fraction of what we eventually will.  \n  \nThat's why I'm so optimistic about HN. When a technology is this young, the\nexisting solutions are usually terrible; which means it must be possible to do\nmuch better; which means many problems that seem insoluble aren't. Including,\nI hope, the problem that has afflicted so many previous communities: being\nruined by growth.  \n  \n**Dilution**  \n  \nUsers have worried about that since the site was a few months old. So far\nthese alarms have been false, but they may not always be. Dilution is a hard\nproblem. But probably soluble; it doesn't mean much that open conversations\nhave \"always\" been destroyed by growth when \"always\" equals 20 instances.  \n  \nBut it's important to remember we're trying to solve a new problem, because\nthat means we're going to have to try new things, most of which probably won't\nwork. A couple weeks ago I tried displaying the names of users with the\nhighest average comment scores in orange. [1] That was a mistake. Suddenly a\nculture that had been more or less united was divided into haves and have-\nnots. I didn't realize how united the culture had been till I saw it divided.\nIt was painful to watch. [2]  \n  \nSo orange usernames won't be back. (Sorry about that.) But there will be other\nequally broken-seeming ideas in the future, and the ones that turn out to work\nwill probably seem just as broken as those that don't.  \n  \nProbably the most important thing I've learned about dilution is that it's\nmeasured more in behavior than users. It's bad behavior you want to keep out\nmore than bad people. User behavior turns out to be surprisingly malleable. If\npeople are [expected](http://ycombinator.com/newswelcome.html) to behave well,\nthey tend to; and vice versa.  \n  \nThough of course forbidding bad behavior does tend to keep away bad people,\nbecause they feel uncomfortably constrained in a place where they have to\nbehave well. But this way of keeping them out is gentler and probably also\nmore effective than overt barriers.  \n  \nIt's pretty clear now that the broken windows theory applies to community\nsites as well. The theory is that minor forms of bad behavior encourage worse\nones: that a neighborhood with lots of graffiti and broken windows becomes one\nwhere robberies occur. I was living in New York when Giuliani introduced the\nreforms that made the broken windows theory famous, and the transformation was\nmiraculous. And I was a Reddit user when the opposite happened there, and the\ntransformation was equally dramatic.  \n  \nI'm not criticizing Steve and Alexis. What happened to Reddit didn't happen\nout of neglect. From the start they had a policy of censoring nothing except\nspam. Plus Reddit had different goals from Hacker News. Reddit was a startup,\nnot a side project; its goal was to grow as fast as possible. Combine rapid\ngrowth and zero censorship, and the result is a free for all. But I don't\nthink they'd do much differently if they were doing it again. Measured by\ntraffic, Reddit is much more successful than Hacker News.  \n  \nBut what happened to Reddit won't inevitably happen to HN. There are several\nlocal maxima. There can be places that are free for alls and places that are\nmore thoughtful, just as there are in the real world; and people will behave\ndifferently depending on which they're in, just as they do in the real world.  \n  \nI've observed this in the wild. I've seen people cross-posting on Reddit and\nHacker News who actually took the trouble to write two versions, a flame for\nReddit and a more subdued version for HN.  \n  \n**Submissions**  \n  \nThere are two major types of problems a site like Hacker News needs to avoid:\nbad stories and bad comments. So far the danger of bad stories seems smaller.\nThe stories on the frontpage now are still roughly the ones that would have\nbeen there when HN started.  \n  \nI once thought I'd have to weight votes to keep crap off the frontpage, but I\nhaven't had to yet. I wouldn't have predicted the frontpage would hold up so\nwell, and I'm not sure why it has. Perhaps only the more thoughtful users care\nenough to submit and upvote links, so the marginal cost of one random new user\napproaches zero. Or perhaps the frontpage protects itself, by advertising what\ntype of submission is expected.  \n  \nThe most dangerous thing for the frontpage is stuff that's too easy to upvote.\nIf someone proves a new theorem, it takes some work by the reader to decide\nwhether or not to upvote it. An amusing cartoon takes less. A rant with a\nrallying cry as the title takes zero, because people vote it up without even\nreading it.  \n  \nHence what I call the Fluff Principle: on a user-voted news site, the links\nthat are easiest to judge will take over unless you take specific measures to\nprevent it.  \n  \nHacker News has two kinds of protections against fluff. The most common types\nof fluff links are banned as off-topic. Pictures of kittens, political\ndiatribes, and so on are explicitly banned. This keeps out most fluff, but not\nall of it. Some links are both fluff, in the sense of being very short, and\nalso on topic.  \n  \nThere's no single solution to that. If a link is just an empty rant, editors\nwill sometimes kill it even if it's on topic in the sense of being about\nhacking, because it's not on topic by the real standard, which is to engage\none's intellectual curiosity. If the posts on a site are characteristically of\nthis type I sometimes ban it, which means new stuff at that url is auto-\nkilled. If a post has a linkbait title, editors sometimes rephrase it to be\nmore matter-of-fact. This is especially necessary with links whose titles are\nrallying cries, because otherwise they become implicit \"vote up if you believe\nsuch-and-such\" posts, which are the most extreme form of fluff.  \n  \nThe techniques for dealing with links have to evolve, because the links do.\nThe existence of aggregators has already affected what they aggregate. Writers\nnow deliberately write things to draw traffic from aggregators\u2014sometimes even\nspecific ones. (No, the irony of this statement is not lost on me.) Then there\nare the more sinister mutations, like linkjacking\u2014posting a paraphrase of\nsomeone else's article and submitting that instead of the original. These can\nget a lot of upvotes, because a lot of what's good in an article often\nsurvives; indeed, the closer the paraphrase is to plagiarism, the more\nsurvives. [3]  \n  \nI think it's important that a site that kills submissions provide a way for\nusers to see what got killed if they want to. That keeps editors honest, and\njust as importantly, makes users confident they'd know if the editors stopped\nbeing honest. HN users can do this by flipping a switch called showdead in\ntheir profile. [4]  \n  \n**Comments**  \n  \nBad comments seem to be a harder problem than bad submissions. While the\nquality of links on the frontpage of HN hasn't changed much, the quality of\nthe median comment may have decreased somewhat.  \n  \nThere are two main kinds of badness in comments: meanness and stupidity. There\nis a lot of overlap between the two\u2014mean comments are disproportionately\nlikely also to be dumb\u2014but the strategies for dealing with them are different.\nMeanness is easier to control. You can have rules saying one shouldn't be\nmean, and if you enforce them it seems possible to keep a lid on meanness.  \n  \nKeeping a lid on stupidity is harder, perhaps because stupidity is not so\neasily distinguishable. Mean people are more likely to know they're being mean\nthan stupid people are to know they're being stupid.  \n  \nThe most dangerous form of stupid comment is not the long but mistaken\nargument, but the dumb joke. Long but mistaken arguments are actually quite\nrare. There is a strong correlation between comment quality and length; if you\nwanted to compare the quality of comments on community sites, average length\nwould be a good predictor. Probably the cause is human nature rather than\nanything specific to comment threads. Probably it's simply that stupidity more\noften takes the form of having few ideas than wrong ones.  \n  \nWhatever the cause, stupid comments tend to be short. And since it's hard to\nwrite a short comment that's distinguished for the amount of information it\nconveys, people try to distinguish them instead by being funny. The most\ntempting format for stupid comments is the supposedly witty put-down, probably\nbecause put-downs are the easiest form of humor. [5] So one advantage of\nforbidding meanness is that it also cuts down on these.  \n  \nBad comments are like kudzu: they take over rapidly. Comments have much more\neffect on new comments than submissions have on new submissions. If someone\nsubmits a lame article, the other submissions don't all become lame. But if\nsomeone posts a stupid comment on a thread, that sets the tone for the region\naround it. People reply to dumb jokes with dumb jokes.  \n  \nMaybe the solution is to add a delay before people can respond to a comment,\nand make the length of the delay inversely proportional to some prediction of\nits quality. Then dumb threads would grow slower. [6]  \n  \n**People**  \n  \nI notice most of the techniques I've described are conservative: they're aimed\nat preserving the character of the site rather than enhancing it. I don't\nthink that's a bias of mine. It's due to the shape of the problem. Hacker News\nhad the good fortune to start out good, so in this case it's literally a\nmatter of preservation. But I think this principle would also apply to sites\nwith different origins.  \n  \nThe good things in a community site come from people more than technology;\nit's mainly in the prevention of bad things that technology comes into play.\nTechnology certainly can enhance discussion. Nested comments do, for example.\nBut I'd rather use a site with primitive features and smart, nice users than a\nmore advanced one whose users were idiots or [trolls](trolls.html).  \n  \nSo the most important thing a community site can do is attract the kind of\npeople it wants. A site trying to be as big as possible wants to attract\neveryone. But a site aiming at a particular subset of users has to attract\njust those\u2014and just as importantly, repel everyone else. I've made a conscious\neffort to do this on HN. The graphic design is as plain as possible, and the\nsite rules discourage dramatic link titles. The goal is that the only thing to\ninterest someone arriving at HN for the first time should be the ideas\nexpressed there.  \n  \nThe downside of tuning a site to attract certain people is that, to those\npeople, it can be too attractive. I'm all too aware how addictive Hacker News\ncan be. For me, as for many users, it's a kind of virtual town square. When I\nwant to take a break from working, I walk into the square, just as I might\ninto Harvard Square or University Ave in the physical world. [7] But an online\nsquare is more dangerous than a physical one. If I spent half the day\nloitering on University Ave, I'd notice. I have to walk a mile to get there,\nand sitting in a cafe feels different from working. But visiting an online\nforum takes just a click, and feels superficially very much like working. You\nmay be wasting your time, but you're not idle. Someone is\n[wrong](http://xkcd.com/386/) on the Internet, and you're fixing the problem.  \n  \nHacker News is definitely useful. I've learned a lot from things I've read on\nHN. I've written several essays that began as comments there. So I wouldn't\nwant the site to go away. But I would like to be sure it's not a net drag on\nproductivity. What a disaster that would be, to attract thousands of smart\npeople to a site that caused them to waste lots of time. I wish I could be\n100% sure that's not a description of HN.  \n  \nI feel like the addictiveness of games and social applications is still a\nmostly unsolved problem. The situation now is like it was with crack in the\n1980s: we've invented terribly addictive new things, and we haven't yet\nevolved ways to protect ourselves from them. We will eventually, and that's\none of the problems I hope to focus on next.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] I tried ranking users by both average and median comment score, and\naverage (with the high score thrown out) seemed the more accurate predictor of\nhigh quality. Median may be the more accurate predictor of low quality though.  \n  \n[2] Another thing I learned from this experiment is that if you're going to\ndistinguish between people, you better be sure you do it right. This is one\nproblem where rapid prototyping doesn't work.  \n  \nIndeed, that's the intellectually honest argument for not discriminating\nbetween various types of people. The reason not to do it is not that\neveryone's the same, but that it's bad to do wrong and hard to do right.  \n  \n[3] When I catch egregiously linkjacked posts I replace the url with that of\nwhatever they copied. Sites that habitually linkjack get banned.  \n  \n[4] Digg is notorious for its lack of transparency. The root of the problem is\nnot that the guys running Digg are especially sneaky, but that they use the\nwrong algorithm for generating their frontpage. Instead of bubbling up from\nthe bottom as they get more votes, as on Reddit, stories start at the top and\nget pushed down by new arrivals.  \n  \nThe reason for the difference is that Digg is derived from Slashdot, while\nReddit is derived from Delicious/popular. Digg is Slashdot with voting instead\nof editors, and Reddit is Delicious/popular with voting instead of\nbookmarking. (You can still see fossils of their origins in their graphic\ndesign.)  \n  \nDigg's algorithm is very vulnerable to gaming, because any story that makes it\nonto the frontpage is the new top story. Which in turn forces Digg to respond\nwith extreme countermeasures. A lot of startups have some kind of secret about\nthe subterfuges they had to resort to in the early days, and I suspect Digg's\nis the extent to which the top stories were de facto chosen by human editors.  \n  \n[5] The dialog on Beavis and Butthead was composed largely of these, and when\nI read comments on really bad sites I can hear them in their voices.  \n  \n[6] I suspect most of the techniques for discouraging stupid comments have yet\nto be discovered. Xkcd implemented a particularly clever one in its IRC\nchannel: don't allow the same thing twice. Once someone has said \"fail,\" no\none can ever say it again. This would penalize short comments especially,\nbecause they have less room to avoid collisions in.  \n  \nAnother promising idea is the [stupid filter](http://stupidfilter.org), which\nis just like a probabilistic spam filter, but trained on corpora of stupid and\nnon-stupid comments instead.  \n  \nYou may not have to kill bad comments to solve the problem. Comments at the\nbottom of a long thread are rarely seen, so it may be enough to incorporate a\nprediction of quality in the comment sorting algorithm.  \n  \n[7] What makes most suburbs so demoralizing is that there's no center to walk\nto.  \n  \n**Thanks** to Justin Kan, Jessica Livingston, Robert Morris, Alexis Ohanian,\nEmmet Shear, and Fred Wilson for reading drafts of this.  \n  \n[Comment](http://news.ycombinator.com/item?id=495053) on this essay.  \n  \n  \n  \n\nAugust 2007  \n  \nA good programmer working intensively on his own code can hold it in his mind\nthe way a mathematician holds a problem he's working on. Mathematicians don't\nanswer questions by working them out on paper the way schoolchildren are\ntaught to. They do more in their heads: they try to understand a problem space\nwell enough that they can walk around it the way you can walk around the\nmemory of the house you grew up in. At its best programming is the same. You\nhold the whole program in your head, and you can manipulate it at will.  \n  \nThat's particularly valuable at the start of a project, because initially the\nmost important thing is to be able to change what you're doing. Not just to\nsolve the problem in a different way, but to change the problem you're\nsolving.  \n  \nYour code is your understanding of the problem you're exploring. So it's only\nwhen you have your code in your head that you really understand the problem.  \n  \nIt's not easy to get a program into your head. If you leave a project for a\nfew months, it can take days to really understand it again when you return to\nit. Even when you're actively working on a program it can take half an hour to\nload into your head when you start work each day. And that's in the best case.\nOrdinary programmers working in typical office conditions never enter this\nmode. Or to put it more dramatically, ordinary programmers working in typical\noffice conditions never really understand the problems they're solving.  \n  \nEven the best programmers don't always have the whole program they're working\non loaded into their heads. But there are things you can do to help:  \n  \n\n  1. **Avoid distractions.** Distractions are bad for many types of work, but especially bad for programming, because programmers tend to operate at the limit of the detail they can handle.  \n  \nThe danger of a distraction depends not on how long it is, but on how much it\nscrambles your brain. A programmer can leave the office and go and get a\nsandwich without losing the code in his head. But the wrong kind of\ninterruption can wipe your brain in 30 seconds.  \n  \nOddly enough, scheduled distractions may be worse than unscheduled ones. If\nyou know you have a meeting in an hour, you don't even start working on\nsomething hard.  \n  \n\n  2. **Work in long stretches.** Since there's a fixed cost each time you start working on a program, it's more efficient to work in a few long sessions than many short ones. There will of course come a point where you get stupid because you're tired. This varies from person to person. I've heard of people hacking for 36 hours straight, but the most I've ever been able to manage is about 18, and I work best in chunks of no more than 12.  \n  \nThe optimum is not the limit you can physically endure. There's an advantage\nas well as a cost of breaking up a project. Sometimes when you return to a\nproblem after a rest, you find your unconscious mind has left an answer\nwaiting for you.  \n  \n\n  3. **Use succinct languages.** More [powerful](power.html) programming languages make programs shorter. And programmers seem to think of programs at least partially in the language they're using to write them. The more succinct the language, the shorter the program, and the easier it is to load and keep in your head.  \n  \nYou can magnify the effect of a powerful language by using a style called\nbottom-up programming, where you write programs in multiple layers, the lower\nones acting as programming languages for those above. If you do this right,\nyou only have to keep the topmost layer in your head.  \n  \n\n  4. **Keep rewriting your program.** Rewriting a program often yields a cleaner design. But it would have advantages even if it didn't: you have to understand a program completely to rewrite it, so there is no better way to get one loaded into your head.  \n  \n\n  5. **Write rereadable code.** All programmers know it's good to write readable code. But you yourself are the most important reader. Especially in the beginning; a prototype is a conversation with yourself. And when writing for yourself you have different priorities. If you're writing for other people, you may not want to make code too dense. Some parts of a program may be easiest to read if you spread things out, like an introductory textbook. Whereas if you're writing code to make it easy to reload into your head, it may be best to go for brevity.  \n  \n\n  6. **Work in small groups.** When you manipulate a program in your head, your vision tends to stop at the edge of the code you own. Other parts you don't understand as well, and more importantly, can't take liberties with. So the smaller the number of programmers, the more completely a project can mutate. If there's just one programmer, as there often is at first, you can do all-encompassing redesigns.  \n  \n\n  7. **Don't have multiple people editing the same piece of code.** You never understand other people's code as well as your own. No matter how thoroughly you've read it, you've only read it, not written it. So if a piece of code is written by multiple authors, none of them understand it as well as a single author would.  \n  \nAnd of course you can't safely redesign something other people are working on.\nIt's not just that you'd have to ask permission. You don't even let yourself\nthink of such things. Redesigning code with several authors is like changing\nlaws; redesigning code you alone control is like seeing the other\ninterpretation of an ambiguous image.  \n  \nIf you want to put several people to work on a project, divide it into\ncomponents and give each to one person.  \n  \n\n  8. **Start small.** A program gets easier to hold in your head as you become familiar with it. You can start to treat parts as black boxes once you feel confident you've fully explored them. But when you first start working on a project, you're forced to see everything. If you start with too big a problem, you may never quite be able to encompass it. So if you need to write a big, complex program, the best way to begin may not be to write a spec for it, but to write a prototype that solves a subset of the problem. Whatever the advantages of planning, they're often outweighed by the advantages of being able to keep a program in your head. \n\nIt's striking how often programmers manage to hit all eight points by\naccident. Someone has an idea for a new project, but because it's not\nofficially sanctioned, he has to do it in off hours\u2014which turn out to be more\nproductive because there are no distractions. Driven by his enthusiasm for the\nnew project he works on it for many hours at a stretch. Because it's initially\njust an experiment, instead of a \"production\" language he uses a mere\n\"scripting\" language\u2014which is in fact far more powerful. He completely\nrewrites the program several times; that wouldn't be justifiable for an\nofficial project, but this is a labor of love and he wants it to be perfect.\nAnd since no one is going to see it except him, he omits any comments except\nthe note-to-self variety. He works in a small group perforce, because he\neither hasn't told anyone else about the idea yet, or it seems so unpromising\nthat no one else is allowed to work on it. Even if there is a group, they\ncouldn't have multiple people editing the same code, because it changes too\nfast for that to be possible. And the project starts small because the idea\n_is_ small at first; he just has some cool hack he wants to try out.  \n  \nEven more striking are the number of officially sanctioned projects that\nmanage to do _all eight things wrong_. In fact, if you look at the way\nsoftware gets written in most organizations, it's almost as if they were\ndeliberately trying to do things wrong. In a sense, they are. One of the\ndefining qualities of organizations since there have been such a thing is to\ntreat individuals as interchangeable parts. This works well for more\nparallelizable tasks, like fighting wars. For most of history a well-drilled\narmy of professional soldiers could be counted on to beat an army of\nindividual warriors, no matter how valorous. But having ideas is not very\nparallelizable. And that's what programs are: ideas.  \n  \nIt's not merely true that organizations dislike the idea of depending on\nindividual genius, it's a tautology. It's part of the definition of an\norganization not to. Of our current concept of an organization, at least.  \n  \nMaybe we could define a new kind of organization that combined the efforts of\nindividuals without requiring them to be interchangeable. Arguably a market is\nsuch a form of organization, though it may be more accurate to describe a\nmarket as a degenerate case\u2014as what you get by default when organization isn't\npossible.  \n  \nProbably the best we'll do is some kind of hack, like making the programming\nparts of an organization work differently from the rest. Perhaps the optimal\nsolution is for big companies not even to try to develop ideas in house, but\nsimply to [buy](hiring.html) them. But regardless of what the solution turns\nout to be, the first step is to realize there's a problem. There is a\ncontradiction in the very phrase \"software company.\" The two words are pulling\nin opposite directions. Any good programmer in a large organization is going\nto be at odds with it, because organizations are designed to prevent what\nprogrammers strive for.  \n  \nGood programmers manage to get a lot done anyway. But often it requires\npractically an act of rebellion against the organizations that employ them.\nPerhaps it will help if more people understand that the way programmers behave\nis driven by the demands of the work they do. It's not because they're\nirresponsible that they work in long binges during which they blow off all\nother obligations, plunge straight into programming instead of writing specs\nfirst, and rewrite code that already works. It's not because they're\nunfriendly that they prefer to work alone, or growl at people who pop their\nhead in the door to say hello. This apparently random collection of annoying\nhabits has a single explanation: the power of holding a program in one's head.  \n  \nWhether or not understanding this can help large organizations, it can\ncertainly help their competitors. The weakest point in big companies is that\nthey don't let individual programmers do great work. So if you're a little\nstartup, this is the place to attack them. Take on the kind of problems that\nhave to be solved in one big brain.  \n  \n  \n  \n  \n  \n**Thanks** to Sam Altman, David Greenspan, Aaron Iba, Jessica Livingston,\nRobert Morris, Peter Norvig, Lisa Randall, Emmett Shear, Sergei Tsarev, and\nStephen Wolfram for reading drafts of this.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nAugust 2013  \n  \nThe biggest component in most investors' opinion of you is the opinion of\nother investors. Which is of course a recipe for exponential growth. When one\ninvestor wants to invest in you, that makes other investors want to, which\nmakes others want to, and so on.  \n  \nSometimes inexperienced founders mistakenly conclude that manipulating these\nforces is the essence of fundraising. They hear stories about stampedes to\ninvest in successful startups, and think it's therefore the mark of a\nsuccessful startup to have this happen. But actually the two are not that\nhighly correlated. Lots of startups that cause stampedes end up flaming out\n(in extreme cases, partly as a result of the stampede), and lots of very\nsuccessful startups were only moderately popular with investors the first time\nthey raised money.  \n  \nSo the point of this essay is not to explain how to create a stampede, but\nmerely to explain the forces that generate them. These forces are always at\nwork to some degree in fundraising, and they can cause surprising situations.\nIf you understand them, you can at least avoid being surprised.  \n  \nOne reason investors like you more when other investors like you is that you\nactually become a better investment. Raising money decreases the risk of\nfailure. Indeed, although investors hate it, you are for this reason justified\nin raising your valuation for later investors. The investors who invested when\nyou had no money were taking more risk, and are entitled to higher returns.\nPlus a company that has raised money is literally more valuable. After you\nraise the first million dollars, the company is at least a million dollars\nmore valuable, because it's the same company as before, plus it has a million\ndollars in the bank. [1]  \n  \nBeware, though, because later investors so hate to have the price raised on\nthem that they resist even this self-evident reasoning. Only raise the price\non an investor you're comfortable with losing, because some will angrily\nrefuse. [2]  \n  \nThe second reason investors like you more when you've had some success at\nfundraising is that it makes you more confident, and an investors' opinion of\n[you](convince.html) is the foundation of their opinion of your company.\nFounders are often surprised how quickly investors seem to know when they\nstart to succeed at raising money. And while there are in fact lots of ways\nfor such information to spread among investors, the main vector is probably\nthe founders themselves. Though they're often clueless about technology, most\ninvestors are pretty good at reading people. When fundraising is going well,\ninvestors are quick to sense it in your increased confidence. (This is one\ncase where the average founder's inability to remain poker-faced works to your\nadvantage.)  \n  \nBut frankly the most important reason investors like you more when you've\nstarted to raise money is that they're bad at judging startups. Judging\nstartups is hard even for the best investors. The mediocre ones might as well\nbe flipping coins. So when mediocre investors see that lots of other people\nwant to invest in you, they assume there must be a reason. This leads to the\nphenomenon known in the Valley as the \"hot deal,\" where you have more interest\nfrom investors than you can handle.  \n  \nThe best investors aren't influenced much by the opinion of other investors.\nIt would only dilute their own judgment to average it together with other\npeople's. But they are indirectly influenced in the practical sense that\ninterest from other investors imposes a deadline. This is the fourth way in\nwhich offers beget offers. If you start to get far along the track toward an\noffer with one firm, it will sometimes provoke other firms, even good ones, to\nmake up their minds, lest they lose the deal.  \n  \nUnless you're a wizard at negotiation (and if you're not sure, you're not) be\nvery careful about exaggerating this to push a good investor to decide.\nFounders try this sort of thing all the time, and investors are very sensitive\nto it. If anything oversensitive. But you're safe so long as you're telling\nthe truth. If you're getting far along with investor B, but you'd rather raise\nmoney from investor A, you can tell investor A that this is happening. There's\nno manipulation in that. You're genuinely in a bind, because you really would\nrather raise money from A, but you can't safely reject an offer from B when\nit's still uncertain what A will decide.  \n  \nDo not, however, tell A who B is. VCs will sometimes ask which other VCs\nyou're talking to, but you should never tell them. Angels you can sometimes\ntell about other angels, because angels cooperate more with one another. But\nif VCs ask, just point out that they wouldn't want you telling other firms\nabout your conversations, and you feel obliged to do the same for any firm you\ntalk to. If they push you, point out that you're inexperienced at fundraising\n\u2014 which is always a safe card to play \u2014 and you feel you have to be extra\ncautious. [3]  \n  \nWhile few startups will experience a stampede of interest, almost all will at\nleast initially experience the other side of this phenomenon, where the herd\nremains clumped together at a distance. The fact that investors are so much\ninfluenced by other investors' opinions means you always start out in\nsomething of a hole. So don't be demoralized by how hard it is to get the\nfirst commitment, because much of the difficulty comes from this external\nforce. The second will be easier.  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] An accountant might say that a company that has raised a million dollars\nis no richer if it's convertible debt, but in practice money raised as\nconvertible debt is little different from money raised in an equity round.  \n  \n[2] Founders are often surprised by this, but investors can get very\nemotional. Or rather indignant; that's the main emotion I've observed; but it\nis very common, to the point where it sometimes causes investors to act\nagainst their own interests. I know of one investor who invested in a startup\nat a $15 million valuation cap. Earlier he'd had an opportunity to invest at a\n$5 million cap, but he refused because a friend who invested earlier had been\nable to invest at a $3 million cap.  \n  \n[3] If an investor pushes you hard to tell them about your conversations with\nother investors, is this someone you want as an investor?  \n  \n**Thanks** to Paul Buchheit, Jessica Livingston, Geoff Ralston, and Garry Tan\nfor reading drafts of this.  \n  \n\nApril 2022  \n  \nOne of the most surprising things I've witnessed in my lifetime is the rebirth\nof the concept of heresy.  \n  \nIn his excellent biography of Newton, Richard Westfall writes about the moment\nwhen he was elected a fellow of Trinity College:\n\n> Supported comfortably, Newton was free to devote himself wholly to whatever\n> he chose. To remain on, he had only to avoid the three unforgivable sins:\n> crime, heresy, and marriage. [1]\n\nThe first time I read that, in the 1990s, it sounded amusingly medieval. How\nstrange, to have to avoid committing heresy. But when I reread it 20 years\nlater it sounded like a description of contemporary employment.  \n  \nThere are an ever-increasing number of opinions you can be fired for. Those\ndoing the firing don't use the word \"heresy\" to describe them, but\nstructurally they're equivalent. Structurally there are two distinctive things\nabout heresy: (1) that it takes priority over the question of truth or\nfalsity, and (2) that it outweighs everything else the speaker has done.  \n  \nFor example, when someone calls a statement \"x-ist,\" they're also implicitly\nsaying that this is the end of the discussion. They do not, having said this,\ngo on to consider whether the statement is true or not. Using such labels is\nthe conversational equivalent of signalling an exception. That's one of the\nreasons they're used: to end a discussion.  \n  \nIf you find yourself talking to someone who uses these labels a lot, it might\nbe worthwhile to ask them explicitly if they believe any babies are being\nthrown out with the bathwater. Can a statement be x-ist, for whatever value of\nx, and also true? If the answer is yes, then they're admitting to banning the\ntruth. That's obvious enough that I'd guess most would answer no. But if they\nanswer no, it's easy to show that they're mistaken, and that in practice such\nlabels are applied to statements regardless of their truth or falsity.  \n  \nThe clearest evidence of this is that whether a statement is considered x-ist\noften depends on who said it. Truth doesn't work that way. The same statement\ncan't be true when one person says it, but x-ist, and therefore false, when\nanother person does. [2]  \n  \nThe other distinctive thing about heresies, compared to ordinary opinions, is\nthat the public expression of them outweighs everything else the speaker has\ndone. In ordinary matters, like knowledge of history, or taste in music,\nyou're judged by the average of your opinions. A heresy is qualitatively\ndifferent. It's like dropping a chunk of uranium onto the scale.  \n  \nBack in the day (and still, in some places) the punishment for heresy was\ndeath. You could have led a life of exemplary goodness, but if you publicly\ndoubted, say, the divinity of Christ, you were going to burn. Nowadays, in\ncivilized countries, heretics only get fired in the metaphorical sense, by\nlosing their jobs. But the structure of the situation is the same: the heresy\noutweighs everything else. You could have spent the last ten years saving\nchildren's lives, but if you express certain opinions, you're automatically\nfired.  \n  \nIt's much the same as if you committed a crime. No matter how virtuously\nyou've lived, if you commit a crime, you must still suffer the penalty of the\nlaw. Having lived a previously blameless life might mitigate the punishment,\nbut it doesn't affect whether you're guilty or not.  \n  \nA heresy is an opinion whose expression is treated like a crime \u2014 one that\nmakes some people feel not merely that you're mistaken, but that you should be\npunished. Indeed, their desire to see you punished is often stronger than it\nwould be if you'd committed an actual crime. There are many on the far left\nwho believe strongly in the reintegration of felons (as I do myself), and yet\nseem to feel that anyone guilty of certain heresies should never work again.  \n  \nThere are always some heresies \u2014 some opinions you'd be punished for\nexpressing. But there are a lot more now than there were a few decades ago,\nand even those who are happy about this would have to agree that it's so.  \n  \nWhy? Why has this antiquated-sounding religious concept come back in a secular\nform? And why now?  \n  \nYou need two ingredients for a wave of intolerance: intolerant people, and an\nideology to guide them. The intolerant people are always there. They exist in\nevery sufficiently large society. That's why waves of intolerance can arise so\nsuddenly; all they need is something to set them off.  \n  \nI've already written an [_essay_](conformism.html) describing the aggressively\nconventional-minded. The short version is that people can be classified in two\ndimensions according to (1) how independent- or conventional-minded they are,\nand (2) how aggressive they are about it. The aggressively conventional-minded\nare the enforcers of orthodoxy.  \n  \nNormally they're only locally visible. They're the grumpy, censorious people\nin a group \u2014 the ones who are always first to complain when something violates\nthe current rules of propriety. But occasionally, like a vector field whose\nelements become aligned, a large number of aggressively conventional-minded\npeople unite behind some ideology all at once. Then they become much more of a\nproblem, because a mob dynamic takes over, where the enthusiasm of each\nparticipant is increased by the enthusiasm of the others.  \n  \nThe most notorious 20th century case may have been the Cultural Revolution.\nThough initiated by Mao to undermine his rivals, the Cultural Revolution was\notherwise mostly a grass-roots phenomenon. Mao said in essence: There are\nheretics among us. Seek them out and punish them. And that's all the\naggressively conventional-minded ever need to hear. They went at it with the\ndelight of dogs chasing squirrels.  \n  \nTo unite the conventional-minded, an ideology must have many of the features\nof a religion. In particular it must have strict and arbitrary rules that\nadherents can demonstrate their\n[_purity_](https://www.youtube.com/watch?v=qaHLd8de6nM) by obeying, and its\nadherents must believe that anyone who obeys these rules is ipso facto morally\nsuperior to anyone who doesn't. [3]  \n  \nIn the late 1980s a new ideology of this type appeared in US universities. It\nhad a very strong component of moral purity, and the aggressively\nconventional-minded seized upon it with their usual eagerness \u2014 all the more\nbecause the relaxation of social norms in the preceding decades meant there\nhad been less and less to forbid. The resulting wave of intolerance has been\neerily similar in form to the Cultural Revolution, though fortunately much\nsmaller in magnitude. [4]  \n  \nI've deliberately avoided mentioning any specific heresies here. Partly\nbecause one of the universal tactics of heretic hunters, now as in the past,\nis to accuse those who disapprove of the way in which they suppress ideas of\nbeing heretics themselves. Indeed, this tactic is so consistent that you could\nuse it as a way of detecting witch hunts in any era.  \n  \nAnd that's the second reason I've avoided mentioning any specific heresies. I\nwant this essay to work in the future, not just now. And unfortunately it\nprobably will. The aggressively conventional-minded will always be among us,\nlooking for things to forbid. All they need is an ideology to tell them what.\nAnd it's unlikely the current one will be the last.  \n  \nThere are aggressively conventional-minded people on both the right and the\nleft. The reason the current wave of intolerance comes from the left is simply\nbecause the new unifying ideology happened to come from the left. The next one\nmight come from the right. Imagine what that would be like.  \n  \nFortunately in western countries the suppression of heresies is nothing like\nas bad as it used to be. Though the window of opinions you can express\npublicly has narrowed in the last decade, it's still much wider than it was a\nfew hundred years ago. The problem is the derivative. Up till about 1985 the\nwindow had been growing ever wider. Anyone looking into the future in 1985\nwould have expected freedom of expression to continue to increase. Instead it\nhas decreased. [5]  \n  \nThe situation is similar to what's happened with infectious diseases like\nmeasles. Anyone looking into the future in 2010 would have expected the number\nof measles cases in the US to continue to decrease. Instead, thanks to anti-\nvaxxers, it has increased. The absolute number is still not that high. The\nproblem is the derivative. [6]  \n  \nIn both cases it's hard to know how much to worry. Is it really dangerous to\nsociety as a whole if a handful of extremists refuse to get their kids\nvaccinated, or shout down speakers at universities? The point to start\nworrying is presumably when their efforts start to spill over into everyone\nelse's lives. And in both cases that does seem to be happening.  \n  \nSo it's probably worth spending some amount of effort on pushing back to keep\nopen the window of free expression. My hope is that this essay will help form\nsocial antibodies not just against current efforts to suppress ideas, but\nagainst the concept of heresy in general. That's the real prize. How do you\ndisable the concept of heresy? Since the Enlightenment, western societies have\ndiscovered many techniques for doing that, but there are surely more to be\ndiscovered.  \n  \nOverall I'm optimistic. Though the trend in freedom of expression has been bad\nover the last decade, it's been good over the longer term. And there are signs\nthat the current wave of intolerance is peaking. Independent-minded people I\ntalk to seem more confident than they did a few years ago. On the other side,\neven some of the\n[_leaders_](https://www.nytimes.com/2022/03/18/opinion/cancel-culture-free-\nspeech-poll.html) are starting to wonder if things have gone too far. And\npopular culture among the young has already moved on. All we have to do is\nkeep pushing back, and the wave collapses. And then we'll be net ahead,\nbecause as well as having defeated this wave, we'll also have developed new\ntactics for resisting the next one.  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] Or more accurately, biographies of Newton, since Westfall wrote two: a\nlong version called _Never at Rest_ , and a shorter one called _The Life of\nIsaac Newton_. Both are great. The short version moves faster, but the long\none is full of interesting and often very funny details. This passage is the\nsame in both.  \n  \n[2] Another more subtle but equally damning bit of evidence is that claims of\nx-ism are never qualified. You never hear anyone say that a statement is\n\"probably x-ist\" or \"almost certainly y-ist.\" If claims of x-ism were actually\nclaims about truth, you'd expect to see \"probably\" in front of \"x-ist\" as\noften as you see it in front of \"fallacious.\"  \n  \n[3] The rules must be strict, but they need not be demanding. So the most\neffective type of rules are those about superficial matters, like doctrinal\nminutiae, or the precise words adherents must use. Such rules can be made\nextremely complicated, and yet don't repel potential converts by requiring\nsignificant sacrifice.  \n  \nThe superficial demands of orthodoxy make it an inexpensive substitute for\nvirtue. And that in turn is one of the reasons orthodoxy is so attractive to\nbad people. You could be a horrible person, and yet as long as you're\northodox, you're better than everyone who isn't.  \n  \n[4] Arguably there were two. The first had died down somewhat by 2000, but was\nfollowed by a second in the 2010s, probably caused by social media.  \n  \n[5] Fortunately most of those trying to suppress ideas today still respect\nEnlightenment principles enough to pay lip service to them. They know they're\nnot supposed to ban ideas per se, so they have to recast the ideas as causing\n\"harm,\" which sounds like something that can be banned. The more extreme try\nto claim speech itself is violence, or even that silence is. But strange as it\nmay sound, such gymnastics are a good sign. We'll know we're really in trouble\nwhen they stop bothering to invent pretenses for banning ideas \u2014 when, like\nthe medieval church, they say \"Damn right we're banning ideas, and in fact\nhere's a list of them.\"  \n  \n[6] People only have the luxury of ignoring the medical consensus about\nvaccines because vaccines have worked so well. If we didn't have any vaccines\nat all, the mortality rate would be so high that most current anti-vaxxers\nwould be begging for them. And the situation with freedom of expression is\nsimilar. It's only because they live in a world created by the Enlightenment\nthat kids from the suburbs can play at banning ideas.  \n  \n  \n  \n**Thanks** to Marc Andreessen, Chris Best, Trevor Blackwell, Nicholas\nChristakis, Daniel Gackle, Jonathan Haidt, Claire Lehmann, Jessica Livingston,\nGreg Lukianoff, Robert Morris, and Garry Tan for reading drafts of this.  \n  \n\nApril 2008  \n  \nThere are some topics I save up because they'll be so much fun to write about.\nThis is one of them: a list of my heroes.  \n  \nI'm not claiming this is a list of the _n_ most admirable people. Who could\nmake such a list, even if they wanted to?  \n  \nEinstein isn't on the list, for example, even though he probably deserves to\nbe on any shortlist of admirable people. I once asked a physicist friend if\nEinstein was really as smart as his fame implies, and she said that yes, he\nwas. So why isn't he on the list? Because I had to ask. This is a list of\npeople who've influenced me, not people who would have if I understood their\nwork.  \n  \nMy test was to think of someone and ask \"is this person my hero?\" It often\nreturned surprising answers. For example, it returned false for Montaigne, who\nwas arguably the inventor of the essay. Why? When I thought about what it\nmeant to call someone a hero, it meant I'd decide what to do by asking what\nthey'd do in the same situation. That's a stricter standard than admiration.  \n  \nAfter I made the list, I looked to see if there was a pattern, and there was,\na very clear one. Everyone on the list had two qualities: they cared almost\nexcessively about their work, and they were absolutely honest. By honest I\ndon't mean trustworthy so much as that they never pander: they never say or do\nsomething because that's what the audience wants. They are all fundamentally\nsubversive for this reason, though they conceal it to varying degrees.  \n  \n**Jack Lambert**  \n  \nI grew up in Pittsburgh in the 1970s. Unless you were there it's hard to\nimagine how that town felt about the Steelers. Locally, all the news was bad.\nThe steel industry was dying. But the Steelers were the best team in football\n\u2014 and moreover, in a way that seemed to reflect the personality of the city.\nThey didn't do anything fancy. They just got the job done.  \n  \nOther players were more famous: Terry Bradshaw, Franco Harris, Lynn Swann. But\nthey played offense, and you always get more attention for that. It seemed to\nme as a twelve year old football expert that the best of them all was [Jack\nLambert](http://en.wikipedia.org/wiki/Jack_Lambert_\\(American_football_player\\)).\nAnd what made him so good was that he was utterly relentless. He didn't just\ncare about playing well; he cared almost too much. He seemed to regard it as a\npersonal insult when someone from the other team had possession of the ball on\nhis side of the line of scrimmage.  \n  \nThe suburbs of Pittsburgh in the 1970s were a pretty dull place. School was\nboring. All the adults around were bored with their jobs working for big\ncompanies. Everything that came to us through the mass media was (a) blandly\nuniform and (b) produced elsewhere. Jack Lambert was the exception. He was\nlike nothing else I'd seen.  \n  \n**Kenneth Clark**  \n  \nKenneth Clark is the best nonfiction writer I know of, on any subject. Most\npeople who write about art history don't really like art; you can tell from a\nthousand little signs. But Clark did, and not just intellectually, but the way\none anticipates a delicious dinner.  \n  \nWhat really makes him stand out, though, is the quality of his ideas. His\nstyle is deceptively casual, but there is more in his books than in a library\nof art monographs. Reading [_The Nude_](http://www.amazon.com/Nude-Study-\nIdeal-Form/dp/0691017883) is like a ride in a Ferrari. Just as you're getting\nsettled, you're slammed back in your seat by the acceleration. Before you can\nadjust, you're thrown sideways as the car screeches into the first turn. His\nbrain throws off ideas almost too fast to grasp them. Finally at the end of\nthe chapter you come to a halt, with your eyes wide and a big smile on your\nface.  \n  \nKenneth Clark was a star in his day, thanks to the documentary series\n[_Civilisation_](http://www.amazon.com/dp/B000F0UUKA). And if you read only\none book about art history,\n[_Civilisation_](http://www.abebooks.com/servlet/SearchResults?an=clark&sts=t&tn=civilisation)\nis the one I'd recommend. It's much better than the drab Sears Catalogs of art\nthat undergraduates are forced to buy for Art History 101.  \n  \n**Larry Mihalko**  \n  \nA lot of people have a great teacher at some point in their childhood. Larry\nMihalko was mine. When I look back it's like there's a line drawn between\nthird and fourth grade. After Mr. Mihalko, everything was different.  \n  \nWhy? First of all, he was intellectually curious. I had a few other teachers\nwho were smart, but I wouldn't describe them as intellectually curious. In\nretrospect, he was out of place as an elementary school teacher, and I think\nhe knew it. That must have been hard for him, but it was wonderful for us, his\nstudents. His class was a constant adventure. I used to like going to school\nevery day.  \n  \nThe other thing that made him different was that he liked us. Kids are good at\ntelling that. The other teachers were at best benevolently indifferent. But\nMr. Mihalko seemed like he actually wanted to be our friend. On the last day\nof fourth grade, he got out one of the heavy school record players and played\nJames Taylor's \"You've Got a Friend\" to us. Just call out my name, and you\nknow wherever I am, I'll come running. He died at 59 of lung cancer. I've\nnever cried like I cried at his funeral.  \n  \n**Leonardo**  \n  \nOne of the things I've learned about making things that I didn't realize when\nI was a kid is that much of the best stuff isn't made for audiences, but for\noneself. You see paintings and drawings in museums and imagine they were made\nfor you to look at. Actually a lot of the best ones were made as a way of\nexploring the world, not as a way to please other people. The best of these\nexplorations are sometimes more pleasing than stuff made explicitly to please.  \n  \nLeonardo did a lot of things. One of his most admirable qualities was that he\ndid so many different things that were admirable. What people know of him now\nis his paintings and his more flamboyant inventions, like flying machines.\nThat makes him seem like some kind of dreamer who sketched artists'\nconceptions of rocket ships on the side. In fact he made a large number of far\nmore practical technical discoveries. He was as good an engineer as a painter.  \n  \nHis most impressive work, to me, is his\n[drawings](https://sep.turbifycdn.com/ty/cdn/paulgraham/leonardo-\nskull.jpg?t=1688221954&). They're clearly made more as a way of studying the\nworld than producing something beautiful. And yet they can hold their own with\nany work of art ever made. No one else, before or since, was that good when no\none was looking.  \n  \n**Robert Morris**  \n  \nRobert Morris has a very unusual quality: he's never wrong. It might seem this\nwould require you to be omniscient, but actually it's surprisingly easy. Don't\nsay anything unless you're fairly sure of it. If you're not omniscient, you\njust don't end up saying much.  \n  \nMore precisely, the trick is to pay careful attention to how you qualify what\nyou say. By using this trick, Robert has, as far as I know, managed to be\nmistaken only once, and that was when he was an undergrad. When the Mac came\nout, he said that little desktop computers would never be suitable for real\nhacking.  \n  \nIt's wrong to call it a trick in his case, though. If it were a conscious\ntrick, he would have slipped in a moment of excitement. With Robert this\nquality is wired-in. He has an almost superhuman integrity. He's not just\ngenerally correct, but also correct about how correct he is.  \n  \nYou'd think it would be such a great thing never to be wrong that everyone\nwould do this. It doesn't seem like that much extra work to pay as much\nattention to the error on an idea as to the idea itself. And yet practically\nno one does. I know how hard it is, because since meeting Robert I've tried to\ndo in software what he seems to do in hardware.  \n  \n**P. G. Wodehouse**  \n  \nPeople are finally starting to admit that Wodehouse was a great writer. If you\nwant to be thought a great novelist in your own time, you have to sound\nintellectual. If what you write is popular, or entertaining, or funny, you're\nipso facto suspect. That makes Wodehouse doubly impressive, because it meant\nthat to write as he wanted to, he had to commit to being despised in his own\nlifetime.  \n  \nEvelyn Waugh called him a great writer, but to most people at the time that\nwould have read as a chivalrous or deliberately perverse gesture. At the time\nany random autobiographical novel by a recent college grad could count on more\nrespectful treatment from the literary establishment.  \n  \nWodehouse may have begun with simple atoms, but the way he composed them into\nmolecules was near faultless. His rhythm in particular. It makes me self-\nconscious to write about it. I can think of only two other writers who came\nnear him for style: Evelyn Waugh and Nancy Mitford. Those three used the\nEnglish language like they owned it.  \n  \nBut Wodehouse has something neither of them did. He's at ease. Evelyn Waugh\nand Nancy Mitford cared what other people thought of them: he wanted to seem\naristocratic; she was afraid she wasn't smart enough. But Wodehouse didn't\ngive a damn what anyone thought of him. He wrote exactly what he wanted.  \n  \n**Alexander Calder**  \n  \nCalder's on this list because he makes me happy. Can his work stand up to\nLeonardo's? Probably not. There might not be anything from the 20th Century\nthat can. But what was good about Modernism, Calder had, and had in a way that\nhe made seem effortless.  \n  \nWhat was good about Modernism was its freshness. Art became stuffy in the\nnineteenth century. The paintings that were popular at the time were mostly\nthe art equivalent of McMansions\u2014big, pretentious, and fake. Modernism meant\nstarting over, making things with the same earnest motives that children\nmight. The artists who benefited most from this were the ones who had\npreserved a child's confidence, like Klee and Calder.  \n  \nKlee was impressive because he could work in so many different styles. But\nbetween the two I like Calder better, because his work seemed happier.\nUltimately the point of art is to engage the viewer. It's hard to predict what\nwill; often something that seems interesting at first will bore you after a\nmonth. Calder's\n[sculptures](https://www.flickr.com/photos/uergevich/7029234689/) never get\nboring. They just sit there quietly radiating optimism, like a battery that\nnever runs out. As far as I can tell from books and photographs, the happiness\nof Calder's work is his own happiness showing through.  \n  \n**Jane Austen**  \n  \nEveryone admires Jane Austen. Add my name to the list. To me she seems the\nbest novelist of all time.  \n  \nI'm interested in how things work. When I read most novels, I pay as much\nattention to the author's choices as to the story. But in her novels I can't\nsee the gears at work. Though I'd really like to know how she does what she\ndoes, I can't figure it out, because she's so good that her stories don't seem\nmade up. I feel like I'm reading a description of something that actually\nhappened.  \n  \nI used to read a lot of novels when I was younger. I can't read most anymore,\nbecause they don't have enough information in them. Novels seem so\nimpoverished compared to history and biography. But reading Austen is like\nreading nonfiction. She writes so well you don't even notice her.  \n  \n**John McCarthy**  \n  \nJohn McCarthy invented Lisp, the field of (or at least the term) artificial\nintelligence, and was an early member of both of the top two computer science\ndepartments, MIT and Stanford. No one would dispute that he's one of the\ngreats, but he's an especial hero to me because of [Lisp](rootsoflisp.html).  \n  \nIt's hard for us now to understand what a conceptual leap that was at the\ntime. Paradoxically, one of the reasons his achievement is hard to appreciate\nis that it was so successful. Practically every programming language invented\nin the last 20 years includes ideas from Lisp, and each year the median\nlanguage gets more Lisplike.  \n  \nIn 1958 these ideas were anything but obvious. In 1958 there seem to have been\ntwo ways of thinking about programming. Some people thought of it as math, and\nproved things about Turing Machines. Others thought of it as a way to get\nthings done, and designed languages all too influenced by the technology of\nthe day. McCarthy alone bridged the gap. He designed a language that was math.\nBut designed is not really the word; discovered is more like it.  \n  \n**The Spitfire**  \n  \nAs I was making this list I found myself thinking of people like [Douglas\nBader](http://en.wikipedia.org/wiki/Douglas_Bader) and [R.J.\nMitchell](http://en.wikipedia.org/wiki/R._J._Mitchell) and [Jeffrey\nQuill](http://www.amazon.com/Spitfire-Pilots-Story-Crecy-Cover/dp/0947554726)\nand I realized that though all of them had done many things in their lives,\nthere was one factor above all that connected them: the Spitfire.  \n  \nThis is supposed to be a list of heroes. How can a machine be on it? Because\nthat machine was not just a machine. It was a lens of heroes. Extraordinary\ndevotion went into it, and extraordinary courage came out.  \n  \nIt's a cliche to call World War II a contest between good and evil, but\nbetween fighter designs, it really was. The Spitfire's original nemesis, the\nME 109, was a brutally practical plane. It was a killing machine. The Spitfire\nwas optimism embodied. And not just in its beautiful lines: it was at the edge\nof what could be manufactured. But taking the high road worked. In the air,\nbeauty had the edge, just.  \n  \n**Steve Jobs**  \n  \nPeople alive when Kennedy was killed usually remember exactly where they were\nwhen they heard about it. I remember exactly where I was when a friend asked\nif I'd heard Steve Jobs had cancer. It was like the floor dropped out. A few\nseconds later she told me that it was a rare operable type, and that he'd be\nok. But those seconds seemed long.  \n  \nI wasn't sure whether to include Jobs on this list. A lot of people at Apple\nseem to be afraid of him, which is a bad sign. But he compels admiration.  \n  \nThere's no name for what Steve Jobs is, because there hasn't been anyone quite\nlike him before. He doesn't design Apple's products himself. Historically the\nclosest analogy to what he does are the great Renaissance patrons of the arts.\nAs the CEO of a company, that makes him unique.  \n  \nMost CEOs delegate [taste](taste.html) to a subordinate. The [design\nparadox](gh.html) means they're choosing more or less at random. But Steve\nJobs actually has taste himself \u2014 such good taste that he's shown the world\nhow much more important taste is than they realized.  \n  \n**Isaac Newton**  \n  \nNewton has a strange role in my pantheon of heroes: he's the one I reproach\nmyself with. He worked on big things, at least for part of his life. It's so\neasy to get distracted working on small stuff. The questions you're answering\nare pleasantly familiar. You get immediate rewards \u2014 in fact, you get bigger\nrewards in your time if you work on matters of passing importance. But I'm\nuncomfortably aware that this is the route to well-deserved obscurity.  \n  \nTo do really great things, you have to seek out questions people didn't even\nrealize were questions. There have probably been other people who did this as\nwell as Newton, for their time, but Newton is my model of this kind of\nthought. I can just begin to understand what it must have felt like for him.  \n  \nYou only get one life. Why not do something huge? The phrase \"paradigm shift\"\nis overused now, but Kuhn was onto something. And you know more are out there,\nseparated from us by what will later seem a surprisingly thin wall of laziness\nand stupidity. If we work like Newton.  \n  \n  \n  \n  \n  \n  \n  \n**Thanks** to Trevor Blackwell, Jessica Livingston, and Jackie McDonough for\nreading drafts of this.  \n  \n\nDecember 2008  \n  \nFor nearly all of history the success of a society was proportionate to its\nability to assemble large and disciplined organizations. Those who bet on\neconomies of scale generally won, which meant the largest organizations were\nthe most successful ones.  \n  \nThings have already changed so much that this is hard for us to believe, but\ntill just a few decades ago the largest organizations tended to be the most\nprogressive. An ambitious kid graduating from college in 1960 wanted to work\nin the huge, gleaming offices of Ford, or General Electric, or NASA. Small\nmeant small-time. Small in 1960 didn't mean a cool little startup. It meant\nuncle Sid's shoe store.  \n  \nWhen I grew up in the 1970s, the idea of the \"corporate ladder\" was still very\nmuch alive. The standard plan was to try to get into a good college, from\nwhich one would be drafted into some organization and then rise to positions\nof gradually increasing responsibility. The more ambitious merely hoped to\nclimb the same ladder faster. [1]  \n  \nBut in the late twentieth century something changed. It turned out that\neconomies of scale were not the only force at work. Particularly in\ntechnology, the increase in speed one could get from smaller groups started to\ntrump the advantages of size.  \n  \nThe future turned out to be different from the one we were expecting in 1970.\nThe domed cities and flying cars we expected have failed to materialize. But\nfortunately so have the jumpsuits with badges indicating our specialty and\nrank. Instead of being dominated by a few, giant tree-structured\norganizations, it's now looking like the economy of the future will be a fluid\nnetwork of smaller, independent units.  \n  \nIt's not so much that large organizations stopped working. There's no evidence\nthat famously successful organizations like the Roman army or the British East\nIndia Company were any less afflicted by protocol and politics than\norganizations of the same size today. But they were competing against\nopponents who couldn't change the rules on the fly by discovering new\ntechnology. Now it turns out the rule \"large and disciplined organizations\nwin\" needs to have a qualification appended: \"at games that change slowly.\" No\none knew till change reached a sufficient speed.  \n  \nLarge organizations _will_ start to do worse now, though, because for the\nfirst time in history they're no longer getting the best people. An ambitious\nkid graduating from college now doesn't want to work for a big company. They\nwant to work for the hot startup that's rapidly growing into one. If they're\nreally ambitious, they want to start it. [2]  \n  \nThis doesn't mean big companies will disappear. To say that startups will\nsucceed implies that big companies will exist, because startups that succeed\neither become big companies or are acquired by them. [3] But large\norganizations will probably never again play the leading role they did up till\nthe last quarter of the twentieth century.  \n  \nIt's kind of surprising that a trend that lasted so long would ever run out.\nHow often does it happen that a rule works for thousands of years, then\nswitches polarity?  \n  \nThe millennia-long run of bigger-is-better left us with a lot of\n[traditions](credentials.html) that are now obsolete, but extremely deeply\nrooted. Which means the ambitious can now do arbitrage on them. It will be\nvery valuable to understand precisely which ideas to keep and which can now be\ndiscarded.  \n  \nThe place to look is where the spread of smallness began: in the world of\nstartups.  \n  \nThere have always been occasional cases, particularly in the US, of ambitious\npeople who grew the ladder under them instead of climbing it. But till\nrecently this was an anomalous route that tended to be followed only by\noutsiders. It was no coincidence that the great industrialists of the\nnineteenth century had so little formal education. As huge as their companies\neventually became, they were all essentially mechanics and shopkeepers at\nfirst. That was a social step no one with a college education would take if\nthey could avoid it. Till the rise of technology startups, and in particular,\nInternet startups, it was very unusual for educated people to start their own\nbusinesses.  \n  \nThe eight men who left Shockley Semiconductor to found Fairchild\nSemiconductor, the original Silicon Valley startup, weren't even trying to\nstart a company at first. They were just looking for a company willing to hire\nthem as a group. Then one of their parents introduced them to a small\ninvestment bank that offered to find funding for them to start their own, so\nthey did. But starting a company was an alien idea to them; it was something\nthey backed into. [4]  \n  \nNow I would guess that practically every Stanford or Berkeley undergrad who\nknows how to program has at least considered the idea of starting a startup.\nEast Coast universities are not far behind, and British universities only a\nlittle behind them. This pattern suggests that attitudes at Stanford and\nBerkeley are not an anomaly, but a leading indicator. This is the way the\nworld is going.  \n  \nOf course, Internet startups are still only a fraction of the world's economy.\nCould a trend based on them be that powerful?  \n  \nI think so. There's no reason to suppose there's any limit to the amount of\nwork that could be done in this area. Like science, wealth seems to expand\nfractally. Steam power was a sliver of the British economy when Watt started\nworking on it. But his work led to more work till that sliver had expanded\ninto something bigger than the whole economy of which it had initially been a\npart.  \n  \nThe same thing could happen with the Internet. If Internet startups offer the\nbest opportunity for ambitious people, then a lot of ambitious people will\nstart them, and this bit of the economy will balloon in the usual fractal way.  \n  \nEven if Internet-related applications only become a tenth of the world's\neconomy, this component will set the tone for the rest. The most dynamic part\nof the economy always does, in everything from salaries to standards of dress.\nNot just because of its prestige, but because the principles underlying the\nmost dynamic part of the economy tend to be ones that work.  \n  \nFor the future, the trend to bet on seems to be networks of small, autonomous\ngroups whose performance is measured individually. And the societies that win\nwill be the ones with the least impedance.  \n  \nAs with the original industrial revolution, some societies are going to be\nbetter at this than others. Within a generation of its birth in England, the\nIndustrial Revolution had spread to continental Europe and North America. But\nit didn't spread everywhere. This new way of doing things could only take root\nin places that were prepared for it. It could only spread to places that\nalready had a vigorous middle class.  \n  \nThere is a similar social component to the transformation that began in\nSilicon Valley in the 1960s. Two new kinds of techniques were developed there:\ntechniques for building integrated circuits, and techniques for building a new\ntype of company designed to grow fast by creating new technology. The\ntechniques for building integrated circuits spread rapidly to other countries.\nBut the techniques for building startups didn't. Fifty years later, startups\nare ubiquitous in Silicon Valley and common in a handful of other US cities,\nbut they're still an anomaly in most of the world.  \n  \nPart of the reason\u2014possibly the main reason\u2014that startups have not spread as\nbroadly as the Industrial Revolution did is their social disruptiveness.\nThough it brought many social changes, the Industrial Revolution was not\nfighting the principle that bigger is better. Quite the opposite: the two\ndovetailed beautifully. The new industrial companies adapted the customs of\nexisting large organizations like the military and the civil service, and the\nresulting hybrid worked well. \"Captains of industry\" issued orders to \"armies\nof workers,\" and everyone knew what they were supposed to do.  \n  \nStartups seem to go more against the grain, socially. It's hard for them to\nflourish in societies that value hierarchy and stability, just as it was hard\nfor industrialization to flourish in societies ruled by people who stole at\nwill from the merchant class. But there were already a handful of countries\npast that stage when the Industrial Revolution happened. There do not seem to\nbe that many ready this time.  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] One of the bizarre consequences of this model was that the usual way to\nmake more money was to become a manager. This is one of the things startups\nfix.  \n  \n[2] There are a lot of reasons American car companies have been doing so much\nworse than Japanese car companies, but at least one of them is a cause for\noptimism: American graduates have more options.  \n  \n[3] It's possible that companies will one day be able to grow big in revenues\nwithout growing big in people, but we are not very far along that trend yet.  \n  \n[4] Lecuyer, Christophe, _Making Silicon Valley_ , MIT Press, 2006.  \n  \n**Thanks** to Trevor Blackwell, Paul Buchheit, Jessica Livingston, and Robert\nMorris for reading drafts of this.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nSeptember 2010  \n  \nThe reason startups have been using [more convertible\nnotes](http://twitter.com/paulg/status/22319113993) in angel rounds is that\nthey make deals close faster. By making it easier for startups to give\ndifferent prices to different investors, they help them break the sort of\ndeadlock that happens when investors all wait to see who else is going to\ninvest.  \n  \nBy far the biggest influence on investors' opinions of a startup is the\nopinion of other investors. There are very, very few who simply decide for\nthemselves. Any startup founder can tell you the most common question they\nhear from investors is not about the founders or the product, but \"who else is\ninvesting?\"  \n  \nThat tends to produce deadlocks. Raising an old-fashioned fixed-size equity\nround can take weeks, because all the angels sit around waiting for the others\nto commit, like competitors in a bicycle sprint who deliberately ride slowly\nat the start so they can follow whoever breaks first.  \n  \nConvertible notes let startups beat such deadlocks by rewarding investors\nwilling to move first with lower (effective) valuations. Which they deserve\nbecause they're taking more risk. It's much safer to invest in a startup Ron\nConway has already invested in; someone who comes after him should pay a\nhigher price.  \n  \nThe reason convertible notes allow more flexibility in price is that valuation\ncaps aren't actual valuations, and notes are cheap and easy to do. So you can\ndo high-resolution fundraising: if you wanted you could have a separate note\nwith a different cap for each investor.  \n  \nThat cap need not simply rise monotonically. A startup could also give better\ndeals to investors they expected to help them most. The point is simply that\ndifferent investors, whether because of the help they offer or their\nwillingness to commit, have different values for startups, and their terms\nshould reflect that.  \n  \nDifferent terms for different investors is clearly the way of the future.\nMarkets always evolve toward higher resolution. You may not need to use\nconvertible notes to do it. With sufficiently lightweight standardized equity\nterms (and some changes in investors' and lawyers' expectations about equity\nrounds) you might be able to do the same thing with equity instead of debt.\nEither would be fine with startups, so long as they can easily change their\nvaluation.  \n  \nDeadlocks weren't the only problem with fixed-size equity rounds. Another was\nthat startups had to decide in advance how much to raise. I think it's a\nmistake for a startup to fix upon a specific number. If investors are easily\nconvinced, the startup should raise more now, and if investors are skeptical,\nthe startup should take a smaller amount and use that to get the company to\nthe point where it's more convincing.  \n  \nIt's just not reasonable to expect startups to pick an optimal round size in\nadvance, because that depends on the reactions of investors, and those are\nimpossible to predict.  \n  \nFixed-size, multi-investor angel rounds are such a bad idea for startups that\none wonders why things were ever done that way. One possibility is that this\ncustom reflects the way investors like to collude when they can get away with\nit. But I think the actual explanation is less sinister. I think angels (and\ntheir lawyers) organized rounds this way in unthinking imitation of VC series\nA rounds. In a series A, a fixed-size equity round with a lead makes sense,\nbecause there is usually just one big investor, who is unequivocally the lead.\nFixed-size series A rounds already are high res. But the more investors you\nhave in a round, the less sense it makes for everyone to get the same price.  \n  \nThe most interesting question here may be what high res fundraising will do to\nthe world of investors. Bolder investors will now get rewarded with lower\nprices. But more important, in a hits-driven business, is that they'll be able\nto get into the deals they want. Whereas the \"who else is investing?\" type of\ninvestors will not only pay higher prices, but may not be able to get into the\nbest deals at all.  \n  \n  \n  \n  \n  \n  \n  \n**Thanks** to Immad Akhund, Sam Altman, John Bautista, Pete Koomen, Jessica\nLivingston, Dan Siroker, Harj Taggar, and Fred Wilson for reading drafts of\nthis.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nMay 2005  \n  \n _(This essay is derived from a talk at the Berkeley CSUA.)_  \n  \nThe three big powers on the Internet now are Yahoo, Google, and Microsoft.\nAverage age of their founders: 24. So it is pretty well established now that\ngrad students can start successful companies. And if grad students can do it,\nwhy not undergrads?  \n  \nLike everything else in technology, the cost of starting a startup has\ndecreased dramatically. Now it's so low that it has disappeared into the\nnoise. The main cost of starting a Web-based startup is food and rent. Which\nmeans it doesn't cost much more to start a company than to be a total slacker.\nYou can probably start a startup on ten thousand dollars of seed funding, if\nyou're prepared to live on ramen.  \n  \nThe less it costs to start a company, the less you need the permission of\ninvestors to do it. So a lot of people will be able to start companies now who\nnever could have before.  \n  \nThe most interesting subset may be those in their early twenties. I'm not so\nexcited about founders who have everything investors want except intelligence,\nor everything except energy. The most promising group to be liberated by the\nnew, lower threshold are those who have everything investors want except\nexperience.  \n  \n**Market Rate**  \n  \nI once claimed that [nerds](nerds.html) were unpopular in secondary school\nmainly because they had better things to do than work full-time at being\npopular. Some said I was just telling people what they wanted to hear. Well,\nI'm now about to do that in a spectacular way: I think undergraduates are\nundervalued.  \n  \nOr more precisely, I think few realize the huge spread in the value of 20 year\nolds. Some, it's true, are not very capable. But others are more capable than\nall but a handful of 30 year olds. [1]  \n  \nTill now the problem has always been that it's difficult to pick them out.\nEvery VC in the world, if they could go back in time, would try to invest in\nMicrosoft. But which would have then? How many would have understood that this\nparticular 19 year old was Bill Gates?  \n  \nIt's hard to judge the young because (a) they change rapidly, (b) there is\ngreat variation between them, and (c) they're individually inconsistent. That\nlast one is a big problem. When you're young, you occasionally say and do\nstupid things even when you're smart. So if the algorithm is to filter out\npeople who say stupid things, as many investors and employers unconsciously\ndo, you're going to get a lot of false positives.  \n  \nMost organizations who hire people right out of college are only aware of the\naverage value of 22 year olds, which is not that high. And so the idea for\nmost of the twentieth century was that everyone had to begin as a trainee in\nsome [entry-level](http://slashdot.org/comments.pl?sid=158756&cid=13299057)\njob. Organizations realized there was a lot of variation in the incoming\nstream, but instead of pursuing this thought they tended to suppress it, in\nthe belief that it was good for even the most promising kids to start at the\nbottom, so they didn't get swelled heads.  \n  \nThe most productive young people will _always_ be undervalued by large\norganizations, because the young have no performance to measure yet, and any\nerror in guessing their ability will tend toward the mean.  \n  \nWhat's an especially productive 22 year old to do? One thing you can do is go\nover the heads of organizations, directly to the users. Any company that hires\nyou is, economically, acting as a proxy for the customer. The rate at which\nthey value you (though they may not consciously realize it) is an attempt to\nguess your value to the user. But there's a way to appeal their judgement. If\nyou want, you can opt to be valued directly by users, by starting your own\ncompany.  \n  \nThe market is a lot more discerning than any employer. And it is completely\nnon-discriminatory. On the Internet, nobody knows you're a dog. And more to\nthe point, nobody knows you're 22. All users care about is whether your site\nor software gives them what they want. They don't care if the person behind it\nis a high school kid.  \n  \nIf you're really productive, why not make employers pay market rate for you?\nWhy go work as an ordinary employee for a big company, when you could start a\nstartup and make them buy it to get you?  \n  \nWhen most people hear the word \"startup,\" they think of the famous ones that\nhave gone public. But most startups that succeed do it by getting bought. And\nusually the acquirer doesn't just want the technology, but the people who\ncreated it as well.  \n  \nOften big companies buy startups before they're profitable. Obviously in such\ncases they're not after revenues. What they want is the development team and\nthe software they've built so far. When a startup gets bought for 2 or 3\nmillion six months in, it's really more of a hiring bonus than an acquisition.  \n  \nI think this sort of thing will happen more and more, and that it will be\nbetter for everyone. It's obviously better for the people who start the\nstartup, because they get a big chunk of money up front. But I think it will\nbe better for the acquirers too. The central problem in big companies, and the\nmain reason they're so much less productive than small companies, is the\ndifficulty of valuing each person's work. Buying larval startups solves that\nproblem for them: the acquirer doesn't pay till the developers have proven\nthemselves. Acquirers are protected on the downside, but still get most of the\nupside.  \n  \n**Product Development**  \n  \nBuying startups also solves another problem afflicting big companies: they\ncan't do product development. Big companies are good at extracting the value\nfrom existing products, but bad at creating new ones.  \n  \nWhy? It's worth studying this phenomenon in detail, because this is the raison\nd'etre of startups.  \n  \nTo start with, most big companies have some kind of turf to protect, and this\ntends to warp their development decisions. For example, [Web-based](road.html)\napplications are hot now, but within Microsoft there must be a lot of\nambivalence about them, because the very idea of Web-based software threatens\nthe desktop. So any Web-based application that Microsoft ends up with, will\nprobably, like Hotmail, be something developed outside the company.  \n  \nAnother reason big companies are bad at developing new products is that the\nkind of people who do that tend not to have much power in big companies\n(unless they happen to be the CEO). Disruptive technologies are developed by\ndisruptive people. And they either don't work for the big company, or have\nbeen outmaneuvered by yes-men and have comparatively little influence.  \n  \nBig companies also lose because they usually only build one of each thing.\nWhen you only have one Web browser, you can't do anything really risky with\nit. If ten different startups design ten different Web browsers and you take\nthe best, you'll probably get something better.  \n  \nThe more general version of this problem is that there are too many new ideas\nfor companies to explore them all. There might be 500 startups right now who\nthink they're making something Microsoft might buy. Even Microsoft probably\ncouldn't manage 500 development projects in-house.  \n  \nBig companies also don't pay people the right way. People developing a new\nproduct at a big company get paid roughly the same whether it succeeds or\nfails. People at a startup expect to get rich if the product succeeds, and get\nnothing if it fails. [2] So naturally the people at the startup work a lot\nharder.  \n  \nThe mere bigness of big companies is an obstacle. In startups, developers are\noften forced to talk directly to users, whether they want to or not, because\nthere is no one else to do sales and support. It's painful doing sales, but\nyou learn much more from trying to sell people something than reading what\nthey said in focus groups.  \n  \nAnd then of course, big companies are bad at product development because\nthey're bad at everything. Everything happens slower in big companies than\nsmall ones, and product development is something that has to happen fast,\nbecause you have to go through a lot of iterations to get something good.  \n  \n**Trend**  \n  \nI think the trend of big companies buying startups will only accelerate. One\nof the biggest remaining obstacles is pride. Most companies, at least\nunconsciously, feel they ought to be able to develop stuff in house, and that\nbuying startups is to some degree an admission of failure. And so, as people\ngenerally do with admissions of failure, they put it off for as long as\npossible. That makes the acquisition very expensive when it finally happens.  \n  \nWhat companies should do is go out and discover startups when they're young,\nbefore VCs have puffed them up into something that costs hundreds of millions\nto acquire. Much of what VCs add, the acquirer doesn't need anyway.  \n  \nWhy don't acquirers try to predict the companies they're going to have to buy\nfor hundreds of millions, and grab them early for a tenth or a twentieth of\nthat? Because they can't predict the winners in advance? If they're only\npaying a twentieth as much, they only have to predict a twentieth as well.\nSurely they can manage that.  \n  \nI think companies that acquire technology will gradually learn to go after\nearlier stage startups. They won't necessarily buy them outright. The solution\nmay be some hybrid of investment and acquisition: for example, to buy a chunk\nof the company and get an option to buy the rest later.  \n  \nWhen companies buy startups, they're effectively fusing recruiting and product\ndevelopment. And I think that's more efficient than doing the two separately,\nbecause you always get people who are really committed to what they're working\non.  \n  \nPlus this method yields teams of developers who already work well together.\nAny conflicts between them have been ironed out under the very hot iron of\nrunning a startup. By the time the acquirer gets them, they're finishing one\nanother's sentences. That's valuable in software, because so many bugs occur\nat the boundaries between different people's code.  \n  \n**Investors**  \n  \nThe increasing cheapness of starting a company doesn't just give hackers more\npower relative to employers. It also gives them more power relative to\ninvestors.  \n  \nThe conventional wisdom among VCs is that hackers shouldn't be allowed to run\ntheir own companies. The founders are supposed to accept MBAs as their bosses,\nand themselves take on some title like Chief Technical Officer. There may be\ncases where this is a good idea. But I think founders will increasingly be\nable to push back in the matter of control, because they just don't need the\ninvestors' money as much as they used to.  \n  \nStartups are a comparatively new phenomenon. Fairchild Semiconductor is\nconsidered the first VC-backed startup, and they were founded in 1959, less\nthan fifty years ago. Measured on the time scale of social change, what we\nhave now is pre-beta. So we shouldn't assume the way startups work now is the\nway they have to work.  \n  \nFairchild needed a lot of money to get started. They had to build actual\nfactories. What does the first round of venture funding for a Web-based\nstartup get spent on today? More money can't get software written faster; it\nisn't needed for facilities, because those can now be quite cheap; all money\ncan really buy you is sales and marketing. A sales force is worth something,\nI'll admit. But marketing is increasingly irrelevant. On the Internet,\nanything genuinely good will spread by word of mouth.  \n  \nInvestors' power comes from money. When startups need less money, investors\nhave less power over them. So future founders may not have to accept new CEOs\nif they don't want them. The VCs will have to be dragged kicking and screaming\ndown this road, but like many things people have to be dragged kicking and\nscreaming toward, it may actually be good for them.  \n  \nGoogle is a sign of the way things are going. As a condition of funding, their\ninvestors insisted they hire someone old and experienced as CEO. But from what\nI've heard the founders didn't just give in and take whoever the VCs wanted.\nThey delayed for an entire year, and when they did finally take a CEO, they\nchose a guy with a PhD in computer science.  \n  \nIt sounds to me as if the founders are still the most powerful people in the\ncompany, and judging by Google's performance, their youth and inexperience\ndoesn't seem to have hurt them. Indeed, I suspect Google has done better than\nthey would have if the founders had given the VCs what they wanted, when they\nwanted it, and let some MBA take over as soon as they got their first round of\nfunding.  \n  \nI'm not claiming the business guys installed by VCs have no value. Certainly\nthey have. But they don't need to become the founders' bosses, which is what\nthat title CEO means. I predict that in the future the executives installed by\nVCs will increasingly be COOs rather than CEOs. The founders will run\nengineering directly, and the rest of the company through the COO.  \n  \n**The Open Cage**  \n  \nWith both employers and investors, the balance of power is slowly shifting\ntowards the young. And yet they seem the last to realize it. Only the most\nambitious undergrads even consider starting their own company when they\ngraduate. Most just want to get a job.  \n  \nMaybe this is as it should be. Maybe if the idea of starting a startup is\nintimidating, you filter out the uncommitted. But I suspect the filter is set\na little too high. I think there are people who could, if they tried, start\nsuccessful startups, and who instead let themselves be swept into the intake\nducts of big companies.  \n  \nHave you ever noticed that when animals are let out of cages, they don't\nalways realize at first that the door's open? Often they have to be poked with\na stick to get them out. Something similar happened with blogs. People could\nhave been publishing online in 1995, and yet blogging has only really taken\noff in the last couple years. In 1995 we thought only professional writers\nwere entitled to publish their ideas, and that anyone else who did was a\ncrank. Now publishing online is becoming so popular that everyone wants to do\nit, even print journalists. But blogging has not taken off recently because of\nany technical innovation; it just took eight years for everyone to realize the\ncage was open.  \n  \nI think most undergrads don't realize yet that the economic cage is open. A\nlot have been told by their parents that the route to success is to get a good\njob. This was true when their parents were in college, but it's less true now.\nThe route to success is to build something valuable, and you don't have to be\nworking for an existing company to do that. Indeed, you can often do it better\nif you're not.  \n  \nWhen I talk to undergrads, what surprises me most about them is how\nconservative they are. Not politically, of course. I mean they don't seem to\nwant to take risks. This is a mistake, because the younger you are, the more\nrisk you can take.  \n  \n**Risk**  \n  \nRisk and reward are always proportionate. For example, stocks are riskier than\nbonds, and over time always have greater returns. So why does anyone invest in\nbonds? The catch is that phrase \"over time.\" Stocks will generate greater\nreturns over thirty years, but they might lose value from year to year. So\nwhat you should invest in depends on how soon you need the money. If you're\nyoung, you should take the riskiest investments you can find.  \n  \nAll this talk about investing may seem very theoretical. Most undergrads\nprobably have more debts than assets. They may feel they have nothing to\ninvest. But that's not true: they have their time to invest, and the same rule\nabout risk applies there. Your early twenties are exactly the time to take\ninsane career risks.  \n  \nThe reason risk is always proportionate to reward is that market forces make\nit so. People will pay extra for stability. So if you choose stability-- by\nbuying bonds, or by going to work for a big company-- it's going to cost you.  \n  \nRiskier career moves pay better on average, because there is less demand for\nthem. Extreme choices like starting a startup are so frightening that most\npeople won't even try. So you don't end up having as much competition as you\nmight expect, considering the prizes at stake.  \n  \nThe math is brutal. While perhaps 9 out of 10 startups fail, the one that\nsucceeds will pay the founders more than 10 times what they would have made in\nan ordinary job. [3] That's the sense in which startups pay better \"on\naverage.\"  \n  \nRemember that. If you start a startup, you'll probably fail. Most startups\nfail. It's the nature of the business. But it's not necessarily a mistake to\ntry something that has a 90% chance of failing, if you can afford the risk.\nFailing at 40, when you have a family to support, could be serious. But if you\nfail at 22, so what? If you try to start a startup right out of college and it\ntanks, you'll end up at 23 broke and a lot smarter. Which, if you think about\nit, is roughly what you hope to get from a graduate program.  \n  \nEven if your startup does tank, you won't harm your prospects with employers.\nTo make sure I asked some friends who work for big companies. I asked managers\nat Yahoo, Google, Amazon, Cisco and Microsoft how they'd feel about two\ncandidates, both 24, with equal ability, one who'd tried to start a startup\nthat tanked, and another who'd spent the two years since college working as a\ndeveloper at a big company. Every one responded that they'd prefer the guy\nwho'd tried to start his own company. Zod Nazem, who's in charge of\nengineering at Yahoo, said:\n\n> I actually put more value on the guy with the failed startup. And you can\n> quote me!\n\nSo there you have it. Want to get hired by Yahoo? Start your own company.  \n  \n**The Man is the Customer**  \n  \nIf even big employers think highly of young hackers who start companies, why\ndon't more do it? Why are undergrads so conservative? I think it's because\nthey've spent so much time in institutions.  \n  \nThe first twenty years of everyone's life consists of being piped from one\ninstitution to another. You probably didn't have much choice about the\nsecondary schools you went to. And after high school it was probably\nunderstood that you were supposed to go to college. You may have had a few\ndifferent colleges to choose between, but they were probably pretty similar.\nSo by this point you've been riding on a subway line for twenty years, and the\nnext stop seems to be a job.  \n  \nActually college is where the line ends. Superficially, going to work for a\ncompany may feel like just the next in a series of institutions, but\nunderneath, everything is different. The end of school is the fulcrum of your\nlife, the point where you go from net consumer to net producer.  \n  \nThe other big change is that now, you're steering. You can go anywhere you\nwant. So it may be worth standing back and understanding what's going on,\ninstead of just doing the default thing.  \n  \nAll through college, and probably long before that, most undergrads have been\nthinking about what employers want. But what really matters is what customers\nwant, because they're the ones who give employers the money to pay you.  \n  \nSo instead of thinking about what employers want, you're probably better off\nthinking directly about what users want. To the extent there's any difference\nbetween the two, you can even use that to your advantage if you start a\ncompany of your own. For example, big companies like docile conformists. But\nthis is merely an artifact of their bigness, not something customers need.  \n  \n**Grad School**  \n  \nI didn't consciously realize all this when I was graduating from college--\npartly because I went straight to grad school. Grad school can be a pretty\ngood deal, even if you think of one day starting a startup. You can start one\nwhen you're done, or even pull the ripcord part way through, like the founders\nof Yahoo and Google.  \n  \nGrad school makes a good launch pad for startups, because you're collected\ntogether with a lot of smart people, and you have bigger chunks of time to\nwork on your own projects than an undergrad or corporate employee would. As\nlong as you have a fairly tolerant advisor, you can take your time developing\nan idea before turning it into a company. David Filo and Jerry Yang started\nthe Yahoo directory in February 1994 and were getting a million hits a day by\nthe fall, but they didn't actually drop out of grad school and start a company\ntill March 1995.  \n  \nYou could also try the startup first, and if it doesn't work, then go to grad\nschool. When startups tank they usually do it fairly quickly. Within a year\nyou'll know if you're wasting your time.  \n  \nIf it fails, that is. If it succeeds, you may have to delay grad school a\nlittle longer. But you'll have a much more enjoyable life once there than you\nwould on a regular grad student stipend.  \n  \n**Experience**  \n  \nAnother reason people in their early twenties don't start startups is that\nthey feel they don't have enough experience. Most investors feel the same.  \n  \nI remember hearing a lot of that word \"experience\" when I was in college. What\ndo people really mean by it? Obviously it's not the experience itself that's\nvaluable, but something it changes in your brain. What's different about your\nbrain after you have \"experience,\" and can you make that change happen faster?  \n  \nI now have some data on this, and I can tell you what tends to be missing when\npeople lack experience. I've said that every [startup](start.html) needs three\nthings: to start with good people, to make something users want, and not to\nspend too much money. It's the middle one you get wrong when you're\ninexperienced. There are plenty of undergrads with enough technical skill to\nwrite good software, and undergrads are not especially prone to waste money.\nIf they get something wrong, it's usually not realizing they have to make\nsomething people [want](bronze.html).  \n  \nThis is not exclusively a failing of the young. It's common for startup\nfounders of all ages to build things no one wants.  \n  \nFortunately, this flaw should be easy to fix. If undergrads were all bad\nprogrammers, the problem would be a lot harder. It can take years to learn how\nto program. But I don't think it takes years to learn how to make things\npeople want. My hypothesis is that all you have to do is smack hackers on the\nside of the head and tell them: Wake up. Don't sit here making up a priori\ntheories about what users need. Go find some users and see what they need.  \n  \nMost successful startups not only do something very specific, but solve a\nproblem people already know they have.  \n  \nThe big change that \"experience\" causes in your brain is learning that you\nneed to solve people's problems. Once you grasp that, you advance quickly to\nthe next step, which is figuring out what those problems are. And that takes\nsome effort, because the way software actually gets used, especially by the\npeople who pay the most for it, is not at all what you might expect. For\nexample, the stated purpose of Powerpoint is to present ideas. Its real role\nis to overcome people's fear of public speaking. It allows you to give an\nimpressive-looking talk about nothing, and it causes the audience to sit in a\ndark room looking at slides, instead of a bright one looking at you.  \n  \nThis kind of thing is out there for anyone to see. The key is to know to look\nfor it-- to realize that having an idea for a startup is not like having an\nidea for a class project. The goal in a startup is not to write a cool piece\nof software. It's to make something people want. And to do that you have to\nlook at users-- forget about hacking, and just look at users. This can be\nquite a mental adjustment, because little if any of the software you write in\nschool even has users.  \n  \nA few steps before a Rubik's Cube is solved, it still looks like a mess. I\nthink there are a lot of undergrads whose brains are in a similar position:\nthey're only a few steps away from being able to start successful startups, if\nthey wanted to, but they don't realize it. They have more than enough\ntechnical skill. They just haven't realized yet that the way to create wealth\nis to make what users want, and that employers are just proxies for users in\nwhich risk is pooled.  \n  \nIf you're young and smart, you don't need either of those. You don't need\nsomeone else to tell you what users want, because you can figure it out\nyourself. And you don't want to pool risk, because the younger you are, the\nmore risk you should take.  \n  \n**A Public Service Message**  \n  \nI'd like to conclude with a joint message from me and your parents. Don't drop\nout of college to start a startup. There's no rush. There will be plenty of\ntime to start companies after you graduate. In fact, it may be just as well to\ngo work for an existing company for a couple years after you graduate, to\nlearn how companies work.  \n  \nAnd yet, when I think about it, I can't imagine telling Bill Gates at 19 that\nhe should wait till he graduated to start a company. He'd have told me to get\nlost. And could I have honestly claimed that he was harming his future-- that\nhe was learning less by working at ground zero of the microcomputer revolution\nthan he would have if he'd been taking classes back at Harvard? No, probably\nnot.  \n  \nAnd yes, while it is probably true that you'll learn some valuable things by\ngoing to work for an existing company for a couple years before starting your\nown, you'd learn a thing or two running your own company during that time too.  \n  \nThe advice about going to work for someone else would get an even colder\nreception from the 19 year old Bill Gates. So I'm supposed to finish college,\nthen go work for another company for two years, and then I can start my own? I\nhave to wait till I'm 23? That's _four years_. That's more than twenty percent\nof my life so far. Plus in four years it will be way too late to make money\nwriting a Basic interpreter for the Altair.  \n  \nAnd he'd be right. The Apple II was launched just two years later. In fact, if\nBill had finished college and gone to work for another company as we're\nsuggesting, he might well have gone to work for Apple. And while that would\nprobably have been better for all of us, it wouldn't have been better for him.  \n  \nSo while I stand by our responsible advice to finish college and then go work\nfor a while before starting a startup, I have to admit it's one of those\nthings the old tell the young, but don't expect them to listen to. We say this\nsort of thing mainly so we can claim we warned you. So don't say I didn't warn\nyou.  \n  \n  \n  \n**Notes**  \n  \n[1] The average B-17 pilot in World War II was in his early twenties. (Thanks\nto Tad Marko for pointing this out.)  \n  \n[2] If a company tried to pay employees this way, they'd be called unfair. And\nyet when they buy some startups and not others, no one thinks of calling that\nunfair.  \n  \n[3] The 1/10 success rate for startups is a bit of an urban legend. It's\nsuspiciously neat. My guess is the odds are slightly worse.  \n  \n**Thanks** to Jessica Livingston for reading drafts of this, to the friends I\npromised anonymity to for their opinions about hiring, and to Karen Nguyen and\nthe Berkeley CSUA for organizing this talk.  \n  \n  \n\nMay 2003  \n  \n _(This essay is derived from a guest lecture at Harvard, which incorporated\nan earlier talk at Northeastern.)_  \n  \nWhen I finished grad school in computer science I went to art school to study\npainting. A lot of people seemed surprised that someone interested in\ncomputers would also be interested in painting. They seemed to think that\nhacking and painting were very different kinds of work-- that hacking was\ncold, precise, and methodical, and that painting was the frenzied expression\nof some primal urge.  \n  \nBoth of these images are wrong. Hacking and painting have a lot in common. In\nfact, of all the different types of people I've known, hackers and painters\nare among the most alike.  \n  \nWhat hackers and painters have in common is that they're both makers. Along\nwith composers, architects, and writers, what hackers and painters are trying\nto do is make good things. They're not doing research per se, though if in the\ncourse of trying to make good things they discover some new technique, so much\nthe better.  \n  \n  \n  \nI've never liked the term \"computer science.\" The main reason I don't like it\nis that there's no such thing. Computer science is a grab bag of tenuously\nrelated areas thrown together by an accident of history, like Yugoslavia. At\none end you have people who are really mathematicians, but call what they're\ndoing computer science so they can get DARPA grants. In the middle you have\npeople working on something like the natural history of computers-- studying\nthe behavior of algorithms for routing data through networks, for example. And\nthen at the other extreme you have the hackers, who are trying to write\ninteresting software, and for whom computers are just a medium of expression,\nas concrete is for architects or paint for painters. It's as if\nmathematicians, physicists, and architects all had to be in the same\ndepartment.  \n  \nSometimes what the hackers do is called \"software engineering,\" but this term\nis just as misleading. Good software designers are no more engineers than\narchitects are. The border between architecture and engineering is not sharply\ndefined, but it's there. It falls between what and how: architects decide what\nto do, and engineers figure out how to do it.  \n  \nWhat and how should not be kept too separate. You're asking for trouble if you\ntry to decide what to do without understanding how to do it. But hacking can\ncertainly be more than just deciding how to implement some spec. At its best,\nit's creating the spec-- though it turns out the best way to do that is to\nimplement it.  \n  \n  \n  \nPerhaps one day \"computer science\" will, like Yugoslavia, get broken up into\nits component parts. That might be a good thing. Especially if it meant\nindependence for my native land, hacking.  \n  \nBundling all these different types of work together in one department may be\nconvenient administratively, but it's confusing intellectually. That's the\nother reason I don't like the name \"computer science.\" Arguably the people in\nthe middle are doing something like an experimental science. But the people at\neither end, the hackers and the mathematicians, are not actually doing\nscience.  \n  \nThe mathematicians don't seem bothered by this. They happily set to work\nproving theorems like the other mathematicians over in the math department,\nand probably soon stop noticing that the building they work in says ``computer\nscience'' on the outside. But for the hackers this label is a problem. If what\nthey're doing is called science, it makes them feel they ought to be acting\nscientific. So instead of doing what they really want to do, which is to\ndesign beautiful software, hackers in universities and research labs feel they\nought to be writing research papers.  \n  \nIn the best case, the papers are just a formality. Hackers write cool\nsoftware, and then write a paper about it, and the paper becomes a proxy for\nthe achievement represented by the software. But often this mismatch causes\nproblems. It's easy to drift away from building beautiful things toward\nbuilding ugly things that make more suitable subjects for research papers.  \n  \nUnfortunately, beautiful things don't always make the best subjects for\npapers. Number one, research must be original-- and as anyone who has written\na PhD dissertation knows, the way to be sure that you're exploring virgin\nterritory is to stake out a piece of ground that no one wants. Number two,\nresearch must be substantial-- and awkward systems yield meatier papers,\nbecause you can write about the obstacles you have to overcome in order to get\nthings done. Nothing yields meaty problems like starting with the wrong\nassumptions. Most of AI is an example of this rule; if you assume that\nknowledge can be represented as a list of predicate logic expressions whose\narguments represent abstract concepts, you'll have a lot of papers to write\nabout how to make this work. As Ricky Ricardo used to say, \"Lucy, you got a\nlot of explaining to do.\"  \n  \nThe way to create something beautiful is often to make subtle tweaks to\nsomething that already exists, or to combine existing ideas in a slightly new\nway. This kind of work is hard to convey in a research paper.  \n  \n  \n  \nSo why do universities and research labs continue to judge hackers by\npublications? For the same reason that \"scholastic aptitude\" gets measured by\nsimple-minded standardized tests, or the productivity of programmers gets\nmeasured in lines of code. These tests are easy to apply, and there is nothing\nso tempting as an easy test that kind of works.  \n  \nMeasuring what hackers are actually trying to do, designing beautiful\nsoftware, would be much more difficult. You need a good [sense of\ndesign](taste.html) to judge good design. And there is no correlation, except\npossibly a [negative](http://www.apa.org/journals/features/psp7761121.pdf)\none, between people's ability to recognize good design and their confidence\nthat they can.  \n  \nThe only external test is time. Over time, beautiful things tend to thrive,\nand ugly things tend to get discarded. Unfortunately, the amounts of time\ninvolved can be longer than human lifetimes. Samuel Johnson said it took a\nhundred years for a writer's reputation to converge. You have to wait for the\nwriter's influential friends to die, and then for all their followers to die.  \n  \nI think hackers just have to resign themselves to having a large random\ncomponent in their reputations. In this they are no different from other\nmakers. In fact, they're lucky by comparison. The influence of fashion is not\nnearly so great in hacking as it is in painting.  \n  \n  \n  \nThere are worse things than having people misunderstand your work. A worse\ndanger is that you will yourself misunderstand your work. Related fields are\nwhere you go looking for ideas. If you find yourself in the computer science\ndepartment, there is a natural temptation to believe, for example, that\nhacking is the applied version of what theoretical computer science is the\ntheory of. All the time I was in graduate school I had an uncomfortable\nfeeling in the back of my mind that I ought to know more theory, and that it\nwas very remiss of me to have forgotten all that stuff within three weeks of\nthe final exam.  \n  \nNow I realize I was mistaken. Hackers need to understand the theory of\ncomputation about as much as painters need to understand paint chemistry. You\nneed to know how to calculate time and space complexity and about Turing\ncompleteness. You might also want to remember at least the concept of a state\nmachine, in case you have to write a parser or a regular expression library.\nPainters in fact have to remember a good deal more about paint chemistry than\nthat.  \n  \nI've found that the best sources of ideas are not the other fields that have\nthe word \"computer\" in their names, but the other fields inhabited by makers.\nPainting has been a much richer source of ideas than the theory of\ncomputation.  \n  \nFor example, I was taught in college that one ought to figure out a program\ncompletely on paper before even going near a computer. I found that I did not\nprogram this way. I found that I liked to program sitting in front of a\ncomputer, not a piece of paper. Worse still, instead of patiently writing out\na complete program and assuring myself it was correct, I tended to just spew\nout code that was hopelessly broken, and gradually beat it into shape.\nDebugging, I was taught, was a kind of final pass where you caught typos and\noversights. The way I worked, it seemed like programming consisted of\ndebugging.  \n  \nFor a long time I felt bad about this, just as I once felt bad that I didn't\nhold my pencil the way they taught me to in elementary school. If I had only\nlooked over at the other makers, the painters or the architects, I would have\nrealized that there was a name for what I was doing: sketching. As far as I\ncan tell, the way they taught me to program in college was all wrong. You\nshould figure out programs as you're writing them, just as writers and\npainters and architects do.  \n  \nRealizing this has real implications for software design. It means that a\nprogramming language should, above all, be malleable. A programming language\nis for [thinking](piraha.html) of programs, not for expressing programs you've\nalready thought of. It should be a pencil, not a pen. Static typing would be a\nfine idea if people actually did write programs the way they taught me to in\ncollege. But that's not how any of the hackers I know write programs. We need\na language that lets us scribble and smudge and smear, not a language where\nyou have to sit with a teacup of types balanced on your knee and make polite\nconversation with a strict old aunt of a compiler.  \n  \n  \n  \nWhile we're on the subject of static typing, identifying with the makers will\nsave us from another problem that afflicts the sciences: math envy. Everyone\nin the sciences secretly believes that mathematicians are smarter than they\nare. I think mathematicians also believe this. At any rate, the result is that\nscientists tend to make their work look as mathematical as possible. In a\nfield like physics this probably doesn't do much harm, but the further you get\nfrom the natural sciences, the more of a problem it becomes.  \n  \nA page of formulas just looks so impressive. (Tip: for extra impressiveness,\nuse Greek variables.) And so there is a great temptation to work on problems\nyou can treat formally, rather than problems that are, say, important.  \n  \nIf hackers identified with other makers, like writers and painters, they\nwouldn't feel tempted to do this. Writers and painters don't suffer from math\nenvy. They feel as if they're doing something completely unrelated. So are\nhackers, I think.  \n  \n  \n  \nIf universities and research labs keep hackers from doing the kind of work\nthey want to do, perhaps the place for them is in companies. Unfortunately,\nmost companies won't let hackers do what they want either. Universities and\nresearch labs force hackers to be scientists, and companies force them to be\nengineers.  \n  \nI only discovered this myself quite recently. When Yahoo bought Viaweb, they\nasked me what I wanted to do. I had never liked the business side very much,\nand said that I just wanted to hack. When I got to Yahoo, I found that what\nhacking meant to them was implementing software, not designing it. Programmers\nwere seen as technicians who translated the visions (if that is the word) of\nproduct managers into code.  \n  \nThis seems to be the default plan in big companies. They do it because it\ndecreases the standard deviation of the outcome. Only a small percentage of\nhackers can actually design software, and it's hard for the people running a\ncompany to pick these out. So instead of entrusting the future of the software\nto one brilliant hacker, most companies set things up so that it is designed\nby committee, and the hackers merely implement the design.  \n  \nIf you want to make money at some point, remember this, because this is one of\nthe reasons startups win. Big companies want to decrease the standard\ndeviation of design outcomes because they want to avoid disasters. But when\nyou damp oscillations, you lose the high points as well as the low. This is\nnot a problem for big companies, because they don't win by making great\nproducts. Big companies win by sucking less than other big companies.  \n  \nSo if you can figure out a way to get in a design war with a company big\nenough that its software is designed by product managers, they'll never be\nable to keep up with you. These opportunities are not easy to find, though.\nIt's hard to engage a big company in a design war, just as it's hard to engage\nan opponent inside a castle in hand to hand combat. It would be pretty easy to\nwrite a better word processor than Microsoft Word, for example, but Microsoft,\nwithin the castle of their operating system monopoly, probably wouldn't even\nnotice if you did.  \n  \nThe place to fight design wars is in new markets, where no one has yet managed\nto establish any fortifications. That's where you can win big by taking the\nbold approach to design, and having the same people both design and implement\nthe product. Microsoft themselves did this at the start. So did Apple. And\nHewlett-Packard. I suspect almost every successful startup has.  \n  \n  \n  \nSo one way to build great software is to start your own startup. There are two\nproblems with this, though. One is that in a startup you have to do so much\nbesides write software. At Viaweb I considered myself lucky if I got to hack a\nquarter of the time. And the things I had to do the other three quarters of\nthe time ranged from tedious to terrifying. I have a benchmark for this,\nbecause I once had to leave a board meeting to have some cavities filled. I\nremember sitting back in the dentist's chair, waiting for the drill, and\nfeeling like I was on vacation.  \n  \nThe other problem with startups is that there is not much overlap between the\nkind of software that makes money and the kind that's interesting to write.\nProgramming languages are interesting to write, and Microsoft's first product\nwas one, in fact, but no one will pay for programming languages now. If you\nwant to make money, you tend to be forced to work on problems that are too\nnasty for anyone to solve for free.  \n  \nAll makers face this problem. Prices are determined by supply and demand, and\nthere is just not as much demand for things that are fun to work on as there\nis for things that solve the mundane problems of individual customers. Acting\nin off-Broadway plays just doesn't pay as well as wearing a gorilla suit in\nsomeone's booth at a trade show. Writing novels doesn't pay as well as writing\nad copy for garbage disposals. And hacking programming languages doesn't pay\nas well as figuring out how to connect some company's legacy database to their\nWeb server.  \n  \n  \n  \nI think the answer to this problem, in the case of software, is a concept\nknown to nearly all makers: the day job. This phrase began with musicians, who\nperform at night. More generally, it means that you have one kind of work you\ndo for money, and another for love.  \n  \nNearly all makers have day jobs early in their careers. Painters and writers\nnotoriously do. If you're lucky you can get a day job that's closely related\nto your real work. Musicians often seem to work in record stores. A hacker\nworking on some programming language or operating system might likewise be\nable to get a day job using it. [1]  \n  \nWhen I say that the answer is for hackers to have day jobs, and work on\nbeautiful software on the side, I'm not proposing this as a new idea. This is\nwhat open-source hacking is all about. What I'm saying is that open-source is\nprobably the right model, because it has been independently confirmed by all\nthe other makers.  \n  \nIt seems surprising to me that any employer would be reluctant to let hackers\nwork on open-source projects. At Viaweb, we would have been reluctant to hire\nanyone who didn't. When we interviewed programmers, the main thing we cared\nabout was what kind of software they wrote in their spare time. You can't do\nanything really well unless you love it, and if you love to hack you'll\ninevitably be working on projects of your own. [2]  \n  \n  \n  \nBecause hackers are makers rather than scientists, the right place to look for\nmetaphors is not in the sciences, but among other kinds of makers. What else\ncan painting teach us about hacking?  \n  \nOne thing we can learn, or at least confirm, from the example of painting is\nhow to learn to hack. You learn to paint mostly by doing it. Ditto for\nhacking. Most hackers don't learn to hack by taking college courses in\nprogramming. They learn to hack by writing programs of their own at age\nthirteen. Even in college classes, you learn to hack mostly by hacking. [3]  \n  \nBecause painters leave a trail of work behind them, you can watch them learn\nby doing. If you look at the work of a painter in chronological order, you'll\nfind that each painting builds on things that have been learned in previous\nones. When there's something in a painting that works very well, you can\nusually find version 1 of it in a smaller form in some earlier painting.  \n  \nI think most makers work this way. Writers and architects seem to as well.\nMaybe it would be good for hackers to act more like painters, and regularly\nstart over from scratch, instead of continuing to work for years on one\nproject, and trying to incorporate all their later ideas as revisions.  \n  \nThe fact that hackers learn to hack by doing it is another sign of how\ndifferent hacking is from the sciences. Scientists don't learn science by\ndoing it, but by doing labs and problem sets. Scientists start out doing work\nthat's perfect, in the sense that they're just trying to reproduce work\nsomeone else has already done for them. Eventually, they get to the point\nwhere they can do original work. Whereas hackers, from the start, are doing\noriginal work; it's just very bad. So hackers start original, and get good,\nand scientists start good, and get original.  \n  \n  \n  \nThe other way makers learn is from examples. For a painter, a museum is a\nreference library of techniques. For hundreds of years it has been part of the\ntraditional education of painters to copy the works of the great masters,\nbecause copying forces you to look closely at the way a painting is made.  \n  \nWriters do this too. Benjamin Franklin learned to write by summarizing the\npoints in the essays of Addison and Steele and then trying to reproduce them.\nRaymond Chandler did the same thing with detective stories.  \n  \nHackers, likewise, can learn to program by looking at good programs-- not just\nat what they do, but the source code too. One of the less publicized benefits\nof the open-source movement is that it has made it easier to learn to program.\nWhen I learned to program, we had to rely mostly on examples in books. The one\nbig chunk of code available then was Unix, but even this was not open source.\nMost of the people who read the source read it in illicit photocopies of John\nLions' book, which though written in 1977 was not allowed to be published\nuntil 1996.  \n  \n  \n  \nAnother example we can take from painting is the way that paintings are\ncreated by gradual refinement. Paintings usually begin with a sketch.\nGradually the details get filled in. But it is not merely a process of filling\nin. Sometimes the original plans turn out to be mistaken. Countless paintings,\nwhen you look at them in xrays, turn out to have limbs that have been moved or\nfacial features that have been readjusted.  \n  \nHere's a case where we can learn from painting. I think hacking should work\nthis way too. It's unrealistic to expect that the specifications for a program\nwill be perfect. You're better off if you admit this up front, and write\nprograms in a way that allows specifications to change on the fly.  \n  \n(The structure of large companies makes this hard for them to do, so here is\nanother place where startups have an advantage.)  \n  \nEveryone by now presumably knows about the danger of premature optimization. I\nthink we should be just as worried about premature design-- deciding too early\nwhat a program should do.  \n  \nThe right tools can help us avoid this danger. A good programming language\nshould, like oil paint, make it easy to change your mind. Dynamic typing is a\nwin here because you don't have to commit to specific data representations up\nfront. But the key to flexibility, I think, is to make the language very\n[abstract](power.html). The easiest program to change is one that's very\nshort.  \n  \n  \n  \nThis sounds like a paradox, but a great painting has to be better than it has\nto be. For example, when Leonardo painted the portrait of [Ginevra de\nBenci](ginevra.html) in the National Gallery, he put a juniper bush behind her\nhead. In it he carefully painted each individual leaf. Many painters might\nhave thought, this is just something to put in the background to frame her\nhead. No one will look that closely at it.  \n  \nNot Leonardo. How hard he worked on part of a painting didn't depend at all on\nhow closely he expected anyone to look at it. He was like Michael Jordan.\nRelentless.  \n  \nRelentlessness wins because, in the aggregate, unseen details become visible.\nWhen people walk by the portrait of Ginevra de Benci, their attention is often\nimmediately arrested by it, even before they look at the label and notice that\nit says Leonardo da Vinci. All those unseen details combine to produce\nsomething that's just stunning, like a thousand barely audible voices all\nsinging in tune.  \n  \nGreat software, likewise, requires a fanatical devotion to beauty. If you look\ninside good software, you find that parts no one is ever supposed to see are\nbeautiful too. I'm not claiming I write great software, but I know that when\nit comes to code I behave in a way that would make me eligible for\nprescription drugs if I approached everyday life the same way. It drives me\ncrazy to see code that's badly indented, or that uses ugly variable names.  \n  \n  \n  \nIf a hacker were a mere implementor, turning a spec into code, then he could\njust work his way through it from one end to the other like someone digging a\nditch. But if the hacker is a creator, we have to take inspiration into\naccount.  \n  \nIn hacking, like painting, work comes in cycles. Sometimes you get excited\nabout some new project and you want to work sixteen hours a day on it. Other\ntimes nothing seems interesting.  \n  \nTo do good work you have to take these cycles into account, because they're\naffected by how you react to them. When you're driving a car with a manual\ntransmission on a hill, you have to back off the clutch sometimes to avoid\nstalling. Backing off can likewise prevent ambition from stalling. In both\npainting and hacking there are some tasks that are terrifyingly ambitious, and\nothers that are comfortingly routine. It's a good idea to save some easy tasks\nfor moments when you would otherwise stall.  \n  \nIn hacking, this can literally mean saving up bugs. I like debugging: it's the\none time that hacking is as straightforward as people think it is. You have a\ntotally constrained problem, and all you have to do is solve it. Your program\nis supposed to do x. Instead it does y. Where does it go wrong? You know\nyou're going to win in the end. It's as relaxing as painting a wall.  \n  \n  \n  \nThe example of painting can teach us not only how to manage our own work, but\nhow to work together. A lot of the great art of the past is the work of\nmultiple hands, though there may only be one name on the wall next to it in\nthe museum. Leonardo was an apprentice in the workshop of Verrocchio and\npainted one of the angels in his [Baptism of Christ](baptism.html). This sort\nof thing was the rule, not the exception. Michelangelo was considered\nespecially dedicated for insisting on painting all the figures on the ceiling\nof the Sistine Chapel himself.  \n  \nAs far as I know, when painters worked together on a painting, they never\nworked on the same parts. It was common for the master to paint the principal\nfigures and for assistants to paint the others and the background. But you\nnever had one guy painting over the work of another.  \n  \nI think this is the right model for collaboration in software too. Don't push\nit too far. When a piece of code is being hacked by three or four different\npeople, no one of whom really owns it, it will end up being like a common-\nroom. It will tend to feel bleak and abandoned, and accumulate cruft. The\nright way to collaborate, I think, is to divide projects into sharply defined\nmodules, each with a definite owner, and with interfaces between them that are\nas carefully designed and, if possible, as articulated as programming\nlanguages.  \n  \n  \n  \nLike painting, most software is intended for a human audience. And so hackers,\nlike painters, must have empathy to do really great work. You have to be able\nto see things from the user's point of view.  \n  \nWhen I was a kid I was always being told to look at things from someone else's\npoint of view. What this always meant in practice was to do what someone else\nwanted, instead of what I wanted. This of course gave empathy a bad name, and\nI made a point of not cultivating it.  \n  \nBoy, was I wrong. It turns out that looking at things from other people's\npoint of view is practically the secret of success. It doesn't necessarily\nmean being self-sacrificing. Far from it. Understanding how someone else sees\nthings doesn't imply that you'll act in his interest; in some situations-- in\nwar, for example-- you want to do exactly the opposite. [4]  \n  \nMost makers make things for a human audience. And to engage an audience you\nhave to understand what they need. Nearly all the greatest paintings are\npaintings of people, for example, because people are what people are\ninterested in.  \n  \nEmpathy is probably the single most important difference between a good hacker\nand a great one. Some hackers are quite smart, but when it comes to empathy\nare practically solipsists. It's hard for such people to design great software\n[5], because they can't see things from the user's point of view.  \n  \nOne way to tell how good people are at empathy is to watch them explain a\ntechnical question to someone without a technical background. We probably all\nknow people who, though otherwise smart, are just comically bad at this. If\nsomeone asks them at a dinner party what a programming language is, they'll\nsay something like ``Oh, a high-level language is what the compiler uses as\ninput to generate object code.'' High-level language? Compiler? Object code?\nSomeone who doesn't know what a programming language is obviously doesn't know\nwhat these things are, either.  \n  \nPart of what software has to do is explain itself. So to write good software\nyou have to understand how little users understand. They're going to walk up\nto the software with no preparation, and it had better do what they guess it\nwill, because they're not going to read the manual. The best system I've ever\nseen in this respect was the original Macintosh, in 1985. It did what software\nalmost never does: it just worked. [6]  \n  \nSource code, too, should explain itself. If I could get people to remember\njust one quote about programming, it would be the one at the beginning of\n_Structure and Interpretation of Computer Programs._\n\n> Programs should be written for people to read, and only incidentally for\n> machines to execute.\n\nYou need to have empathy not just for your users, but for your readers. It's\nin your interest, because you'll be one of them. Many a hacker has written a\nprogram only to find on returning to it six months later that he has no idea\nhow it works. I know several people who've sworn off Perl after such\nexperiences. [7]  \n  \nLack of empathy is associated with intelligence, to the point that there is\neven something of a fashion for it in some places. But I don't think there's\nany correlation. You can do well in math and the natural sciences without\nhaving to learn empathy, and people in these fields tend to be smart, so the\ntwo qualities have come to be associated. But there are plenty of dumb people\nwho are bad at empathy too. Just listen to the people who call in with\nquestions on talk shows. They ask whatever it is they're asking in such a\nroundabout way that the hosts often have to rephrase the question for them.  \n  \n  \n  \nSo, if hacking works like painting and writing, is it as cool? After all, you\nonly get one life. You might as well spend it working on something great.  \n  \nUnfortunately, the question is hard to answer. There is always a big time lag\nin prestige. It's like light from a distant star. Painting has prestige now\nbecause of great work people did five hundred years ago. At the time, no one\nthought these paintings were as important as we do today. It would have seemed\nvery odd to people at the time that Federico da Montefeltro, the Duke of\nUrbino, would one day be known mostly as the guy with the strange nose in a\n[painting](montefeltro.html) by Piero della Francesca.  \n  \nSo while I admit that hacking doesn't seem as cool as painting now, we should\nremember that painting itself didn't seem as cool in its glory days as it does\nnow.  \n  \nWhat we can say with some confidence is that these are the glory days of\nhacking. In most fields the great work is done early on. The paintings made\nbetween 1430 and 1500 are still unsurpassed. Shakespeare appeared just as\nprofessional theater was being born,  and pushed the medium so far that every\nplaywright since has had to live in his shadow. Albrecht Durer did the same\nthing with engraving, and Jane Austen with the novel.  \n  \nOver and over we see the same pattern. A new medium appears, and people are so\nexcited about it that they explore most of its possibilities in the first\ncouple generations. Hacking seems to be in this phase now.  \n  \nPainting was not, in Leonardo's time, as cool as his work helped make it. How\ncool hacking turns out to be will depend on what we can do with this new\nmedium.  \n  \n  \n  \n  \n**Notes**  \n  \n[1] The greatest damage that photography has done to painting may be the fact\nthat it killed the best day job. Most of the great painters in history\nsupported themselves by painting portraits.  \n  \n[2] I've been told that Microsoft discourages employees from contributing to\nopen-source projects, even in their spare time. But so many of the best\nhackers work on open-source projects now that the main effect of this policy\nmay be to ensure that they won't be able to hire any first-rate programmers.  \n  \n[3] What you learn about programming in college is much like what you learn\nabout books or clothes or dating: what bad taste you had in high school.  \n  \n[4] Here's an example of applied empathy. At Viaweb, if we couldn't decide\nbetween two alternatives, we'd ask, what would our competitors hate most? At\none point a competitor added a feature to their software that was basically\nuseless, but since it was one of few they had that we didn't, they made much\nof it in the trade press. We could have tried to explain that the feature was\nuseless, but we decided it would annoy our competitor more if we just\nimplemented it ourselves, so we hacked together our own version that\nafternoon.  \n  \n[5] Except text editors and compilers. Hackers don't need empathy to design\nthese, because they are themselves typical users.  \n  \n[6] Well, almost. They overshot the available RAM somewhat, causing much\ninconvenient disk swapping, but this could be fixed within a few months by\nbuying an additional disk drive.  \n  \n[7] The way to make programs easy to read is not to stuff them with comments.\nI would take Abelson and Sussman's quote a step further. Programming languages\nshould be designed to express algorithms, and only incidentally to tell\ncomputers how to execute them. A good programming language ought to be better\nfor explaining software than English. You should only need comments when there\nis some kind of kludge you need to warn readers about, just as on a road there\nare only arrows on parts with unexpectedly sharp curves.  \n  \n**Thanks** to Trevor Blackwell, Robert Morris, Dan Giffin, and Lisa Randall\nfor reading drafts of this, and to Henry Leitner and Larry Finkelstein for\ninviting me to speak.  \n  \n\nJanuary 2005  \n  \n _(I wrote this talk for a high school. I never actually gave it, because the\nschool authorities vetoed the plan to invite me.)_  \n  \nWhen I said I was speaking at a high school, my friends were curious. What\nwill you say to high school students? So I asked them, what do you wish\nsomeone had told you in high school? Their answers were remarkably similar. So\nI'm going to tell you what we all wish someone had told us.  \n  \nI'll start by telling you something you don't have to know in high school:\nwhat you want to do with your life. People are always asking you this, so you\nthink you're supposed to have an answer. But adults ask this mainly as a\nconversation starter. They want to know what sort of person you are, and this\nquestion is just to get you talking. They ask it the way you might poke a\nhermit crab in a tide pool, to see what it does.  \n  \nIf I were back in high school and someone asked about my plans, I'd say that\nmy first priority was to learn what the options were. You don't need to be in\na rush to choose your life's work. What you need to do is discover what you\nlike. You have to work on stuff you like if you want to be good at what you\ndo.  \n  \nIt might seem that nothing would be easier than deciding what you like, but it\nturns out to be hard, partly because it's hard to get an accurate picture of\nmost jobs. Being a doctor is not the way it's portrayed on TV. Fortunately you\ncan also watch real doctors, by volunteering in hospitals. [1]  \n  \nBut there are other jobs you can't learn about, because no one is doing them\nyet. Most of the work I've done in the last ten years didn't exist when I was\nin high school. The world changes fast, and the rate at which it changes is\nitself speeding up. In such a world it's not a good idea to have fixed plans.  \n  \nAnd yet every May, speakers all over the country fire up the Standard\nGraduation Speech, the theme of which is: don't give up on your dreams. I know\nwhat they mean, but this is a bad way to put it, because it implies you're\nsupposed to be bound by some plan you made early on. The computer world has a\nname for this: premature optimization. And it is synonymous with disaster.\nThese speakers would do better to say simply, don't give up.  \n  \nWhat they really mean is, don't get demoralized. Don't think that you can't do\nwhat other people can. And I agree you shouldn't underestimate your potential.\nPeople who've done great things tend to seem as if they were a race apart. And\nmost biographies only exaggerate this illusion, partly due to the worshipful\nattitude biographers inevitably sink into, and partly because, knowing how the\nstory ends, they can't help streamlining the plot till it seems like the\nsubject's life was a matter of destiny, the mere unfolding of some innate\ngenius. In fact I suspect if you had the sixteen year old Shakespeare or\nEinstein in school with you, they'd seem impressive, but not totally unlike\nyour other friends.  \n  \nWhich is an uncomfortable thought. If they were just like us, then they had to\nwork very hard to do what they did. And that's one reason we like to believe\nin genius. It gives us an excuse for being lazy. If these guys were able to do\nwhat they did only because of some magic Shakespeareness or Einsteinness, then\nit's not our fault if we can't do something as good.  \n  \nI'm not saying there's no such thing as genius. But if you're trying to choose\nbetween two theories and one gives you an excuse for being lazy, the other one\nis probably right.  \n  \nSo far we've cut the Standard Graduation Speech down from \"don't give up on\nyour dreams\" to \"what someone else can do, you can do.\" But it needs to be cut\nstill further. There is _some_ variation in natural ability. Most people\noverestimate its role, but it does exist. If I were talking to a guy four feet\ntall whose ambition was to play in the NBA, I'd feel pretty stupid saying, you\ncan do anything if you really try. [2]  \n  \nWe need to cut the Standard Graduation Speech down to, \"what someone else with\nyour abilities can do, you can do; and don't underestimate your abilities.\"\nBut as so often happens, the closer you get to the truth, the messier your\nsentence gets. We've taken a nice, neat (but wrong) slogan, and churned it up\nlike a mud puddle. It doesn't make a very good speech anymore. But worse\nstill, it doesn't tell you what to do anymore. Someone with your abilities?\nWhat are your abilities?  \n  \n**Upwind**  \n  \nI think the solution is to work in the other direction. Instead of working\nback from a goal, work forward from promising situations. This is what most\nsuccessful people actually do anyway.  \n  \nIn the graduation-speech approach, you decide where you want to be in twenty\nyears, and then ask: what should I do now to get there? I propose instead that\nyou don't commit to anything in the future, but just look at the options\navailable now, and choose those that will give you the most promising range of\noptions afterward.  \n  \nIt's not so important what you work on, so long as you're not wasting your\ntime. Work on things that interest you and increase your options, and worry\nlater about which you'll take.  \n  \nSuppose you're a college freshman deciding whether to major in math or\neconomics. Well, math will give you more options: you can go into almost any\nfield from math. If you major in math it will be easy to get into grad school\nin economics, but if you major in economics it will be hard to get into grad\nschool in math.  \n  \nFlying a glider is a good metaphor here. Because a glider doesn't have an\nengine, you can't fly into the wind without losing a lot of altitude. If you\nlet yourself get far downwind of good places to land, your options narrow\nuncomfortably. As a rule you want to stay upwind. So I propose that as a\nreplacement for \"don't give up on your dreams.\" Stay upwind.  \n  \nHow do you do that, though? Even if math is upwind of economics, how are you\nsupposed to know that as a high school student?  \n  \nWell, you don't, and that's what you need to find out.  Look for smart people\nand hard problems. Smart people tend to clump together, and if you can find\nsuch a clump, it's probably worthwhile to join it. But it's not\nstraightforward to find these, because there is a lot of faking going on.  \n  \nTo a newly arrived undergraduate, all university departments look much the\nsame. The professors all seem forbiddingly intellectual and publish papers\nunintelligible to outsiders. But while in some fields the papers are\nunintelligible because they're full of hard ideas, in others they're\ndeliberately written in an obscure way to seem as if they're saying something\nimportant. This may seem a scandalous proposition, but it has been\nexperimentally verified, in the famous _Social Text_ affair. Suspecting that\nthe papers published by literary theorists were often just intellectual-\nsounding nonsense, a physicist deliberately wrote a paper full of\nintellectual-sounding nonsense, and submitted it to a literary theory journal,\nwhich published it.  \n  \nThe best protection is always to be working on hard problems. Writing novels\nis hard. Reading novels isn't. Hard means worry: if you're not worrying that\nsomething you're making will come out badly, or that you won't be able to\nunderstand something you're studying, then it isn't hard enough. There has to\nbe suspense.  \n  \nWell, this seems a grim view of the world, you may think. What I'm telling you\nis that you should worry? Yes, but it's not as bad as it sounds. It's\nexhilarating to overcome worries. You don't see faces much happier than people\nwinning gold medals. And you know why they're so happy? Relief.  \n  \nI'm not saying this is the only way to be happy. Just that some kinds of worry\nare not as bad as they sound.  \n  \n**Ambition**  \n  \nIn practice, \"stay upwind\" reduces to \"work on hard problems.\" And you can\nstart today. I wish I'd grasped that in high school.  \n  \nMost people like to be good at what they do. In the so-called real world this\nneed is a powerful force. But high school students rarely benefit from it,\nbecause they're given a fake thing to do. When I was in high school, I let\nmyself believe that my job was to be a high school student. And so I let my\nneed to be good at what I did be satisfied by merely doing well in school.  \n  \nIf you'd asked me in high school what the difference was between high school\nkids and adults, I'd have said it was that adults had to earn a living. Wrong.\nIt's that adults take responsibility for themselves. Making a living is only a\nsmall part of it. Far more important is to take intellectual responsibility\nfor oneself.  \n  \nIf I had to go through high school again, I'd treat it like a day job. I don't\nmean that I'd slack in school. Working at something as a day job doesn't mean\ndoing it badly. It means not being defined by it. I mean I wouldn't think of\nmyself as a high school student, just as a musician with a day job as a waiter\ndoesn't think of himself as a waiter. [3] And when I wasn't working at my day\njob I'd start trying to do real work.  \n  \nWhen I ask people what they regret most about high school, they nearly all say\nthe same thing: that they wasted so much time. If you're wondering what you're\ndoing now that you'll regret most later, that's probably it. [4]  \n  \nSome people say this is inevitable \u2014 that high school students aren't capable\nof getting anything done yet. But I don't think this is true. And the proof is\nthat you're bored. You probably weren't bored when you were eight. When you're\neight it's called \"playing\" instead of \"hanging out,\" but it's the same thing.\nAnd when I was eight, I was rarely bored. Give me a back yard and a few other\nkids and I could play all day.  \n  \nThe reason this got stale in middle school and high school, I now realize, is\nthat I was ready for something else. Childhood was getting old.  \n  \nI'm not saying you shouldn't hang out with your friends \u2014 that you should all\nbecome humorless little robots who do nothing but work. Hanging out with\nfriends is like chocolate cake. You enjoy it more if you eat it occasionally\nthan if you eat nothing but chocolate cake for every meal. No matter how much\nyou like chocolate cake, you'll be pretty queasy after the third meal of it.\nAnd that's what the malaise one feels in high school is: mental queasiness.\n[5]  \n  \nYou may be thinking, we have to do more than get good grades. We have to have\n_extracurricular activities._ But you know perfectly well how bogus most of\nthese are. Collecting donations for a charity is an admirable thing to do, but\nit's not _hard._ It's not getting something done. What I mean by getting\nsomething done is learning how to write well, or how to program computers, or\nwhat life was really like in preindustrial societies, or how to draw the human\nface from life. This sort of thing rarely translates into a line item on a\ncollege application.  \n  \n**Corruption**  \n  \nIt's dangerous to design your life around getting into college, because the\npeople you have to impress to get into college are not a very discerning\naudience. At most colleges, it's not the professors who decide whether you get\nin, but admissions officers, and they are nowhere near as smart. They're the\nNCOs of the intellectual world. They can't tell how smart you are. The mere\nexistence of prep schools is proof of that.  \n  \nFew parents would pay so much for their kids to go to a school that didn't\nimprove their admissions prospects. Prep schools openly say this is one of\ntheir aims. But what that means, if you stop to think about it, is that they\ncan hack the admissions process: that they can take the very same kid and make\nhim seem a more appealing candidate than he would if he went to the local\npublic school. [6]  \n  \nRight now most of you feel your job in life is to be a promising college\napplicant. But that means you're designing your life to satisfy a process so\nmindless that there's a whole industry devoted to subverting it. No wonder you\nbecome cynical. The malaise you feel is the same that a producer of reality TV\nshows or a tobacco industry executive feels. And you don't even get paid a\nlot.  \n  \nSo what do you do? What you should not do is rebel. That's what I did, and it\nwas a mistake. I didn't realize exactly what was happening to us, but I\nsmelled a major rat. And so I just gave up. Obviously the world sucked, so why\nbother?  \n  \nWhen I discovered that one of our teachers was herself using Cliff's Notes, it\nseemed par for the course. Surely it meant nothing to get a good grade in such\na class.  \n  \nIn retrospect this was stupid. It was like someone getting fouled in a soccer\ngame and saying, hey, you fouled me, that's against the rules, and walking off\nthe field in indignation. Fouls happen. The thing to do when you get fouled is\nnot to lose your cool. Just keep playing.  \n  \nBy putting you in this situation, society has fouled you. Yes, as you suspect,\na lot of the stuff you learn in your classes is crap. And yes, as you suspect,\nthe college admissions process is largely a charade. But like many fouls, this\none was unintentional. [7] So just keep playing.  \n  \nRebellion is almost as stupid as obedience. In either case you let yourself be\ndefined by what they tell you to do. The best plan, I think, is to step onto\nan orthogonal vector. Don't just do what they tell you, and don't just refuse\nto. Instead treat school as a day job. As day jobs go, it's pretty sweet.\nYou're done at 3 o'clock, and you can even work on your own stuff while you're\nthere.  \n  \n**Curiosity**  \n  \nAnd what's your real job supposed to be? Unless you're Mozart, your first task\nis to figure that out. What are the great things to work on? Where are the\nimaginative people? And most importantly, what are you interested in? The word\n\"aptitude\" is misleading, because it implies something innate. The most\npowerful sort of aptitude is a consuming interest in some question, and such\ninterests are often acquired tastes.  \n  \nA distorted version of this idea has filtered into popular culture under the\nname \"passion.\" I recently saw an ad for waiters saying they wanted people\nwith a \"passion for service.\" The real thing is not something one could have\nfor waiting on tables. And passion is a bad word for it. A better name would\nbe curiosity.  \n  \nKids are curious, but the curiosity I mean has a different shape from kid\ncuriosity. Kid curiosity is broad and shallow; they ask why at random about\neverything. In most adults this curiosity dries up entirely. It has to: you\ncan't get anything done if you're always asking why about everything. But in\nambitious adults, instead of drying up, curiosity becomes narrow and deep. The\nmud flat morphs into a well.  \n  \nCuriosity turns work into play. For Einstein, relativity wasn't a book full of\nhard stuff he had to learn for an exam. It was a mystery he was trying to\nsolve. So it probably felt like less work to him to invent it than it would\nseem to someone now to learn it in a class.  \n  \nOne of the most dangerous illusions you get from school is the idea that doing\ngreat things requires a lot of discipline. Most subjects are taught in such a\nboring way that it's only by discipline that you can flog yourself through\nthem. So I was surprised when, early in college, I read a quote by\nWittgenstein saying that he had no self-discipline and had never been able to\ndeny himself anything, not even a cup of coffee.  \n  \nNow I know a number of people who do great work, and it's the same with all of\nthem. They have little discipline. They're all terrible procrastinators and\nfind it almost impossible to make themselves do anything they're not\ninterested in. One still hasn't sent out his half of the thank-you notes from\nhis wedding, four years ago. Another has 26,000 emails in her inbox.  \n  \nI'm not saying you can get away with zero self-discipline. You probably need\nabout the amount you need to go running. I'm often reluctant to go running,\nbut once I do, I enjoy it. And if I don't run for several days, I feel ill.\nIt's the same with people who do great things. They know they'll feel bad if\nthey don't work, and they have enough discipline to get themselves to their\ndesks to start working. But once they get started, interest takes over, and\ndiscipline is no longer necessary.  \n  \nDo you think Shakespeare was gritting his teeth and diligently trying to write\nGreat Literature? Of course not. He was having fun. That's why he's so good.  \n  \nIf you want to do good work, what you need is a great curiosity about a\npromising question. The critical moment for Einstein was when he looked at\nMaxwell's equations and said, what the hell is going on here?  \n  \nIt can take years to zero in on a productive question, because it can take\nyears to figure out what a subject is really about. To take an extreme\nexample, consider math. Most people think they hate math, but the boring stuff\nyou do in school under the name \"mathematics\" is not at all like what\nmathematicians do.  \n  \nThe great mathematician G. H. Hardy said he didn't like math in high school\neither. He only took it up because he was better at it than the other\nstudents. Only later did he realize math was interesting \u2014 only later did he\nstart to ask questions instead of merely answering them correctly.  \n  \nWhen a friend of mine used to grumble because he had to write a paper for\nschool, his mother would tell him: find a way to make it interesting. That's\nwhat you need to do: find a question that makes the world interesting. People\nwho do great things look at the same world everyone else does, but notice some\nodd detail that's compellingly mysterious.  \n  \nAnd not only in intellectual matters. Henry Ford's great question was, why do\ncars have to be a luxury item? What would happen if you treated them as a\ncommodity? Franz Beckenbauer's was, in effect, why does everyone have to stay\nin his position? Why can't defenders score goals too?  \n  \n**Now**  \n  \nIf it takes years to articulate great questions, what do you do now, at\nsixteen? Work toward finding one. Great questions don't appear suddenly. They\ngradually congeal in your head. And what makes them congeal is experience. So\nthe way to find great questions is not to search for them \u2014 not to wander\nabout thinking, what great discovery shall I make? You can't answer that; if\nyou could, you'd have made it.  \n  \nThe way to get a big idea to appear in your head is not to hunt for big ideas,\nbut to put in a lot of time on work that interests you, and in the process\nkeep your mind open enough that a big idea can take roost. Einstein, Ford, and\nBeckenbauer all used this recipe. They all knew their work like a piano player\nknows the keys. So when something seemed amiss to them, they had the\nconfidence to notice it.  \n  \nPut in time how and on what? Just pick a project that seems interesting: to\nmaster some chunk of material, or to make something, or to answer some\nquestion. Choose a project that will take less than a month, and make it\nsomething you have the means to finish. Do something hard enough to stretch\nyou, but only just, especially at first. If you're deciding between two\nprojects, choose whichever seems most fun. If one blows up in your face, start\nanother. Repeat till, like an internal combustion engine, the process becomes\nself-sustaining, and each project generates the next one. (This could take\nyears.)  \n  \nIt may be just as well not to do a project \"for school,\" if that will restrict\nyou or make it seem like work. Involve your friends if you want, but not too\nmany, and only if they're not flakes. Friends offer moral support (few\nstartups are started by one person), but secrecy also has its advantages.\nThere's something pleasing about a secret project. And you can take more\nrisks, because no one will know if you fail.  \n  \nDon't worry if a project doesn't seem to be on the path to some goal you're\nsupposed to have. Paths can bend a lot more than you think. So let the path\ngrow out the project. The most important thing is to be excited about it,\nbecause it's by doing that you learn.  \n  \nDon't disregard unseemly motivations. One of the most powerful is the desire\nto be better than other people at something. Hardy said that's what got him\nstarted, and I think the only unusual thing about him is that he admitted it.\nAnother powerful motivator is the desire to do, or know, things you're not\nsupposed to. Closely related is the desire to do something audacious. Sixteen\nyear olds aren't supposed to write novels. So if you try, anything you achieve\nis on the plus side of the ledger; if you fail utterly, you're doing no worse\nthan expectations. [8]  \n  \nBeware of bad models. Especially when they excuse laziness. When I was in high\nschool I used to write \"existentialist\" short stories like ones I'd seen by\nfamous writers. My stories didn't have a lot of plot, but they were very deep.\nAnd they were less work to write than entertaining ones would have been. I\nshould have known that was a danger sign. And in fact I found my stories\npretty boring; what excited me was the idea of writing serious, intellectual\nstuff like the famous writers.  \n  \nNow I have enough experience to realize that those famous writers actually\nsucked. Plenty of famous people do; in the short term, the quality of one's\nwork is only a small component of fame. I should have been less worried about\ndoing something that seemed cool, and just done something I liked. That's the\nactual road to coolness anyway.  \n  \nA key ingredient in many projects, almost a project on its own, is to find\ngood books. Most books are bad. Nearly all textbooks are bad. [9] So don't\nassume a subject is to be learned from whatever book on it happens to be\nclosest. You have to search actively for the tiny number of good books.  \n  \nThe important thing is to get out there and do stuff. Instead of waiting to be\ntaught, go out and learn.  \n  \nYour life doesn't have to be shaped by admissions officers. It could be shaped\nby your own curiosity. It is for all ambitious adults. And you don't have to\nwait to start. In fact, you don't have to wait to be an adult. There's no\nswitch inside you that magically flips when you turn a certain age or graduate\nfrom some institution. You start being an adult when you decide to take\nresponsibility for your life. You can do that at any age. [10]  \n  \nThis may sound like bullshit. I'm just a minor, you may think, I have no\nmoney, I have to live at home, I have to do what adults tell me all day long.\nWell, most adults labor under restrictions just as cumbersome, and they manage\nto get things done. If you think it's restrictive being a kid, imagine having\nkids.  \n  \nThe only real difference between adults and high school kids is that adults\nrealize they need to get things done, and high school kids don't. That\nrealization hits most people around 23. But I'm letting you in on the secret\nearly. So get to work. Maybe you can be the first generation whose greatest\nregret from high school isn't how much time you wasted.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] A doctor friend warns that even this can give an inaccurate picture. \"Who\nknew how much time it would take up, how little autonomy one would have for\nendless years of training, and how unbelievably annoying it is to carry a\nbeeper?\"  \n  \n[2] His best bet would probably be to become dictator and intimidate the NBA\ninto letting him play. So far the closest anyone has come is Secretary of\nLabor.  \n  \n[3] A day job is one you take to pay the bills so you can do what you really\nwant, like play in a band, or invent relativity.  \n  \nTreating high school as a day job might actually make it easier for some\nstudents to get good grades. If you treat your classes as a game, you won't be\ndemoralized if they seem pointless.  \n  \nHowever bad your classes, you need to get good grades in them to get into a\ndecent college. And that _is_ worth doing, because universities are where a\nlot of the clumps of smart people are these days.  \n  \n[4] The second biggest regret was caring so much about unimportant things. And\nespecially about what other people thought of them.  \n  \nI think what they really mean, in the latter case, is caring what random\npeople thought of them. Adults care just as much what other people think, but\nthey get to be more selective about the other people.  \n  \nI have about thirty friends whose opinions I care about, and the opinion of\nthe rest of the world barely affects me. The problem in high school is that\nyour peers are chosen for you by accidents of age and geography, rather than\nby you based on respect for their judgement.  \n  \n[5] The key to wasting time is distraction. Without distractions it's too\nobvious to your brain that you're not doing anything with it, and you start to\nfeel uncomfortable. If you want to measure how dependent you've become on\ndistractions, try this experiment: set aside a chunk of time on a weekend and\nsit alone and think. You can have a notebook to write your thoughts down in,\nbut nothing else: no friends, TV, music, phone, IM, email, Web, games, books,\nnewspapers, or magazines. Within an hour most people will feel a strong\ncraving for distraction.  \n  \n[6] I don't mean to imply that the only function of prep schools is to trick\nadmissions officers. They also generally provide a better education. But try\nthis thought experiment: suppose prep schools supplied the same superior\neducation but had a tiny (.001) negative effect on college admissions. How\nmany parents would still send their kids to them?  \n  \nIt might also be argued that kids who went to prep schools, because they've\nlearned more, _are_ better college candidates. But this seems empirically\nfalse. What you learn in even the best high school is rounding error compared\nto what you learn in college. Public school kids arrive at college with a\nslight disadvantage, but they start to pull ahead in the sophomore year.  \n  \n(I'm not saying public school kids are smarter than preppies, just that they\nare within any given college. That follows necessarily if you agree prep\nschools improve kids' admissions prospects.)  \n  \n[7] Why does society foul you? Indifference, mainly. There are simply no\noutside forces pushing high school to be good. The air traffic control system\nworks because planes would crash otherwise. Businesses have to deliver because\notherwise competitors would take their customers. But no planes crash if your\nschool sucks, and it has no competitors. High school isn't evil; it's random;\nbut random is pretty bad.  \n  \n[8] And then of course there is money. It's not a big factor in high school,\nbecause you can't do much that anyone wants. But a lot of great things were\ncreated mainly to make money. Samuel Johnson said \"no man but a blockhead ever\nwrote except for money.\" (Many hope he was exaggerating.)  \n  \n[9] Even college textbooks are bad. When you get to college, you'll find that\n(with a few stellar exceptions) the textbooks are not written by the leading\nscholars in the field they describe. Writing college textbooks is unpleasant\nwork, done mostly by people who need the money. It's unpleasant because the\npublishers exert so much control, and there are few things worse than close\nsupervision by someone who doesn't understand what you're doing. This\nphenomenon is apparently [even worse](http://www.edutopia.org/muddle-machine)\nin the production of high school textbooks.  \n  \n[10] Your teachers are always telling you to behave like adults. I wonder if\nthey'd like it if you did. You may be loud and disorganized, but you're very\ndocile compared to adults. If you actually started acting like adults, it\nwould be just as if a bunch of adults had been transposed into your bodies.\nImagine the reaction of an FBI agent or taxi driver or reporter to being told\nthey had to ask permission to go the bathroom, and only one person could go at\na time. To say nothing of the things you're taught. If a bunch of actual\nadults suddenly found themselves trapped in high school, the first thing\nthey'd do is form a union and renegotiate all the rules with the\nadministration.  \n  \n**Thanks** to Ingrid Bassett, Trevor Blackwell, Rich Draves, Dan Giffin, Sarah\nHarlin, Jessica Livingston, Jackie McDonough, Robert Morris, Mark Nitzberg,\nLisa Randall, and Aaron Swartz for reading drafts of this, and to many others\nfor talking to me about high school.  \n  \n\nApril 2003  \n  \n _(This essay is derived from a keynote talk at PyCon 2003.)_  \n  \nIt's hard to predict what life will be like in a hundred years. There are only\na few things we can say with certainty. We know that everyone will drive\nflying cars, that zoning laws will be relaxed to allow buildings hundreds of\nstories tall, that it will be dark most of the time, and that women will all\nbe trained in the martial arts. Here I want to zoom in on one detail of this\npicture. What kind of programming language will they use to write the software\ncontrolling those flying cars?  \n  \nThis is worth thinking about not so much because we'll actually get to use\nthese languages as because, if we're lucky, we'll use languages on the path\nfrom this point to that.  \n  \n  \n  \nI think that, like species, languages will form evolutionary trees, with dead-\nends branching off all over. We can see this happening already. Cobol, for all\nits sometime popularity, does not seem to have any intellectual descendants.\nIt is an evolutionary dead-end-- a Neanderthal language.  \n  \nI predict a similar fate for Java. People sometimes send me mail saying, \"How\ncan you say that Java won't turn out to be a successful language? It's already\na successful language.\" And I admit that it is, if you measure success by\nshelf space taken up by books on it (particularly individual books on it), or\nby the number of undergrads who believe they have to learn it to get a job.\nWhen I say Java won't turn out to be a successful language, I mean something\nmore specific: that Java will turn out to be an evolutionary dead-end, like\nCobol.  \n  \nThis is just a guess. I may be wrong. My point here is not to dis Java, but to\nraise the issue of evolutionary trees and get people asking, where on the tree\nis language X? The reason to ask this question isn't just so that our ghosts\ncan say, in a hundred years, I told you so. It's because staying close to the\nmain branches is a useful heuristic for finding languages that will be good to\nprogram in now.  \n  \nAt any given time, you're probably happiest on the main branches of an\nevolutionary tree. Even when there were still plenty of Neanderthals, it must\nhave sucked to be one. The Cro-Magnons would have been constantly coming over\nand beating you up and stealing your food.  \n  \nThe reason I want to know what languages will be like in a hundred years is so\nthat I know what branch of the tree to bet on now.  \n  \n  \n  \nThe evolution of languages differs from the evolution of species because\nbranches can converge. The Fortran branch, for example, seems to be merging\nwith the descendants of Algol. In theory this is possible for species too, but\nit's not likely to have happened to any bigger than a cell.  \n  \nConvergence is more likely for languages partly because the space of\npossibilities is smaller, and partly because mutations are not random.\nLanguage designers deliberately incorporate ideas from other languages.  \n  \nIt's especially useful for language designers to think about where the\nevolution of programming languages is likely to lead, because they can steer\naccordingly. In that case, \"stay on a main branch\" becomes more than a way to\nchoose a good language. It becomes a heuristic for making the right decisions\nabout language design.  \n  \n  \n  \nAny programming language can be divided into two parts: some set of\nfundamental operators that play the role of axioms, and the rest of the\nlanguage, which could in principle be written in terms of these fundamental\noperators.  \n  \nI think the fundamental operators are the most important factor in a\nlanguage's long term survival. The rest you can change. It's like the rule\nthat in buying a house you should consider location first of all. Everything\nelse you can fix later, but you can't fix the location.  \n  \nI think it's important not just that the axioms be well chosen, but that there\nbe few of them. Mathematicians have always felt this way about axioms-- the\nfewer, the better-- and I think they're onto something.  \n  \nAt the very least, it has to be a useful exercise to look closely at the core\nof a language to see if there are any axioms that could be weeded out. I've\nfound in my long career as a slob that cruft breeds cruft, and I've seen this\nhappen in software as well as under beds and in the corners of rooms.  \n  \nI have a hunch that the main branches of the evolutionary tree pass through\nthe languages that have the smallest, cleanest cores. The more of a language\nyou can write in itself, the better.  \n  \n  \n  \nOf course, I'm making a big assumption in even asking what programming\nlanguages will be like in a hundred years. Will we even be writing programs in\na hundred years? Won't we just tell computers what we want them to do?  \n  \nThere hasn't been a lot of progress in that department so far. My guess is\nthat a hundred years from now people will still tell computers what to do\nusing programs we would recognize as such. There may be tasks that we solve\nnow by writing programs and which in a hundred years you won't have to write\nprograms to solve, but I think there will still be a good deal of programming\nof the type that we do today.  \n  \nIt may seem presumptuous to think anyone can predict what any technology will\nlook like in a hundred years. But remember that we already have almost fifty\nyears of history behind us. Looking forward a hundred years is a graspable\nidea when we consider how slowly languages have evolved in the past fifty.  \n  \nLanguages evolve slowly because they're not really technologies. Languages are\nnotation. A program is a formal description of the problem you want a computer\nto solve for you. So the rate of evolution in programming languages is more\nlike the rate of evolution in mathematical notation than, say, transportation\nor communications. Mathematical notation does evolve, but not with the giant\nleaps you see in technology.  \n  \n  \n  \nWhatever computers are made of in a hundred years, it seems safe to predict\nthey will be much faster than they are now. If Moore's Law continues to put\nout, they will be 74 quintillion (73,786,976,294,838,206,464) times faster.\nThat's kind of hard to imagine. And indeed, the most likely prediction in the\nspeed department may be that Moore's Law will stop working. Anything that is\nsupposed to double every eighteen months seems likely to run up against some\nkind of fundamental limit eventually. But I have no trouble believing that\ncomputers will be very much faster. Even if they only end up being a paltry\nmillion times faster, that should change the ground rules for programming\nlanguages substantially. Among other things, there will be more room for what\nwould now be considered slow languages, meaning languages that don't yield\nvery efficient code.  \n  \nAnd yet some applications will still demand speed. Some of the problems we\nwant to solve with computers are created by computers; for example, the rate\nat which you have to process video images depends on the rate at which another\ncomputer can generate them. And there is another class of problems which\ninherently have an unlimited capacity to soak up cycles: image rendering,\ncryptography, simulations.  \n  \nIf some applications can be increasingly inefficient while others continue to\ndemand all the speed the hardware can deliver, faster computers will mean that\nlanguages have to cover an ever wider range of efficiencies. We've seen this\nhappening already. Current implementations of some popular new languages are\nshockingly wasteful by the standards of previous decades.  \n  \nThis isn't just something that happens with programming languages. It's a\ngeneral historical trend. As technologies improve, each generation can do\nthings that the previous generation would have considered wasteful. People\nthirty years ago would be astonished at how casually we make long distance\nphone calls. People a hundred years ago would be even more astonished that a\npackage would one day travel from Boston to New York via Memphis.  \n  \n  \n  \nI can already tell you what's going to happen to all those extra cycles that\nfaster hardware is going to give us in the next hundred years. They're nearly\nall going to be wasted.  \n  \nI learned to program when computer power was scarce. I can remember taking all\nthe spaces out of my Basic programs so they would fit into the memory of a 4K\nTRS-80. The thought of all this stupendously inefficient software burning up\ncycles doing the same thing over and over seems kind of gross to me. But I\nthink my intuitions here are wrong. I'm like someone who grew up poor, and\ncan't bear to spend money even for something important, like going to the\ndoctor.  \n  \nSome kinds of waste really are disgusting. SUVs, for example, would arguably\nbe gross even if they ran on a fuel which would never run out and generated no\npollution. SUVs are gross because they're the solution to a gross problem.\n(How to make minivans look more masculine.) But not all waste is bad. Now that\nwe have the infrastructure to support it, counting the minutes of your long-\ndistance calls starts to seem niggling. If you have the resources, it's more\nelegant to think of all phone calls as one kind of thing, no matter where the\nother person is.  \n  \nThere's good waste, and bad waste. I'm interested in good waste-- the kind\nwhere, by spending more, we can get simpler designs. How will we take\nadvantage of the opportunities to waste cycles that we'll get from new, faster\nhardware?  \n  \nThe desire for speed is so deeply engrained in us, with our puny computers,\nthat it will take a conscious effort to overcome it. In language design, we\nshould be consciously seeking out situations where we can trade efficiency for\neven the smallest increase in convenience.  \n  \n  \n  \nMost data structures exist because of speed. For example, many languages today\nhave both strings and lists. Semantically, strings are more or less a subset\nof lists in which the elements are characters. So why do you need a separate\ndata type? You don't, really. Strings only exist for efficiency. But it's lame\nto clutter up the semantics of the language with hacks to make programs run\nfaster. Having strings in a language seems to be a case of premature\noptimization.  \n  \nIf we think of the core of a language as a set of axioms, surely it's gross to\nhave additional axioms that add no expressive power, simply for the sake of\nefficiency. Efficiency is important, but I don't think that's the right way to\nget it.  \n  \nThe right way to solve that problem, I think, is to separate the meaning of a\nprogram from the implementation details. Instead of having both lists and\nstrings, have just lists, with some way to give the compiler optimization\nadvice that will allow it to lay out strings as contiguous bytes if necessary.  \n  \nSince speed doesn't matter in most of a program, you won't ordinarily need to\nbother with this sort of micromanagement. This will be more and more true as\ncomputers get faster.  \n  \n  \n  \nSaying less about implementation should also make programs more flexible.\nSpecifications change while a program is being written, and this is not only\ninevitable, but desirable.  \n  \nThe word \"essay\" comes from the French verb \"essayer\", which means \"to try\".\nAn essay, in the original sense, is something you write to try to figure\nsomething out. This happens in software too. I think some of the best programs\nwere essays, in the sense that the authors didn't know when they started\nexactly what they were trying to write.  \n  \nLisp hackers already know about the value of being flexible with data\nstructures. We tend to write the first version of a program so that it does\neverything with lists. These initial versions can be so shockingly inefficient\nthat it takes a conscious effort not to think about what they're doing, just\nas, for me at least, eating a steak requires a conscious effort not to think\nwhere it came from.  \n  \nWhat programmers in a hundred years will be looking for, most of all, is a\nlanguage where you can throw together an unbelievably inefficient version 1 of\na program with the least possible effort. At least, that's how we'd describe\nit in present-day terms. What they'll say is that they want a language that's\neasy to program in.  \n  \nInefficient software isn't gross. What's gross is a language that makes\nprogrammers do needless work. Wasting programmer time is the true\ninefficiency, not wasting machine time. This will become ever more clear as\ncomputers get faster.  \n  \n  \n  \nI think getting rid of strings is already something we could bear to think\nabout. We did it in [Arc](arc.html), and it seems to be a win; some operations\nthat would be awkward to describe as regular expressions can be described\neasily as recursive functions.  \n  \nHow far will this flattening of data structures go? I can think of\npossibilities that shock even me, with my conscientiously broadened mind. Will\nwe get rid of arrays, for example? After all, they're just a subset of hash\ntables where the keys are vectors of integers. Will we replace hash tables\nthemselves with lists?  \n  \nThere are more shocking prospects even than that. The Lisp that McCarthy\ndescribed in 1960, for example, didn't have numbers. Logically, you don't need\nto have a separate notion of numbers, because you can represent them as lists:\nthe integer n could be represented as a list of n elements. You can do math\nthis way. It's just unbearably inefficient.  \n  \nNo one actually proposed implementing numbers as lists in practice. In fact,\nMcCarthy's 1960 paper was not, at the time, intended to be implemented at all.\nIt was a [theoretical exercise](rootsoflisp.html), an attempt to create a more\nelegant alternative to the Turing Machine. When someone did, unexpectedly,\ntake this paper and translate it into a working Lisp interpreter, numbers\ncertainly weren't represented as lists; they were represented in binary, as in\nevery other language.  \n  \nCould a programming language go so far as to get rid of numbers as a\nfundamental data type? I ask this not so much as a serious question as as a\nway to play chicken with the future. It's like the hypothetical case of an\nirresistible force meeting an immovable object-- here, an unimaginably\ninefficient implementation meeting unimaginably great resources. I don't see\nwhy not. The future is pretty long. If there's something we can do to decrease\nthe number of axioms in the core language, that would seem to be the side to\nbet on as t approaches infinity. If the idea still seems unbearable in a\nhundred years, maybe it won't in a thousand.  \n  \nJust to be clear about this, I'm not proposing that all numerical calculations\nwould actually be carried out using lists. I'm proposing that the core\nlanguage, prior to any additional notations about implementation, be defined\nthis way. In practice any program that wanted to do any amount of math would\nprobably represent numbers in binary, but this would be an optimization, not\npart of the core language semantics.  \n  \n  \n  \nAnother way to burn up cycles is to have many layers of software between the\napplication and the hardware. This too is a trend we see happening already:\nmany recent languages are compiled into byte code. Bill Woods once told me\nthat, as a rule of thumb, each layer of interpretation costs a factor of 10 in\nspeed. This extra cost buys you flexibility.  \n  \nThe very first version of Arc was an extreme case of this sort of multi-level\nslowness, with corresponding benefits. It was a classic \"metacircular\"\ninterpreter written on top of Common Lisp, with a definite family resemblance\nto the eval function defined in McCarthy's original Lisp paper. The whole\nthing was only a couple hundred lines of code, so it was very easy to\nunderstand and change. The Common Lisp we used, CLisp, itself runs on top of a\nbyte code interpreter. So here we had two levels of interpretation, one of\nthem (the top one) shockingly inefficient, and the language was usable. Barely\nusable, I admit, but usable.  \n  \nWriting software as multiple layers is a powerful technique even within\napplications. Bottom-up programming means writing a program as a series of\nlayers, each of which serves as a language for the one above. This approach\ntends to yield smaller, more flexible programs. It's also the best route to\nthat holy grail, reusability. A language is by definition reusable. The more\nof your application you can push down into a language for writing that type of\napplication, the more of your software will be reusable.  \n  \nSomehow the idea of reusability got attached to object-oriented programming in\nthe 1980s, and no amount of evidence to the contrary seems to be able to shake\nit free. But although some object-oriented software is reusable, what makes it\nreusable is its bottom-upness, not its object-orientedness. Consider\nlibraries: they're reusable because they're language, whether they're written\nin an object-oriented style or not.  \n  \nI don't predict the demise of object-oriented programming, by the way. Though\nI don't think it has much to offer good programmers, except in certain\nspecialized domains, it is irresistible to large organizations. Object-\noriented programming offers a sustainable way to write spaghetti code. It lets\nyou accrete programs as a series of patches.  Large organizations always tend\nto develop software this way, and I expect this to be as true in a hundred\nyears as it is today.  \n  \n  \n  \nAs long as we're talking about the future, we had better talk about parallel\ncomputation, because that's where this idea seems to live. That is, no matter\nwhen you're talking, parallel computation seems to be something that is going\nto happen in the future.  \n  \nWill the future ever catch up with it? People have been talking about parallel\ncomputation as something imminent for at least 20 years, and it hasn't\naffected programming practice much so far. Or hasn't it? Already chip\ndesigners have to think about it, and so must people trying to write systems\nsoftware on multi-cpu computers.  \n  \nThe real question is, how far up the ladder of abstraction will parallelism\ngo? In a hundred years will it affect even application programmers? Or will it\nbe something that compiler writers think about, but which is usually invisible\nin the source code of applications?  \n  \nOne thing that does seem likely is that most opportunities for parallelism\nwill be wasted. This is a special case of my more general prediction that most\nof the extra computer power we're given will go to waste. I expect that, as\nwith the stupendous speed of the underlying hardware, parallelism will be\nsomething that is available if you ask for it explicitly, but ordinarily not\nused. This implies that the kind of parallelism we have in a hundred years\nwill not, except in special applications, be massive parallelism. I expect for\nordinary programmers it will be more like being able to fork off processes\nthat all end up running in parallel.  \n  \nAnd this will, like asking for specific implementations of data structures, be\nsomething that you do fairly late in the life of a program, when you try to\noptimize it. Version 1s will ordinarily ignore any advantages to be got from\nparallel computation, just as they will ignore advantages to be got from\nspecific representations of data.  \n  \nExcept in special kinds of applications, parallelism won't pervade the\nprograms that are written in a hundred years. It would be premature\noptimization if it did.  \n  \n  \n  \nHow many programming languages will there be in a hundred years? There seem to\nbe a huge number of new programming languages lately. Part of the reason is\nthat faster hardware has allowed programmers to make different tradeoffs\nbetween speed and convenience, depending on the application. If this is a real\ntrend, the hardware we'll have in a hundred years should only increase it.  \n  \nAnd yet there may be only a few widely-used languages in a hundred years. Part\nof the reason I say this is optimism: it seems that, if you did a really good\njob, you could make a language that was ideal for writing a slow version 1,\nand yet with the right optimization advice to the compiler, would also yield\nvery fast code when necessary. So, since I'm optimistic, I'm going to predict\nthat despite the huge gap they'll have between acceptable and maximal\nefficiency, programmers in a hundred years will have languages that can span\nmost of it.  \n  \nAs this gap widens, profilers will become increasingly important. Little\nattention is paid to profiling now. Many people still seem to believe that the\nway to get fast applications is to write compilers that generate fast code. As\nthe gap between acceptable and maximal performance widens, it will become\nincreasingly clear that the way to get fast applications is to have a good\nguide from one to the other.  \n  \nWhen I say there may only be a few languages, I'm not including domain-\nspecific \"little languages\". I think such embedded languages are a great idea,\nand I expect them to proliferate. But I expect them to be written as thin\nenough skins that users can see the general-purpose language underneath.  \n  \n  \n  \nWho will design the languages of the future? One of the most exciting trends\nin the last ten years has been the rise of open-source languages like Perl,\nPython, and Ruby. Language design is being taken over by hackers. The results\nso far are messy, but encouraging. There are some stunningly novel ideas in\nPerl, for example. Many are stunningly bad, but that's always true of\nambitious efforts. At its current rate of mutation, God knows what Perl might\nevolve into in a hundred years.  \n  \nIt's not true that those who can't do, teach (some of the best hackers I know\nare professors), but it is true that there are a lot of things that those who\nteach can't do. [Research](desres.html) imposes constraining caste\nrestrictions. In any academic field there are topics that are ok to work on\nand others that aren't. Unfortunately the distinction between acceptable and\nforbidden topics is usually based on how intellectual the work sounds when\ndescribed in research papers, rather than how important it is for getting good\nresults. The extreme case is probably literature; people studying literature\nrarely say anything that would be of the slightest use to those producing it.  \n  \nThough the situation is better in the sciences, the overlap between the kind\nof work you're allowed to do and the kind of work that yields good languages\nis distressingly small. (Olin Shivers has grumbled eloquently about this.) For\nexample, types seem to be an inexhaustible source of research papers, despite\nthe fact that static typing seems to preclude true macros-- without which, in\nmy opinion, no language is worth using.  \n  \nThe trend is not merely toward languages being developed as open-source\nprojects rather than \"research\", but toward languages being designed by the\napplication programmers who need to use them, rather than by compiler writers.\nThis seems a good trend and I expect it to continue.  \n  \n  \n  \nUnlike physics in a hundred years, which is almost necessarily impossible to\npredict, I think it may be possible in principle to design a language now that\nwould appeal to users in a hundred years.  \n  \nOne way to design a language is to just write down the program you'd like to\nbe able to write, regardless of whether there is a compiler that can translate\nit or hardware that can run it. When you do this you can assume unlimited\nresources. It seems like we ought to be able to imagine unlimited resources as\nwell today as in a hundred years.  \n  \nWhat program would one like to write? Whatever is least work. Except not\nquite: whatever _would be_ least work if your ideas about programming weren't\nalready influenced by the languages you're currently used to. Such influence\ncan be so pervasive that it takes a great effort to overcome it. You'd think\nit would be obvious to creatures as lazy as us how to express a program with\nthe least effort. In fact, our ideas about what's possible tend to be so\n[limited](avg.html) by whatever language we think in that easier formulations\nof programs seem very surprising. They're something you have to discover, not\nsomething you naturally sink into.  \n  \nOne helpful trick here is to use the [length](power.html) of the program as an\napproximation for how much work it is to write. Not the length in characters,\nof course, but the length in distinct syntactic elements-- basically, the size\nof the parse tree. It may not be quite true that the shortest program is the\nleast work to write, but it's close enough that you're better off aiming for\nthe solid target of brevity than the fuzzy, nearby one of least work. Then the\nalgorithm for language design becomes: look at a program and ask, is there any\nway to write this that's shorter?  \n  \nIn practice, writing programs in an imaginary hundred-year language will work\nto varying degrees depending on how close you are to the core. Sort routines\nyou can write now. But it would be hard to predict now what kinds of libraries\nmight be needed in a hundred years. Presumably many libraries will be for\ndomains that don't even exist yet. If SETI@home works, for example, we'll need\nlibraries for communicating with aliens. Unless of course they are\nsufficiently advanced that they already communicate in XML.  \n  \nAt the other extreme, I think you might be able to design the core language\ntoday. In fact, some might argue that it was already mostly designed in 1958.  \n  \n  \n  \nIf the hundred year language were available today, would we want to program in\nit? One way to answer this question is to look back. If present-day\nprogramming languages had been available in 1960, would anyone have wanted to\nuse them?  \n  \nIn some ways, the answer is no. Languages today assume infrastructure that\ndidn't exist in 1960. For example, a language in which indentation is\nsignificant, like Python, would not work very well on printer terminals. But\nputting such problems aside-- assuming, for example, that programs were all\njust written on paper-- would programmers of the 1960s have liked writing\nprograms in the languages we use now?  \n  \nI think so. Some of the less imaginative ones, who had artifacts of early\nlanguages built into their ideas of what a program was, might have had\ntrouble. (How can you manipulate data without doing pointer arithmetic? How\ncan you implement flow charts without gotos?) But I think the smartest\nprogrammers would have had no trouble making the most of present-day\nlanguages, if they'd had them.  \n  \nIf we had the hundred-year language now, it would at least make a great\npseudocode. What about using it to write software? Since the hundred-year\nlanguage will need to generate fast code for some applications, presumably it\ncould generate code efficient enough to run acceptably well on our hardware.\nWe might have to give more optimization advice than users in a hundred years,\nbut it still might be a net win.  \n  \n  \n  \nNow we have two ideas that, if you combine them, suggest interesting\npossibilities: (1) the hundred-year language could, in principle, be designed\ntoday, and (2) such a language, if it existed, might be good to program in\ntoday. When you see these ideas laid out like that, it's hard not to think,\nwhy not try writing the hundred-year language now?  \n  \nWhen you're working on language design, I think it is good to have such a\ntarget and to keep it consciously in mind. When you learn to drive, one of the\nprinciples they teach you is to align the car not by lining up the hood with\nthe stripes painted on the road, but by aiming at some point in the distance.\nEven if all you care about is what happens in the next ten feet, this is the\nright answer. I think we can and should do the same thing with programming\nlanguages.  \n  \n  \n  \n**Notes**  \n  \nI believe Lisp Machine Lisp was the first language to embody the principle\nthat declarations (except those of dynamic variables) were merely optimization\nadvice, and would not change the meaning of a correct program. Common Lisp\nseems to have been the first to state this explicitly.  \n  \n**Thanks** to Trevor Blackwell, Robert Morris, and Dan Giffin for reading\ndrafts of this, and to Guido van Rossum, Jeremy Hylton, and the rest of the\nPython crew for inviting me to speak at PyCon.  \n  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nOctober 2012  \n  \nOne advantage of Y Combinator's early, broad focus is that we see trends\nbefore most other people. And one of the most conspicuous trends in the last\nbatch was the large number of hardware startups. Out of 84 companies, 7 were\nmaking hardware. On the whole they've done better than the companies that\nweren't.  \n  \nThey've faced resistance from investors of course. Investors have a deep-\nseated bias against hardware. But investors' opinions are a trailing\nindicator. The best founders are better at seeing the future than the best\ninvestors, because the best founders are making it.  \n  \nThere is no one single force driving this trend. Hardware [does\nwell](http://bits.blogs.nytimes.com/2012/05/11/pebble-smartwatch-tops-out-\nat-10-million-on-kickstarter/) on crowdfunding sites. The spread of\n[tablets](http://paulgraham.com/tablets.html) makes it possible to build new\nthings [controlled by](http://lockitron.com) and even\n[incorporating](http://doublerobotics.com) them. [Electric\nmotors](http://www.boostedboards.com/) have improved. Wireless connectivity of\nvarious types can now be taken for granted. It's getting more straightforward\nto get things manufactured. Arduinos, 3D printing, laser cutters, and more\naccessible CNC milling are making hardware easier to prototype. Retailers are\nless of a bottleneck as customers increasingly buy online.  \n  \nOne question I can answer is why hardware is suddenly cool. It always was\ncool. Physical things are great. They just haven't been as great a way to\nstart a [rapidly growing](growth.html) business as software. But that rule may\nnot be permanent. It's not even that old; it only dates from about 1990. Maybe\nthe advantage of software will turn out to have been temporary. Hackers love\nto build hardware, and customers love to buy it. So if the ease of shipping\nhardware even approached the ease of shipping software, we'd see a lot more\nhardware startups.  \n  \nIt wouldn't be the first time something was a bad idea till it wasn't. And it\nwouldn't be the first time investors learned that lesson from founders.  \n  \nSo if you want to work on hardware, don't be deterred from doing it because\nyou worry investors will discriminate against you. And in particular, don't be\ndeterred from [applying](http://ycombinator.com/apply.html) to Y Combinator\nwith a hardware idea, because we're especially interested in hardware\nstartups.  \n  \nWe know there's room for the [next Steve Jobs](ambitious.html). But there's\nalmost certainly also room for the first <Your Name Here>.  \n  \n  \n  \n  \n  \n**Thanks** to Sam Altman, Trevor Blackwell, David Cann, Sanjay Dastoor, Paul\nGerhardt, Cameron Robertson, Harj Taggar, and Garry Tan for reading drafts of\nthis.  \n  \n\nJune 2021  \n  \nIt might not seem there's much to learn about how to work hard. Anyone who's\nbeen to school knows what it entails, even if they chose not to do it. There\nare 12 year olds who work amazingly hard. And yet when I ask if I know more\nabout working hard now than when I was in school, the answer is definitely\nyes.  \n  \nOne thing I know is that if you want to do great things, you'll have to work\nvery hard. I wasn't sure of that as a kid. Schoolwork varied in difficulty;\none didn't always have to work super hard to do well. And some of the things\nfamous adults did, they seemed to do almost effortlessly. Was there, perhaps,\nsome way to evade hard work through sheer brilliance? Now I know the answer to\nthat question. There isn't.  \n  \nThe reason some subjects seemed easy was that my school had low standards. And\nthe reason famous adults seemed to do things effortlessly was years of\npractice; they made it look easy.  \n  \nOf course, those famous adults usually had a lot of natural ability too. There\nare three ingredients in great work: natural ability, practice, and effort.\nYou can do pretty well with just two, but to do the best work you need all\nthree: you need great natural ability _and_ to have practiced a lot _and_ to\nbe trying very hard. [1]  \n  \nBill Gates, for example, was among the smartest people in business in his era,\nbut he was also among the hardest working. \"I never took a day off in my\ntwenties,\" he said. \"Not one.\" It was similar with Lionel Messi. He had great\nnatural ability, but when his youth coaches talk about him, what they remember\nis not his talent but his dedication and his desire to win. P. G. Wodehouse\nwould probably get my vote for best English writer of the 20th century, if I\nhad to choose. Certainly no one ever made it look easier. But no one ever\nworked harder. At 74, he wrote\n\n> with each new book of mine I have, as I say, the feeling that this time I\n> have picked a lemon in the garden of literature. A good thing, really, I\n> suppose. Keeps one up on one's toes and makes one rewrite every sentence ten\n> times. Or in many cases twenty times.\n\nSounds a bit extreme, you think. And yet Bill Gates sounds even more extreme.\nNot one day off in ten years? These two had about as much natural ability as\nanyone could have, and yet they also worked about as hard as anyone could\nwork. You need both.  \n  \nThat seems so obvious, and yet in practice we find it slightly hard to grasp.\nThere's a faint xor between talent and hard work. It comes partly from popular\nculture, where it seems to run very deep, and partly from the fact that the\noutliers are so rare. If great talent and great drive are both rare, then\npeople with both are rare squared. Most people you meet who have a lot of one\nwill have less of the other. But you'll need both if you want to be an outlier\nyourself. And since you can't really change how much natural talent you have,\nin practice doing great work, insofar as you can, reduces to working very\nhard.  \n  \nIt's straightforward to work hard if you have clearly defined, externally\nimposed goals, as you do in school. There is some technique to it: you have to\nlearn not to lie to yourself, not to procrastinate (which is a form of lying\nto yourself), not to get distracted, and not to give up when things go wrong.\nBut this level of discipline seems to be within the reach of quite young\nchildren, if they want it.  \n  \nWhat I've learned since I was a kid is how to work toward goals that are\nneither clearly defined nor externally imposed. You'll probably have to learn\nboth if you want to do really great things.  \n  \nThe most basic level of which is simply to feel you should be working without\nanyone telling you to. Now, when I'm not working hard, alarm bells go off. I\ncan't be sure I'm getting anywhere when I'm working hard, but I can be sure\nI'm getting nowhere when I'm not, and it feels awful. [2]  \n  \nThere wasn't a single point when I learned this. Like most little kids, I\nenjoyed the feeling of achievement when I learned or did something new. As I\ngrew older, this morphed into a feeling of disgust when I wasn't achieving\nanything. The one precisely dateable landmark I have is when I stopped\nwatching TV, at age 13.  \n  \nSeveral people I've talked to remember getting serious about work around this\nage. When I asked Patrick Collison when he started to find idleness\ndistasteful, he said\n\n> I think around age 13 or 14. I have a clear memory from around then of\n> sitting in the sitting room, staring outside, and wondering why I was\n> wasting my summer holiday.\n\nPerhaps something changes at adolescence. That would make sense.  \n  \nStrangely enough, the biggest obstacle to getting serious about work was\nprobably school, which made work (what they called work) seem boring and\npointless. I had to learn what real work was before I could wholeheartedly\ndesire to do it. That took a while, because even in college a lot of the work\nis pointless; there are entire departments that are pointless. But as I\nlearned the shape of real work, I found that my desire to do it slotted into\nit as if they'd been made for each other.  \n  \nI suspect most people have to learn what work is before they can love it.\nHardy wrote eloquently about this in _A Mathematician's Apology_ :\n\n> I do not remember having felt, as a boy, any _passion_ for mathematics, and\n> such notions as I may have had of the career of a mathematician were far\n> from noble. I thought of mathematics in terms of examinations and\n> scholarships: I wanted to beat other boys, and this seemed to be the way in\n> which I could do so most decisively.\n\nHe didn't learn what math was really about till part way through college, when\nhe read Jordan's _Cours d'analyse_.\n\n> I shall never forget the astonishment with which I read that remarkable\n> work, the first inspiration for so many mathematicians of my generation, and\n> learnt for the first time as I read it what mathematics really meant.\n\nThere are two separate kinds of fakeness you need to learn to discount in\norder to understand what real work is. One is the kind Hardy encountered in\nschool. Subjects get distorted when they're adapted to be taught to kids \u2014\noften so distorted that they're nothing like the work done by actual\npractitioners. [3] The other kind of fakeness is intrinsic to certain types of\nwork. Some types of work are inherently bogus, or at best mere busywork.  \n  \nThere's a kind of solidity to real work. It's not all writing the _Principia_\n, but it all feels necessary. That's a vague criterion, but it's deliberately\nvague, because it has to cover a lot of different types. [4]  \n  \nOnce you know the shape of real work, you have to learn how many hours a day\nto spend on it. You can't solve this problem by simply working every waking\nhour, because in many kinds of work there's a point beyond which the quality\nof the result will start to decline.  \n  \nThat limit varies depending on the type of work and the person. I've done\nseveral different kinds of work, and the limits were different for each. My\nlimit for the harder types of writing or programming is about five hours a\nday. Whereas when I was running a startup, I could work all the time. At least\nfor the three years I did it; if I'd kept going much longer, I'd probably have\nneeded to take occasional vacations. [5]  \n  \nThe only way to find the limit is by crossing it. Cultivate a sensitivity to\nthe quality of the work you're doing, and then you'll notice if it decreases\nbecause you're working too hard. Honesty is critical here, in both directions:\nyou have to notice when you're being lazy, but also when you're working too\nhard. And if you think there's something admirable about working too hard, get\nthat idea out of your head. You're not merely getting worse results, but\ngetting them because you're showing off \u2014 if not to other people, then to\nyourself. [6]  \n  \nFinding the limit of working hard is a constant, ongoing process, not\nsomething you do just once. Both the difficulty of the work and your ability\nto do it can vary hour to hour, so you need to be constantly judging both how\nhard you're trying and how well you're doing.  \n  \nTrying hard doesn't mean constantly pushing yourself to work, though. There\nmay be some people who do, but I think my experience is fairly typical, and I\nonly have to push myself occasionally when I'm starting a project or when I\nencounter some sort of check. That's when I'm in danger of procrastinating.\nBut once I get rolling, I tend to keep going.  \n  \nWhat keeps me going depends on the type of work. When I was working on Viaweb,\nI was driven by fear of failure. I barely procrastinated at all then, because\nthere was always something that needed doing, and if I could put more distance\nbetween me and the pursuing beast by doing it, why wait? [7] Whereas what\ndrives me now, writing essays, is the flaws in them. Between essays I fuss for\na few days, like a dog circling while it decides exactly where to lie down.\nBut once I get started on one, I don't have to push myself to work, because\nthere's always some error or omission already pushing me.  \n  \nI do make some amount of effort to focus on important topics. Many problems\nhave a hard core at the center, surrounded by easier stuff at the edges.\nWorking hard means aiming toward the center to the extent you can. Some days\nyou may not be able to; some days you'll only be able to work on the easier,\nperipheral stuff. But you should always be aiming as close to the center as\nyou can without stalling.  \n  \nThe bigger question of what to do with your life is one of these problems with\na hard core. There are important problems at the center, which tend to be\nhard, and less important, easier ones at the edges. So as well as the small,\ndaily adjustments involved in working on a specific problem, you'll\noccasionally have to make big, lifetime-scale adjustments about which type of\nwork to do. And the rule is the same: working hard means aiming toward the\ncenter \u2014 toward the most ambitious problems.  \n  \nBy center, though, I mean the actual center, not merely the current consensus\nabout the center. The consensus about which problems are most important is\noften mistaken, both in general and within specific fields. If you disagree\nwith it, and you're right, that could represent a valuable opportunity to do\nsomething new.  \n  \nThe more ambitious types of work will usually be harder, but although you\nshould not be in denial about this, neither should you treat difficulty as an\ninfallible guide in deciding what to do. If you discover some ambitious type\nof work that's a bargain in the sense of being easier for you than other\npeople, either because of the abilities you happen to have, or because of some\nnew way you've found to approach it, or simply because you're more excited\nabout it, by all means work on that. Some of the best work is done by people\nwho find an easy way to do something hard.  \n  \nAs well as learning the shape of real work, you need to figure out which kind\nyou're suited for. And that doesn't just mean figuring out which kind your\nnatural abilities match the best; it doesn't mean that if you're 7 feet tall,\nyou have to play basketball. What you're suited for depends not just on your\ntalents but perhaps even more on your interests. A [_deep\ninterest_](genius.html) in a topic makes people work harder than any amount of\ndiscipline can.  \n  \nIt can be harder to discover your interests than your talents. There are fewer\ntypes of talent than interest, and they start to be judged early in childhood,\nwhereas interest in a topic is a subtle thing that may not mature till your\ntwenties, or even later. The topic may not even exist earlier. Plus there are\nsome powerful sources of error you need to learn to discount. Are you really\ninterested in x, or do you want to work on it because you'll make a lot of\nmoney, or because other people will be impressed with you, or because your\nparents want you to? [8]  \n  \nThe difficulty of figuring out what to work on varies enormously from one\nperson to another. That's one of the most important things I've learned about\nwork since I was a kid. As a kid, you get the impression that everyone has a\ncalling, and all they have to do is figure out what it is. That's how it works\nin movies, and in the streamlined biographies fed to kids. Sometimes it works\nthat way in real life. Some people figure out what to do as children and just\ndo it, like Mozart. But others, like Newton, turn restlessly from one kind of\nwork to another. Maybe in retrospect we can identify one as their calling \u2014 we\ncan wish Newton spent more time on math and physics and less on alchemy and\ntheology \u2014 but this is an [_illusion_](disc.html) induced by hindsight bias.\nThere was no voice calling to him that he could have heard.  \n  \nSo while some people's lives converge fast, there will be others whose lives\nnever converge. And for these people, figuring out what to work on is not so\nmuch a prelude to working hard as an ongoing part of it, like one of a set of\nsimultaneous equations. For these people, the process I described earlier has\na third component: along with measuring both how hard you're working and how\nwell you're doing, you have to think about whether you should keep working in\nthis field or switch to another. If you're working hard but not getting good\nenough results, you should switch. It sounds simple expressed that way, but in\npractice it's very difficult. You shouldn't give up on the first day just\nbecause you work hard and don't get anywhere. You need to give yourself time\nto get going. But how much time? And what should you do if work that was going\nwell stops going well? How much time do you give yourself then? [9]  \n  \nWhat even counts as good results? That can be really hard to decide. If you're\nexploring an area few others have worked in, you may not even know what good\nresults look like. History is full of examples of people who misjudged the\nimportance of what they were working on.  \n  \nThe best test of whether it's worthwhile to work on something is whether you\nfind it interesting. That may sound like a dangerously subjective measure, but\nit's probably the most accurate one you're going to get. You're the one\nworking on the stuff. Who's in a better position than you to judge whether\nit's important, and what's a better predictor of its importance than whether\nit's interesting?  \n  \nFor this test to work, though, you have to be honest with yourself. Indeed,\nthat's the most striking thing about the whole question of working hard: how\nat each point it depends on being honest with yourself.  \n  \nWorking hard is not just a dial you turn up to 11. It's a complicated, dynamic\nsystem that has to be tuned just right at each point. You have to understand\nthe shape of real work, see clearly what kind you're best suited for, aim as\nclose to the true core of it as you can, accurately judge at each moment both\nwhat you're capable of and how you're doing, and put in as many hours each day\nas you can without harming the quality of the result. This network is too\ncomplicated to trick. But if you're consistently honest and clear-sighted, it\nwill automatically assume an optimal shape, and you'll be productive in a way\nfew people are.  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] In \"The Bus Ticket Theory of Genius\" I said the three ingredients in great\nwork were natural ability, determination, and interest. That's the formula in\nthe preceding stage; determination and interest yield practice and effort.  \n  \n[2] I mean this at a resolution of days, not hours. You'll often get somewhere\nwhile not working in the sense that the solution to a problem comes to you\nwhile taking a [_shower_](top.html), or even in your sleep, but only because\nyou were working hard on it the day before.  \n  \nIt's good to go on vacation occasionally, but when I go on vacation, I like to\nlearn new things. I wouldn't like just sitting on a beach.  \n  \n[3] The thing kids do in school that's most like the real version is sports.\nAdmittedly because many sports originated as games played in schools. But in\nthis one area, at least, kids are doing exactly what adults do.  \n  \nIn the average American high school, you have a choice of pretending to do\nsomething serious, or seriously doing something pretend. Arguably the latter\nis no worse.  \n  \n[4] Knowing what you want to work on doesn't mean you'll be able to. Most\npeople have to spend a lot of their time working on things they don't want to,\nespecially early on. But if you know what you want to do, you at least know\nwhat direction to nudge your life in.  \n  \n[5] The lower time limits for intense work suggest a solution to the problem\nof having less time to work after you have kids: switch to harder problems. In\neffect I did that, though not deliberately.  \n  \n[6] Some cultures have a tradition of performative hard work. I don't love\nthis idea, because (a) it makes a parody of something important and (b) it\ncauses people to wear themselves out doing things that don't matter. I don't\nknow enough to say for sure whether it's net good or bad, but my guess is bad.  \n  \n[7] One of the reasons people work so hard on startups is that startups can\nfail, and when they do, that failure tends to be both decisive and\nconspicuous.  \n  \n[8] It's ok to work on something to make a lot of money. You need to solve the\nmoney problem somehow, and there's nothing wrong with doing that efficiently\nby trying to make a lot at once. I suppose it would even be ok to be\ninterested in money for its own sake; whatever floats your boat. Just so long\nas you're conscious of your motivations. The thing to avoid is _unconsciously_\nletting the need for money warp your ideas about what kind of work you find\nmost interesting.  \n  \n[9] Many people face this question on a smaller scale with individual\nprojects. But it's easier both to recognize and to accept a dead end in a\nsingle project than to abandon some type of work entirely. The more determined\nyou are, the harder it gets. Like a Spanish Flu victim, you're fighting your\nown immune system: Instead of giving up, you tell yourself, I should just try\nharder. And who can say you're not right?  \n  \n  \n  \n**Thanks** to Trevor Blackwell, John Carmack, John Collison, Patrick Collison,\nRobert Morris, Geoff Ralston, and Harj Taggar for reading drafts of this.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nMay 2002  \n  \n\"We were after the C++ programmers. We managed to drag a lot of them about\nhalfway to Lisp.\"  \n  \n\\- Guy Steele, co-author of the Java spec  \n  \n  \nIn the software business there is an ongoing struggle between the pointy-\nheaded academics, and another equally formidable force, the pointy-haired\nbosses. Everyone knows who the pointy-haired boss is, right? I think most\npeople in the technology world not only recognize this cartoon character, but\nknow the actual person in their company that he is modelled upon.  \n  \nThe pointy-haired boss miraculously combines two qualities that are common by\nthemselves, but rarely seen together: (a) he knows nothing whatsoever about\ntechnology, and (b) he has very strong opinions about it.  \n  \nSuppose, for example, you need to write a piece of software. The pointy-haired\nboss has no idea how this software has to work, and can't tell one programming\nlanguage from another, and yet he knows what language you should write it in.\nExactly. He thinks you should write it in Java.  \n  \nWhy does he think this? Let's take a look inside the brain of the pointy-\nhaired boss. What he's thinking is something like this. Java is a standard. I\nknow it must be, because I read about it in the press all the time. Since it\nis a standard, I won't get in trouble for using it. And that also means there\nwill always be lots of Java programmers, so if the programmers working for me\nnow quit, as programmers working for me mysteriously always do, I can easily\nreplace them.  \n  \nWell, this doesn't sound that unreasonable. But it's all based on one unspoken\nassumption, and that assumption turns out to be false. The pointy-haired boss\nbelieves that all programming languages are pretty much equivalent. If that\nwere true, he would be right on target. If languages are all equivalent, sure,\nuse whatever language everyone else is using.  \n  \nBut all languages are not equivalent, and I think I can prove this to you\nwithout even getting into the differences between them. If you asked the\npointy-haired boss in 1992 what language software should be written in, he\nwould have answered with as little hesitation as he does today. Software\nshould be written in C++. But if languages are all equivalent, why should the\npointy-haired boss's opinion ever change? In fact, why should the developers\nof Java have even bothered to create a new language?  \n  \nPresumably, if you create a new language, it's because you think it's better\nin some way than what people already had. And in fact, Gosling makes it clear\nin the first Java white paper that Java was designed to fix some problems with\nC++. So there you have it: languages are not all equivalent. If you follow the\ntrail through the pointy-haired boss's brain to Java and then back through\nJava's history to its origins, you end up holding an idea that contradicts the\nassumption you started with.  \n  \nSo, who's right? James Gosling, or the pointy-haired boss? Not surprisingly,\nGosling is right. Some languages _are_ better, for certain problems, than\nothers. And you know, that raises some interesting questions. Java was\ndesigned to be better, for certain problems, than C++. What problems? When is\nJava better and when is C++? Are there situations where other languages are\nbetter than either of them?  \n  \nOnce you start considering this question, you have opened a real can of worms.\nIf the pointy-haired boss had to think about the problem in its full\ncomplexity, it would make his brain explode. As long as he considers all\nlanguages equivalent, all he has to do is choose the one that seems to have\nthe most momentum, and since that is more a question of fashion than\ntechnology, even he can probably get the right answer. But if languages vary,\nhe suddenly has to solve two simultaneous equations, trying to find an optimal\nbalance between two things he knows nothing about: the relative suitability of\nthe twenty or so leading languages for the problem he needs to solve, and the\nodds of finding programmers, libraries, etc. for each. If that's what's on the\nother side of the door, it is no surprise that the pointy-haired boss doesn't\nwant to open it.  \n  \nThe disadvantage of believing that all programming languages are equivalent is\nthat it's not true. But the advantage is that it makes your life a lot\nsimpler. And I think that's the main reason the idea is so widespread. It is a\n_comfortable_ idea.  \n  \nWe know that Java must be pretty good, because it is the cool, new programming\nlanguage. Or is it? If you look at the world of programming languages from a\ndistance, it looks like Java is the latest thing. (From far enough away, all\nyou can see is the large, flashing billboard paid for by Sun.) But if you look\nat this world up close, you find that there are degrees of coolness. Within\nthe hacker subculture, there is another language called Perl that is\nconsidered a lot cooler than Java. Slashdot, for example, is generated by\nPerl. I don't think you would find those guys using Java Server Pages. But\nthere is another, newer language, called Python, whose users tend to look down\non Perl, and [more](accgen.html) waiting in the wings.  \n  \nIf you look at these languages in order, Java, Perl, Python, you notice an\ninteresting pattern. At least, you notice this pattern if you are a Lisp\nhacker. Each one is progressively more like Lisp. Python copies even features\nthat many Lisp hackers consider to be mistakes. You could translate simple\nLisp programs into Python line for line. It's 2002, and programming languages\nhave almost caught up with 1958.  \n  \n**Catching Up with Math**  \n  \nWhat I mean is that Lisp was first discovered by John McCarthy in 1958, and\npopular programming languages are only now catching up with the ideas he\ndeveloped then.  \n  \nNow, how could that be true? Isn't computer technology something that changes\nvery rapidly? I mean, in 1958, computers were refrigerator-sized behemoths\nwith the processing power of a wristwatch. How could any technology that old\neven be relevant, let alone superior to the latest developments?  \n  \nI'll tell you how. It's because Lisp was not really designed to be a\nprogramming language, at least not in the sense we mean today. What we mean by\na programming language is something we use to tell a computer what to do.\nMcCarthy did eventually intend to develop a programming language in this\nsense, but the Lisp that we actually ended up with was based on something\nseparate that he did as a [theoretical exercise](rootsoflisp.html)\\-- an\neffort to define a more convenient alternative to the Turing Machine. As\nMcCarthy said later,\n\n> Another way to show that Lisp was neater than Turing machines was to write a\n> universal Lisp function and show that it is briefer and more comprehensible\n> than the description of a universal Turing machine. This was the Lisp\n> function\n> [_eval_](https://sep.turbifycdn.com/ty/cdn/paulgraham/jmc.lisp?t=1688221954&)...,\n> which computes the value of a Lisp expression.... Writing _eval_ required\n> inventing a notation representing Lisp functions as Lisp data, and such a\n> notation was devised for the purposes of the paper with no thought that it\n> would be used to express Lisp programs in practice.\n\nWhat happened next was that, some time in late 1958, Steve Russell, one of\nMcCarthy's grad students, looked at this definition of _eval_ and realized\nthat if he translated it into machine language, the result would be a Lisp\ninterpreter.  \n  \nThis was a big surprise at the time. Here is what McCarthy said about it later\nin an interview:\n\n> Steve Russell said, look, why don't I program this _eval_..., and I said to\n> him, ho, ho, you're confusing theory with practice, this _eval_ is intended\n> for reading, not for computing. But he went ahead and did it. That is, he\n> compiled the _eval_ in my paper into [IBM] 704 machine code, fixing bugs,\n> and then advertised this as a Lisp interpreter, which it certainly was. So\n> at that point Lisp had essentially the form that it has today....\n\nSuddenly, in a matter of weeks I think, McCarthy found his theoretical\nexercise transformed into an actual programming language-- and a more powerful\none than he had intended.  \n  \nSo the short explanation of why this 1950s language is not obsolete is that it\nwas not technology but math, and math doesn't get stale. The right thing to\ncompare Lisp to is not 1950s hardware, but, say, the Quicksort algorithm,\nwhich was discovered in 1960 and is still the fastest general-purpose sort.  \n  \nThere is one other language still surviving from the 1950s, Fortran, and it\nrepresents the opposite approach to language design. Lisp was a piece of\ntheory that unexpectedly got turned into a programming language. Fortran was\ndeveloped intentionally as a programming language, but what we would now\nconsider a very low-level one.  \n  \n[Fortran I](history.html), the language that was developed in 1956, was a very\ndifferent animal from present-day Fortran. Fortran I was pretty much assembly\nlanguage with math. In some ways it was less powerful than more recent\nassembly languages; there were no subroutines, for example, only branches.\nPresent-day Fortran is now arguably closer to Lisp than to Fortran I.  \n  \nLisp and Fortran were the trunks of two separate evolutionary trees, one\nrooted in math and one rooted in machine architecture. These two trees have\nbeen converging ever since. Lisp started out powerful, and over the next\ntwenty years got fast. So-called mainstream languages started out fast, and\nover the next forty years gradually got more powerful, until now the most\nadvanced of them are fairly close to Lisp. Close, but they are still missing a\nfew things....  \n  \n**What Made Lisp Different**  \n  \nWhen it was first developed, Lisp embodied nine new ideas. Some of these we\nnow take for granted, others are only seen in more advanced languages, and two\nare still unique to Lisp. The nine ideas are, in order of their adoption by\nthe mainstream,\n\n  1. Conditionals. A conditional is an if-then-else construct. We take these for granted now, but Fortran I didn't have them. It had only a conditional goto closely based on the underlying machine instruction.  \n  \n\n  2. A function type. In Lisp, functions are a data type just like integers or strings. They have a literal representation, can be stored in variables, can be passed as arguments, and so on.  \n  \n\n  3. Recursion. Lisp was the first programming language to support it.  \n  \n\n  4. Dynamic typing. In Lisp, all variables are effectively pointers. Values are what have types, not variables, and assigning or binding variables means copying pointers, not what they point to.  \n  \n\n  5. Garbage-collection.  \n  \n\n  6. Programs composed of expressions. Lisp programs are trees of expressions, each of which returns a value. This is in contrast to Fortran and most succeeding languages, which distinguish between expressions and statements.  \n  \nIt was natural to have this distinction in Fortran I because you could not\nnest statements. And so while you needed expressions for math to work, there\nwas no point in making anything else return a value, because there could not\nbe anything waiting for it.  \n  \nThis limitation went away with the arrival of block-structured languages, but\nby then it was too late. The distinction between expressions and statements\nwas entrenched. It spread from Fortran into Algol and then to both their\ndescendants.  \n  \n\n  7. A symbol type. Symbols are effectively pointers to strings stored in a hash table. So you can test equality by comparing a pointer, instead of comparing each character.  \n  \n\n  8. A notation for code using trees of symbols and constants.  \n  \n\n  9. The whole language there all the time. There is no real distinction between read-time, compile-time, and runtime. You can compile or run code while reading, read or run code while compiling, and read or compile code at runtime.  \n  \nRunning code at read-time lets users reprogram Lisp's syntax; running code at\ncompile-time is the basis of macros; compiling at runtime is the basis of\nLisp's use as an extension language in programs like Emacs; and reading at\nruntime enables programs to communicate using s-expressions, an idea recently\nreinvented as XML.\n\nWhen Lisp first appeared, these ideas were far removed from ordinary\nprogramming practice, which was dictated largely by the hardware available in\nthe late 1950s. Over time, the default language, embodied in a succession of\npopular languages, has gradually evolved toward Lisp. Ideas 1-5 are now\nwidespread. Number 6 is starting to appear in the mainstream. Python has a\nform of 7, though there doesn't seem to be any syntax for it.  \n  \nAs for number 8, this may be the most interesting of the lot. Ideas 8 and 9\nonly became part of Lisp by accident, because Steve Russell implemented\nsomething McCarthy had never intended to be implemented. And yet these ideas\nturn out to be responsible for both Lisp's strange appearance and its most\ndistinctive features. Lisp looks strange not so much because it has a strange\nsyntax as because it has no syntax; you express programs directly in the parse\ntrees that get built behind the scenes when other languages are parsed, and\nthese trees are made of lists, which are Lisp data structures.  \n  \nExpressing the language in its own data structures turns out to be a very\npowerful feature. Ideas 8 and 9 together mean that you can write programs that\nwrite programs. That may sound like a bizarre idea, but it's an everyday thing\nin Lisp. The most common way to do it is with something called a _macro._  \n  \nThe term \"macro\" does not mean in Lisp what it means in other languages. A\nLisp macro can be anything from an abbreviation to a compiler for a new\nlanguage. If you want to really understand Lisp, or just expand your\nprogramming horizons, I would [learn more](onlisp.html) about macros.  \n  \nMacros (in the Lisp sense) are still, as far as I know, unique to Lisp. This\nis partly because in order to have macros you probably have to make your\nlanguage look as strange as Lisp. It may also be because if you do add that\nfinal increment of power, you can no longer claim to have invented a new\nlanguage, but only a new dialect of Lisp.  \n  \nI mention this mostly as a joke, but it is quite true. If you define a\nlanguage that has car, cdr, cons, quote, cond, atom, eq, and a notation for\nfunctions expressed as lists, then you can build all the rest of Lisp out of\nit. That is in fact the defining quality of Lisp: it was in order to make this\nso that McCarthy gave Lisp the shape it has.  \n  \n**Where Languages Matter**  \n  \nSo suppose Lisp does represent a kind of limit that mainstream languages are\napproaching asymptotically-- does that mean you should actually use it to\nwrite software? How much do you lose by using a less powerful language? Isn't\nit wiser, sometimes, not to be at the very edge of innovation? And isn't\npopularity to some extent its own justification? Isn't the pointy-haired boss\nright, for example, to want to use a language for which he can easily hire\nprogrammers?  \n  \nThere are, of course, projects where the choice of programming language\ndoesn't matter much. As a rule, the more demanding the application, the more\nleverage you get from using a powerful language. But plenty of projects are\nnot demanding at all. Most programming probably consists of writing little\nglue programs, and for little glue programs you can use any language that\nyou're already familiar with and that has good libraries for whatever you need\nto do. If you just need to feed data from one Windows app to another, sure,\nuse Visual Basic.  \n  \nYou can write little glue programs in Lisp too (I use it as a desktop\ncalculator), but the biggest win for languages like Lisp is at the other end\nof the spectrum, where you need to write sophisticated programs to solve hard\nproblems in the face of fierce competition. A good example is the [airline\nfare search program](carl.html) that ITA Software licenses to Orbitz. These\nguys entered a market already dominated by two big, entrenched competitors,\nTravelocity and Expedia, and seem to have just humiliated them\ntechnologically.  \n  \nThe core of ITA's application is a 200,000 line Common Lisp program that\nsearches many orders of magnitude more possibilities than their competitors,\nwho apparently are still using mainframe-era programming techniques. (Though\nITA is also in a sense using a mainframe-era programming language.) I have\nnever seen any of ITA's code, but according to one of their top hackers they\nuse a lot of macros, and I am not surprised to hear it.  \n  \n**Centripetal Forces**  \n  \nI'm not saying there is no cost to using uncommon technologies. The pointy-\nhaired boss is not completely mistaken to worry about this. But because he\ndoesn't understand the risks, he tends to magnify them.  \n  \nI can think of three problems that could arise from using less common\nlanguages. Your programs might not work well with programs written in other\nlanguages. You might have fewer libraries at your disposal. And you might have\ntrouble hiring programmers.  \n  \nHow much of a problem is each of these? The importance of the first varies\ndepending on whether you have control over the whole system. If you're writing\nsoftware that has to run on a remote user's machine on top of a buggy, closed\noperating system (I mention no names), there may be advantages to writing your\napplication in the same language as the OS. But if you control the whole\nsystem and have the source code of all the parts, as ITA presumably does, you\ncan use whatever languages you want. If any incompatibility arises, you can\nfix it yourself.  \n  \nIn server-based applications you can get away with using the most advanced\ntechnologies, and I think this is the main cause of what Jonathan Erickson\ncalls the \"[programming language\nrenaissance](http://www.byte.com/documents/s=1821/byt20011214s0003/).\" This is\nwhy we even hear about new languages like Perl and Python. We're not hearing\nabout these languages because people are using them to write Windows apps, but\nbecause people are using them on servers. And as software shifts [off the\ndesktop](road.html) and onto servers (a future even Microsoft seems resigned\nto), there will be less and less pressure to use middle-of-the-road\ntechnologies.  \n  \nAs for libraries, their importance also depends on the application. For less\ndemanding problems, the availability of libraries can outweigh the intrinsic\npower of the language. Where is the breakeven point? Hard to say exactly, but\nwherever it is, it is short of anything you'd be likely to call an\napplication. If a company considers itself to be in the software business, and\nthey're writing an application that will be one of their products, then it\nwill probably involve several hackers and take at least six months to write.\nIn a project of that size, powerful languages probably start to outweigh the\nconvenience of pre-existing libraries.  \n  \nThe third worry of the pointy-haired boss, the difficulty of hiring\nprogrammers, I think is a red herring. How many hackers do you need to hire,\nafter all? Surely by now we all know that software is best developed by teams\nof less than ten people. And you shouldn't have trouble hiring hackers on that\nscale for any language anyone has ever heard of. If you can't find ten Lisp\nhackers, then your company is probably based in the wrong city for developing\nsoftware.  \n  \nIn fact, choosing a more powerful language probably decreases the size of the\nteam you need, because (a) if you use a more powerful language you probably\nwon't need as many hackers, and (b) hackers who work in more advanced\nlanguages are likely to be smarter.  \n  \nI'm not saying that you won't get a lot of pressure to use what are perceived\nas \"standard\" technologies. At Viaweb (now Yahoo Store), we raised some\neyebrows among VCs and potential acquirers by using Lisp. But we also raised\neyebrows by using generic Intel boxes as servers instead of \"industrial\nstrength\" servers like Suns, for using a then-obscure open-source Unix variant\ncalled FreeBSD instead of a real commercial OS like Windows NT, for ignoring a\nsupposed e-commerce standard called\n[SET](http://news.com.com/2100-1017-225723.html) that no one now even\nremembers, and so on.  \n  \nYou can't let the suits make technical decisions for you. Did it alarm some\npotential acquirers that we used Lisp? Some, slightly, but if we hadn't used\nLisp, we wouldn't have been able to write the software that made them want to\nbuy us. What seemed like an anomaly to them was in fact cause and effect.  \n  \nIf you start a startup, don't design your product to please VCs or potential\nacquirers. _Design your product to please the users._ If you win the users,\neverything else will follow. And if you don't, no one will care how\ncomfortingly orthodox your technology choices were.  \n  \n**The Cost of Being Average**  \n  \nHow much do you lose by using a less powerful language? There is actually some\ndata out there about that.  \n  \nThe most convenient measure of power is probably [code size](power.html). The\npoint of high-level languages is to give you bigger abstractions-- bigger\nbricks, as it were, so you don't need as many to build a wall of a given size.\nSo the more powerful the language, the shorter the program (not simply in\ncharacters, of course, but in distinct elements).  \n  \nHow does a more powerful language enable you to write shorter programs? One\ntechnique you can use, if the language will let you, is something called\n[bottom-up programming](progbot.html). Instead of simply writing your\napplication in the base language, you build on top of the base language a\nlanguage for writing programs like yours, then write your program in it. The\ncombined code can be much shorter than if you had written your whole program\nin the base language-- indeed, this is how most compression algorithms work. A\nbottom-up program should be easier to modify as well, because in many cases\nthe language layer won't have to change at all.  \n  \nCode size is important, because the time it takes to write a program depends\nmostly on its length. If your program would be three times as long in another\nlanguage, it will take three times as long to write-- and you can't get around\nthis by hiring more people, because beyond a certain size new hires are\nactually a net lose. Fred Brooks described this phenomenon in his famous book\n_The Mythical Man-Month,_ and everything I've seen has tended to confirm what\nhe said.  \n  \nSo how much shorter are your programs if you write them in Lisp? Most of the\nnumbers I've heard for Lisp versus C, for example, have been around 7-10x. But\na recent article about ITA in [_New\nArchitect_](http://www.newarchitectmag.com/documents/s=2286/new1015626014044/)\nmagazine said that \"one line of Lisp can replace 20 lines of C,\" and since\nthis article was full of quotes from ITA's president, I assume they got this\nnumber from ITA. If so then we can put some faith in it; ITA's software\nincludes a lot of C and C++ as well as Lisp, so they are speaking from\nexperience.  \n  \nMy guess is that these multiples aren't even constant. I think they increase\nwhen you face harder problems and also when you have smarter programmers. A\nreally good hacker can squeeze more out of better tools.  \n  \nAs one data point on the curve, at any rate, if you were to compete with ITA\nand chose to write your software in C, they would be able to develop software\ntwenty times faster than you. If you spent a year on a new feature, they'd be\nable to duplicate it in less than three weeks. Whereas if they spent just\nthree months developing something new, it would be _five years_ before you had\nit too.  \n  \nAnd you know what? That's the best-case scenario. When you talk about code-\nsize ratios, you're implicitly assuming that you can actually write the\nprogram in the weaker language. But in fact there are limits on what\nprogrammers can do. If you're trying to solve a hard problem with a language\nthat's too low-level, you reach a point where there is just too much to keep\nin your head at once.  \n  \nSo when I say it would take ITA's imaginary competitor five years to duplicate\nsomething ITA could write in Lisp in three months, I mean five years if\nnothing goes wrong. In fact, the way things work in most companies, any\ndevelopment project that would take five years is likely never to get finished\nat all.  \n  \nI admit this is an extreme case. ITA's hackers seem to be unusually smart, and\nC is a pretty low-level language. But in a competitive market, even a\ndifferential of two or three to one would be enough to guarantee that you'd\nalways be behind.  \n  \n**A Recipe**  \n  \nThis is the kind of possibility that the pointy-haired boss doesn't even want\nto think about. And so most of them don't. Because, you know, when it comes\ndown to it, the pointy-haired boss doesn't mind if his company gets their ass\nkicked, so long as no one can prove it's his fault. The safest plan for him\npersonally is to stick close to the center of the herd.  \n  \nWithin large organizations, the phrase used to describe this approach is\n\"industry best practice.\" Its purpose is to shield the pointy-haired boss from\nresponsibility: if he chooses something that is \"industry best practice,\" and\nthe company loses, he can't be blamed. He didn't choose, the industry did.  \n  \nI believe this term was originally used to describe accounting methods and so\non. What it means, roughly, is _don't do anything weird._ And in accounting\nthat's probably a good idea. The terms \"cutting-edge\" and \"accounting\" do not\nsound good together. But when you import this criterion into decisions about\ntechnology, you start to get the wrong answers.  \n  \nTechnology often _should_ be cutting-edge. In programming languages, as Erann\nGat has pointed out, what \"industry best practice\" actually gets you is not\nthe best, but merely the average. When a decision causes you to develop\nsoftware at a fraction of the rate of more aggressive competitors, \"best\npractice\" is a misnomer.  \n  \nSo here we have two pieces of information that I think are very valuable. In\nfact, I know it from my own experience. Number 1, languages vary in power.\nNumber 2, most managers deliberately ignore this. Between them, these two\nfacts are literally a recipe for making money. ITA is an example of this\nrecipe in action. If you want to win in a software business, just take on the\nhardest problem you can find, use the most powerful language you can get, and\nwait for your competitors' pointy-haired bosses to revert to the mean.  \n  \n\n* * *\n\n  \n  \n  \n  \n**Appendix: Power**  \n  \nAs an illustration of what I mean about the relative power of programming\nlanguages, consider the following problem. We want to write a function that\ngenerates accumulators-- a function that takes a number n, and returns a\nfunction that takes another number i and returns n incremented by i.  \n  \n(That's _incremented by_ , not plus. An accumulator has to accumulate.)  \n  \nIn Common Lisp this would be  (defun foo (n) (lambda (i) (incf n i)))  and in\nPerl 5,  sub foo { my ($n) = @_; sub {$n += shift} }  which has more elements\nthan the Lisp version because you have to extract parameters manually in Perl.  \n  \nIn Smalltalk the code is slightly longer than in Lisp  foo: n |s| s := n.\n^[:i| s := s+i. ]  because although in general lexical variables work, you\ncan't do an assignment to a parameter, so you have to create a new variable s.  \n  \nIn Javascript the example is, again, slightly longer, because Javascript\nretains the distinction between statements and expressions, so you need\nexplicit `return` statements to return values:  function foo(n) { return\nfunction (i) { return n += i } }  (To be fair, Perl also retains this\ndistinction, but deals with it in typical Perl fashion by letting you omit\n`return`s.)  \n  \nIf you try to translate the Lisp/Perl/Smalltalk/Javascript code into Python\nyou run into some limitations. Because Python doesn't fully support lexical\nvariables, you have to create a data structure to hold the value of n. And\nalthough Python does have a function data type, there is no literal\nrepresentation for one (unless the body is only a single expression) so you\nneed to create a named function to return. This is what you end up with:  def\nfoo(n): s = [n] def bar(i): s[0] += i return s[0] return bar  Python users\nmight legitimately ask why they can't just write  def foo(n): return lambda i:\nreturn n += i  or even  def foo(n): lambda i: n += i  and my guess is that\nthey probably will, one day. (But if they don't want to wait for Python to\nevolve the rest of the way into Lisp, they could always just...)  \n  \nIn OO languages, you can, to a limited extent, simulate a closure (a function\nthat refers to variables defined in enclosing scopes) by defining a class with\none method and a field to replace each variable from an enclosing scope. This\nmakes the programmer do the kind of code analysis that would be done by the\ncompiler in a language with full support for lexical scope, and it won't work\nif more than one function refers to the same variable, but it is enough in\nsimple cases like this.  \n  \nPython experts seem to agree that this is the preferred way to solve the\nproblem in Python, writing either  def foo(n): class acc: def __init__(self,\ns): self.s = s def inc(self, i): self.s += i return self.s return acc(n).inc\nor  class foo: def __init__(self, n): self.n = n def __call__(self, i): self.n\n+= i return self.n  I include these because I wouldn't want Python advocates\nto say I was misrepresenting the language, but both seem to me more complex\nthan the first version. You're doing the same thing, setting up a separate\nplace to hold the accumulator; it's just a field in an object instead of the\nhead of a list. And the use of these special, reserved field names, especially\n`__call__`, seems a bit of a hack.  \n  \nIn the rivalry between Perl and Python, the claim of the Python hackers seems\nto be that that Python is a more elegant alternative to Perl, but what this\ncase shows is that power is the ultimate elegance: the Perl program is simpler\n(has fewer elements), even if the syntax is a bit uglier.  \n  \nHow about other languages? In the other languages mentioned in this talk--\nFortran, C, C++, Java, and Visual Basic-- it is not clear whether you can\nactually solve this problem. Ken Anderson says that the following code is\nabout as close as you can get in Java:  public interface Inttoint { public int\ncall(int i); }  public static Inttoint foo(final int n) { return new\nInttoint() { int s = n; public int call(int i) { s = s + i; return s; }}; }\nThis falls short of the spec because it only works for integers. After many\nemail exchanges with Java hackers, I would say that writing a properly\npolymorphic version that behaves like the preceding examples is somewhere\nbetween damned awkward and impossible. If anyone wants to write one I'd be\nvery curious to see it, but I personally have timed out.  \n  \nIt's not literally true that you can't solve this problem in other languages,\nof course. The fact that all these languages are Turing-equivalent means that,\nstrictly speaking, you can write any program in any of them. So how would you\ndo it? In the limit case, by writing a Lisp interpreter in the less powerful\nlanguage.  \n  \nThat sounds like a joke, but it happens so often to varying degrees in large\nprogramming projects that there is a name for the phenomenon, Greenspun's\nTenth Rule:\n\n> Any sufficiently complicated C or Fortran program contains an ad hoc\n> informally-specified bug-ridden slow implementation of half of Common Lisp.\n\nIf you try to solve a hard problem, the question is not whether you will use a\npowerful enough language, but whether you will (a) use a powerful language,\n(b) write a de facto interpreter for one, or (c) yourself become a human\ncompiler for one. We see this already begining to happen in the Python\nexample, where we are in effect simulating the code that a compiler would\ngenerate to implement a lexical variable.  \n  \nThis practice is not only common, but institutionalized. For example, in the\nOO world you hear a good deal about \"patterns\". I wonder if these patterns are\nnot sometimes evidence of case (c), the human compiler, at work. When I see\npatterns in my programs, I consider it a sign of trouble. The shape of a\nprogram should reflect only the problem it needs to solve. Any other\nregularity in the code is a sign, to me at least, that I'm using abstractions\nthat aren't powerful enough-- often that I'm generating by hand the expansions\nof some macro that I need to write.  \n  \n  \n  \n**Notes**  \n  \n\n  * The IBM 704 CPU was about the size of a refrigerator, but a lot heavier. The CPU weighed 3150 pounds, and the 4K of RAM was in a separate box weighing another 4000 pounds. The Sub-Zero 690, one of the largest household refrigerators, weighs 656 pounds.  \n  \n\n  * Steve Russell also wrote the first (digital) computer game, Spacewar, in 1962.  \n  \n\n  * If you want to trick a pointy-haired boss into letting you write software in Lisp, you could try telling him it's XML.  \n  \n\n  * Here is the accumulator generator in other Lisp dialects:  Scheme: (define (foo n) (lambda (i) (set! n (+ n i)) n)) Goo: (df foo (n) (op incf n _))) Arc: (def foo (n) [++ n _]) \n  * Erann Gat's sad tale about \"industry best practice\" at JPL inspired me to address this generally misapplied phrase.  \n  \n\n  * Peter Norvig found that 16 of the 23 patterns in _Design Patterns_ were \"[invisible or simpler](http://www.norvig.com/design-patterns/)\" in Lisp.  \n  \n\n  * Thanks to the many people who answered my questions about various languages and/or read drafts of this, including Ken Anderson, Trevor Blackwell, Erann Gat, Dan Giffin, Sarah Harlin, Jeremy Hylton, Robert Morris, Peter Norvig, Guy Steele, and Anton van Straaten. They bear no blame for any opinions expressed.  \n  \n\n  \n  \n**Related:**  \n  \nMany people have responded to this talk, so I have set up an additional page\nto deal with the issues they have raised: [Re: Revenge of the\nNerds](icadmore.html).  \n  \nIt also set off an extensive and often useful discussion on the\n[LL1](http://www.ai.mit.edu/~gregs/ll1-discuss-archive-html/threads.html)\nmailing list. See particularly the mail by Anton van Straaten on semantic\ncompression.  \n  \nSome of the mail on LL1 led me to try to go deeper into the subject of\nlanguage power in [Succinctness is Power](power.html).  \n  \nA larger set of canonical implementations of the [accumulator generator\nbenchmark](accgen.html) are collected together on their own page.  \n  \n[Japanese\nTranslation](http://www.shiro.dreamhost.com/scheme/trans/icad-j.html),\n[Spanish\nTranslation](http://kapcoweb.com/p/docs/translations/revenge_of_the_nerds/revenge_of_the_nerds-\nes.html), [Chinese\nTranslation](http://flyingapplet.spaces.live.com/blog/cns!F682AFBD82F7E261!375.entry\n)  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nOctober 2005  \n  \n _(This essay is derived from a talk at the 2005[Startup\nSchool.](http://startupschool.org))_  \n  \nHow do you get good ideas for [startups](start.html)? That's probably the\nnumber one question people ask me.  \n  \nI'd like to reply with another question: why do people think it's hard to come\nup with ideas for startups?  \n  \nThat might seem a stupid thing to ask. Why do they _think_ it's hard? If\npeople can't do it, then it _is_ hard, at least for them. Right?  \n  \nWell, maybe not. What people usually say is not that they can't think of\nideas, but that they don't have any. That's not quite the same thing. It could\nbe the reason they don't have any is that they haven't tried to generate them.  \n  \nI think this is often the case. I think people believe that coming up with\nideas for startups is very hard-- that it _must_ be very hard-- and so they\ndon't try do to it. They assume ideas are like miracles: they either pop into\nyour head or they don't.  \n  \nI also have a theory about why people think this. They overvalue ideas. They\nthink creating a startup is just a matter of implementing some fabulous\ninitial idea. And since a successful startup is worth millions of dollars, a\ngood idea is therefore a million dollar idea.  \n  \nIf coming up with an idea for a startup equals coming up with a million dollar\nidea, then of course it's going to seem hard. Too hard to bother trying. Our\ninstincts tell us something so valuable would not be just lying around for\nanyone to discover.  \n  \nActually, startup ideas are not million dollar ideas, and here's an experiment\nyou can try to prove it: just try to sell one. Nothing evolves faster than\nmarkets. The fact that there's no market for startup ideas suggests there's no\ndemand. Which means, in the narrow sense of the word, that startup ideas are\nworthless.  \n  \n**Questions**  \n  \nThe fact is, most startups end up nothing like the initial idea. It would be\ncloser to the truth to say the main value of your initial idea is that, in the\nprocess of discovering it's broken, you'll come up with your real idea.  \n  \nThe initial idea is just a starting point-- not a blueprint, but a question.\nIt might help if they were expressed that way. Instead of saying that your\nidea is to make a collaborative, web-based spreadsheet, say: could one make a\ncollaborative, web-based spreadsheet? A few grammatical tweaks, and a woefully\nincomplete idea becomes a promising question to explore.  \n  \nThere's a real difference, because an assertion provokes objections in a way a\nquestion doesn't. If you say: I'm going to build a web-based spreadsheet, then\ncritics-- the most dangerous of which are in your own head-- will immediately\nreply that you'd be competing with Microsoft, that you couldn't give people\nthe kind of UI they expect, that users wouldn't want to have their data on\nyour servers, and so on.  \n  \nA question doesn't seem so challenging. It becomes: let's try making a web-\nbased spreadsheet and see how far we get. And everyone knows that if you tried\nthis you'd be able to make _something_ useful. Maybe what you'd end up with\nwouldn't even be a spreadsheet. Maybe it would be some kind of new spreasheet-\nlike collaboration tool that doesn't even have a name yet. You wouldn't have\nthought of something like that except by implementing your way toward it.  \n  \nTreating a startup idea as a question changes what you're looking for. If an\nidea is a blueprint, it has to be right. But if it's a question, it can be\nwrong, so long as it's wrong in a way that leads to more ideas.  \n  \nOne valuable way for an idea to be wrong is to be only a partial solution.\nWhen someone's working on a problem that seems too big, I always ask: is there\nsome way to bite off some subset of the problem, then gradually expand from\nthere? That will generally work unless you get trapped on a local maximum,\nlike 1980s-style AI, or C.  \n  \n**Upwind**  \n  \nSo far, we've reduced the problem from thinking of a million dollar idea to\nthinking of a mistaken question. That doesn't seem so hard, does it?  \n  \nTo generate such questions you need two things: to be familiar with promising\nnew technologies, and to have the right kind of friends. New technologies are\nthe ingredients startup ideas are made of, and conversations with friends are\nthe kitchen they're cooked in.  \n  \nUniversities have both, and that's why so many startups grow out of them.\nThey're filled with new technologies, because they're trying to produce\nresearch, and only things that are new count as research. And they're full of\nexactly the right kind of people to have ideas with: the other students, who\nwill be not only smart but elastic-minded to a fault.  \n  \nThe opposite extreme would be a well-paying but boring job at a big company.\nBig companies are biased against new technologies, and the people you'd meet\nthere would be wrong too.  \n  \nIn an [essay](hs.html) I wrote for high school students, I said a good rule of\nthumb was to stay upwind-- to work on things that maximize your future\noptions. The principle applies for adults too, though perhaps it has to be\nmodified to: stay upwind for as long as you can, then cash in the potential\nenergy you've accumulated when you need to pay for kids.  \n  \nI don't think people consciously realize this, but one reason downwind jobs\nlike churning out Java for a bank pay so well is precisely that they are\ndownwind. The market price for that kind of work is higher because it gives\nyou fewer options for the future. A job that lets you work on exciting new\nstuff will tend to pay less, because part of the compensation is in the form\nof the new skills you'll learn.  \n  \nGrad school is the other end of the spectrum from a coding job at a big\ncompany: the pay's low but you spend most of your time working on new stuff.\nAnd of course, it's called \"school,\" which makes that clear to everyone,\nthough in fact all jobs are some percentage school.  \n  \nThe right environment for having startup ideas need not be a university per\nse. It just has to be a situation with a large percentage of school.  \n  \nIt's obvious why you want exposure to new technology, but why do you need\nother people? Can't you just think of new ideas yourself? The empirical answer\nis: no. Even Einstein needed people to bounce ideas off. Ideas get developed\nin the process of explaining them to the right kind of person. You need that\nresistance, just as a carver needs the resistance of the wood.  \n  \nThis is one reason Y Combinator has a rule against investing in startups with\nonly one founder. Practically every successful company has at least two. And\nbecause startup founders work under great pressure, it's critical they be\nfriends.  \n  \nI didn't realize it till I was writing this, but that may help explain why\nthere are so few female startup founders. I read on the Internet (so it must\nbe true) that only 1.7% of VC-backed startups are founded by women. The\npercentage of female hackers is small, but not that small. So why the\ndiscrepancy?  \n  \nWhen you realize that successful startups tend to have multiple founders who\nwere already friends, a possible explanation emerges. People's best friends\nare likely to be of the same sex, and if one group is a minority in some\npopulation, _pairs_ of them will be a minority squared. [1]  \n  \n**Doodling**  \n  \nWhat these groups of co-founders do together is more complicated than just\nsitting down and trying to think of ideas. I suspect the most productive setup\nis a kind of together-alone-together sandwich. Together you talk about some\nhard problem, probably getting nowhere. Then, the next morning, one of you has\nan idea in the shower about how to solve it. He runs eagerly to to tell the\nothers, and together they work out the kinks.  \n  \nWhat happens in that shower? It seems to me that ideas just pop into my head.\nBut can we say more than that?  \n  \nTaking a shower is like a form of meditation. You're alert, but there's\nnothing to distract you. It's in a situation like this, where your mind is\nfree to roam, that it bumps into new ideas.  \n  \nWhat happens when your mind wanders? It may be like doodling. Most people have\ncharacteristic ways of doodling. This habit is unconscious, but not random: I\nfound my doodles changed after I started studying painting. I started to make\nthe kind of gestures I'd make if I were drawing from life. They were atoms of\ndrawing, but arranged randomly. [2]  \n  \nPerhaps letting your mind wander is like doodling with ideas. You have certain\nmental gestures you've learned in your work, and when you're not paying\nattention, you keep making these same gestures, but somewhat randomly. In\neffect, you call the same functions on random arguments. That's what a\nmetaphor is: a function applied to an argument of the wrong type.  \n  \nConveniently, as I was writing this, my mind wandered: would it be useful to\nhave metaphors in a programming language? I don't know; I don't have time to\nthink about this. But it's convenient because this is an example of what I\nmean by habits of mind. I spend a lot of time thinking about language design,\nand my habit of always asking \"would x be useful in a programming language\"\njust got invoked.  \n  \nIf new ideas arise like doodles, this would explain why you have to work at\nsomething for a while before you have any. It's not just that you can't judge\nideas till you're an expert in a field. You won't even generate ideas, because\nyou won't have any habits of mind to invoke.  \n  \nOf course the habits of mind you invoke on some field don't have to be derived\nfrom working in that field. In fact, it's often better if they're not. You're\nnot just looking for good ideas, but for good _new_ ideas, and you have a\nbetter chance of generating those if you combine stuff from distant fields. As\nhackers, one of our habits of mind is to ask, could one open-source x? For\nexample, what if you made an open-source operating system? A fine idea, but\nnot very novel. Whereas if you ask, could you make an open-source play? you\nmight be onto something.  \n  \nAre some kinds of work better sources of habits of mind than others? I suspect\nharder fields may be better sources, because to attack hard problems you need\npowerful solvents. I find math is a good source of metaphors-- good enough\nthat it's worth studying just for that. Related fields are also good sources,\nespecially when they're related in unexpected ways. Everyone knows computer\nscience and electrical engineering are related, but precisely because everyone\nknows it, importing ideas from one to the other doesn't yield great profits.\nIt's like importing something from Wisconsin to Michigan. Whereas (I claim)\nhacking and [painting](hp.html) are also related, in the sense that hackers\nand painters are both [makers](taste.html), and this source of new ideas is\npractically virgin territory.  \n  \n**Problems**  \n  \nIn theory you could stick together ideas at random and see what you came up\nwith. What if you built a peer-to-peer dating site? Would it be useful to have\nan automatic book? Could you turn theorems into a commodity? When you assemble\nideas at random like this, they may not be just stupid, but semantically ill-\nformed. What would it even mean to make theorems a commodity? You got me. I\ndidn't think of that idea, just its name.  \n  \nYou might come up with something useful this way, but I never have. It's like\nknowing a fabulous sculpture is hidden inside a block of marble, and all you\nhave to do is remove the marble that isn't part of it. It's an encouraging\nthought, because it reminds you there is an answer, but it's not much use in\npractice because the search space is too big.  \n  \nI find that to have good ideas I need to be working on some problem. You can't\nstart with randomness. You have to start with a problem, then let your mind\nwander just far enough for new ideas to form.  \n  \nIn a way, it's harder to see problems than their solutions. Most people prefer\nto remain in denial about problems. It's obvious why: problems are irritating.\nThey're problems! Imagine if people in 1700 saw their lives the way we'd see\nthem. It would have been unbearable. This denial is such a powerful force\nthat, even when presented with possible solutions, people often prefer to\nbelieve they wouldn't work.  \n  \nI saw this phenomenon when I worked on spam filters. In 2002, most people\npreferred to ignore spam, and most of those who didn't preferred to believe\nthe heuristic filters then available were the best you could do.  \n  \nI found spam intolerable, and I felt it had to be possible to recognize it\nstatistically. And it turns out that was all you needed to solve the problem.\nThe algorithm I used was ridiculously simple. Anyone who'd really tried to\nsolve the problem would have found it. It was just that no one had really\ntried to solve the problem. [3]  \n  \nLet me repeat that recipe: finding the problem intolerable and feeling it must\nbe possible to solve it. Simple as it seems, that's the recipe for a lot of\nstartup ideas.  \n  \n**Wealth**  \n  \nSo far most of what I've said applies to ideas in general. What's special\nabout startup ideas? Startup ideas are ideas for companies, and companies have\nto make money. And the way to make money is to make something people want.  \n  \nWealth is what people want. I don't mean that as some kind of philosophical\nstatement; I mean it as a tautology.  \n  \nSo an idea for a startup is an idea for something people want. Wouldn't any\ngood idea be something people want? Unfortunately not. I think new theorems\nare a fine thing to create, but there is no great demand for them. Whereas\nthere appears to be great demand for celebrity gossip magazines. Wealth is\ndefined democratically. Good ideas and valuable ideas are not quite the same\nthing; the difference is individual tastes.  \n  \nBut valuable ideas are very close to good ideas, especially in technology. I\nthink they're so close that you can get away with working as if the goal were\nto discover good ideas, so long as, in the final stage, you stop and ask: will\npeople actually pay for this? Only a few ideas are likely to make it that far\nand then get shot down; RPN calculators might be one example.  \n  \nOne way to make something people want is to look at stuff people use now\nthat's broken. Dating sites are a prime example. They have millions of users,\nso they must be promising something people want. And yet they work horribly.\nJust ask anyone who uses them. It's as if they used the worse-is-better\napproach but stopped after the first stage and handed the thing over to\nmarketers.  \n  \nOf course, the most obvious breakage in the average computer user's life is\nWindows itself. But this is a special case: you can't defeat a monopoly by a\nfrontal attack. Windows can and will be overthrown, but not by giving people a\nbetter desktop OS. The way to kill it is to redefine the problem as a superset\nof the current one. The problem is not, what operating system should people\nuse on desktop computers? but how should people use applications? There are\nanswers to that question that don't even involve desktop computers.  \n  \nEveryone thinks Google is going to solve this problem, but it is a very subtle\none, so subtle that a company as big as Google might well get it wrong. I\nthink the odds are better than 50-50 that the Windows killer-- or more\naccurately, Windows transcender-- will come from some little startup.  \n  \nAnother classic way to make something people want is to take a luxury and make\nit into a commmodity. People must want something if they pay a lot for it. And\nit is a very rare product that can't be made dramatically cheaper if you try.  \n  \nThis was Henry Ford's plan. He made cars, which had been a luxury item, into a\ncommodity. But the idea is much older than Henry Ford. Water mills transformed\nmechanical power from a luxury into a commodity, and they were used in the\nRoman empire. Arguably pastoralism transformed a luxury into a commodity.  \n  \nWhen you make something cheaper you can sell more of them. But if you make\nsomething dramatically cheaper you often get qualitative changes, because\npeople start to use it in different ways. For example, once computers get so\ncheap that most people can have one of their own, you can use them as\ncommunication devices.  \n  \nOften to make something dramatically cheaper you have to redefine the problem.\nThe Model T didn't have all the features previous cars did. It only came in\nblack, for example. But it solved the problem people cared most about, which\nwas getting from place to place.  \n  \nOne of the most useful mental habits I know I learned from Michael Rabin: that\nthe best way to solve a problem is often to redefine it. A lot of people use\nthis technique without being consciously aware of it, but Rabin was\nspectacularly explicit. You need a big prime number? Those are pretty\nexpensive. How about if I give you a big number that only has a 10 to the\nminus 100 chance of not being prime? Would that do? Well, probably; I mean,\nthat's probably smaller than the chance that I'm imagining all this anyway.  \n  \nRedefining the problem is a particularly juicy heuristic when you have\ncompetitors, because it's so hard for rigid-minded people to follow. You can\nwork in plain sight and they don't realize the danger. Don't worry about us.\nWe're just working on search. Do one thing and do it well, that's our motto.  \n  \nMaking things cheaper is actually a subset of a more general technique: making\nthings easier. For a long time it was most of making things easier, but now\nthat the things we build are so complicated, there's another rapidly growing\nsubset: making things easier to _use_.  \n  \nThis is an area where there's great room for improvement. What you want to be\nable to say about technology is: it just works. How often do you say that now?  \n  \nSimplicity takes effort-- genius, even. The average programmer seems to\nproduce UI designs that are almost willfully bad. I was trying to use the\nstove at my mother's house a couple weeks ago. It was a new one, and instead\nof physical knobs it had buttons and an LED display. I tried pressing some\nbuttons I thought would cause it to get hot, and you know what it said? \"Err.\"\nNot even \"Error.\" \"Err.\" You can't just say \"Err\" to the user of a _stove_.\nYou should design the UI so that errors are impossible. And the boneheads who\ndesigned this stove even had an example of such a UI to work from: the old\none. You turn one knob to set the temperature and another to set the timer.\nWhat was wrong with that? It just worked.  \n  \nIt seems that, for the average engineer, more options just means more rope to\nhang yourself. So if you want to start a startup, you can take almost any\nexisting technology produced by a big company, and assume you could build\nsomething way easier to use.  \n  \n**Design for Exit**  \n  \nSuccess for a startup approximately equals getting bought. You need some kind\nof exit strategy, because you can't get the smartest people to work for you\nwithout giving them options likely to be worth something. Which means you\neither have to get bought or go public, and the number of startups that go\npublic is very small.  \n  \nIf success probably means getting bought, should you make that a conscious\ngoal? The old answer was no: you were supposed to pretend that you wanted to\ncreate a giant, public company, and act surprised when someone made you an\noffer. Really, you want to buy us? Well, I suppose we'd consider it, for the\nright price.  \n  \nI think things are changing. If 98% of the time success means getting bought,\nwhy not be open about it? If 98% of the time you're doing product development\non spec for some big company, why not think of that as your task? One\nadvantage of this approach is that it gives you another source of ideas: look\nat big companies, think what they [should](http://kiko.com) be doing, and do\nit yourself. Even if they already know it, you'll probably be done faster.  \n  \nJust be sure to make something multiple acquirers will want. Don't fix\nWindows, because the only potential acquirer is Microsoft, and when there's\nonly one acquirer, they don't have to hurry. They can take their time and copy\nyou instead of buying you. If you want to get market price, work on something\nwhere there's competition.  \n  \nIf an increasing number of startups are created to do product development on\nspec, it will be a natural counterweight to monopolies. Once some type of\ntechnology is captured by a monopoly, it will only evolve at big company rates\ninstead of startup rates, whereas alternatives will evolve with especial\nspeed. A free market interprets monopoly as damage and routes around it.  \n  \n**The Woz Route**  \n  \nThe most productive way to generate startup ideas is also the most unlikely-\nsounding: by accident. If you look at how famous startups got started, a lot\nof them weren't initially supposed to be startups. Lotus began with a program\nMitch Kapor wrote for a friend. Apple got started because Steve Wozniak wanted\nto build microcomputers, and his employer, Hewlett-Packard, wouldn't let him\ndo it at work. Yahoo began as David Filo's personal collection of links.  \n  \nThis is not the only way to start startups. You can sit down and consciously\ncome up with an idea for a company; we did. But measured in total market cap,\nthe build-stuff-for-yourself model might be more fruitful. It certainly has to\nbe the most fun way to come up with startup ideas. And since a startup ought\nto have multiple founders who were already friends before they decided to\nstart a company, the rather surprising conclusion is that the best way to\ngenerate startup ideas is to do what hackers do for fun: cook up amusing hacks\nwith your friends.  \n  \nIt seems like it violates some kind of conservation law, but there it is: the\nbest way to get a \"million dollar idea\" is just to do what hackers enjoy doing\nanyway.  \n  \n  \n  \n**Notes**  \n  \n[1] This phenomenon may account for a number of discrepancies currently blamed\non various forbidden isms. Never attribute to malice what can be explained by\nmath.  \n  \n[2] A lot of classic abstract expressionism is doodling of this type: artists\ntrained to paint from life using the same gestures but without using them to\nrepresent anything. This explains why such paintings are (slightly) more\ninteresting than random marks would be.  \n  \n[3] Bill Yerazunis had solved the problem, but he got there by another path.\nHe made a general-purpose file classifier so good that it also worked for\nspam.  \n  \n\nFebruary 2009  \n  \nI finally realized today why politics and religion yield such uniquely useless\ndiscussions.  \n  \nAs a rule, any mention of religion on an online forum degenerates into a\nreligious argument. Why? Why does this happen with religion and not with\nJavascript or baking or other topics people talk about on forums?  \n  \nWhat's different about religion is that people don't feel they need to have\nany particular expertise to have opinions about it. All they need is strongly\nheld beliefs, and anyone can have those. No thread about Javascript will grow\nas fast as one about religion, because people feel they have to be over some\nthreshold of expertise to post comments about that. But on religion everyone's\nan expert.  \n  \nThen it struck me: this is the problem with politics too. Politics, like\nreligion, is a topic where there's no threshold of expertise for expressing an\nopinion. All you need is strong convictions.  \n  \nDo religion and politics have something in common that explains this\nsimilarity? One possible explanation is that they deal with questions that\nhave no definite answers, so there's no back pressure on people's opinions.\nSince no one can be proven wrong, every opinion is equally valid, and sensing\nthis, everyone lets fly with theirs.  \n  \nBut this isn't true. There are certainly some political questions that have\ndefinite answers, like how much a new government policy will cost. But the\nmore precise political questions suffer the same fate as the vaguer ones.  \n  \nI think what religion and politics have in common is that they become part of\npeople's identity, and people can never have a fruitful argument about\nsomething that's part of their identity. By definition they're partisan.  \n  \nWhich topics engage people's identity depends on the people, not the topic.\nFor example, a discussion about a battle that included citizens of one or more\nof the countries involved would probably degenerate into a political argument.\nBut a discussion today about a battle that took place in the Bronze Age\nprobably wouldn't. No one would know what side to be on. So it's not politics\nthat's the source of the trouble, but identity. When people say a discussion\nhas degenerated into a religious war, what they really mean is that it has\nstarted to be driven mostly by people's identities. [1]  \n  \nBecause the point at which this happens depends on the people rather than the\ntopic, it's a mistake to conclude that because a question tends to provoke\nreligious wars, it must have no answer. For example, the question of the\nrelative merits of programming languages often degenerates into a religious\nwar, because so many programmers identify as X programmers or Y programmers.\nThis sometimes leads people to conclude the question must be unanswerable\u2014that\nall languages are equally good. Obviously that's false: anything else people\nmake can be well or badly designed; why should this be uniquely impossible for\nprogramming languages? And indeed, you can have a fruitful discussion about\nthe relative merits of programming languages, so long as you exclude people\nwho respond from identity.  \n  \nMore generally, you can have a fruitful discussion about a topic only if it\ndoesn't engage the identities of any of the participants. What makes politics\nand religion such minefields is that they engage so many people's identities.\nBut you could in principle have a useful conversation about them with some\npeople. And there are other topics that might seem harmless, like the relative\nmerits of Ford and Chevy pickup trucks, that you couldn't safely talk about\nwith\n[others](http://www.theledger.com/apps/pbcs.dll/article?AID=/20060418/NEWS/604180378/1039).  \n  \nThe most intriguing thing about this theory, if it's right, is that it\nexplains not merely which kinds of discussions to avoid, but how to have\nbetter ideas. If people can't think clearly about anything that has become\npart of their identity, then all other things being equal, the best plan is to\nlet as few things into your identity as possible. [2]  \n  \nMost people reading this will already be fairly tolerant. But there is a step\nbeyond thinking of yourself as x but tolerating y: not even to consider\nyourself an x. The more labels you have for yourself, the dumber they make\nyou.  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] When that happens, it tends to happen fast, like a core going critical.\nThe threshold for participating goes down to zero, which brings in more\npeople. And they tend to say incendiary things, which draw more and angrier\ncounterarguments.  \n  \n[2] There may be some things it's a net win to include in your identity. For\nexample, being a scientist. But arguably that is more of a placeholder than an\nactual label\u2014like putting NMI on a form that asks for your middle\ninitial\u2014because it doesn't commit you to believing anything in particular. A\nscientist isn't committed to believing in natural selection in the same way a\nbiblical literalist is committed to rejecting it. All he's committed to is\nfollowing the evidence wherever it leads.  \n  \nConsidering yourself a scientist is equivalent to putting a sign in a cupboard\nsaying \"this cupboard must be kept empty.\" Yes, strictly speaking, you're\nputting something in the cupboard, but not in the ordinary sense.  \n  \n**Thanks** to Sam Altman, Trevor Blackwell, Paul Buchheit, and Robert Morris\nfor reading drafts of this.  \n  \n\nJanuary 2016  \n  \nSince the 1970s, economic inequality in the US has increased dramatically. And\nin particular, the rich have gotten a lot richer. Nearly everyone who writes\nabout the topic says that economic inequality should be decreased.  \n  \nI'm interested in this question because I was one of the founders of a company\ncalled Y Combinator that helps people start startups. Almost by definition, if\na startup succeeds, its founders become rich. Which means by helping startup\nfounders I've been helping to increase economic inequality. If economic\ninequality should be decreased, I shouldn't be helping founders. No one should\nbe.  \n  \nBut that doesn't sound right. What's going on here? What's going on is that\nwhile economic inequality is a single measure (or more precisely, two:\nvariation in income, and variation in wealth), it has multiple causes. Many of\nthese causes are bad, like tax loopholes and drug addiction. But some are\ngood, like Larry Page and Sergey Brin starting the company you use to find\nthings online.  \n  \nIf you want to understand economic inequality \u2014 and more importantly, if you\nactually want to fix the bad aspects of it \u2014 you have to tease apart the\ncomponents. And yet the trend in nearly everything written about the subject\nis to do the opposite: to squash together all the aspects of economic\ninequality as if it were a single phenomenon.  \n  \nSometimes this is done for ideological reasons. Sometimes it's because the\nwriter only has very high-level data and so draws conclusions from that, like\nthe proverbial drunk who looks for his keys under the lamppost, instead of\nwhere he dropped them, because the light is better there. Sometimes it's\nbecause the writer doesn't understand critical aspects of inequality, like the\nrole of technology in wealth creation. Much of the time, perhaps most of the\ntime, writing about economic inequality combines all three.  \n  \n___  \n  \nThe most common mistake people make about economic inequality is to treat it\nas a single phenomenon. The most naive version of which is the one based on\nthe pie fallacy: that the rich get rich by taking money from the poor.  \n  \nUsually this is an assumption people start from rather than a conclusion they\narrive at by examining the evidence. Sometimes the pie fallacy is stated\nexplicitly:\n\n> ...those at the top are grabbing an increasing fraction of the nation's\n> income \u2014 so much of a larger share that what's left over for the rest is\n> diminished.... [1]\n\nOther times it's more unconscious. But the unconscious form is very\nwidespread. I think because we grow up in a world where the pie fallacy is\nactually true. To kids, wealth _is_ a fixed pie that's shared out, and if one\nperson gets more, it's at the expense of another. It takes a conscious effort\nto remind oneself that the real world doesn't work that way.  \n  \nIn the real world you can create wealth as well as taking it from others. A\nwoodworker creates wealth. He makes a chair, and you willingly give him money\nin return for it. A high-frequency trader does not. He makes a dollar only\nwhen someone on the other end of a trade loses a dollar.  \n  \nIf the rich people in a society got that way by taking wealth from the poor,\nthen you have the degenerate case of economic inequality, where the cause of\npoverty is the same as the cause of wealth. But instances of inequality don't\nhave to be instances of the degenerate case. If one woodworker makes 5 chairs\nand another makes none, the second woodworker will have less money, but not\nbecause anyone took anything from him.  \n  \nEven people sophisticated enough to know about the pie fallacy are led toward\nit by the custom of describing economic inequality as a ratio of one\nquantile's income or wealth to another's. It's so easy to slip from talking\nabout income shifting from one quantile to another, as a figure of speech,\ninto believing that is literally what's happening.  \n  \nExcept in the degenerate case, economic inequality can't be described by a\nratio or even a curve. In the general case it consists of multiple ways people\nbecome poor, and multiple ways people become rich. Which means to understand\neconomic inequality in a country, you have to go find individual people who\nare poor or rich and figure out why. [2]  \n  \nIf you want to understand _change_ in economic inequality, you should ask what\nthose people would have done when it was different. This is one way I know the\nrich aren't all getting richer simply from some new system for transferring\nwealth to them from everyone else. When you use the would-have method with\nstartup founders, you find what most would have done [_back in\n1960_](re.html), when economic inequality was lower, was to join big companies\nor become professors. Before Mark Zuckerberg started Facebook, his default\nexpectation was that he'd end up working at Microsoft. The reason he and most\nother startup founders are richer than they would have been in the mid 20th\ncentury is not because of some right turn the country took during the Reagan\nadministration, but because progress in technology has made it much easier to\nstart a new company that [_grows fast_](growth.html).  \n  \nTraditional economists seem strangely averse to studying individual humans. It\nseems to be a rule with them that everything has to start with statistics. So\nthey give you very precise numbers about variation in wealth and income, then\nfollow it with the most naive speculation about the underlying causes.  \n  \nBut while there are a lot of people who get rich through rent-seeking of\nvarious forms, and a lot who get rich by playing zero-sum games, there are\nalso a significant number who get rich by creating wealth. And creating\nwealth, as a source of economic inequality, is different from taking it \u2014 not\njust morally, but also practically, in the sense that it is harder to\neradicate. One reason is that variation in productivity is accelerating. The\nrate at which individuals can create wealth depends on the technology\navailable to them, and that grows exponentially. The other reason creating\nwealth is such a tenacious source of inequality is that it can expand to\naccommodate a lot of people.  \n  \n___  \n  \nI'm all for shutting down the crooked ways to get rich. But that won't\neliminate great variations in wealth, because as long as you leave open the\noption of getting rich by creating wealth, people who want to get rich will do\nthat instead.  \n  \nMost people who get rich tend to be fairly driven. Whatever their other flaws,\nlaziness is usually not one of them. Suppose new policies make it hard to make\na fortune in finance. Does it seem plausible that the people who currently go\ninto finance to make their fortunes will continue to do so, but be content to\nwork for ordinary salaries? The reason they go into finance is not because\nthey love finance but because they want to get rich. If the only way left to\nget rich is to start startups, they'll start startups. They'll do well at it\ntoo, because determination is the main factor in the success of a startup. [3]\nAnd while it would probably be a good thing for the world if people who wanted\nto get rich switched from playing zero-sum games to creating wealth, that\nwould not only not eliminate great variations in wealth, but might even\nexacerbate them. In a zero-sum game there is at least a limit to the upside.\nPlus a lot of the new startups would create new technology that further\naccelerated variation in productivity.  \n  \nVariation in productivity is far from the only source of economic inequality,\nbut it is the irreducible core of it, in the sense that you'll have that left\nwhen you eliminate all other sources. And if you do, that core will be big,\nbecause it will have expanded to include the efforts of all the refugees. Plus\nit will have a large Baumol penumbra around it: anyone who could get rich by\ncreating wealth on their own account will have to be paid enough to prevent\nthem from doing it.  \n  \nYou can't prevent great variations in wealth without preventing people from\ngetting rich, and you can't do that without preventing them from starting\nstartups.  \n  \nSo let's be clear about that. Eliminating great variations in wealth would\nmean eliminating startups. And that doesn't seem a wise move. Especially since\nit would only mean you eliminated startups in your own country. Ambitious\npeople already move halfway around the world to further their careers, and\nstartups can operate from anywhere nowadays. So if you made it impossible to\nget rich by creating wealth in your country, people who wanted to do that\nwould just leave and do it somewhere else. Which would certainly get you a\nlower Gini coefficient, along with a lesson in being careful what you ask for.\n[4]  \n  \nI think rising economic inequality is the inevitable fate of countries that\ndon't choose something worse. We had a 40 year stretch in the middle of the\n20th century that convinced some people otherwise. But as I explained in [_The\nRefragmentation_](re.html), that was an anomaly \u2014 a unique combination of\ncircumstances that compressed American society not just economically but\nculturally too. [5]  \n  \nAnd while some of the growth in economic inequality we've seen since then has\nbeen due to bad behavior of various kinds, there has simultaneously been a\nhuge increase in individuals' ability to create wealth. Startups are almost\nentirely a product of this period. And even within the startup world, there\nhas been a qualitative change in the last 10 years. Technology has decreased\nthe cost of starting a startup so much that founders now have the upper hand\nover investors. Founders get less diluted, and it is now common for them to\nretain [_board control_](control.html) as well. Both further increase economic\ninequality, the former because founders own more stock, and the latter\nbecause, as investors have learned, founders tend to be better at running\ntheir companies than investors.  \n  \nWhile the surface manifestations change, the underlying forces are very, very\nold. The acceleration of productivity we see in Silicon Valley has been\nhappening for thousands of years. If you look at the history of stone tools,\ntechnology was already accelerating in the Mesolithic. The acceleration would\nhave been too slow to perceive in one lifetime. Such is the nature of the\nleftmost part of an exponential curve. But it was the same curve.  \n  \nYou do not want to design your society in a way that's incompatible with this\ncurve. The evolution of technology is one of the most powerful forces in\nhistory.  \n  \nLouis Brandeis said \"We may have democracy, or we may have wealth concentrated\nin the hands of a few, but we can't have both.\" That sounds plausible. But if\nI have to choose between ignoring him and ignoring an exponential curve that\nhas been operating for thousands of years, I'll bet on the curve. Ignoring any\ntrend that has been operating for thousands of years is dangerous. But\nexponential growth, especially, tends to bite you.  \n  \n___  \n  \nIf accelerating variation in productivity is always going to produce some\nbaseline growth in economic inequality, it would be a good idea to spend some\ntime thinking about that future. Can you have a healthy society with great\nvariation in wealth? What would it look like?  \n  \nNotice how novel it feels to think about that. The public conversation so far\nhas been exclusively about the need to decrease economic inequality. We've\nbarely given a thought to how to live with it.  \n  \nI'm hopeful we'll be able to. Brandeis was a product of the Gilded Age, and\nthings have changed since then. It's harder to hide wrongdoing now. And to get\nrich now you don't have to buy politicians the way railroad or oil magnates\ndid. [6] The great concentrations of wealth I see around me in Silicon Valley\ndon't seem to be destroying democracy.  \n  \nThere are lots of things wrong with the US that have economic inequality as a\nsymptom. We should fix those things. In the process we may decrease economic\ninequality. But we can't start from the symptom and hope to fix the underlying\ncauses. [7]  \n  \nThe most obvious is poverty. I'm sure most of those who want to decrease\neconomic inequality want to do it mainly to help the poor, not to hurt the\nrich. [8] Indeed, a good number are merely being sloppy by speaking of\ndecreasing economic inequality when what they mean is decreasing poverty. But\nthis is a situation where it would be good to be precise about what we want.\nPoverty and economic inequality are not identical. When the city is turning\noff your [_water_](http://www.theatlantic.com/business/archive/2014/07/what-\nhappens-when-detroit-shuts-off-the-water-of-100000-people/374548/) because you\ncan't pay the bill, it doesn't make any difference what Larry Page's net worth\nis compared to yours. He might only be a few times richer than you, and it\nwould still be just as much of a problem that your water was getting turned\noff.  \n  \nClosely related to poverty is lack of social mobility. I've seen this myself:\nyou don't have to grow up rich or even upper middle class to get rich as a\nstartup founder, but few successful founders grew up desperately poor. But\nagain, the problem here is not simply economic inequality. There is an\nenormous difference in wealth between the household Larry Page grew up in and\nthat of a successful startup founder, but that didn't prevent him from joining\ntheir ranks. It's not economic inequality per se that's blocking social\nmobility, but some specific combination of things that go wrong when kids grow\nup sufficiently poor.  \n  \nOne of the most important principles in Silicon Valley is that \"you make what\nyou measure.\" It means that if you pick some number to focus on, it will tend\nto improve, but that you have to choose the right number, because only the one\nyou choose will improve; another that seems conceptually adjacent might not.\nFor example, if you're a university president and you decide to focus on\ngraduation rates, then you'll improve graduation rates. But only graduation\nrates, not how much students learn. Students could learn less, if to improve\ngraduation rates you made classes easier.  \n  \nEconomic inequality is sufficiently far from identical with the various\nproblems that have it as a symptom that we'll probably only hit whichever of\nthe two we aim at. If we aim at economic inequality, we won't fix these\nproblems. So I say let's aim at the problems.  \n  \nFor example, let's attack poverty, and if necessary damage wealth in the\nprocess. That's much more likely to work than attacking wealth in the hope\nthat you will thereby fix poverty. [9] And if there are people getting rich by\ntricking consumers or lobbying the government for anti-competitive regulations\nor tax loopholes, then let's stop them. Not because it's causing economic\ninequality, but because it's stealing. [10]  \n  \nIf all you have is statistics, it seems like that's what you need to fix. But\nbehind a broad statistical measure like economic inequality there are some\nthings that are good and some that are bad, some that are historical trends\nwith immense momentum and others that are random accidents. If we want to fix\nthe world behind the statistics, we have to understand it, and focus our\nefforts where they'll do the most good.  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] Stiglitz, Joseph. _The Price of Inequality_. Norton, 2012. p. 32.  \n  \n[2] Particularly since economic inequality is a matter of outliers, and\noutliers are disproportionately likely to have gotten where they are by ways\nthat have little do with the sort of things economists usually think about,\nlike wages and productivity, but rather by, say, ending up on the wrong side\nof the \"War on Drugs.\"  \n  \n[3] Determination is the most important factor in deciding between success and\nfailure, which in startups tend to be sharply differentiated. But it takes\nmore than determination to create one of the hugely successful startups.\nThough most founders start out excited about the idea of getting rich, purely\nmercenary founders will usually take one of the big acquisition offers most\nsuccessful startups get on the way up. The founders who go on to the next\nstage tend to be driven by a sense of mission. They have the same attachment\nto their companies that an artist or writer has to their work. But it is very\nhard to predict at the outset which founders will do that. It's not simply a\nfunction of their initial attitude. Starting a company changes people.  \n  \n[4] After reading a draft of this essay, Richard Florida told me how he had\nonce talked to a group of Europeans \"who said they wanted to make Europe more\nentrepreneurial and more like Silicon Valley. I said by definition this will\ngive you more inequality. They thought I was insane \u2014 they could not process\nit.\"  \n  \n[5] Economic inequality has been decreasing globally. But this is mainly due\nto the erosion of the kleptocracies that formerly dominated all the poorer\ncountries. Once the playing field is leveler politically, we'll see economic\ninequality start to rise again. The US is the bellwether. The situation we\nface here, the rest of the world will sooner or later.  \n  \n[6] Some people still get rich by buying politicians. My point is that it's no\nlonger a precondition.  \n  \n[7] As well as problems that have economic inequality as a symptom, there are\nthose that have it as a cause. But in most if not all, economic inequality is\nnot the primary cause. There is usually some injustice that is allowing\neconomic inequality to turn into other forms of inequality, and that injustice\nis what we need to fix. For example, the police in the US treat the poor worse\nthan the rich. But the solution is not to make people richer. It's to make the\npolice treat people more equitably. Otherwise they'll continue to maltreat\npeople who are weak in other ways.  \n  \n[8] Some who read this essay will say that I'm clueless or even being\ndeliberately misleading by focusing so much on the richer end of economic\ninequality \u2014 that economic inequality is really about poverty. But that is\nexactly the point I'm making, though sloppier language than I'd use to make\nit. The real problem is poverty, not economic inequality. And if you conflate\nthem you're aiming at the wrong target.  \n  \nOthers will say I'm clueless or being misleading by focusing on people who get\nrich by creating wealth \u2014 that startups aren't the problem, but corrupt\npractices in finance, healthcare, and so on. Once again, that is exactly my\npoint. The problem is not economic inequality, but those specific abuses.  \n  \nIt's a strange task to write an essay about why something isn't the problem,\nbut that's the situation you find yourself in when so many people mistakenly\nthink it is.  \n  \n[9] Particularly since many causes of poverty are only partially driven by\npeople trying to make money from them. For example, America's abnormally high\nincarceration rate is a major cause of poverty. But although [_for-profit\nprison\ncompanies_](https://www.washingtonpost.com/posteverything/wp/2015/04/28/how-\nfor-profit-prisons-have-become-the-biggest-lobby-no-one-is-talking-about/) and\n[_prison guard unions_](http://mic.com/articles/41531/union-of-the-snake-how-\ncalifornia-s-prison-guards-subvert-democracy) both spend a lot lobbying for\nharsh sentencing laws, they are not the original source of them.  \n  \n[10] Incidentally, tax loopholes are definitely not a product of some power\nshift due to recent increases in economic inequality. The golden age of\neconomic equality in the mid 20th century was also the golden age of tax\navoidance. Indeed, it was so widespread and so effective that I'm skeptical\nwhether economic inequality was really so low then as we think. In a period\nwhen people are trying to hide wealth from the government, it will tend to be\nhidden from statistics too. One sign of the potential magnitude of the problem\nis the discrepancy between government receipts as a percentage of GDP, which\nhave remained more or less constant during the entire period from the end of\nWorld War II to the present, and tax rates, which have varied dramatically.  \n  \n**Thanks** to Sam Altman, Tiffani Ashley Bell, Patrick Collison, Ron Conway,\nRichard Florida, Ben Horowitz, Jessica Livingston, Robert Morris, Tim\nO'Reilly, Max Roser, and Alexia Tsotsis for reading drafts of this.  \n  \n**Note:** This is a new version from which I removed a pair of metaphors that\nmade a lot of people mad, essentially by macroexpanding them. If anyone wants\nto see the old version, I put it [_here_](ineqold.html).  \n  \n  \n  \n**Related:**  \n  \n\nAugust 2005  \n  \n _(This essay is derived from a talk at Defcon 2005.)_  \n  \nSuppose you wanted to get rid of economic inequality. There are two ways to do\nit: give money to the poor, or take it away from the rich. But they amount to\nthe same thing, because if you want to give money to the poor, you have to get\nit from somewhere. You can't get it from the poor, or they just end up where\nthey started. You have to get it from the rich.  \n  \nThere is of course a way to make the poor richer without simply shifting money\nfrom the rich. You could help the poor become more productive \u2014 for example,\nby improving access to education. Instead of taking money from engineers and\ngiving it to checkout clerks, you could enable people who would have become\ncheckout clerks to become engineers.  \n  \nThis is an excellent strategy for making the poor richer. But the evidence of\nthe last 200 years shows that it doesn't reduce economic inequality, because\nit makes the rich richer too. If there are more engineers, then there are more\nopportunities to hire them and to sell them things. Henry Ford couldn't have\nmade a fortune building cars in a society in which most people were still\nsubsistence farmers; he would have had neither workers nor customers.  \n  \nIf you want to reduce economic inequality instead of just improving the\noverall standard of living, it's not enough just to raise up the poor. What if\none of your newly minted engineers gets ambitious and goes on to become\nanother Bill Gates? Economic inequality will be as bad as ever. If you\nactually want to compress the gap between rich and poor, you have to push down\non the top as well as pushing up on the bottom.  \n  \nHow do you push down on the top? You could try to decrease the productivity of\nthe people who make the most money: make the best surgeons operate with their\nleft hands, force popular actors to overeat, and so on. But this approach is\nhard to implement. The only practical solution is to let people do the best\nwork they can, and then (either by taxation or by limiting what they can\ncharge) to confiscate whatever you deem to be surplus.  \n  \nSo let's be clear what reducing economic inequality means. It is identical\nwith taking money from the rich.  \n  \nWhen you transform a mathematical expression into another form, you often\nnotice new things. So it is in this case. Taking money from the rich turns out\nto have consequences one might not foresee when one phrases the same idea in\nterms of \"reducing inequality.\"  \n  \nThe problem is, risk and reward have to be proportionate. A bet with only a\n10% chance of winning has to pay more than one with a 50% chance of winning,\nor no one will take it. So if you lop off the top of the possible rewards, you\nthereby decrease people's willingness to take risks.  \n  \nTransposing into our original expression, we get: decreasing economic\ninequality means decreasing the risk people are willing to take.  \n  \nThere are whole classes of risks that are no longer worth taking if the\nmaximum return is decreased. One reason high tax rates are disastrous is that\nthis class of risks includes starting new companies.  \n  \n**Investors**  \n  \nStartups are intrinsically risky. A startup is like a small boat in the open\nsea. One big wave and you're sunk. A competing product, a downturn in the\neconomy, a delay in getting funding or regulatory approval, a patent suit,\nchanging technical standards, the departure of a key employee, the loss of a\nbig account \u2014 any one of these can destroy you overnight. It seems only about\n1 in 10 startups succeeds. [1]  \n  \nOur startup paid its first round of outside investors 36x. Which meant, with\ncurrent US tax rates, that it made sense to invest in us if we had better than\na 1 in 24 chance of succeeding. That sounds about right. That's probably\nroughly how we looked when we were a couple of nerds with no business\nexperience operating out of an apartment.  \n  \nIf that kind of risk doesn't pay, venture investing, as we know it, doesn't\nhappen.  \n  \nThat might be ok if there were other sources of capital for new companies. Why\nnot just have the government, or some large almost-government organization\nlike Fannie Mae, do the venture investing instead of private funds?  \n  \nI'll tell you why that wouldn't work. Because then you're asking government or\nalmost-government employees to do the one thing they are least able to do:\ntake risks.  \n  \nAs anyone who has worked for the government knows, the important thing is not\nto make the right choices, but to make choices that can be justified later if\nthey fail. If there is a safe option, that's the one a bureaucrat will choose.\nBut that is exactly the wrong way to do venture investing. The nature of the\nbusiness means that you want to make terribly risky choices, if the upside\nlooks good enough.  \n  \nVCs are currently [paid](venturecapital.html) in a way that makes them focus\non the upside: they get a percentage of the fund's gains. And that helps\novercome their understandable fear of investing in a company run by nerds who\nlook like (and perhaps are) college students.  \n  \nIf VCs weren't allowed to get rich, they'd behave like bureaucrats. Without\nhope of gain, they'd have only fear of loss. And so they'd make the wrong\nchoices. They'd turn down the nerds in favor of the smooth-talking MBA in a\nsuit, because that investment would be easier to justify later if it failed.  \n  \n**Founders**  \n  \nBut even if you could somehow redesign venture funding to work without\nallowing VCs to become rich, there's another kind of investor you simply\ncannot replace: the startups' founders and early employees.  \n  \nWhat they invest is their time and ideas. But these are equivalent to money;\nthe proof is that investors are willing (if forced) to treat them as\ninterchangeable, granting the same status to \"sweat equity\" and the equity\nthey've purchased with cash.  \n  \nThe fact that you're investing time doesn't change the relationship between\nrisk and reward. If you're going to invest your time in something with a small\nchance of succeeding, you'll only do it if there is a proportionately large\npayoff. [2] If large payoffs aren't allowed, you may as well play it safe.  \n  \nLike many startup founders, I did it to get rich. But not because I wanted to\nbuy expensive things. What I wanted was security. I wanted to make enough\nmoney that I didn't have to worry about money. If I'd been forbidden to make\nenough from a startup to do this, I would have sought security by some other\nmeans: for example, by going to work for a big, stable organization from which\nit would be hard to get fired. Instead of busting my ass in a startup, I would\nhave tried to get a nice, low-stress job at a big research lab, or tenure at a\nuniversity.  \n  \nThat's what everyone does in societies where risk isn't rewarded. If you can't\nensure your own security, the next best thing is to make a nest for yourself\nin some large organization where your status depends mostly on\n[seniority](ladder.html). [3]  \n  \nEven if we could somehow replace investors, I don't see how we could replace\nfounders. Investors mainly contribute money, which in principle is the same no\nmatter what the source. But the founders contribute ideas. You can't replace\nthose.  \n  \nLet's rehearse the chain of argument so far. I'm heading for a conclusion to\nwhich many readers will have to be dragged kicking and screaming, so I've\ntried to make each link unbreakable. Decreasing economic inequality means\ntaking money from the rich. Since risk and reward are equivalent, decreasing\npotential rewards automatically decreases people's appetite for risk. Startups\nare intrinsically risky. Without the prospect of rewards proportionate to the\nrisk, founders will not invest their time in a startup. Founders are\nirreplaceable. So eliminating economic inequality means eliminating startups.  \n  \nEconomic inequality is not just a consequence of startups. It's the engine\nthat drives them, in the same way a fall of water drives a water mill. People\nstart startups in the hope of becoming much richer than they were before. And\nif your society tries to prevent anyone from being much richer than anyone\nelse, it will also prevent one person from being much richer at t2 than t1.  \n  \n**Growth**  \n  \nThis argument applies proportionately. It's not just that if you eliminate\neconomic inequality, you get no startups. To the extent you reduce economic\ninequality, you decrease the number of startups. [4] Increase taxes, and\nwillingness to take risks decreases in proportion.  \n  \nAnd that seems bad for everyone. New technology and new jobs both come\ndisproportionately from new companies. Indeed, if you don't have startups,\npretty soon you won't have established companies either, just as, if you stop\nhaving kids, pretty soon you won't have any adults.  \n  \nIt sounds benevolent to say we ought to reduce economic inequality. When you\nphrase it that way, who can argue with you? _Inequality_ has to be bad, right?\nIt sounds a good deal less benevolent to say we ought to reduce the rate at\nwhich new companies are founded. And yet the one implies the other.  \n  \nIndeed, it may be that reducing investors' appetite for risk doesn't merely\nkill off larval startups, but kills off the most promising ones especially.\nStartups yield faster growth at greater risk than established companies. Does\nthis trend also hold among startups? That is, are the riskiest startups the\nones that generate most growth if they succeed? I suspect the answer is yes.\nAnd that's a chilling thought, because it means that if you cut investors'\nappetite for risk, the most beneficial startups are the first to go.  \n  \nNot all rich people got that way from startups, of course. What if we let\npeople get rich by starting startups, but taxed away all other surplus wealth?\nWouldn't that at least decrease inequality?  \n  \nLess than you might think. If you made it so that people could only get rich\nby starting startups, people who wanted to get rich would all start startups.\nAnd that might be a great thing. But I don't think it would have much effect\non the distribution of wealth. People who want to get rich will do whatever\nthey have to. If startups are the only way to do it, you'll just get far more\npeople starting startups. (If you write the laws very carefully, that is. More\nlikely, you'll just get a lot of people doing things that can be made to look\non paper like startups.)  \n  \nIf we're determined to eliminate economic inequality, there is still one way\nout: we could say that we're willing to go ahead and do without startups. What\nwould happen if we did?  \n  \nAt a minimum, we'd have to accept lower rates of technological growth. If you\nbelieve that large, established companies could somehow be made to develop new\ntechnology as fast as startups, the ball is in your court to explain how. (If\nyou can come up with a remotely plausible story, you can make a fortune\nwriting business books and consulting for large companies.) [5]  \n  \nOk, so we get slower growth. Is that so bad? Well, one reason it's bad in\npractice is that other countries might not agree to slow down with us. If\nyou're content to develop new technologies at a slower rate than the rest of\nthe world, what happens is that you don't invent anything at all. Anything you\nmight discover has already been invented elsewhere. And the only thing you can\noffer in return is raw materials and cheap labor. Once you sink that low,\nother countries can do whatever they like with you: install puppet\ngovernments, siphon off your best workers, use your women as prostitutes, dump\ntheir toxic waste on your territory \u2014 all the things we do to poor countries\nnow. The only defense is to isolate yourself, as communist countries did in\nthe twentieth century. But the problem then is, you have to become a police\nstate to enforce it.  \n  \n**Wealth and Power**  \n  \nI realize startups are not the main target of those who want to eliminate\neconomic inequality. What they really dislike is the sort of wealth that\nbecomes self-perpetuating through an alliance with power. For example,\nconstruction firms that fund politicians' campaigns in return for government\ncontracts, or rich parents who get their children into good colleges by\nsending them to expensive schools designed for that purpose. But if you try to\nattack this type of wealth through _economic_ policy, it's hard to hit without\ndestroying startups as collateral damage.  \n  \nThe problem here is not wealth, but corruption. So why not go after\ncorruption?  \n  \nWe don't need to prevent people from being rich if we can prevent wealth from\ntranslating into power. And there has been progress on that front. Before he\ndied of drink in 1925, Commodore Vanderbilt's wastrel grandson Reggie ran down\npedestrians on five separate occasions, killing two of them. By 1969, when Ted\nKennedy drove off the bridge at Chappaquiddick, the limit seemed to be down to\none. Today it may well be zero. But what's changed is not variation in wealth.\nWhat's changed is the ability to translate wealth into power.  \n  \nHow do you break the connection between wealth and power? Demand transparency.\nWatch closely how power is exercised, and demand an account of how decisions\nare made. Why aren't all police interrogations videotaped? Why did 36% of\nPrinceton's class of 2007 come from prep schools, when only 1.7% of American\nkids attend them? Why did the US really invade Iraq? Why don't government\nofficials disclose more about their finances, and why only during their term\nof office?  \n  \nA friend of mine who knows a lot about computer security says the single most\nimportant step is to log everything. Back when he was a kid trying to break\ninto computers, what worried him most was the idea of leaving a trail. He was\nmore inconvenienced by the need to avoid that than by any obstacle\ndeliberately put in his path.  \n  \nLike all illicit connections, the connection between wealth and power\nflourishes in secret. Expose all transactions, and you will greatly reduce it.\nLog everything. That's a strategy that already seems to be working, and it\ndoesn't have the side effect of making your whole country poor.  \n  \nI don't think many people realize there is a connection between economic\ninequality and risk. I didn't fully grasp it till recently. I'd known for\nyears of course that if one didn't score in a startup, the other alternative\nwas to get a cozy, tenured research job. But I didn't understand the equation\ngoverning my behavior. Likewise, it's obvious empirically that a country that\ndoesn't let people get rich is headed for disaster, whether it's Diocletian's\nRome or Harold Wilson's Britain. But I did not till recently understand the\nrole risk played.  \n  \nIf you try to attack wealth, you end up nailing risk as well, and with it\ngrowth. If we want a fairer world, I think we're better off attacking one step\ndownstream, where wealth turns into power.  \n  \n  \n  \n**Notes**  \n  \n[1] Success here is defined from the initial investors' point of view: either\nan IPO, or an acquisition for more than the valuation at the last round of\nfunding. The conventional 1 in 10 success rate is suspiciously neat, but\nconversations with VCs suggest it's roughly correct for startups overall. Top\nVC firms expect to do better.  \n  \n[2] I'm not claiming founders sit down and calculate the expected after-tax\nreturn from a startup. They're motivated by examples of other people who did\nit. And those examples do reflect after-tax returns.  \n  \n[3] Conjecture: The variation in wealth in a (non-corrupt) country or\norganization will be inversely proportional to the prevalence of systems of\nseniority. So if you suppress variation in wealth, seniority will become\ncorrespondingly more important. So far, I know of no counterexamples, though\nin very corrupt countries you may get both simultaneously. (Thanks to Daniel\nSobral for pointing this out.)  \n  \n[4] In a country with a truly feudal economy, you might be able to\nredistribute wealth successfully, because there are no startups to kill.  \n  \n[5] The speed at which startups develop new techology is the other reason they\npay so well. As I explained in [\"How to Make Wealth\"](wealth.html), what you\ndo in a startup is compress a lifetime's worth of work into a few years. It\nseems as dumb to discourage that as to discourage risk-taking.  \n  \n**Thanks** to Chris Anderson, Trevor Blackwell, Dan Giffin, Jessica\nLivingston, and Evan Williams for reading drafts of this essay, and to Langley\nSteinert, Sangam Pant, and Mike Moritz for information about venture\ninvesting.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nAugust 2006, rev. April 2007, September 2010  \n  \nIn a few days it will be Demo Day, when the startups we funded this summer\npresent to investors. Y Combinator funds startups twice a year, in January and\nJune. Ten weeks later we invite all the investors we know to hear them present\nwhat they've built so far.  \n  \nTen weeks is not much time. The average startup probably doesn't have much to\nshow for itself after ten weeks. But the average startup fails. When you look\nat the ones that went on to do great things, you find a lot that began with\nsomeone pounding out a prototype in a week or two of nonstop work. Startups\nare a counterexample to the rule that haste makes waste.  \n  \n(Too much money seems to be as bad for startups as too much time, so we don't\ngive them much money either.)  \n  \nA week before Demo Day, we have a dress rehearsal called Rehearsal Day. At\nother Y Combinator events we allow outside guests, but not at Rehearsal Day.\nNo one except the other founders gets to see the rehearsals.  \n  \nThe presentations on Rehearsal Day are often pretty rough. But this is to be\nexpected. We try to pick founders who are good at building things, not ones\nwho are slick presenters. Some of the founders are just out of college, or\neven still in it, and have never spoken to a group of people they didn't\nalready know.  \n  \nSo we concentrate on the basics. On Demo Day each startup will only get ten\nminutes, so we encourage them to focus on just two goals: (a) explain what\nyou're doing, and (b) explain why users will want it.  \n  \nThat might sound easy, but it's not when the speakers have no experience\npresenting, and they're explaining technical matters to an audience that's\nmostly non-technical.  \n  \nThis situation is constantly repeated when startups present to investors:\npeople who are bad at explaining, talking to people who are bad at\nunderstanding. Practically every successful startup, including stars like\nGoogle, presented at some point to investors who didn't get it and turned them\ndown. Was it because the founders were bad at presenting, or because the\ninvestors were obtuse? It's probably always some of both.  \n  \nAt the most recent Rehearsal Day, we four Y Combinator partners found\nourselves saying a lot of the same things we said at the last two. So at\ndinner afterward we collected all our tips about presenting to investors. Most\nstartups face similar challenges, so we hope these will be useful to a wider\naudience.  \n  \n**1\\. Explain what you're doing.**  \n  \nInvestors' main question when judging a very early startup is whether you've\nmade a compelling product. Before they can judge whether you've built a good\nx, they have to understand what kind of x you've built. They will get very\nfrustrated if instead of telling them what you do, you make them sit through\nsome kind of preamble.  \n  \nSay what you're doing as soon as possible, preferably in the first sentence.\n\"We're Jeff and Bob and we've built an easy to use web-based database. Now\nwe'll show it to you and explain why people need this.\"  \n  \nIf you're a great public speaker you may be able to violate this rule. Last\nyear one founder spent the whole first half of his talk on a fascinating\nanalysis of the limits of the conventional desktop metaphor. He got away with\nit, but unless you're a captivating speaker, which most hackers aren't, it's\nbetter to play it safe.  \n  \n**2\\. Get rapidly to demo.**  \n  \n_This section is now obsolete for YC founders presenting at Demo Day, because\nDemo Day presentations are now so short that they rarely include much if any\ndemo. They seem to work just as well without, however, which makes me think I\nwas wrong to emphasize demos so much before._  \n  \nA demo explains what you've made more effectively than any verbal description.\nThe only thing worth talking about first is the problem you're trying to solve\nand why it's important. But don't spend more than a tenth of your time on\nthat. Then demo.  \n  \nWhen you demo, don't run through a catalog of features. Instead start with the\nproblem you're solving, and then show how your product solves it. Show\nfeatures in an order driven by some kind of purpose, rather than the order in\nwhich they happen to appear on the screen.  \n  \nIf you're demoing something web-based, assume that the network connection will\nmysteriously die 30 seconds into your presentation, and come prepared with a\ncopy of the server software running on your laptop.  \n  \n**3\\. Better a narrow description than a vague one.**  \n  \nOne reason founders resist describing their projects concisely is that, at\nthis early stage, there are all kinds of possibilities. The most concise\ndescriptions seem misleadingly narrow. So for example a group that has built\nan easy web-based database might resist calling their applicaton that, because\nit could be so much more. In fact, it could be anything...  \n  \nThe problem is, as you approach (in the calculus sense) a description of\nsomething that could be anything, the content of your description approaches\nzero. If you describe your web-based database as \"a system to allow people to\ncollaboratively leverage the value of information,\" it will go in one investor\near and out the other. They'll just discard that sentence as meaningless\nboilerplate, and hope, with increasing impatience, that in the next sentence\nyou'll actually explain what you've made.  \n  \nYour primary goal is not to describe everything your system might one day\nbecome, but simply to convince investors you're worth talking to further. So\napproach this like an algorithm that gets the right answer by successive\napproximations. Begin with a description that's gripping but perhaps overly\nnarrow, then flesh it out to the extent you can. It's the same principle as\nincremental development: start with a simple prototype, then add features, but\nat every point have working code. In this case, \"working code\" means a working\ndescription in the investor's head.  \n  \n**4\\. Don't talk and drive.**  \n  \nHave one person talk while another uses the computer. If the same person does\nboth, they'll inevitably mumble downwards at the computer screen instead of\ntalking clearly at the audience.  \n  \nAs long as you're standing near the audience and looking at them, politeness\n(and habit) compel them to pay attention to you. Once you stop looking at them\nto fuss with something on your computer, their minds drift off to the errands\nthey have to run later.  \n  \n**5\\. Don't talk about secondary matters at length.**  \n  \nIf you only have a few minutes, spend them explaining what your product does\nand why it's great. Second order issues like competitors or resumes should be\nsingle slides you go through quickly at the end. If you have impressive\nresumes, just flash them on the screen for 15 seconds and say a few words. For\ncompetitors, list the top 3 and explain in one sentence each what they lack\nthat you have. And put this kind of thing at the end, after you've made it\nclear what you've built.  \n  \n**6\\. Don't get too deeply into business models.**  \n  \nIt's good to talk about how you plan to make money, but mainly because it\nshows you care about that and have thought about it. Don't go into detail\nabout your business model, because (a) that's not what smart investors care\nabout in a brief presentation, and (b) any business model you have at this\npoint is probably wrong anyway.  \n  \nRecently a VC who came to speak at Y Combinator talked about a company he just\ninvested in. He said their business model was wrong and would probably change\nthree times before they got it right. The founders were experienced guys who'd\ndone startups before and who'd just succeeded in getting millions from one of\nthe top VC firms, and even their business model was crap. (And yet he invested\nanyway, because he expected it to be crap at this stage.)  \n  \nIf you're solving an important problem, you're going to sound a lot smarter\ntalking about that than the business model. The business model is just a bunch\nof guesses, and guesses about stuff that's probably not your area of\nexpertise. So don't spend your precious few minutes talking about crap when\nyou could be talking about solid, interesting things you know a lot about: the\nproblem you're solving and what you've built so far.  \n  \nAs well as being a bad use of time, if your business model seems spectacularly\nwrong, that will push the stuff you want investors to remember out of their\nheads. They'll just remember you as the company with the boneheaded plan for\nmaking money, rather than the company that solved that important problem.  \n  \n**7\\. Talk slowly and clearly at the audience.**  \n  \nEveryone at Rehearsal Day could see the difference between the people who'd\nbeen out in the world for a while and had presented to groups, and those who\nhadn't.  \n  \nYou need to use a completely different voice and manner talking to a roomful\nof people than you would in conversation. Everyday life gives you no practice\nin this. If you can't already do it, the best solution is to treat it as a\nconsciously artificial trick, like juggling.  \n  \nHowever, that doesn't mean you should talk like some kind of announcer.\nAudiences tune that out. What you need to do is talk in this artificial way,\nand yet make it seem conversational. (Writing is the same. Good writing is an\nelaborate effort to seem spontaneous.)  \n  \nIf you want to write out your whole presentation beforehand and memorize it,\nthat's ok. That has worked for some groups in the past. But make sure to write\nsomething that sounds like spontaneous, informal speech, and deliver it that\nway too.  \n  \nErr on the side of speaking slowly. At Rehearsal Day, one of the founders\nmentioned a rule actors use: if you feel you're speaking too slowly, you're\nspeaking at about the right speed.  \n  \n**8\\. Have one person talk.**  \n  \nStartups often want to show that all the founders are equal partners. This is\na good instinct; investors dislike unbalanced teams. But trying to show it by\npartitioning the presentation is going too far. It's distracting. You can\ndemonstrate your respect for one another in more subtle ways. For example,\nwhen one of the groups presented at Demo Day, the more extroverted of the two\nfounders did most of the talking, but he described his co-founder as the best\nhacker he'd ever met, and you could tell he meant it.  \n  \nPick the one or at most two best speakers, and have them do most of the\ntalking.  \n  \nException: If one of the founders is an expert in some specific technical\nfield, it can be good for them to talk about that for a minute or so. This\nkind of \"expert witness\" can add credibility, even if the audience doesn't\nunderstand all the details. If Jobs and Wozniak had 10 minutes to present the\nApple II, it might be a good plan to have Jobs speak for 9 minutes and have\nWoz speak for a minute in the middle about some of the technical feats he'd\npulled off in the design. (Though of course if it were actually those two,\nJobs would speak for the entire 10 minutes.)  \n  \n**9\\. Seem confident.**  \n  \nBetween the brief time available and their lack of technical background, many\nin the audience will have a hard time evaluating what you're doing. Probably\nthe single biggest piece of evidence, initially, will be your own confidence\nin it. You have to show you're impressed with what you've made.  \n  \nAnd I mean show, not tell. Never say \"we're passionate\" or \"our product is\ngreat.\" People just ignore that\u2014or worse, write you off as bullshitters. Such\nmessages must be implicit.  \n  \nWhat you must not do is seem nervous and apologetic. If you've truly made\nsomething good, you're doing investors a _favor_ by telling them about it. If\nyou don't genuinely believe that, perhaps you ought to change what your\ncompany is doing. If you don't believe your startup has such promise that\nyou'd be doing them a favor by letting them invest, why are you investing your\ntime in it?  \n  \n**10\\. Don't try to seem more than you are.**  \n  \nDon't worry if your company is just a few months old and doesn't have an\noffice yet, or your founders are technical people with no business experience.\nGoogle was like that once, and they turned out ok. Smart investors can see\npast such superficial flaws. They're not looking for finished, smooth\npresentations. They're looking for raw talent. All you need to convince them\nof is that you're smart and that you're onto something good. If you try too\nhard to conceal your rawness\u2014by trying to seem corporate, or pretending to\nknow about stuff you don't\u2014you may just conceal your talent.  \n  \nYou can afford to be candid about what you haven't figured out yet. Don't go\nout of your way to bring it up (e.g. by having a slide about what might go\nwrong), but don't try to pretend either that you're further along than you\nare. If you're a hacker and you're presenting to experienced investors,\nthey're probably better at detecting bullshit than you are at producing it.  \n  \n**11\\. Don't put too many words on slides.**  \n  \nWhen there are a lot of words on a slide, people just skip reading it. So look\nat your slides and ask of each word \"could I cross this out?\" This includes\ngratuitous clip art. Try to get your slides under 20 words if you can.  \n  \nDon't read your slides. They should be something in the background as you face\nthe audience and talk to them, not something you face and read to an audience\nsitting behind you.  \n  \nCluttered sites don't do well in demos, especially when they're projected onto\na screen. At the very least, crank up the font size big enough to make all the\ntext legible. But cluttered sites are bad anyway, so perhaps you should use\nthis opportunity to make your design simpler.  \n  \n**12\\. Specific numbers are good.**  \n  \nIf you have any kind of data, however preliminary, tell the audience. Numbers\nstick in people's heads. If you can claim that the median visitor generates 12\npage views, that's great.  \n  \nBut don't give them more than four or five numbers, and only give them numbers\nspecific to you. You don't need to tell them the size of the market you're in.\nWho cares, really, if it's 500 million or 5 billion a year? Talking about that\nis like an actor at the beginning of his career telling his parents how much\nTom Hanks makes. Yeah, sure, but first you have to become Tom Hanks. The\nimportant part is not whether he makes ten million a year or a hundred, but\nhow you get there.  \n  \n**13\\. Tell stories about users.**  \n  \nThe biggest fear of investors looking at early stage startups is that you've\nbuilt something based on your own a priori theories of what the world needs,\nbut that no one will actually want. So it's good if you can talk about\nproblems specific users have and how you solve them.  \n  \nGreg Mcadoo said one thing Sequoia looks for is the \"proxy for demand.\" What\nare people doing now, using inadequate tools, that shows they need what you're\nmaking?  \n  \nAnother sign of user need is when people pay a lot for something. It's easy to\nconvince investors there will be demand for a cheaper alternative to something\npopular, if you preserve the qualities that made it popular.  \n  \nThe best stories about user needs are about your own. A remarkable number of\nfamous startups grew out of some need the founders had: Apple, Microsoft,\nYahoo, Google. Experienced investors know that, so stories of this type will\nget their attention. The next best thing is to talk about the needs of people\nyou know personally, like your friends or siblings.  \n  \n**14\\. Make a soundbite stick in their heads.**  \n  \nProfessional investors hear a lot of pitches. After a while they all blur\ntogether. The first cut is simply to be one of those they remember. And the\nway to ensure that is to create a descriptive phrase about yourself that\nsticks in their heads.  \n  \nIn Hollywood, these phrases seem to be of the form \"x meets y.\"  In the\nstartup world, they're usually \"the x of y\" or \"the x y.\" Viaweb's was \"the\nMicrosoft Word of ecommerce.\"  \n  \nFind one and launch it clearly (but apparently casually) in your talk,\npreferably near the beginning.  \n  \nIt's a good exercise for you, too, to sit down and try to figure out how to\ndescribe your startup in one compelling phrase. If you can't, your plans may\nnot be sufficiently focused.  \n  \n  \n\nJune 2013  \n  \n _(This talk was written for an audience of investors.)_  \n  \nY Combinator has now funded 564 startups including the current batch, which\nhas 53. The total valuation of the 287 that have valuations (either by raising\nan equity round, getting acquired, or dying) is about $11.7 billion, and the\n511 prior to the current batch have collectively raised about $1.7 billion.\n[1]  \n  \nAs usual those numbers are dominated by a few big winners. The top 10 startups\naccount for 8.6 of that 11.7 billion. But there is a peloton of younger\nstartups behind them. There are about 40 more that have a shot at being really\nbig.  \n  \nThings got a little out of hand last summer when we had 84 companies in the\nbatch, so we tightened up our filter to decrease the batch size. [2] Several\njournalists have tried to interpret that as evidence for some macro story they\nwere telling, but the reason had nothing to do with any external trend. The\nreason was that we discovered we were using an n\u00b2 algorithm, and we needed to\nbuy time to fix it. Fortunately we've come up with several techniques for\nsharding YC, and the problem now seems to be fixed. With a new more scaleable\nmodel and only 53 companies, the current batch feels like a walk in the park.\nI'd guess we can grow another 2 or 3x before hitting the next bottleneck. [3]  \n  \nOne consequence of funding such a large number of startups is that we see\ntrends early. And since fundraising is one of the main things we help startups\nwith, we're in a good position to notice trends in investing.  \n  \nI'm going to take a shot at describing where these trends are leading. Let's\nstart with the most basic question: will the future be better or worse than\nthe past? Will investors, in the aggregate, make more money or less?  \n  \nI think more. There are multiple forces at work, some of which will decrease\nreturns, and some of which will increase them. I can't predict for sure which\nforces will prevail, but I'll describe them and you can decide for yourself.  \n  \nThere are two big forces driving change in startup funding: it's becoming\ncheaper to start a startup, and startups are becoming a more normal thing to\ndo.  \n  \nWhen I graduated from college in 1986, there were essentially two options: get\na job or go to grad school. Now there's a third: start your own company.\nThat's a big change. In principle it was possible to start your own company in\n1986 too, but it didn't seem like a real possibility. It seemed possible to\nstart a consulting company, or a niche product company, but it didn't seem\npossible to start a company that would become big. [4]  \n  \nThat kind of change, from 2 paths to 3, is the sort of big social shift that\nonly happens once every few generations. I think we're still at the beginning\nof this one. It's hard to predict how big a deal it will be. As big a deal as\nthe Industrial Revolution? Maybe. Probably not. But it will be a big enough\ndeal that it takes almost everyone by surprise, because those big social\nshifts always do.  \n  \nOne thing we can say for sure is that there will be a lot more startups. The\nmonolithic, hierarchical companies of the mid 20th century are being\n[replaced](highres.html) by networks of smaller companies. This process is not\njust something happening now in Silicon Valley. It started decades ago, and\nit's happening as far afield as the car industry. It has a long way to run.\n[5]  \n  \nThe other big driver of change is that startups are becoming cheaper to start.\nAnd in fact the two forces are related: the decreasing cost of starting a\nstartup is one of the reasons startups are becoming a more normal thing to do.  \n  \nThe fact that startups need less money means founders will increasingly have\nthe upper hand over investors. You still need just as much of their energy and\nimagination, but they don't need as much of your money. Because founders have\nthe upper hand, they'll retain an increasingly large share of the stock in,\nand [control of](control.html), their companies. Which means investors will\nget less stock and less control.  \n  \nDoes that mean investors will make less money? Not necessarily, because there\nwill be more good startups. The total amount of desirable startup stock\navailable to investors will probably increase, because the number of desirable\nstartups will probably grow faster than the percentage they sell to investors\nshrinks.  \n  \nThere's a rule of thumb in the VC business that there are about 15 companies a\nyear that will be really successful. Although a lot of investors unconsciously\ntreat this number as if it were some sort of cosmological constant, I'm\ncertain it isn't. There are probably limits on the rate at which technology\ncan develop, but that's not the limiting factor now. If it were, each\nsuccessful startup would be founded the month it became possible, and that is\nnot the case. Right now the limiting factor on the number of big hits is the\nnumber of sufficiently good founders starting companies, and that number can\nand will increase. There are still a lot of people who'd make great founders\nwho never end up starting a company. You can see that from how randomly some\nof the most successful startups got started. So many of the biggest startups\nalmost didn't happen that there must be a lot of equally good startups that\nactually didn't happen.  \n  \nThere might be 10x or even 50x more good founders out there. As more of them\ngo ahead and start startups, those 15 big hits a year could easily become 50\nor even 100. [6]  \n  \nWhat about returns, though? Are we heading for a world in which returns will\nbe pinched by increasingly high valuations? I think the top firms will\nactually make more money than they have in the past. High returns don't come\nfrom investing at low valuations. They come from investing in the companies\nthat do really well. So if there are more of those to be had each year, the\nbest pickers should have more hits.  \n  \nThis means there should be more variability in the VC business. The firms that\ncan recognize and attract the best startups will do even better, because there\nwill be more of them to recognize and attract. Whereas the bad firms will get\nthe leftovers, as they do now, and yet pay a higher price for them.  \n  \nNor do I think it will be a problem that founders keep control of their\ncompanies for longer. The empirical evidence on that is already clear:\ninvestors make more money as founders' bitches than their bosses. Though\nsomewhat humiliating, this is actually good news for investors, because it\ntakes less time to serve founders than to micromanage them.  \n  \nWhat about angels? I think there is a lot of opportunity there. It used to\nsuck to be an angel investor. You couldn't get access to the best deals,\nunless you got lucky like Andy Bechtolsheim, and when you did invest in a\nstartup, VCs might try to strip you of your stock when they arrived later. Now\nan angel can go to something like Demo Day or AngelList and have access to the\nsame deals VCs do. And the days when VCs could wash angels out of the cap\ntable are long gone.  \n  \nI think one of the biggest unexploited opportunities in startup investing\nright now is angel-sized investments made quickly. Few investors understand\nthe cost that raising money from them imposes on startups. When the company\nconsists only of the founders, everything grinds to a halt during fundraising,\nwhich can easily take 6 weeks. The current high cost of fundraising means\nthere is room for low-cost investors to undercut the rest. And in this\ncontext, low-cost means deciding quickly. If there were a reputable investor\nwho invested $100k on good terms and promised to decide yes or no within 24\nhours, they'd get access to almost all the best deals, because every good\nstartup would approach them first. It would be up to them to pick, because\nevery bad startup would approach them first too, but at least they'd see\neverything. Whereas if an investor is notorious for taking a long time to make\nup their mind or negotiating a lot about valuation, founders will save them\nfor last. And in the case of the most promising startups, which tend to have\nan easy time raising money, last can easily become never.  \n  \nWill the number of big hits grow linearly with the total number of new\nstartups? Probably not, for two reasons. One is that the scariness of starting\na startup in the old days was a pretty effective filter. Now that the cost of\nfailing is becoming lower, we should expect founders to do it more. That's not\na bad thing. It's common in technology for an innovation that decreases the\ncost of failure to increase the number of failures and yet leave you net\nahead.  \n  \nThe other reason the number of big hits won't grow proportionately to the\nnumber of startups is that there will start to be an increasing number of idea\nclashes. Although the finiteness of the number of good ideas is not the reason\nthere are only 15 big hits a year, the number has to be finite, and the more\nstartups there are, the more we'll see multiple companies doing the same thing\nat the same time. It will be interesting, in a bad way, if idea clashes become\na lot more common. [7]  \n  \nMostly because of the increasing number of early failures, the startup\nbusiness of the future won't simply be the same shape, scaled up. What used to\nbe an obelisk will become a pyramid. It will be a little wider at the top, but\na lot wider at the bottom.  \n  \nWhat does that mean for investors? One thing it means is that there will be\nmore opportunities for investors at the earliest stage, because that's where\nthe volume of our imaginary solid is growing fastest. Imagine the obelisk of\ninvestors that corresponds to the obelisk of startups. As it widens out into a\npyramid to match the startup pyramid, all the contents are adhering to the\ntop, leaving a vacuum at the bottom.  \n  \nThat opportunity for investors mostly means an opportunity for new investors,\nbecause the degree of risk an existing investor or firm is comfortable taking\nis one of the hardest things for them to change. Different types of investors\nare adapted to different degrees of risk, but each has its specific degree of\nrisk deeply imprinted on it, not just in the procedures they follow but in the\npersonalities of the people who work there.  \n  \nI think the biggest danger for VCs, and also the biggest opportunity, is at\nthe series A stage. Or rather, what used to be the series A stage before\nseries As turned into de facto series B rounds.  \n  \nRight now, VCs often knowingly invest too much money at the series A stage.\nThey do it because they feel they need to get a big chunk of each series A\ncompany to compensate for the opportunity cost of the board seat it consumes.\nWhich means when there is a lot of competition for a deal, the number that\nmoves is the valuation (and thus amount invested) rather than the percentage\nof the company being sold. Which means, especially in the case of more\npromising startups, that series A investors often make companies take more\nmoney than they want.  \n  \nSome VCs lie and claim the company really needs that much. Others are more\ncandid, and admit their financial models require them to own a certain\npercentage of each company. But we all know the amounts being raised in series\nA rounds are not determined by asking what would be best for the companies.\nThey're determined by VCs starting from the amount of the company they want to\nown, and the market setting the valuation and thus the amount invested.  \n  \nLike a lot of bad things, this didn't happen intentionally. The VC business\nbacked into it as their initial assumptions gradually became obsolete. The\ntraditions and financial models of the VC business were established when\nfounders needed investors more. In those days it was natural for founders to\nsell VCs a big chunk of their company in the series A round. Now founders\nwould prefer to sell less, and VCs are digging in their heels because they're\nnot sure if they can make money buying less than 20% of each series A company.  \n  \nThe reason I describe this as a danger is that series A investors are\nincreasingly at odds with the startups they supposedly serve, and that tends\nto come back to bite you eventually. The reason I describe it as an\nopportunity is that there is now a lot of potential energy built up, as the\nmarket has moved away from VCs' traditional business model. Which means the\nfirst VC to break ranks and start to do series A rounds for as much equity as\nfounders want to sell (and with no \"option pool\" that comes only from the\nfounders' shares) stands to reap huge benefits.  \n  \nWhat will happen to the VC business when that happens? Hell if I know. But I\nbet that particular firm will end up ahead. If one top-tier VC firm started to\ndo series A rounds that started from the amount the company needed to raise\nand let the percentage acquired vary with the market, instead of the other way\naround, they'd instantly get almost all the best startups. And that's where\nthe money is.  \n  \nYou can't fight market forces forever. Over the last decade we've seen the\npercentage of the company sold in series A rounds creep inexorably downward.\n40% used to be common. Now VCs are fighting to hold the line at 20%. But I am\ndaily waiting for the line to collapse. It's going to happen. You may as well\nanticipate it, and look bold.  \n  \nWho knows, maybe VCs will make more money by doing the right thing. It\nwouldn't be the first time that happened. Venture capital is a business where\noccasional big successes generate hundredfold returns. How much confidence can\nyou really have in financial models for something like that anyway? The big\nsuccesses only have to get a tiny bit less occasional to compensate for a 2x\ndecrease in the stock sold in series A rounds.  \n  \nIf you want to find new opportunities for investing, look for things founders\ncomplain about. Founders are your customers, and the things they complain\nabout are unsatisfied demand. I've given two examples of things founders\ncomplain about most\u2014investors who take too long to make up their minds, and\nexcessive dilution in series A rounds\u2014so those are good places to look now.\nBut the more general recipe is: do something founders want.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] I realize revenue and not fundraising is the proper test of success for a\nstartup. The reason we quote statistics about fundraising is because those are\nthe numbers we have. We couldn't talk meaningfully about revenues without\nincluding the numbers from the most successful startups, and we don't have\nthose. We often discuss revenue growth with the earlier stage startups,\nbecause that's how we gauge their progress, but when companies reach a certain\nsize it gets presumptuous for a seed investor to do that.  \n  \nIn any case, companies' market caps do eventually become a function of\nrevenues, and post-money valuations of funding rounds are at least guesses by\npros about where those market caps will end up.  \n  \nThe reason only 287 have valuations is that the rest have mostly raised money\non convertible notes, and although convertible notes often have valuation\ncaps, a valuation cap is merely an upper bound on a valuation.  \n  \n[2] We didn't try to accept a particular number. We have no way of doing that\neven if we wanted to. We just tried to be significantly pickier.  \n  \n[3] Though you never know with bottlenecks, I'm guessing the next one will be\ncoordinating efforts among partners.  \n  \n[4] I realize starting a company doesn't have to mean starting a\n[startup](growth.html). There will be lots of people starting normal companies\ntoo. But that's not relevant to an audience of investors.  \n  \nGeoff Ralston reports that in Silicon Valley it seemed thinkable to start a\nstartup in the mid 1980s. It would have started there. But I know it didn't to\nundergraduates on the East Coast.  \n  \n[5] This trend is one of the main causes of the increase in economic\ninequality in the US since the mid twentieth century. The person who would in\n1950 have been the general manager of the x division of Megacorp is now the\nfounder of the x company, and owns significant equity in it.  \n  \n[6] If Congress passes the [founder visa](foundervisa.html) in a non-broken\nform, that alone could in principle get us up to 20x, since 95% of the world's\npopulation lives outside the US.  \n  \n[7] If idea clashes got bad enough, it could change what it means to be a\nstartup. We currently advise startups mostly to ignore competitors. We tell\nthem startups are competitive like running, not like soccer; you don't have to\ngo and steal the ball away from the other team. But if idea clashes became\ncommon enough, maybe you'd start to have to. That would be unfortunate.  \n  \n**Thanks** to Sam Altman, Paul Buchheit, Dalton Caldwell, Patrick Collison,\nJessica Livingston, Andrew Mason, Geoff Ralston, and Garry Tan for reading\ndrafts of this.  \n  \n\nApril 2001  \n  \nThis essay developed out of conversations I've had with several other\nprogrammers about why Java smelled suspicious. It's not a critique of Java! It\nis a case study of hacker's radar.  \n  \nOver time, hackers develop a nose for good (and bad) technology. I thought it\nmight be interesting to try and write down what made Java seem suspect to me.  \n  \nSome people who've read this think it's an interesting attempt to write about\nsomething that hasn't been written about before. Others say I will get in\ntrouble for appearing to be writing about things I don't understand. So, just\nin case it does any good, let me clarify that I'm not writing here about Java\n(which I have never used) but about hacker's radar (which I have thought about\na lot).  \n  \n\n* * *\n\n  \n  \nThe aphorism \"you can't tell a book by its cover\" originated in the times when\nbooks were sold in plain cardboard covers, to be bound by each purchaser\naccording to his own taste. In those days, you couldn't tell a book by its\ncover. But publishing has advanced since then: present-day publishers work\nhard to make the cover something you can tell a book by.  \n  \nI spend a lot of time in bookshops and I feel as if I have by now learned to\nunderstand everything publishers mean to tell me about a book, and perhaps a\nbit more. The time I haven't spent in bookshops I've spent mostly in front of\ncomputers, and I feel as if I've learned, to some degree, to judge technology\nby its cover as well. It may be just luck, but I've saved myself from a few\ntechnologies that turned out to be real stinkers.  \n  \nSo far, Java seems like a stinker to me. I've never written a Java program,\nnever more than glanced over reference books about it, but I have a hunch that\nit won't be a very successful language. I may turn out to be mistaken; making\npredictions about technology is a dangerous business. But for what it's worth,\nas a sort of time capsule, here's why I don't like the look of Java:  \n  \n1\\. It has been so energetically hyped. Real standards don't have to be\npromoted. No one had to promote C, or Unix, or HTML. A real standard tends to\nbe already established by the time most people hear about it. On the hacker\nradar screen, Perl is as big as Java, or bigger, just on the strength of its\nown merits.  \n  \n2\\. It's aimed low. In the original Java white paper, Gosling explicitly says\nJava was designed not to be too difficult for programmers used to C. It was\ndesigned to be another C++: C plus a few ideas taken from more advanced\nlanguages. Like the creators of sitcoms or junk food or package tours, Java's\ndesigners were consciously designing a product for people not as smart as\nthem. Historically, languages designed for other people to use have been bad:\nCobol, PL/I, Pascal, Ada, C++. The good languages have been those that were\ndesigned for their own creators: C, Perl, Smalltalk, Lisp.  \n  \n3\\. It has ulterior motives. Someone once said that the world would be a\nbetter place if people only wrote books because they had something to say,\nrather than because they wanted to write a book. Likewise, the reason we hear\nabout Java all the time is not because it has something to say about\nprogramming languages. We hear about Java as part of a plan by Sun to\nundermine Microsoft.  \n  \n4\\. No one loves it. C, Perl, Python, Smalltalk, and Lisp programmers love\ntheir languages. I've never heard anyone say that they loved Java.  \n  \n5\\. People are forced to use it. A lot of the people I know using Java are\nusing it because they feel they have to. Either it's something they felt they\nhad to do to get funded, or something they thought customers would want, or\nsomething they were told to do by management. These are smart people; if the\ntechnology was good, they'd have used it voluntarily.  \n  \n6\\. It has too many cooks. The best programming languages have been developed\nby small groups. Java seems to be run by a committee. If it turns out to be a\ngood language, it will be the first time in history that a committee has\ndesigned a good language.  \n  \n7\\. It's bureaucratic. From what little I know about Java, there seem to be a\nlot of protocols for doing things. Really good languages aren't like that.\nThey let you do what you want and get out of the way.  \n  \n8\\. It's pseudo-hip. Sun now pretends that Java is a grassroots, open-source\nlanguage effort like Perl or Python. This one just happens to be controlled by\na giant company. So the language is likely to have the same drab clunkiness as\nanything else that comes out of a big company.  \n  \n9\\. It's designed for large organizations. Large organizations have different\naims from hackers. They want languages that are (believed to be) suitable for\nuse by large teams of mediocre programmers-- languages with features that,\nlike the speed limiters in U-Haul trucks, prevent fools from doing too much\ndamage. Hackers don't like a language that talks down to them. Hackers just\nwant power. Historically, languages designed for large organizations (PL/I,\nAda) have lost, while hacker languages (C, Perl) have won. The reason: today's\nteenage hacker is tomorrow's CTO.  \n  \n10\\. The wrong people like it. The programmers I admire most are not, on the\nwhole, captivated by Java. Who does like Java? Suits, who don't know one\nlanguage from another, but know that they keep hearing about Java in the\npress; programmers at big companies, who are amazed to find that there is\nsomething even better than C++; and plug-and-chug undergrads, who are ready to\nlike anything that might get them a job (will this be on the test?). These\npeople's opinions change with every wind.  \n  \n11\\. Its daddy is in a pinch. Sun's business model is being undermined on two\nfronts. Cheap Intel processors, of the same type used in desktop machines, are\nnow more than fast enough for servers. And FreeBSD seems to be at least as\ngood an OS for servers as Solaris. Sun's advertising implies that you need Sun\nservers for industrial strength applications. If this were true, Yahoo would\nbe first in line to buy Suns; but when I worked there, the servers were all\nIntel boxes running FreeBSD. This bodes ill for Sun's future. If Sun runs into\ntrouble, they could drag Java down with them.  \n  \n12\\. The DoD likes it. The Defense Department is encouraging developers to use\nJava. This seems to me the most damning sign of all. The Defense Department\ndoes a fine (though expensive) job of defending the country, but they love\nplans and procedures and protocols. Their culture is the opposite of hacker\nculture; on questions of software they will tend to bet wrong. The last time\nthe DoD really liked a programming language, it was Ada.  \n  \nBear in mind, this is not a critique of Java, but a critique of its cover. I\ndon't know Java well enough to like it or dislike it. This is just an\nexplanation of why I don't find that I'm eager to learn it.  \n  \nIt may seem cavalier to dismiss a language before you've even tried writing\nprograms in it. But this is something all programmers have to do. There are\ntoo many technologies out there to learn them all. You have to learn to judge\nby outward signs which will be worth your time. I have likewise cavalierly\ndismissed Cobol, Ada, Visual Basic, the IBM AS400, VRML, ISO 9000, the SET\nprotocol, VMS, Novell Netware, and CORBA, among others. They just smelled\nwrong.  \n  \nIt could be that in Java's case I'm mistaken. It could be that a language\npromoted by one big company to undermine another, designed by a committee for\na \"mainstream\" audience, hyped to the skies, and beloved of the DoD, happens\nnonetheless to be a clean, beautiful, powerful language that I would love\nprogramming in. It could be, but it seems very unlikely.  \n  \n\nNovember 2015  \n  \nA few months ago an article about Y Combinator said that early on it had been\na \"one-man show.\" It's sadly common to read that sort of thing. But the\nproblem with that description is not just that it's unfair. It's also\nmisleading. Much of what's most novel about YC is due to Jessica Livingston.\nIf you don't understand her, you don't understand YC. So let me tell you a\nlittle about Jessica.  \n  \nYC had 4 founders. Jessica and I decided one night to start it, and the next\nday we recruited my friends Robert Morris and Trevor Blackwell. Jessica and I\nran YC day to day, and Robert and Trevor read applications and did interviews\nwith us.  \n  \nJessica and I were already dating when we started YC. At first we tried to act\n\"professional\" about this, meaning we tried to conceal it. In retrospect that\nseems ridiculous, and we soon dropped the pretense. And the fact that Jessica\nand I were a couple is a big part of what made YC what it was. YC felt like a\nfamily. The founders early on were mostly young. We all had dinner together\nonce a week, cooked for the first couple years by me. Our first building had\nbeen a private home. The overall atmosphere was shockingly different from a\nVC's office on Sand Hill Road, in a way that was entirely for the better.\nThere was an authenticity that everyone who walked in could sense. And that\ndidn't just mean that people trusted us. It was the perfect quality to instill\nin startups. Authenticity is one of the most important things YC looks for in\nfounders, not just because fakers and opportunists are annoying, but because\nauthenticity is one of the main things that separates the most successful\nstartups from the rest.  \n  \nEarly YC was a family, and Jessica was its mom. And the culture she defined\nwas one of YC's most important innovations. Culture is important in any\norganization, but at YC culture wasn't just how we behaved when we built the\nproduct. At YC, the culture was the product.  \n  \nJessica was also the mom in another sense: she had the last word. Everything\nwe did as an organization went through her first \u2014 who to fund, what to say to\nthe public, how to deal with other companies, who to hire, everything.  \n  \nBefore we had kids, YC was more or less our life. There was no real\ndistinction between working hours and not. We talked about YC all the time.\nAnd while there might be some businesses that it would be tedious to let\ninfect your private life, we liked it. We'd started YC because it was\nsomething we were interested in. And some of the problems we were trying to\nsolve were endlessly difficult. How do you recognize good founders? You could\ntalk about that for years, and we did; we still do.  \n  \nI'm better at some things than Jessica, and she's better at some things than\nme. One of the things she's best at is judging people. She's one of those rare\nindividuals with x-ray vision for character. She can see through any kind of\nfaker almost immediately. Her nickname within YC was the Social Radar, and\nthis special power of hers was critical in making YC what it is. The earlier\nyou pick startups, the more you're picking the founders. Later stage investors\nget to try products and look at growth numbers. At the stage where YC invests,\nthere is often neither a product nor any numbers.  \n  \nOthers thought YC had some special insight about the future of technology.\nMostly we had the same sort of insight Socrates claimed: we at least knew we\nknew nothing. What made YC successful was being able to pick good founders. We\nthought Airbnb was a bad idea. We funded it because we liked the founders.  \n  \nDuring interviews, Robert and Trevor and I would pepper the applicants with\ntechnical questions. Jessica would mostly watch. A lot of the applicants\nprobably read her as some kind of secretary, especially early on, because she\nwas the one who'd go out and get each new group and she didn't ask many\nquestions. She was ok with that. It was easier for her to watch people if they\ndidn't notice her. But after the interview, the three of us would turn to\nJessica and ask \"What does the Social Radar say?\" [1]  \n  \nHaving the Social Radar at interviews wasn't just how we picked founders who'd\nbe successful. It was also how we picked founders who were good people. At\nfirst we did this because we couldn't help it. Imagine what it would feel like\nto have x-ray vision for character. Being around bad people would be\nintolerable. So we'd refuse to fund founders whose characters we had doubts\nabout even if we thought they'd be successful.  \n  \nThough we initially did this out of self-indulgence, it turned out to be very\nvaluable to YC. We didn't realize it in the beginning, but the people we were\npicking would become the YC alumni network. And once we picked them, unless\nthey did something really egregious, they were going to be part of it for\nlife. Some now think YC's alumni network is its most valuable feature. I\npersonally think YC's advice is pretty good too, but the alumni network is\ncertainly among the most valuable features. The level of trust and helpfulness\nis remarkable for a group of such size. And Jessica is the main reason why.  \n  \n(As we later learned, it probably cost us little to reject people whose\ncharacters we had doubts about, because how good founders are and how well\nthey do are [_not orthogonal_](mean.html). If bad founders succeed at all,\nthey tend to sell early. The most successful founders are almost all good.)  \n  \nIf Jessica was so important to YC, why don't more people realize it? Partly\nbecause I'm a writer, and writers always get disproportionate attention. YC's\nbrand was initially my brand, and our applicants were people who'd read my\nessays. But there is another reason: Jessica hates attention. Talking to\nreporters makes her nervous. The thought of giving a talk paralyzes her. She\nwas even uncomfortable at our wedding, because the bride is always the center\nof attention. [2]  \n  \nIt's not just because she's shy that she hates attention, but because it\nthrows off the Social Radar. She can't be herself. You can't watch people when\neveryone is watching you.  \n  \nAnother reason attention worries her is that she hates bragging. In anything\nshe does that's publicly visible, her biggest fear (after the obvious fear\nthat it will be bad) is that it will seem ostentatious. She says being too\nmodest is a common problem for women. But in her case it goes beyond that. She\nhas a horror of ostentation so visceral it's almost a phobia.  \n  \nShe also hates fighting. She can't do it; she just shuts down. And\nunfortunately there is a good deal of fighting in being the public face of an\norganization.  \n  \nSo although Jessica more than anyone made YC unique, the very qualities that\nenabled her to do it mean she tends to get written out of YC's history.\nEveryone buys this story that PG started YC and his wife just kind of helped.\nEven YC's haters buy it. A couple years ago when people were attacking us for\nnot funding more female founders (than exist), they all treated YC as\nidentical with PG. It would have spoiled the narrative to acknowledge\nJessica's central role at YC.  \n  \nJessica was boiling mad that people were accusing _her_ company of sexism.\nI've never seen her angrier about anything. But she did not contradict them.\nNot publicly. In private there was a great deal of profanity. And she wrote\nthree separate essays about the question of female founders. But she could\nnever bring herself to publish any of them. She'd seen the level of vitriol in\nthis debate, and she shrank from engaging. [3]  \n  \nIt wasn't just because she disliked fighting. She's so sensitive to character\nthat it repels her even to fight with dishonest people. The idea of mixing it\nup with linkbait journalists or Twitter trolls would seem to her not merely\nfrightening, but disgusting.  \n  \nBut Jessica knew her example as a successful female founder would encourage\nmore women to start companies, so last year she did something YC had never\ndone before and hired a PR firm to get her some interviews. At one of the\nfirst she did, the reporter brushed aside her insights about startups and\nturned it into a sensationalistic story about how some guy had tried to chat\nher up as she was waiting outside the bar where they had arranged to meet.\nJessica was mortified, partly because the guy had done nothing wrong, but more\nbecause the story treated her as a victim significant only for being a woman,\nrather than one of the most knowledgeable investors in the Valley.  \n  \nAfter that she told the PR firm to stop.  \n  \nYou're not going to be hearing in the press about what Jessica has achieved.\nSo let me tell you what Jessica has achieved. Y Combinator is fundamentally a\nnexus of people, like a university. It doesn't make a product. What defines it\nis the people. Jessica more than anyone curated and nurtured that collection\nof people. In that sense she literally made YC.  \n  \nJessica knows more about the qualities of startup founders than anyone else\never has. Her immense data set and x-ray vision are the perfect storm in that\nrespect. The qualities of the founders are the best predictor of how a startup\nwill do. And startups are in turn the most important source of growth in\nmature economies.  \n  \nThe person who knows the most about the most important factor in the growth of\nmature economies \u2014 that is who Jessica Livingston is. Doesn't that sound like\nsomeone who should be better known?  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] Harj Taggar reminded me that while Jessica didn't ask many questions, they\ntended to be important ones:  \n  \n\"She was always good at sniffing out any red flags about the team or their\ndetermination and disarmingly asking the right question, which usually\nrevealed more than the founders realized.\"  \n  \n[2] Or more precisely, while she likes getting attention in the sense of\ngetting credit for what she has done, she doesn't like getting attention in\nthe sense of being watched in real time. Unfortunately, not just for her but\nfor a lot of people, how much you get of the former depends a lot on how much\nyou get of the latter.  \n  \nIncidentally, if you saw Jessica at a public event, you would never guess she\nhates attention, because (a) she is very polite and (b) when she's nervous,\nshe expresses it by smiling more.  \n  \n[3] The existence of people like Jessica is not just something the mainstream\nmedia needs to learn to acknowledge, but something feminists need to learn to\nacknowledge as well. There are successful women who don't like to fight. Which\nmeans if the public conversation about women consists of fighting, their\nvoices will be silenced.  \n  \nThere's a sort of Gresham's Law of conversations. If a conversation reaches a\ncertain level of incivility, the more thoughtful people start to leave. No one\nunderstands female founders better than Jessica. But it's unlikely anyone will\never hear her speak candidly about the topic. She ventured a toe in that water\na while ago, and the reaction was so violent that she decided \"never again.\"  \n  \n**Thanks** to Sam Altman, Paul Buchheit, Patrick Collison, Daniel Gackle,\nCarolynn Levy, Jon Levy, Kirsty Nathoo, Robert Morris, Geoff Ralston, and Harj\nTaggar for reading drafts of this. And yes, Jessica Livingston, who made me\ncut surprisingly little.  \n  \n  \n  \n\nApril 2007  \n  \nThere are two different ways people judge you. Sometimes judging you correctly\nis the end goal. But there's a second much more common type of judgement where\nit isn't. We tend to regard all judgements of us as the first type. We'd\nprobably be happier if we realized which are and which aren't.  \n  \nThe first type of judgement, the type where judging you is the end goal,\ninclude court cases, grades in classes, and most competitions. Such judgements\ncan of course be mistaken, but because the goal is to judge you correctly,\nthere's usually some kind of appeals process. If you feel you've been\nmisjudged, you can protest that you've been treated unfairly.  \n  \nNearly all the judgements made on children are of this type, so we get into\nthe habit early in life of thinking that all judgements are.  \n  \nBut in fact there is a second much larger class of judgements where judging\nyou is only a means to something else. These include college admissions,\nhiring and investment decisions, and of course the judgements made in dating.\nThis kind of judgement is not really about you.  \n  \nPut yourself in the position of someone selecting players for a national team.\nSuppose for the sake of simplicity that this is a game with no positions, and\nthat you have to select 20 players. There will be a few stars who clearly\nshould make the team, and many players who clearly shouldn't. The only place\nyour judgement makes a difference is in the borderline cases. Suppose you\nscrew up and underestimate the 20th best player, causing him not to make the\nteam, and his place to be taken by the 21st best. You've still picked a good\nteam. If the players have the usual distribution of ability, the 21st best\nplayer will be only slightly worse than the 20th best. Probably the difference\nbetween them will be less than the measurement error.  \n  \nThe 20th best player may feel he has been misjudged. But your goal here wasn't\nto provide a service estimating people's ability. It was to pick a team, and\nif the difference between the 20th and 21st best players is less than the\nmeasurement error, you've still done that optimally.  \n  \nIt's a false analogy even to use the word unfair to describe this kind of\nmisjudgement. It's not aimed at producing a correct estimate of any given\nindividual, but at selecting a reasonably optimal set.  \n  \nOne thing that leads us astray here is that the selector seems to be in a\nposition of power. That makes him seem like a judge. If you regard someone\njudging you as a customer instead of a judge, the expectation of fairness goes\naway. The author of a good novel wouldn't complain that readers were _unfair_\nfor preferring a potboiler with a racy cover. Stupid, perhaps, but not unfair.  \n  \nOur early training and our self-centeredness combine to make us believe that\nevery judgement of us is about us. In fact most aren't. This is a rare case\nwhere being less self-centered will make people more confident. Once you\nrealize how little most people judging you care about judging you\naccurately\u2014once you realize that because of the normal distribution of most\napplicant pools, it matters least to judge accurately in precisely the cases\nwhere judgement has the most effect\u2014you won't take rejection so personally.  \n  \nAnd curiously enough, taking rejection less personally may help you to get\nrejected less often. If you think someone judging you will work hard to judge\nyou correctly, you can afford to be passive. But the more you realize that\nmost judgements are greatly influenced by random, extraneous factors\u2014that most\npeople judging you are more like a fickle novel buyer than a wise and\nperceptive magistrate\u2014the more you realize you can do things to influence the\noutcome.  \n  \nOne good place to apply this principle is in college applications. Most high\nschool students applying to college do it with the usual child's mix of\ninferiority and self-centeredness: inferiority in that they assume that\nadmissions committees must be all-seeing; self-centeredness in that they\nassume admissions committees care enough about them to dig down into their\napplication and figure out whether they're good or not. These combine to make\napplicants passive in applying and hurt when they're rejected. If college\napplicants realized how quick and impersonal most selection processes are,\nthey'd make more effort to sell themselves, and take the outcome less\npersonally.  \n  \n\nAugust 2009  \n  \nKate Courteau is the architect who designed Y Combinator's office. Recently we\nmanaged to recruit her to help us run YC when she's not busy with\narchitectural projects. Though she'd heard a lot about YC since the beginning,\nthe last 9 months have been a total immersion.  \n  \nI've been around the startup world for so long that it seems normal to me, so\nI was curious to hear what had surprised her most about it. This was her list:  \n  \n  \n  \n**1\\. How many startups fail.**  \n  \nKate knew in principle that startups were very risky, but she was surprised to\nsee how constant the threat of failure was \u2014 not just for the minnows, but\neven for the famous startups whose founders came to speak at YC dinners.  \n  \n**2\\. How much startups' ideas change.**  \n  \nAs usual, by Demo Day about half the startups were doing something\nsignificantly different than they started with. We encourage that. Starting a\nstartup is like science in that you have to follow the truth wherever it\nleads. In the rest of the world, people don't start things till they're sure\nwhat they want to do, and once started they tend to continue on their initial\npath even if it's mistaken.  \n  \n**3\\. How little money it can take to start a startup.**  \n  \nIn Kate's world, everything is still physical and expensive. You can barely\nrenovate a bathroom for the cost of starting a startup.  \n  \n**4\\. How scrappy founders are.**  \n  \nThat was her actual word. I agree with her, but till she mentioned this it\nnever occurred to me how little this quality is appreciated in most of the\nrest of the world. It wouldn't be a compliment in most organizations to call\nsomeone scrappy.  \n  \nWhat does it mean, exactly? It's basically the diminutive form of belligerent.\nSomeone who's scrappy manages to be both threatening and undignified at the\nsame time. Which seems to me exactly what one would want to be, in any kind of\nwork. If you're not threatening, you're probably not doing anything new, and\ndignity is merely a sort of plaque.  \n  \n**5\\. How tech-saturated Silicon Valley is.**  \n  \n\"It seems like everybody here is in the industry.\" That isn't literally true,\nbut there is a qualitative difference between Silicon Valley and other places.\nYou tend to keep your voice down, because there's a good chance the person at\nthe next table would know some of the people you're talking about. I never\nfelt that in Boston. The good news is, there's also a good chance the person\nat the next table could help you in some way.  \n  \n**6\\. That the speakers at YC were so consistent in their advice.**  \n  \nActually, I've noticed this too. I always worry the speakers will put us in an\nembarrassing position by contradicting what we tell the startups, but it\nhappens surprisingly rarely.  \n  \nWhen I asked her what specific things she remembered speakers always saying,\nshe mentioned: that the way to succeed was to launch something fast, listen to\nusers, and then iterate; that startups required resilience because they were\nalways an emotional rollercoaster; and that most VCs were sheep.  \n  \nI've been impressed by how consistently the speakers advocate launching fast\nand iterating. That was contrarian advice 10 years ago, but it's clearly now\nthe established practice.  \n  \n**7\\. How casual successful startup founders are.**  \n  \nMost of the famous founders in Silicon Valley are people you'd overlook on the\nstreet. It's not merely that they don't dress up. They don't project any kind\nof aura of power either. \"They're not trying to impress anyone.\"  \n  \nInterestingly, while Kate said that she could never pick out successful\nfounders, she could recognize VCs, both by the way they dressed and the way\nthey carried themselves.  \n  \n**8\\. How important it is for founders to have people to ask for advice.**  \n  \n(I swear I didn't prompt this one.) Without advice \"they'd just be sort of\nlost.\" Fortunately, there are a lot of people to help them. There's a strong\ntradition within YC of helping other YC-funded startups. But we didn't invent\nthat idea: it's just a slightly more concentrated form of existing Valley\nculture.  \n  \n**9\\. What a solitary task startups are.**  \n  \nArchitects are constantly interacting face to face with other people, whereas\ndoing a technology startup, at least, tends to require long stretches of\nuninterrupted time to work. \"You could do it in a box.\"  \n  \n  \n  \nBy inverting this list, we can get a portrait of the \"normal\" world. It's\npopulated by people who talk a lot with one another as they work slowly but\nharmoniously on conservative, expensive projects whose destinations are\ndecided in advance, and who carefully adjust their manner to reflect their\nposition in the hierarchy.  \n  \nThat's also a fairly accurate description of the past. So startup culture may\nnot merely be different in the way you'd expect any subculture to be, but a\nleading indicator.  \n  \n\nDecember 2019  \n  \nBefore I had kids, I was afraid of having kids. Up to that point I felt about\nkids the way the young Augustine felt about living virtuously. I'd have been\nsad to think I'd never have children. But did I want them now? No.  \n  \nIf I had kids, I'd become a parent, and parents, as I'd known since I was a\nkid, were uncool. They were dull and responsible and had no fun. And while\nit's not surprising that kids would believe that, to be honest I hadn't seen\nmuch as an adult to change my mind. Whenever I'd noticed parents with kids,\nthe kids seemed to be terrors, and the parents pathetic harried creatures,\neven when they prevailed.  \n  \nWhen people had babies, I congratulated them enthusiastically, because that\nseemed to be what one did. But I didn't feel it at all. \"Better you than me,\"\nI was thinking.  \n  \nNow when people have babies I congratulate them enthusiastically and I mean\nit. Especially the first one. I feel like they just got the best gift in the\nworld.  \n  \nWhat changed, of course, is that I had kids. Something I dreaded turned out to\nbe wonderful.  \n  \nPartly, and I won't deny it, this is because of serious chemical changes that\nhappened almost instantly when our first child was born. It was like someone\nflipped a switch. I suddenly felt protective not just toward our child, but\ntoward all children. As I was driving my wife and new son home from the\nhospital, I approached a crosswalk full of pedestrians, and I found myself\nthinking \"I have to be really careful of all these people. Every one of them\nis someone's child!\"  \n  \nSo to some extent you can't trust me when I say having kids is great. To some\nextent I'm like a religious cultist telling you that you'll be happy if you\njoin the cult too \u0097 but only because joining the cult will alter your mind in\na way that will make you happy to be a cult member.  \n  \nBut not entirely. There were some things about having kids that I clearly got\nwrong before I had them.  \n  \nFor example, there was a huge amount of selection bias in my observations of\nparents and children. Some parents may have noticed that I wrote \"Whenever I'd\nnoticed parents with kids.\" Of course the times I noticed kids were when\nthings were going wrong. I only noticed them when they made noise. And where\nwas I when I noticed them? Ordinarily I never went to places with kids, so the\nonly times I encountered them were in shared bottlenecks like airplanes. Which\nis not exactly a representative sample. Flying with a toddler is something\nvery few parents enjoy.  \n  \nWhat I didn't notice, because they tend to be much quieter, were all the great\nmoments parents had with kids. People don't talk about these much \u0097 the magic\nis hard to put into words, and all other parents know about them anyway \u0097 but\none of the great things about having kids is that there are so many times when\nyou feel there is nowhere else you'd rather be, and nothing else you'd rather\nbe doing. You don't have to be doing anything special. You could just be going\nsomewhere together, or putting them to bed, or pushing them on the swings at\nthe park. But you wouldn't trade these moments for anything. One doesn't tend\nto associate kids with peace, but that's what you feel. You don't need to look\nany further than where you are right now.  \n  \nBefore I had kids, I had moments of this kind of peace, but they were rarer.\nWith kids it can happen several times a day.  \n  \nMy other source of data about kids was my own childhood, and that was\nsimilarly misleading. I was pretty bad, and was always in trouble for\nsomething or other. So it seemed to me that parenthood was essentially law\nenforcement. I didn't realize there were good times too.  \n  \nI remember my mother telling me once when I was about 30 that she'd really\nenjoyed having me and my sister. My god, I thought, this woman is a saint. She\nnot only endured all the pain we subjected her to, but actually enjoyed it?\nNow I realize she was simply telling the truth.  \n  \nShe said that one reason she liked having us was that we'd been interesting to\ntalk to. That took me by surprise when I had kids. You don't just love them.\nThey become your friends too. They're really interesting. And while I admit\nsmall children are disastrously fond of repetition (anything worth doing once\nis worth doing fifty times) it's often genuinely fun to play with them. That\nsurprised me too. Playing with a 2 year old was fun when I was 2 and\ndefinitely not fun when I was 6. Why would it become fun again later? But it\ndoes.  \n  \nThere are of course times that are pure drudgery. Or worse still, terror.\nHaving kids is one of those intense types of experience that are hard to\nimagine unless you've had them. But it is not, as I implicitly believed before\nhaving kids, simply your DNA heading for the lifeboats.  \n  \nSome of my worries about having kids were right, though. They definitely make\nyou less productive. I know having kids makes some people get their act\ntogether, but if your act was already together, you're going to have less time\nto do it in. In particular, you're going to have to work to a schedule. Kids\nhave schedules. I'm not sure if it's because that's how kids are, or because\nit's the only way to integrate their lives with adults', but once you have\nkids, you tend to have to work on their schedule.  \n  \nYou will have chunks of time to work. But you can't let work spill\npromiscuously through your whole life, like I used to before I had kids.\nYou're going to have to work at the same time every day, whether inspiration\nis flowing or not, and there are going to be times when you have to stop, even\nif it is.  \n  \nI've been able to adapt to working this way. Work, like love, finds a way. If\nthere are only certain times it can happen, it happens at those times. So\nwhile I don't get as much done as before I had kids, I get enough done.  \n  \nI hate to say this, because being ambitious has always been a part of my\nidentity, but having kids may make one less ambitious. It hurts to see that\nsentence written down. I squirm to avoid it. But if there weren't something\nreal there, why would I squirm? The fact is, once you have kids, you're\nprobably going to care more about them than you do about yourself. And\nattention is a zero-sum game. Only one idea at a time can be the [_top idea in\nyour mind_](top.html). Once you have kids, it will often be your kids, and\nthat means it will less often be some project you're working on.  \n  \nI have some hacks for sailing close to this wind. For example, when I write\nessays, I think about what I'd want my kids to know. That drives me to get\nthings right. And when I was writing [_Bel_](bel.html), I told my kids that\nonce I finished it I'd take them to Africa. When you say that sort of thing to\na little kid, they treat it as a promise. Which meant I had to finish or I'd\nbe taking away their trip to Africa. Maybe if I'm really lucky such tricks\ncould put me net ahead. But the wind is there, no question.  \n  \nOn the other hand, what kind of wimpy ambition do you have if it won't survive\nhaving kids? Do you have so little to spare?  \n  \nAnd while having kids may be warping my present judgement, it hasn't\noverwritten my memory. I remember perfectly well what life was like before.\nWell enough to miss some things a lot, like the ability to take off for some\nother country at a moment's notice. That was so great. Why did I never do\nthat?  \n  \nSee what I did there? The fact is, most of the freedom I had before kids, I\nnever used. I paid for it in loneliness, but I never used it.  \n  \nI had plenty of happy times before I had kids. But if I count up happy\nmoments, not just potential happiness but actual happy moments, there are more\nafter kids than before. Now I practically have it on tap, almost any bedtime.  \n  \nPeople's experiences as parents vary a lot, and I know I've been lucky. But I\nthink the worries I had before having kids must be pretty common, and judging\nby other parents' faces when they see their kids, so must the happiness that\nkids bring.  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n**Note**  \n  \n[1] Adults are sophisticated enough to see 2 year olds for the fascinatingly\ncomplex characters they are, whereas to most 6 year olds, 2 year olds are just\ndefective 6 year olds.  \n  \n  \n  \n**Thanks** to Trevor Blackwell, Jessica Livingston, and Robert Morris for\nreading drafts of this.  \n  \n\nAugust 2005  \n  \nThirty years ago, one was supposed to work one's way up the corporate ladder.\nThat's less the rule now. Our generation wants to get paid up front. Instead\nof developing a product for some big company in the expectation of getting job\nsecurity in return, we develop the product ourselves, in a startup, and sell\nit to the big company. At the very least we want options.  \n  \nAmong other things, this shift has created the appearance of a rapid increase\nin economic inequality. But really the two cases are not as different as they\nlook in economic statistics.  \n  \nEconomic statistics are misleading because they ignore the value of safe jobs.\nAn easy job from which one can't be fired is worth money; exchanging the two\nis one of the commonest forms of corruption. A sinecure is, in effect, an\nannuity. Except sinecures don't appear in economic statistics. If they did, it\nwould be clear that in practice socialist countries have nontrivial\ndisparities of wealth, because they usually have a class of powerful\nbureaucrats who are paid mostly by seniority and can never be fired.  \n  \nWhile not a sinecure, a position on the corporate ladder was genuinely\nvaluable, because big companies tried not to fire people, and promoted from\nwithin based largely on seniority. A position on the corporate ladder had a\nvalue analogous to the \"goodwill\" that is a very real element in the valuation\nof companies. It meant one could expect future high paying jobs.  \n  \nOne of main causes of the decay of the corporate ladder is the trend for\ntakeovers that began in the 1980s. Why waste your time climbing a ladder that\nmight disappear before you reach the top?  \n  \nAnd, by no coincidence, the corporate ladder was one of the reasons the early\ncorporate raiders were so successful. It's not only economic statistics that\nignore the value of safe jobs. Corporate balance sheets do too. One reason it\nwas profitable to carve up 1980s companies and sell them for parts was that\nthey hadn't formally acknowledged their implicit debt to employees who had\ndone good work and expected to be rewarded with high-paying executive jobs\nwhen their time came.  \n  \nIn the movie _Wall Street_ , Gordon Gekko ridicules a company overloaded with\nvice presidents. But the company may not be as corrupt as it seems; those VPs'\ncushy jobs were probably payment for work done earlier.  \n  \nI like the new model better. For one thing, it seems a bad plan to treat jobs\nas rewards. Plenty of good engineers got made into bad managers that way. And\nthe old system meant people had to deal with a lot more corporate politics, in\norder to protect the work they'd invested in a position on the ladder.  \n  \nThe big disadvantage of the new system is that it involves more\n[risk](inequality.html). If you develop ideas in a startup instead of within a\nbig company, any number of random factors could sink you before you can\nfinish. But maybe the older generation would laugh at me for saying that the\nway we do things is riskier. After all, projects within big companies were\nalways getting cancelled as a result of arbitrary decisions from higher up. My\nfather's entire industry (breeder reactors) disappeared that way.  \n  \nFor better or worse, the idea of the corporate ladder is probably gone for\ngood. The new model seems more liquid, and more efficient. But it is less of a\nchange, financially, than one might think. Our fathers weren't _that_ stupid.  \n  \n  \n  \n  \n\nDecember 2019  \n  \nThe most damaging thing you learned in school wasn't something you learned in\nany specific class. It was learning to get good grades.  \n  \nWhen I was in college, a particularly earnest philosophy grad student once\ntold me that he never cared what grade he got in a class, only what he learned\nin it. This stuck in my mind because it was the only time I ever heard anyone\nsay such a thing.  \n  \nFor me, as for most students, the measurement of what I was learning\ncompletely dominated actual learning in college. I was fairly earnest; I was\ngenuinely interested in most of the classes I took, and I worked hard. And yet\nI worked by far the hardest when I was studying for a test.  \n  \nIn theory, tests are merely what their name implies: tests of what you've\nlearned in the class. In theory you shouldn't have to prepare for a test in a\nclass any more than you have to prepare for a blood test. In theory you learn\nfrom taking the class, from going to the lectures and doing the reading and/or\nassignments, and the test that comes afterward merely measures how well you\nlearned.  \n  \nIn practice, as almost everyone reading this will know, things are so\ndifferent that hearing this explanation of how classes and tests are meant to\nwork is like hearing the etymology of a word whose meaning has changed\ncompletely. In practice, the phrase \"studying for a test\" was almost\nredundant, because that was when one really studied. The difference between\ndiligent and slack students was that the former studied hard for tests and the\nlatter didn't. No one was pulling all-nighters two weeks into the semester.  \n  \nEven though I was a diligent student, almost all the work I did in school was\naimed at getting a good grade on something.  \n  \nTo many people, it would seem strange that the preceding sentence has a\n\"though\" in it. Aren't I merely stating a tautology? Isn't that what a\ndiligent student is, a straight-A student? That's how deeply the conflation of\nlearning with grades has infused our culture.  \n  \nIs it so bad if learning is conflated with grades? Yes, it is bad. And it\nwasn't till decades after college, when I was running Y Combinator, that I\nrealized how bad it is.  \n  \nI knew of course when I was a student that studying for a test is far from\nidentical with actual learning. At the very least, you don't retain knowledge\nyou cram into your head the night before an exam. But the problem is worse\nthan that. The real problem is that most tests don't come close to measuring\nwhat they're supposed to.  \n  \nIf tests truly were tests of learning, things wouldn't be so bad. Getting good\ngrades and learning would converge, just a little late. The problem is that\nnearly all tests given to students are terribly hackable. Most people who've\ngotten good grades know this, and know it so well they've ceased even to\nquestion it. You'll see when you realize how naive it sounds to act otherwise.  \n  \nSuppose you're taking a class on medieval history and the final exam is coming\nup. The final exam is supposed to be a test of your knowledge of medieval\nhistory, right? So if you have a couple days between now and the exam, surely\nthe best way to spend the time, if you want to do well on the exam, is to read\nthe best books you can find about medieval history. Then you'll know a lot\nabout it, and do well on the exam.  \n  \nNo, no, no, experienced students are saying to themselves. If you merely read\ngood books on medieval history, most of the stuff you learned wouldn't be on\nthe test. It's not good books you want to read, but the lecture notes and\nassigned reading in this class. And even most of that you can ignore, because\nyou only have to worry about the sort of thing that could turn up as a test\nquestion. You're looking for sharply-defined chunks of information. If one of\nthe assigned readings has an interesting digression on some subtle point, you\ncan safely ignore that, because it's not the sort of thing that could be\nturned into a test question. But if the professor tells you that there were\nthree underlying causes of the Schism of 1378, or three main consequences of\nthe Black Death, you'd better know them. And whether they were in fact the\ncauses or consequences is beside the point. For the purposes of this class\nthey are.  \n  \nAt a university there are often copies of old exams floating around, and these\nnarrow still further what you have to learn. As well as learning what kind of\nquestions this professor asks, you'll often get actual exam questions. Many\nprofessors re-use them. After teaching a class for 10 years, it would be hard\nnot to, at least inadvertently.  \n  \nIn some classes, your professor will have had some sort of political axe to\ngrind, and if so you'll have to grind it too. The need for this varies. In\nclasses in math or the hard sciences or engineering it's rarely necessary, but\nat the other end of the spectrum there are classes where you couldn't get a\ngood grade without it.  \n  \nGetting a good grade in a class on x is so different from learning a lot about\nx that you have to choose one or the other, and you can't blame students if\nthey choose grades. Everyone judges them by their grades \u0097 graduate programs,\nemployers, scholarships, even their own parents.  \n  \nI liked learning, and I really enjoyed some of the papers and programs I wrote\nin college. But did I ever, after turning in a paper in some class, sit down\nand write another just for fun? Of course not. I had things due in other\nclasses. If it ever came to a choice of learning or grades, I chose grades. I\nhadn't come to college to do badly.  \n  \nAnyone who cares about getting good grades has to play this game, or they'll\nbe surpassed by those who do. And at elite universities, that means nearly\neveryone, since someone who didn't care about getting good grades probably\nwouldn't be there in the first place. The result is that students compete to\nmaximize the difference between learning and getting good grades.  \n  \nWhy are tests so bad? More precisely, why are they so hackable? Any\nexperienced programmer could answer that. How hackable is software whose\nauthor hasn't paid any attention to preventing it from being hacked? Usually\nit's as porous as a colander.  \n  \nHackable is the default for any test imposed by an authority. The reason the\ntests you're given are so consistently bad \u0097 so consistently far from\nmeasuring what they're supposed to measure \u0097 is simply that the people\ncreating them haven't made much effort to prevent them from being hacked.  \n  \nBut you can't blame teachers if their tests are hackable. Their job is to\nteach, not to create unhackable tests. The real problem is grades, or more\nprecisely, that grades have been overloaded. If grades were merely a way for\nteachers to tell students what they were doing right and wrong, like a coach\ngiving advice to an athlete, students wouldn't be tempted to hack tests. But\nunfortunately after a certain age grades become more than advice. After a\ncertain age, whenever you're being taught, you're usually also being judged.  \n  \nI've used college tests as an example, but those are actually the least\nhackable. All the tests most students take their whole lives are at least as\nbad, including, most spectacularly of all, the test that gets them into\ncollege. If getting into college were merely a matter of having the quality of\none's mind measured by admissions officers the way scientists measure the mass\nof an object, we could tell teenage kids \"learn a lot\" and leave it at that.\nYou can tell how bad college admissions are, as a test, from how unlike high\nschool that sounds. In practice, the freakishly specific nature of the stuff\nambitious kids have to do in high school is directly proportionate to the\nhackability of college admissions. The classes you don't care about that are\nmostly memorization, the random \"extracurricular activities\" you have to\nparticipate in to show you're \"well-rounded,\" the standardized tests as\nartificial as chess, the \"essay\" you have to write that's presumably meant to\nhit some very specific target, but you're not told what.  \n  \nAs well as being bad in what it does to kids, this test is also bad in the\nsense of being very hackable. So hackable that whole industries have grown up\nto hack it. This is the explicit purpose of test-prep companies and admissions\ncounsellors, but it's also a significant part of the function of private\nschools.  \n  \nWhy is this particular test so hackable? I think because of what it's\nmeasuring. Although the popular story is that the way to get into a good\ncollege is to be really smart, admissions officers at elite colleges neither\nare, nor claim to be, looking only for that. What are they looking for?\nThey're looking for people who are not simply smart, but admirable in some\nmore general sense. And how is this more general admirableness measured? The\nadmissions officers feel it. In other words, they accept who they like.  \n  \nSo what college admissions is a test of is whether you suit the taste of some\ngroup of people. Well, of course a test like that is going to be hackable. And\nbecause it's both very hackable and there's (thought to be) a lot at stake,\nit's hacked like nothing else. That's why it distorts your life so much for so\nlong.  \n  \nIt's no wonder high school students often feel alienated. The shape of their\nlives is completely artificial.  \n  \nBut wasting your time is not the worst thing the educational system does to\nyou. The worst thing it does is to train you that the way to win is by hacking\nbad tests. This is a much subtler problem that I didn't recognize until I saw\nit happening to other people.  \n  \nWhen I started advising startup founders at Y Combinator, especially young\nones, I was puzzled by the way they always seemed to make things\novercomplicated. How, they would ask, do you raise money? What's the trick for\nmaking venture capitalists want to invest in you? The best way to make VCs\nwant to invest in you, I would explain, is to actually be a good investment.\nEven if you could trick VCs into investing in a bad startup, you'd be tricking\nyourselves too. You're investing time in the same company you're asking them\nto invest money in. If it's not a good investment, why are you even doing it?  \n  \nOh, they'd say, and then after a pause to digest this revelation, they'd ask:\nWhat makes a startup a good investment?  \n  \nSo I would explain that what makes a startup promising, not just in the eyes\nof investors but in fact, is [_growth_](growth.html). Ideally in revenue, but\nfailing that in usage. What they needed to do was get lots of users.  \n  \nHow does one get lots of users? They had all kinds of ideas about that. They\nneeded to do a big launch that would get them \"exposure.\" They needed\ninfluential people to talk about them. They even knew they needed to launch on\na tuesday, because that's when one gets the most attention.  \n  \nNo, I would explain, that is not how to get lots of users. The way you get\nlots of users is to make the product really great. Then people will not only\nuse it but recommend it to their friends, so your growth will be exponential\nonce you [_get it started_](ds.html).  \n  \nAt this point I've told the founders something you'd think would be completely\nobvious: that they should make a good company by making a good product. And\nyet their reaction would be something like the reaction many physicists must\nhave had when they first heard about the theory of relativity: a mixture of\nastonishment at its apparent genius, combined with a suspicion that anything\nso weird couldn't possibly be right. Ok, they would say, dutifully. And could\nyou introduce us to such-and-such influential person? And remember, we want to\nlaunch on Tuesday.  \n  \nIt would sometimes take founders years to grasp these simple lessons. And not\nbecause they were lazy or stupid. They just seemed blind to what was right in\nfront of them.  \n  \nWhy, I would ask myself, do they always make things so complicated? And then\none day I realized this was not a rhetorical question.  \n  \nWhy did founders tie themselves in knots doing the wrong things when the\nanswer was right in front of them? Because that was what they'd been trained\nto do. Their education had taught them that the way to win was to hack the\ntest. And without even telling them they were being trained to do this. The\nyounger ones, the recent graduates, had never faced a non-artificial test.\nThey thought this was just how the world worked: that the first thing you did,\nwhen facing any kind of challenge, was to figure out what the trick was for\nhacking the test. That's why the conversation would always start with how to\nraise money, because that read as the test. It came at the end of YC. It had\nnumbers attached to it, and higher numbers seemed to be better. It must be the\ntest.  \n  \nThere are certainly big chunks of the world where the way to win is to hack\nthe test. This phenomenon isn't limited to schools. And some people, either\ndue to ideology or ignorance, claim that this is true of startups too. But it\nisn't. In fact, one of the most striking things about startups is the degree\nto which you win by simply doing good work. There are edge cases, as there are\nin anything, but in general you win by getting users, and what users care\nabout is whether the product does what they want.  \n  \nWhy did it take me so long to understand why founders made startups\novercomplicated? Because I hadn't realized explicitly that schools train us to\nwin by hacking bad tests. And not just them, but me! I'd been trained to hack\nbad tests too, and hadn't realized it till decades later.  \n  \nI had lived as if I realized it, but without knowing why. For example, I had\navoided working for big companies. But if you'd asked why, I'd have said it\nwas because they were bogus, or bureaucratic. Or just yuck. I never understood\nhow much of my dislike of big companies was due to the fact that you win by\nhacking bad tests.  \n  \nSimilarly, the fact that the tests were unhackable was a lot of what attracted\nme to startups. But again, I hadn't realized that explicitly.  \n  \nI had in effect achieved by successive approximations something that may have\na closed-form solution. I had gradually undone my training in hacking bad\ntests without knowing I was doing it. Could someone coming out of school\nbanish this demon just by knowing its name, and saying begone? It seems worth\ntrying.  \n  \nMerely talking explicitly about this phenomenon is likely to make things\nbetter, because much of its power comes from the fact that we take it for\ngranted. After you've noticed it, it seems the elephant in the room, but it's\na pretty well camouflaged elephant. The phenomenon is so old, and so\npervasive. And it's simply the result of neglect. No one meant things to be\nthis way. This is just what happens when you combine learning with grades,\ncompetition, and the naive assumption of unhackability.  \n  \nIt was mind-blowing to realize that two of the things I'd puzzled about the\nmost \u0097 the bogusness of high school, and the difficulty of getting founders to\nsee the obvious \u0097 both had the same cause. It's rare for such a big block to\nslide into place so late.  \n  \nUsually when that happens it has implications in a lot of different areas, and\nthis case seems no exception. For example, it suggests both that education\ncould be done better, and how you might fix it. But it also suggests a\npotential answer to the question all big companies seem to have: how can we be\nmore like a startup? I'm not going to chase down all the implications now.\nWhat I want to focus on here is what it means for individuals.  \n  \nTo start with, it means that most ambitious kids graduating from college have\nsomething they may want to unlearn. But it also changes how you look at the\nworld. Instead of looking at all the different kinds of work people do and\nthinking of them vaguely as more or less appealing, you can now ask a very\nspecific question that will sort them in an interesting way: to what extent do\nyou win at this kind of work by hacking bad tests?  \n  \nIt would help if there was a way to recognize bad tests quickly. Is there a\npattern here? It turns out there is.  \n  \nTests can be divided into two kinds: those that are imposed by authorities,\nand those that aren't. Tests that aren't imposed by authorities are inherently\nunhackable, in the sense that no one is claiming they're tests of anything\nmore than they actually test. A football match, for example, is simply a test\nof who wins, not which team is better. You can tell that from the fact that\ncommentators sometimes say afterward that the better team won. Whereas tests\nimposed by authorities are usually proxies for something else. A test in a\nclass is supposed to measure not just how well you did on that particular\ntest, but how much you learned in the class. While tests that aren't imposed\nby authorities are inherently unhackable, those imposed by authorities have to\nbe made unhackable. Usually they aren't. So as a first approximation, bad\ntests are roughly equivalent to tests imposed by authorities.  \n  \nYou might actually like to win by hacking bad tests. Presumably some people\ndo. But I bet most people who find themselves doing this kind of work don't\nlike it. They just take it for granted that this is how the world works,\nunless you want to drop out and be some kind of hippie artisan.  \n  \nI suspect many people implicitly assume that working in a field with bad tests\nis the price of making lots of money. But that, I can tell you, is false. It\nused to be true. In the mid-twentieth century, when the economy was [_composed\nof oligopolies_](re.html), the only way to the top was by playing their game.\nBut it's not true now. There are now ways to get rich by doing good work, and\nthat's part of the reason people are so much more excited about getting rich\nthan they used to be. When I was a kid, you could either become an engineer\nand make cool things, or make lots of money by becoming an \"executive.\" Now\nyou can make lots of money by making cool things.  \n  \nHacking bad tests is becoming less important as the link between work and\nauthority erodes. The erosion of that link is one of the most important trends\nhappening now, and we see its effects in almost every kind of work people do.\nStartups are one of the most visible examples, but we see much the same thing\nin writing. Writers no longer have to submit to publishers and editors to\nreach readers; now they can go direct.  \n  \nThe more I think about this question, the more optimistic I get. This seems\none of those situations where we don't realize how much something was holding\nus back until it's eliminated. And I can foresee the whole bogus edifice\ncrumbling. Imagine what happens as more and more people start to ask\nthemselves if they want to win by hacking bad tests, and decide that they\ndon't. The kinds of work where you win by hacking bad tests will be starved of\ntalent, and the kinds where you win by doing good work will see an influx of\nthe most ambitious people. And as hacking bad tests shrinks in importance,\neducation will evolve to stop training us to do it. Imagine what the world\ncould look like if that happened.  \n  \nThis is not just a lesson for individuals to unlearn, but one for society to\nunlearn, and we'll be amazed at the energy that's liberated when we do.  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] If using tests only to measure learning sounds impossibly utopian, that is\nalready the way things work at Lambda School. Lambda School doesn't have\ngrades. You either graduate or you don't. The only purpose of tests is to\ndecide at each stage of the curriculum whether you can continue to the next.\nSo in effect the whole school is pass/fail.  \n  \n[2] If the final exam consisted of a long conversation with the professor, you\ncould prepare for it by reading good books on medieval history. A lot of the\nhackability of tests in schools is due to the fact that the same test has to\nbe given to large numbers of students.  \n  \n[3] Learning is the naive algorithm for getting good grades.  \n  \n[4] [_Hacking_](gba.html) has multiple senses. There's a narrow sense in which\nit means to compromise something. That's the sense in which one hacks a bad\ntest. But there's another, more general sense, meaning to find a surprising\nsolution to a problem, often by thinking differently about it. Hacking in this\nsense is a wonderful thing. And indeed, some of the hacks people use on bad\ntests are impressively ingenious; the problem is not so much the hacking as\nthat, because the tests are hackable, they don't test what they're meant to.  \n  \n[5] The people who pick startups at Y Combinator are similar to admissions\nofficers, except that instead of being arbitrary, their acceptance criteria\nare trained by a very tight feedback loop. If you accept a bad startup or\nreject a good one, you will usually know it within a year or two at the\nlatest, and often within a month.  \n  \n[6] I'm sure admissions officers are tired of reading applications from kids\nwho seem to have no personality beyond being willing to seem however they're\nsupposed to seem to get accepted. What they don't realize is that they are, in\na sense, looking in a mirror. The lack of authenticity in the applicants is a\nreflection of the arbitrariness of the application process. A dictator might\njust as well complain about the lack of authenticity in the people around him.  \n  \n[7] By good work, I don't mean morally good, but good in the sense in which a\ngood craftsman does good work.  \n  \n[8] There are borderline cases where it's hard to say which category a test\nfalls in. For example, is raising venture capital like college admissions, or\nis it like selling to a customer?  \n  \n[9] Note that a good test is merely one that's unhackable. Good here doesn't\nmean morally good, but good in the sense of working well. The difference\nbetween fields with bad tests and good ones is not that the former are bad and\nthe latter are good, but that the former are bogus and the latter aren't. But\nthose two measures are not unrelated. As Tara Ploughman said, the path from\ngood to evil goes through bogus.  \n  \n[10] People who think the recent increase in [_economic\ninequality_](ineq.html) is due to changes in tax policy seem very naive to\nanyone with experience in startups. Different people are getting rich now than\nused to, and they're getting much richer than mere tax savings could make\nthem.  \n  \n[11] Note to tiger parents: you may think you're training your kids to win,\nbut if you're training them to win by hacking bad tests, you are, as parents\nso often do, training them to fight the last war.  \n  \n  \n  \n**Thanks** to Austen Allred, Trevor Blackwell, Patrick Collison, Jessica\nLivingston, Robert Morris, and Harj Taggar for reading drafts of this.  \n  \n\nMay 2008  \n  \nAdults lie constantly to kids. I'm not saying we should stop, but I think we\nshould at least examine which lies we tell and why.  \n  \nThere may also be a benefit to us. We were all lied to as kids, and some of\nthe lies we were told still affect us. So by studying the ways adults lie to\nkids, we may be able to clear our heads of lies we were told.  \n  \nI'm using the word \"lie\" in a very general sense: not just overt falsehoods,\nbut also all the more subtle ways we mislead kids. Though \"lie\" has negative\nconnotations, I don't mean to suggest we should never do this\u2014just that we\nshould pay attention when we do. [1]  \n  \nOne of the most remarkable things about the way we lie to kids is how broad\nthe conspiracy is. All adults know what their culture lies to kids about:\nthey're the questions you answer \"Ask your parents.\" If a kid asked who won\nthe World Series in 1982 or what the atomic weight of carbon was, you could\njust tell him. But if a kid asks you \"Is there a God?\" or \"What's a\nprostitute?\" you'll probably say \"Ask your parents.\"  \n  \nSince we all agree, kids see few cracks in the view of the world presented to\nthem. The biggest disagreements are between parents and schools, but even\nthose are small. Schools are careful what they say about controversial topics,\nand if they do contradict what parents want their kids to believe, parents\neither pressure the school into keeping\n[quiet](http://www.google.com/search?q=parents+complain+inappropriate+book) or\nmove their kids to a new school.  \n  \nThe conspiracy is so thorough that most kids who discover it do so only by\ndiscovering internal contradictions in what they're told. It can be traumatic\nfor the ones who wake up during the operation. Here's what happened to\nEinstein:\n\n> Through the reading of popular scientific books I soon reached the\n> conviction that much in the stories of the Bible could not be true. The\n> consequence was a positively fanatic freethinking coupled with the\n> impression that youth is intentionally being deceived by the state through\n> lies: it was a crushing impression. [2]\n\nI remember that feeling. By 15 I was convinced the world was corrupt from end\nto end. That's why movies like _The Matrix_ have such resonance. Every kid\ngrows up in a fake world. In a way it would be easier if the forces behind it\nwere as clearly differentiated as a bunch of evil machines, and one could make\na clean break just by taking a pill.  \n  \n**Protection**  \n  \nIf you ask adults why they lie to kids, the most common reason they give is to\nprotect them. And kids do need protecting. The environment you want to create\nfor a newborn child will be quite unlike the streets of a big city.  \n  \nThat seems so obvious it seems wrong to call it a lie. It's certainly not a\nbad lie to tell, to give a baby the impression the world is quiet and warm and\nsafe. But this harmless type of lie can turn sour if left unexamined.  \n  \nImagine if you tried to keep someone in as protected an environment as a\nnewborn till age 18. To mislead someone so grossly about the world would seem\nnot protection but abuse. That's an extreme example, of course; when parents\ndo that sort of thing it becomes national news. But you see the same problem\non a smaller scale in the malaise teenagers feel in suburbia.  \n  \nThe main purpose of suburbia is to provide a protected environment for\nchildren to grow up in. And it seems great for 10 year olds. I liked living in\nsuburbia when I was 10. I didn't notice how sterile it was. My whole world was\nno bigger than a few friends' houses I bicycled to and some woods I ran around\nin. On a log scale I was midway between crib and globe. A suburban street was\njust the right size. But as I grew older, suburbia started to feel\nsuffocatingly fake.  \n  \nLife can be pretty good at 10 or 20, but it's often frustrating at 15\\. This\nis too big a problem to solve here, but certainly one reason life sucks at 15\nis that kids are trapped in a world designed for 10 year olds.  \n  \nWhat do parents hope to protect their children from by raising them in\nsuburbia? A friend who moved out of Manhattan said merely that her 3 year old\ndaughter \"saw too much.\" Off the top of my head, that might include: people\nwho are high or drunk, poverty, madness, gruesome medical conditions, sexual\nbehavior of various degrees of oddness, and violent anger.  \n  \nI think it's the anger that would worry me most if I had a 3 year old. I was\n29 when I moved to New York and I was surprised even then. I wouldn't want a 3\nyear old to see some of the disputes I saw. It would be too frightening. A lot\nof the things adults conceal from smaller children, they conceal because\nthey'd be frightening, not because they want to conceal the existence of such\nthings. Misleading the child is just a byproduct.  \n  \nThis seems one of the most justifiable types of lying adults do to kids. But\nbecause the lies are indirect we don't keep a very strict accounting of them.\nParents know they've concealed the facts about sex, and many at some point sit\ntheir kids down and explain more. But few tell their kids about the\ndifferences between the real world and the cocoon they grew up in. Combine\nthis with the confidence parents try to instill in their kids, and every year\nyou get a new crop of 18 year olds who think they know how to run the world.  \n  \nDon't all 18 year olds think they know how to run the world? Actually this\nseems to be a recent innovation, no more than about 100 years old. In\npreindustrial times teenage kids were junior members of the adult world and\ncomparatively well aware of their shortcomings. They could see they weren't as\nstrong or skillful as the village smith. In past times people lied to kids\nabout some things more than we do now, but the lies implicit in an artificial,\nprotected environment are a recent invention. Like a lot of new inventions,\nthe rich got this first. Children of kings and great magnates were the first\nto grow up out of touch with the world. Suburbia means half the population can\nlive like kings in that respect.  \n  \n**Sex (and Drugs)**  \n  \nI'd have different worries about raising teenage kids in New York. I'd worry\nless about what they'd see, and more about what they'd do. I went to college\nwith a lot of kids who grew up in Manhattan, and as a rule they seemed pretty\njaded. They seemed to have lost their virginity at an average of about 14 and\nby college had tried more drugs than I'd even heard of.  \n  \nThe reasons parents don't want their teenage kids having sex are complex.\nThere are some obvious dangers: pregnancy and sexually transmitted diseases.\nBut those aren't the only reasons parents don't want their kids having sex.\nThe average parents of a 14 year old girl would hate the idea of her having\nsex even if there were zero risk of pregnancy or sexually transmitted\ndiseases.  \n  \nKids can probably sense they aren't being told the whole story. After all,\npregnancy and sexually transmitted diseases are just as much a problem for\nadults, and they have sex.  \n  \nWhat really bothers parents about their teenage kids having sex? Their dislike\nof the idea is so visceral it's probably inborn. But if it's inborn it should\nbe universal, and there are plenty of societies where parents don't mind if\ntheir teenage kids have sex\u2014indeed, where it's normal for 14 year olds to\nbecome mothers. So what's going on? There does seem to be a universal taboo\nagainst sex with prepubescent children. One can imagine evolutionary reasons\nfor that. And I think this is the main reason parents in industrialized\nsocieties dislike teenage kids having sex. They still think of them as\nchildren, even though biologically they're not, so the taboo against child sex\nstill has force.  \n  \nOne thing adults conceal about sex they also conceal about drugs: that it can\ncause great pleasure. That's what makes sex and drugs so dangerous. The desire\nfor them can cloud one's judgement\u2014which is especially frightening when the\njudgement being clouded is the already wretched judgement of a teenage kid.  \n  \nHere parents' desires conflict. Older societies told kids they had bad\njudgement, but modern parents want their children to be confident. This may\nwell be a better plan than the old one of putting them in their place, but it\nhas the side effect that after having implicitly lied to kids about how good\ntheir judgement is, we then have to lie again about all the things they might\nget into trouble with if they believed us.  \n  \nIf parents told their kids the truth about sex and drugs, it would be: the\nreason you should avoid these things is that you have lousy judgement. People\nwith twice your experience still get burned by them. But this may be one of\nthose cases where the truth wouldn't be convincing, because one of the\nsymptoms of bad judgement is believing you have good judgement. When you're\ntoo weak to lift something, you can tell, but when you're making a decision\nimpetuously, you're all the more sure of it.  \n  \n**Innocence**  \n  \nAnother reason parents don't want their kids having sex is that they want to\nkeep them innocent. Adults have a certain model of how kids are supposed to\nbehave, and it's different from what they expect of other adults.  \n  \nOne of the most obvious differences is the words kids are allowed to use. Most\nparents use words when talking to other adults that they wouldn't want their\nkids using. They try to hide even the existence of these words for as long as\nthey can. And this is another of those conspiracies everyone participates in:\neveryone knows you're not supposed to swear in front of kids.  \n  \nI've never heard more different explanations for anything parents tell kids\nthan why they shouldn't swear. Every parent I know forbids their children to\nswear, and yet no two of them have the same justification. It's clear most\nstart with not wanting kids to swear, then make up the reason afterward.  \n  \nSo my theory about what's going on is that the _function_ of swearwords is to\nmark the speaker as an adult. There's no difference in the meaning of \"shit\"\nand \"poopoo.\" So why should one be ok for kids to say and one forbidden? The\nonly explanation is: by definition. [3]  \n  \nWhy does it bother adults so much when kids do things reserved for adults? The\nidea of a foul-mouthed, cynical 10 year old leaning against a lamppost with a\ncigarette hanging out of the corner of his mouth is very disconcerting. But\nwhy?  \n  \nOne reason we want kids to be innocent is that we're programmed to like\ncertain kinds of helplessness. I've several times heard mothers say they\ndeliberately refrained from correcting their young children's\nmispronunciations because they were so cute. And if you think about it,\ncuteness is helplessness. Toys and cartoon characters meant to be cute always\nhave clueless expressions and stubby, ineffectual limbs.  \n  \nIt's not surprising we'd have an inborn desire to love and protect helpless\ncreatures, considering human offspring are so helpless for so long. Without\nthe helplessness that makes kids cute, they'd be very annoying. They'd merely\nseem like incompetent adults. But there's more to it than that. The reason our\nhypothetical jaded 10 year old bothers me so much is not just that he'd be\nannoying, but that he'd have cut off his prospects for growth so early. To be\njaded you have to think you know how the world works, and any theory a 10 year\nold had about that would probably be a pretty narrow one.  \n  \nInnocence is also open-mindedness. We want kids to be innocent so they can\ncontinue to learn. Paradoxical as it sounds, there are some kinds of knowledge\nthat get in the way of other kinds of knowledge. If you're going to learn that\nthe world is a brutal place full of people trying to take advantage of one\nanother, you're better off learning it last. Otherwise you won't bother\nlearning much more.  \n  \nVery smart adults often seem unusually innocent, and I don't think this is a\ncoincidence. I think they've deliberately avoided learning about certain\nthings. Certainly I do. I used to think I wanted to know everything. Now I\nknow I don't.  \n  \n**Death**  \n  \nAfter sex, death is the topic adults lie most conspicuously about to kids. Sex\nI believe they conceal because of deep taboos. But why do we conceal death\nfrom kids? Probably because small children are particularly horrified by it.\nThey want to feel safe, and death is the ultimate threat.  \n  \nOne of the most spectacular lies our parents told us was about the death of\nour first cat. Over the years, as we asked for more details, they were\ncompelled to invent more, so the story grew quite elaborate. The cat had died\nat the vet's office. Of what? Of the anaesthesia itself. Why was the cat at\nthe vet's office? To be fixed. And why had such a routine operation killed it?\nIt wasn't the vet's fault; the cat had a congenitally weak heart; the\nanaesthesia was too much for it; but there was no way anyone could have known\nthis in advance. It was not till we were in our twenties that the truth came\nout: my sister, then about three, had accidentally stepped on the cat and\nbroken its back.  \n  \nThey didn't feel the need to tell us the cat was now happily in cat heaven. My\nparents never claimed that people or animals who died had \"gone to a better\nplace,\" or that we'd meet them again. It didn't seem to harm us.  \n  \nMy grandmother told us an edited version of the death of my grandfather. She\nsaid they'd been sitting reading one day, and when she said something to him,\nhe didn't answer. He seemed to be asleep, but when she tried to rouse him, she\ncouldn't. \"He was gone.\" Having a heart attack sounded like falling asleep.\nLater I learned it hadn't been so neat, and the heart attack had taken most of\na day to kill him.  \n  \nAlong with such outright lies, there must have been a lot of changing the\nsubject when death came up. I can't remember that, of course, but I can infer\nit from the fact that I didn't really grasp I was going to die till I was\nabout 19. How could I have missed something so obvious for so long? Now that\nI've seen parents managing the subject, I can see how: questions about death\nare gently but firmly turned aside.  \n  \nOn this topic, especially, they're met half-way by kids. Kids often want to be\nlied to. They want to believe they're living in a comfortable, safe world as\nmuch as their parents want them to believe it. [4]  \n  \n**Identity**  \n  \nSome parents feel a strong adherence to an ethnic or religious group and want\ntheir kids to feel it too. This usually requires two different kinds of lying:\nthe first is to tell the child that he or she is an X, and the second is\nwhatever specific lies Xes differentiate themselves by believing. [5]  \n  \nTelling a child they have a particular ethnic or religious identity is one of\nthe stickiest things you can tell them. Almost anything else you tell a kid,\nthey can change their mind about later when they start to think for\nthemselves. But if you tell a kid they're a member of a certain group, that\nseems nearly impossible to shake.  \n  \nThis despite the fact that it can be one of the most premeditated lies parents\ntell. When parents are of different religions, they'll often agree between\nthemselves that their children will be \"raised as Xes.\" And it works. The kids\nobligingly grow up considering themselves as Xes, despite the fact that if\ntheir parents had chosen the other way, they'd have grown up considering\nthemselves as Ys.  \n  \nOne reason this works so well is the second kind of lie involved. The truth is\ncommon property. You can't distinguish your group by doing things that are\nrational, and believing things that are true. If you want to set yourself\napart from other people, you have to do things that are arbitrary, and believe\nthings that are false. And after having spent their whole lives doing things\nthat are arbitrary and believing things that are false, and being regarded as\nodd by \"outsiders\" on that account, the cognitive dissonance pushing children\nto regard themselves as Xes must be enormous. If they aren't an X, why are\nthey attached to all these arbitrary beliefs and customs? If they aren't an X,\nwhy do all the non-Xes call them one?  \n  \nThis form of lie is not without its uses. You can use it to carry a payload of\nbeneficial beliefs, and they will also become part of the child's identity.\nYou can tell the child that in addition to never wearing the color yellow,\nbelieving the world was created by a giant rabbit, and always snapping their\nfingers before eating fish, Xes are also particularly honest and industrious.\nThen X children will grow up feeling it's part of their identity to be honest\nand industrious.  \n  \nThis probably accounts for a lot of the spread of modern religions, and\nexplains why their doctrines are a combination of the useful and the bizarre.\nThe bizarre half is what makes the religion stick, and the useful half is the\npayload. [6]  \n  \n**Authority**  \n  \nOne of the least excusable reasons adults lie to kids is to maintain power\nover them. Sometimes these lies are truly sinister, like a child molester\ntelling his victims they'll get in trouble if they tell anyone what happened\nto them. Others seem more innocent; it depends how badly adults lie to\nmaintain their power, and what they use it for.  \n  \nMost adults make some effort to conceal their flaws from children. Usually\ntheir motives are mixed. For example, a father who has an affair generally\nconceals it from his children. His motive is partly that it would worry them,\npartly that this would introduce the topic of sex, and partly (a larger part\nthan he would admit) that he doesn't want to tarnish himself in their eyes.  \n  \nIf you want to learn what lies are told to kids, read almost any book written\nto teach them about \"issues.\" [7] Peter Mayle wrote one called _Why Are We\nGetting a Divorce?_ It begins with the three most important things to remember\nabout divorce, one of which is:\n\n> You shouldn't put the blame on one parent, because divorce is never only one\n> person's fault. [8]\n\nReally? When a man runs off with his secretary, is it always partly his wife's\nfault? But I can see why Mayle might have said this. Maybe it's more important\nfor kids to respect their parents than to know the truth about them.  \n  \nBut because adults conceal their flaws, and at the same time insist on high\nstandards of behavior for kids, a lot of kids grow up feeling they fall\nhopelessly short. They walk around feeling horribly evil for having used a\nswearword, while in fact most of the adults around them are doing much worse\nthings.  \n  \nThis happens in intellectual as well as moral questions. The more confident\npeople are, the more willing they seem to be to answer a question \"I don't\nknow.\" Less confident people feel they have to have an answer or they'll look\nbad. My parents were pretty good about admitting when they didn't know things,\nbut I must have been told a lot of lies of this type by teachers, because I\nrarely heard a teacher say \"I don't know\" till I got to college. I remember\nbecause it was so surprising to hear someone say that in front of a class.  \n  \nThe first hint I had that teachers weren't omniscient came in sixth grade,\nafter my father contradicted something I'd learned in school. When I protested\nthat the teacher had said the opposite, my father replied that the guy had no\nidea what he was talking about\u2014that he was just an elementary school teacher,\nafter all.  \n  \n_Just_ a teacher? The phrase seemed almost grammatically ill-formed. Didn't\nteachers know everything about the subjects they taught? And if not, why were\nthey the ones teaching us?  \n  \nThe sad fact is, US public school teachers don't generally understand the\nstuff they're teaching very well. There are some sterling exceptions, but as a\nrule people planning to go into teaching rank academically near the bottom of\nthe college population. So the fact that I still thought at age 11 that\nteachers were infallible shows what a job the system must have done on my\nbrain.  \n  \n**School**  \n  \nWhat kids get taught in school is a complex mix of lies. The most excusable\nare those told to simplify ideas to make them easy to learn. The problem is, a\nlot of propaganda gets slipped into the curriculum in the name of\nsimplification.  \n  \nPublic school textbooks represent a compromise between what various powerful\ngroups want kids to be told. The lies are rarely overt. Usually they consist\neither of omissions or of over-emphasizing certain topics at the expense of\nothers. The view of history we got in elementary school was a crude\nhagiography, with at least one representative of each powerful group.  \n  \nThe famous scientists I remember were Einstein, Marie Curie, and George\nWashington Carver. Einstein was a big deal because his work led to the atom\nbomb. Marie Curie was involved with X-rays. But I was mystified about Carver.\nHe seemed to have done stuff with peanuts.  \n  \nIt's obvious now that he was on the list because he was black (and for that\nmatter that Marie Curie was on it because she was a woman), but as a kid I was\nconfused for years about him. I wonder if it wouldn't have been better just to\ntell us the truth: that there weren't any famous black scientists. Ranking\nGeorge Washington Carver with Einstein misled us not only about science, but\nabout the obstacles blacks faced in his time.  \n  \nAs subjects got softer, the lies got more frequent. By the time you got to\npolitics and recent history, what we were taught was pretty much pure\npropaganda. For example, we were taught to regard political leaders as\nsaints\u2014especially the recently martyred Kennedy and King. It was astonishing\nto learn later that they'd both been serial womanizers, and that Kennedy was a\nspeed freak to boot. (By the time King's plagiarism emerged, I'd lost the\nability to be surprised by the misdeeds of famous people.)  \n  \nI doubt you could teach kids recent history without teaching them lies,\nbecause practically everyone who has anything to say about it has some kind of\nspin to put on it. Much recent history _consists_ of spin. It would probably\nbe better just to teach them metafacts like that.  \n  \nProbably the biggest lie told in schools, though, is that the way to succeed\nis through following \"the rules.\" In fact most such rules are just hacks to\nmanage large groups efficiently.  \n  \n**Peace**  \n  \nOf all the reasons we lie to kids, the most powerful is probably the same\nmundane reason they lie to us.  \n  \nOften when we lie to people it's not part of any conscious strategy, but\nbecause they'd react violently to the truth. Kids, almost by definition, lack\nself-control. They react violently to things\u2014and so they get lied to a lot.\n[9]  \n  \nA few Thanksgivings ago, a friend of mine found himself in a situation that\nperfectly illustrates the complex motives we have when we lie to kids. As the\nroast turkey appeared on the table, his alarmingly perceptive 5 year old son\nsuddenly asked if the turkey had wanted to die. Foreseeing disaster, my friend\nand his wife rapidly improvised: yes, the turkey had wanted to die, and in\nfact had lived its whole life with the aim of being their Thanksgiving dinner.\nAnd that (phew) was the end of that.  \n  \nWhenever we lie to kids to protect them, we're usually also lying to keep the\npeace.  \n  \nOne consequence of this sort of calming lie is that we grow up thinking\nhorrible things are normal. It's hard for us to feel a sense of urgency as\nadults over something we've literally been trained not to worry about. When I\nwas about 10 I saw a documentary on pollution that put me into a panic. It\nseemed the planet was being irretrievably ruined. I went to my mother\nafterward to ask if this was so. I don't remember what she said, but she made\nme feel better, so I stopped worrying about it.  \n  \nThat was probably the best way to handle a frightened 10 year old. But we\nshould understand the price. This sort of lie is one of the main reasons bad\nthings persist: we're all trained to ignore them.  \n  \n**Detox**  \n  \nA sprinter in a race almost immediately enters a state called \"oxygen debt.\"\nHis body switches to an emergency source of energy that's faster than regular\naerobic respiration. But this process builds up waste products that ultimately\nrequire extra oxygen to break down, so at the end of the race he has to stop\nand pant for a while to recover.  \n  \nWe arrive at adulthood with a kind of truth debt. We were told a lot of lies\nto get us (and our parents) through our childhood. Some may have been\nnecessary. Some probably weren't. But we all arrive at adulthood with heads\nfull of lies.  \n  \nThere's never a point where the adults sit you down and explain all the lies\nthey told you. They've forgotten most of them. So if you're going to clear\nthese lies out of your head, you're going to have to do it yourself.  \n  \nFew do. Most people go through life with bits of packing material adhering to\ntheir minds and never know it. You probably never can completely undo the\neffects of lies you were told as a kid, but it's worth trying. I've found that\nwhenever I've been able to undo a lie I was told, a lot of other things fell\ninto place.  \n  \nFortunately, once you arrive at adulthood you get a valuable new resource you\ncan use to figure out what lies you were told. You're now one of the liars.\nYou get to watch behind the scenes as adults spin the world for the next\ngeneration of kids.  \n  \nThe first step in clearing your head is to realize how far you are from a\nneutral observer. When I left high school I was, I thought, a complete\nskeptic. I'd realized high school was crap. I thought I was ready to question\neverything I knew. But among the many other things I was ignorant of was how\nmuch debris there already was in my head. It's not enough to consider your\nmind a blank slate. You have to consciously erase it.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] One reason I stuck with such a brutally simple word is that the lies we\ntell kids are probably not quite as harmless as we think. If you look at what\nadults told children in the past, it's shocking how much they lied to them.\nLike us, they did it with the best intentions. So if we think we're as open as\none could reasonably be with children, we're probably fooling ourselves. Odds\nare people in 100 years will be as shocked at some of the lies we tell as we\nare at some of the lies people told 100 years ago.  \n  \nI can't predict which these will be, and I don't want to write an essay that\nwill seem dumb in 100 years. So instead of using special euphemisms for lies\nthat seem excusable according to present fashions, I'm just going to call all\nour lies lies.  \n  \n(I have omitted one type: lies told to play games with kids' credulity. These\nrange from \"make-believe,\" which is not really a lie because it's told with a\nwink, to the frightening lies told by older siblings. There's not much to say\nabout these: I wouldn't want the first type to go away, and wouldn't expect\nthe second type to.)  \n  \n[2] Calaprice, Alice (ed.), _The Quotable Einstein_ , Princeton University\nPress, 1996.  \n  \n[3] If you ask parents why kids shouldn't swear, the less educated ones\nusually reply with some question-begging answer like \"it's inappropriate,\"\nwhile the more educated ones come up with elaborate rationalizations. In fact\nthe less educated parents seem closer to the truth.  \n  \n[4] As a friend with small children pointed out, it's easy for small children\nto consider themselves immortal, because time seems to pass so slowly for\nthem. To a 3 year old, a day feels like a month might to an adult. So 80 years\nsounds to him like 2400 years would to us.  \n  \n[5] I realize I'm going to get endless grief for classifying religion as a\ntype of lie. Usually people skirt that issue with some equivocation implying\nthat lies believed for a sufficiently long time by sufficiently large numbers\nof people are immune to the usual standards for truth. But because I can't\npredict which lies future generations will consider inexcusable, I can't\nsafely omit any type we tell. Yes, it seems unlikely that religion will be out\nof fashion in 100 years, but no more unlikely than it would have seemed to\nsomeone in 1880 that schoolchildren in 1980 would be taught that masturbation\nwas perfectly normal and not to feel guilty about it.  \n  \n[6] Unfortunately the payload can consist of bad customs as well as good ones.\nFor example, there are certain qualities that some groups in America consider\n\"acting white.\" In fact most of them could as accurately be called \"acting\nJapanese.\" There's nothing specifically white about such customs. They're\ncommon to all cultures with long traditions of living in cities. So it is\nprobably a losing bet for a group to consider behaving the opposite way as\npart of its identity.  \n  \n[7] In this context, \"issues\" basically means \"things we're going to lie to\nthem about.\" That's why there's a special name for these topics.  \n  \n[8] Mayle, Peter, _Why Are We Getting a Divorce?_ , Harmony, 1988.  \n  \n[9] The ironic thing is, this is also the main reason kids lie to adults. If\nyou freak out when people tell you alarming things, they won't tell you them.\nTeenagers don't tell their parents what happened that night they were supposed\nto be staying at a friend's house for the same reason parents don't tell 5\nyear olds the truth about the Thanksgiving turkey. They'd freak if they knew.  \n  \n**Thanks** to Sam Altman, Marc Andreessen, Trevor Blackwell, Patrick Collison,\nJessica Livingston, Jackie McDonough, Robert Morris, and David Sloo for\nreading drafts of this. And since there are some controversial ideas here, I\nshould add that none of them agreed with everything in it.  \n  \n\nAfter a link to [Beating the Averages](avg.html) was posted on slashdot, some\nreaders wanted to hear in more detail about the specific technical advantages\nwe got from using Lisp in Viaweb. For those who are interested, here are some\nexcerpts from a talk I gave in April 2001 at BBN Labs in Cambridge, MA.  \n  \n\nMarch 2005  \n  \nAll the best [hackers](gba.html) I know are gradually switching to Macs. My\nfriend Robert said his whole research group at MIT recently bought themselves\nPowerbooks. These guys are not the graphic designers and grandmas who were\nbuying Macs at Apple's low point in the mid 1990s. They're about as hardcore\nOS hackers as you can get.  \n  \nThe reason, of course, is OS X. Powerbooks are beautifully designed and run\nFreeBSD. What more do you need to know?  \n  \nI got a Powerbook at the end of last year. When my IBM Thinkpad's hard disk\ndied soon after, it became my only laptop. And when my friend Trevor showed up\nat my house recently, he was carrying a Powerbook [identical](tlbmac.html) to\nmine.  \n  \nFor most of us, it's not a switch to Apple, but a return. Hard as this was to\nbelieve in the mid 90s, the Mac was in its time the canonical hacker's\ncomputer.  \n  \nIn the fall of 1983, the professor in one of my college CS classes got up and\nannounced, like a prophet, that there would soon be a computer with half a\nMIPS of processing power that would fit under an airline seat and cost so\nlittle that we could save enough to buy one from a summer job. The whole room\ngasped. And when the Mac appeared, it was even better than we'd hoped. It was\nsmall and powerful and cheap, as promised. But it was also something we'd\nnever considered a computer could be: fabulously well [designed](taste.html).  \n  \nI had to have one. And I wasn't alone. In the mid to late 1980s, all the\nhackers I knew were either writing software for the Mac, or wanted to. Every\nfuton sofa in Cambridge seemed to have the same fat white book lying open on\nit. If you turned it over, it said \"Inside Macintosh.\"  \n  \nThen came Linux and FreeBSD, and hackers, who follow the most powerful OS\nwherever it leads, found themselves switching to Intel boxes. If you cared\nabout design, you could buy a Thinkpad, which was at least not actively\nrepellent, if you could get the Intel and Microsoft\n[stickers](designedforwindows.html) off the front. [1]  \n  \nWith OS X, the hackers are back. When I walked into the Apple store in\nCambridge, it was like coming home. Much was changed, but there was still that\nApple coolness in the air, that feeling that the show was being run by someone\nwho really cared, instead of random corporate deal-makers.  \n  \nSo what, the business world may say. Who cares if hackers like Apple again?\nHow big is the hacker market, after all?  \n  \nQuite small, but important out of proportion to its size. When it comes to\ncomputers, what hackers are doing now, everyone will be doing in ten years.\nAlmost all technology, from Unix to bitmapped displays to the Web, became\npopular first within CS departments and research labs, and gradually spread to\nthe rest of the world.  \n  \nI remember telling my father back in 1986 that there was a new kind of\ncomputer called a Sun that was a serious Unix machine, but so small and cheap\nthat you could have one of your own to sit in front of, instead of sitting in\nfront of a VT100 connected to a single central Vax. Maybe, I suggested, he\nshould buy some stock in this company. I think he really wishes he'd listened.  \n  \nIn 1994 my friend Koling wanted to talk to his girlfriend in Taiwan, and to\nsave long-distance bills he wrote some software that would convert sound to\ndata packets that could be sent over the Internet. We weren't sure at the time\nwhether this was a proper use of the Internet, which was still then a quasi-\ngovernment entity. What he was doing is now called VoIP, and it is a huge and\nrapidly growing business.  \n  \nIf you want to know what ordinary people will be doing with computers in ten\nyears, just walk around the CS department at a good university. Whatever\nthey're doing, you'll be doing.  \n  \nIn the matter of \"platforms\" this tendency is even more pronounced, because\nnovel software originates with [great hackers](gh.html), and they tend to\nwrite it first for whatever computer they personally use. And software sells\nhardware. Many if not most of the initial sales of the Apple II came from\npeople who bought one to run VisiCalc. And why did Bricklin and Frankston\nwrite VisiCalc for the Apple II? Because they personally liked it. They could\nhave chosen any machine to make into a star.  \n  \nIf you want to attract hackers to write software that will sell your hardware,\nyou have to make it something that they themselves use. It's not enough to\nmake it \"open.\" It has to be open and good.  \n  \nAnd open and good is what Macs are again, finally. The intervening years have\ncreated a situation that is, as far as I know, without precedent: Apple is\npopular at the low end and the high end, but not in the middle. My seventy\nyear old mother has a Mac laptop. My friends with PhDs in computer science\nhave Mac laptops. [2] And yet Apple's overall market share is still small.  \n  \nThough unprecedented, I predict this situation is also temporary.  \n  \nSo Dad, there's this company called Apple. They make a new kind of computer\nthat's as well designed as a Bang & Olufsen stereo system, and underneath is\nthe best Unix machine you can buy. Yes, the price to earnings ratio is kind of\nhigh, but I think a lot of people are going to want these.  \n  \n  \n  \n**Notes**  \n  \n[1] These horrible stickers are much like the intrusive ads popular on pre-\nGoogle search engines. They say to the customer: you are unimportant. We care\nabout Intel and Microsoft, not you.  \n  \n[2] [Y Combinator](http://ycombinator.com) is (we hope) visited mostly by\nhackers. The proportions of OSes are: Windows 66.4%, Macintosh 18.8%, Linux\n11.4%, and FreeBSD 1.5%. The Mac number is a big change from what it would\nhave been five years ago.  \n  \n  \n  \n\n\"...the mere consciousness of an engagement will sometimes worry a whole day.\"  \n  \n\u0096 Charles Dickens  \n  \nJuly 2009  \n  \nOne reason programmers dislike meetings so much is that they're on a different\ntype of schedule from other people. Meetings cost them more.  \n  \nThere are two types of schedule, which I'll call the manager's schedule and\nthe maker's schedule. The manager's schedule is for bosses. It's embodied in\nthe traditional appointment book, with each day cut into one hour intervals.\nYou can block off several hours for a single task if you need to, but by\ndefault you change what you're doing every hour.  \n  \nWhen you use time that way, it's merely a practical problem to meet with\nsomeone. Find an open slot in your schedule, book them, and you're done.  \n  \nMost powerful people are on the manager's schedule. It's the schedule of\ncommand. But there's another way of using time that's common among people who\nmake things, like programmers and writers. They generally prefer to use time\nin units of half a day at least. You can't write or program well in units of\nan hour. That's barely enough time to get started.  \n  \nWhen you're operating on the maker's schedule, meetings are a disaster. A\nsingle meeting can blow a whole afternoon, by breaking it into two pieces each\ntoo small to do anything hard in. Plus you have to remember to go to the\nmeeting. That's no problem for someone on the manager's schedule. There's\nalways something coming on the next hour; the only question is what. But when\nsomeone on the maker's schedule has a meeting, they have to think about it.  \n  \nFor someone on the maker's schedule, having a meeting is like throwing an\nexception. It doesn't merely cause you to switch from one task to another; it\nchanges the mode in which you work.  \n  \nI find one meeting can sometimes affect a whole day. A meeting commonly blows\nat least half a day, by breaking up a morning or afternoon. But in addition\nthere's sometimes a cascading effect. If I know the afternoon is going to be\nbroken up, I'm slightly less likely to start something ambitious in the\nmorning. I know this may sound oversensitive, but if you're a maker, think of\nyour own case. Don't your spirits rise at the thought of having an entire day\nfree to work, with no appointments at all? Well, that means your spirits are\ncorrespondingly depressed when you don't. And ambitious projects are by\ndefinition close to the limits of your capacity. A small decrease in morale is\nenough to kill them off.  \n  \nEach type of schedule works fine by itself. Problems arise when they meet.\nSince most powerful people operate on the manager's schedule, they're in a\nposition to make everyone resonate at their frequency if they want to. But the\nsmarter ones restrain themselves, if they know that some of the people working\nfor them need long chunks of time to work in.  \n  \nOur case is an unusual one. Nearly all investors, including all VCs I know,\noperate on the manager's schedule. But [Y Combinator](http://ycombinator.com)\nruns on the maker's schedule. Rtm and Trevor and I do because we always have,\nand Jessica does too, mostly, because she's gotten into sync with us.  \n  \nI wouldn't be surprised if there start to be more companies like us. I suspect\nfounders may increasingly be able to resist, or at least postpone, turning\ninto managers, just as a few decades ago they started to be able to resist\nswitching from jeans to suits.  \n  \nHow do we manage to advise so many startups on the maker's schedule? By using\nthe classic device for simulating the manager's schedule within the maker's:\noffice hours. Several times a week I set aside a chunk of time to meet\nfounders we've funded. These chunks of time are at the end of my working day,\nand I wrote a signup program that ensures all the appointments within a given\nset of office hours are clustered at the end. Because they come at the end of\nmy day these meetings are never an interruption. (Unless their working day\nends at the same time as mine, the meeting presumably interrupts theirs, but\nsince they made the appointment it must be worth it to them.) During busy\nperiods, office hours sometimes get long enough that they compress the day,\nbut they never interrupt it.  \n  \nWhen we were working on [our own startup](start.html), back in the 90s, I\nevolved another trick for partitioning the day. I used to program from dinner\ntill about 3 am every day, because at night no one could interrupt me. Then\nI'd sleep till about 11 am, and come in and work until dinner on what I called\n\"business stuff.\" I never thought of it in these terms, but in effect I had\ntwo workdays each day, one on the manager's schedule and one on the maker's.  \n  \nWhen you're operating on the manager's schedule you can do something you'd\nnever want to do on the maker's: you can have speculative meetings. You can\nmeet someone just to get to know one another. If you have an empty slot in\nyour schedule, why not? Maybe it will turn out you can help one another in\nsome way.  \n  \nBusiness people in Silicon Valley (and the whole world, for that matter) have\nspeculative meetings all the time. They're effectively free if you're on the\nmanager's schedule. They're so common that there's distinctive language for\nproposing them: saying that you want to \"grab coffee,\" for example.  \n  \nSpeculative meetings are terribly costly if you're on the maker's schedule,\nthough. Which puts us in something of a bind. Everyone assumes that, like\nother investors, we run on the manager's schedule. So they introduce us to\nsomeone they think we ought to meet, or send us an email proposing we grab\ncoffee. At this point we have two options, neither of them good: we can meet\nwith them, and lose half a day's work; or we can try to avoid meeting them,\nand probably offend them.  \n  \nTill recently we weren't clear in our own minds about the source of the\nproblem. We just took it for granted that we had to either blow our schedules\nor offend people. But now that I've realized what's going on, perhaps there's\na third option: to write something explaining the two types of schedule. Maybe\neventually, if the conflict between the manager's schedule and the maker's\nschedule starts to be more widely understood, it will become less of a\nproblem.  \n  \nThose of us on the maker's schedule are willing to compromise. We know we have\nto have some number of meetings. All we ask from those on the manager's\nschedule is that they understand the cost.  \n  \n  \n  \n  \n  \n**Thanks** to Sam Altman, Trevor Blackwell, Paul Buchheit, Jessica Livingston,\nand Robert Morris for reading drafts of this.  \n  \n  \n  \n**Related:**  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nJune 2006  \n  \n _(This essay is derived from talks at Usenix 2006 and Railsconf 2006.)_  \n  \nA couple years ago my friend Trevor and I went to look at the Apple garage. As\nwe stood there, he said that as a kid growing up in Saskatchewan he'd been\namazed at the dedication Jobs and Wozniak must have had to work in a garage.  \n  \n\"Those guys must have been freezing!\"  \n  \nThat's one of California's hidden advantages: the mild climate means there's\nlots of marginal space. In cold places that margin gets trimmed off. There's a\nsharper line between outside and inside, and only projects that are officially\nsanctioned \u2014 by organizations, or parents, or wives, or at least by oneself \u2014\nget proper indoor space. That raises the activation energy for new ideas. You\ncan't just tinker. You have to justify.  \n  \nSome of Silicon Valley's most famous companies began in garages: Hewlett-\nPackard in 1938, Apple in 1976, Google in 1998. In Apple's case the garage\nstory is a bit of an urban legend. Woz says all they did there was assemble\nsome computers, and that he did all the actual design of the Apple I and Apple\nII in his apartment or his cube at HP. [1] This was apparently too marginal\neven for Apple's PR people.  \n  \nBy conventional standards, Jobs and Wozniak were marginal people too.\nObviously they were smart, but they can't have looked good on paper. They were\nat the time a pair of college dropouts with about three years of school\nbetween them, and hippies to boot. Their previous business experience\nconsisted of making \"blue boxes\" to hack into the phone system, a business\nwith the rare distinction of being both illegal and unprofitable.  \n  \n**Outsiders**  \n  \nNow a startup operating out of a garage in Silicon Valley would feel part of\nan exalted tradition, like the poet in his garret, or the painter who can't\nafford to heat his studio and thus has to wear a beret indoors. But in 1976 it\ndidn't seem so cool. The world hadn't yet realized that starting a computer\ncompany was in the same category as being a writer or a painter. It hadn't\nbeen for long. Only in the preceding couple years had the dramatic fall in the\ncost of hardware allowed outsiders to compete.  \n  \nIn 1976, everyone looked down on a company operating out of a garage,\nincluding the founders. One of the first things Jobs did when they got some\nmoney was to rent office space. He wanted Apple to seem like a real company.  \n  \nThey already had something few real companies ever have: a fabulously well\ndesigned product. You'd think they'd have had more confidence. But I've talked\nto a lot of startup founders, and it's always this way. They've built\nsomething that's going to change the world, and they're worried about some nit\nlike not having proper business cards.  \n  \nThat's the paradox I want to explore: great new things often come from the\nmargins, and yet the people who discover them are looked down on by everyone,\nincluding themselves.  \n  \nIt's an old idea that new things come from the margins. I want to examine its\ninternal structure. Why do great ideas come from the margins? What kind of\nideas? And is there anything we can do to encourage the process?  \n  \n**Insiders**  \n  \nOne reason so many good ideas come from the margin is simply that there's so\nmuch of it. There have to be more outsiders than insiders, if insider means\nanything. If the number of outsiders is huge it will always seem as if a lot\nof ideas come from them, even if few do per capita. But I think there's more\ngoing on than this. There are real disadvantages to being an insider, and in\nsome kinds of work they can outweigh the advantages.  \n  \nImagine, for example, what would happen if the government decided to\ncommission someone to write an official Great American Novel. First there'd be\na huge ideological squabble over who to choose. Most of the best writers would\nbe excluded for having offended one side or the other. Of the remainder, the\nsmart ones would refuse such a job, leaving only a few with the wrong sort of\nambition. The committee would choose one at the height of his career \u2014 that\nis, someone whose best work was behind him \u2014 and hand over the project with\ncopious free advice about how the book should show in positive terms the\nstrength and diversity of the American people, etc, etc.  \n  \nThe unfortunate writer would then sit down to work with a huge weight of\nexpectation on his shoulders. Not wanting to blow such a public commission,\nhe'd play it safe. This book had better command respect, and the way to ensure\nthat would be to make it a tragedy. Audiences have to be enticed to laugh, but\nif you kill people they feel obliged to take you seriously. As everyone knows,\nAmerica plus tragedy equals the Civil War, so that's what it would have to be\nabout. When finally completed twelve years later, the book would be a 900-page\npastiche of existing popular novels \u2014 roughly _Gone with the Wind_ plus\n_Roots_. But its bulk and celebrity would make it a bestseller for a few\nmonths, until blown out of the water by a talk-show host's autobiography. The\nbook would be made into a movie and thereupon forgotten, except by the more\nwaspish sort of reviewers, among whom it would be a byword for bogusness like\nMilli Vanilli or _Battlefield Earth_.  \n  \nMaybe I got a little carried away with this example. And yet is this not at\neach point the way such a project would play out? The government knows better\nthan to get into the novel business, but in other fields where they have a\nnatural monopoly, like nuclear waste dumps, aircraft carriers, and regime\nchange, you'd find plenty of projects isomorphic to this one \u2014 and indeed,\nplenty that were less successful.  \n  \nThis little thought experiment suggests a few of the disadvantages of insider\nprojects: the selection of the wrong kind of people, the excessive scope, the\ninability to take risks, the need to seem serious, the weight of expectations,\nthe power of vested interests, the undiscerning audience, and perhaps most\ndangerous, the tendency of such work to become a duty rather than a pleasure.  \n  \n**Tests**  \n  \nA world with outsiders and insiders implies some kind of test for\ndistinguishing between them. And the trouble with most tests for selecting\nelites is that there are two ways to pass them: to be good at what they try to\nmeasure, and to be good at hacking the test itself.  \n  \nSo the first question to ask about a field is how honest its tests are,\nbecause this tells you what it means to be an outsider. This tells you how\nmuch to trust your instincts when you disagree with authorities, whether it's\nworth going through the usual channels to become one yourself, and perhaps\nwhether you want to work in this field at all.  \n  \nTests are least hackable when there are consistent standards for quality, and\nthe people running the test really care about its integrity. Admissions to PhD\nprograms in the hard sciences are fairly honest, for example. The professors\nwill get whoever they admit as their own grad students, so they try hard to\nchoose well, and they have a fair amount of data to go on. Whereas\nundergraduate admissions seem to be much more hackable.  \n  \nOne way to tell whether a field has consistent standards is the overlap\nbetween the leading practitioners and the people who teach the subject in\nuniversities. At one end of the scale you have fields like math and physics,\nwhere nearly all the teachers are among the best practitioners. In the middle\nare medicine, law, history, architecture, and computer science, where many\nare. At the bottom are business, literature, and the visual arts, where\nthere's almost no overlap between the teachers and the leading practitioners.\nIt's this end that gives rise to phrases like \"those who can't do, teach.\"  \n  \nIncidentally, this scale might be helpful in deciding what to study in\ncollege. When I was in college the rule seemed to be that you should study\nwhatever you were most interested in. But in retrospect you're probably better\noff studying something moderately interesting with someone who's good at it\nthan something very interesting with someone who isn't. You often hear people\nsay that you shouldn't major in business in college, but this is actually an\ninstance of a more general rule: don't learn things from teachers who are bad\nat them.  \n  \nHow much you should worry about being an outsider depends on the quality of\nthe insiders. If you're an amateur mathematician and think you've solved a\nfamous open problem, better go back and check. When I was in grad school, a\nfriend in the math department had the job of replying to people who sent in\nproofs of Fermat's last theorem and so on, and it did not seem as if he saw it\nas a valuable source of tips \u2014 more like manning a mental health hotline.\nWhereas if the stuff you're writing seems different from what English\nprofessors are interested in, that's not necessarily a problem.  \n  \n**Anti-Tests**  \n  \nWhere the method of selecting the elite is thoroughly corrupt, most of the\ngood people will be outsiders. In art, for example, the image of the poor,\nmisunderstood genius is not just one possible image of a great artist: it's\nthe _standard_ image. I'm not saying it's correct, incidentally, but it is\ntelling how well this image has stuck. You couldn't make a rap like that stick\nto math or medicine. [2]  \n  \nIf it's corrupt enough, a test becomes an anti-test, filtering out the people\nit should select by making them to do things only the wrong people would do.\n[Popularity](nerds.html) in high school seems to be such a test. There are\nplenty of similar ones in the grownup world. For example, rising up through\nthe hierarchy of the average big company demands an attention to politics few\nthoughtful people could spare. [3] Someone like Bill Gates can grow a company\nunder him, but it's hard to imagine him having the patience to climb the\ncorporate ladder at General Electric \u2014 or Microsoft, actually.  \n  \nIt's kind of strange when you think about it, because lord-of-the-flies\nschools and bureaucratic companies are both the default. There are probably a\nlot of people who go from one to the other and never realize the whole world\ndoesn't work this way.  \n  \nI think that's one reason big companies are so often blindsided by startups.\nPeople at big companies don't realize the extent to which they live in an\nenvironment that is one large, ongoing test for the wrong qualities.  \n  \nIf you're an outsider, your best chances for beating insiders are obviously in\nfields where corrupt tests select a lame elite. But there's a catch: if the\ntests are corrupt, your victory won't be recognized, at least in your\nlifetime. You may feel you don't need that, but history suggests it's\ndangerous to work in fields with corrupt tests. You may beat the insiders, and\nyet not do as good work, on an absolute scale, as you would in a field that\nwas more honest.  \n  \nStandards in art, for example, were almost as corrupt in the first half of the\neighteenth century as they are today. This was the era of those fluffy\nidealized portraits of countesses with their lapdogs. [Chardin](largilliere-\nchardin.html) decided to skip all that and paint ordinary things as he saw\nthem. He's now considered the best of that period \u2014 and yet not the equal of\nLeonardo or Bellini or Memling, who all had the additional encouragement of\nhonest standards.  \n  \nIt can be worth participating in a corrupt contest, however, if it's followed\nby another that isn't corrupt. For example, it would be worth competing with a\ncompany that can spend more than you on marketing, as long as you can survive\nto the next round, when customers compare your actual products. Similarly, you\nshouldn't be discouraged by the comparatively corrupt test of college\nadmissions, because it's followed immediately by less hackable tests. [4]  \n  \n**Risk**  \n  \nEven in a field with honest tests, there are still advantages to being an\noutsider. The most obvious is that outsiders have nothing to lose. They can do\nrisky things, and if they fail, so what? Few will even notice.  \n  \nThe eminent, on the other hand, are weighed down by their eminence. Eminence\nis like a suit: it impresses the wrong people, and it constrains the wearer.  \n  \nOutsiders should realize the advantage they have here. Being able to take\nrisks is hugely valuable. Everyone values safety too much, both the obscure\nand the eminent. No one wants to look like a fool. But it's very useful to be\nable to. If most of your ideas aren't stupid, you're probably being too\nconservative. You're not bracketing the problem.  \n  \nLord Acton said we should judge talent at its best and character at its worst.\nFor example, if you write one great book and ten bad ones, you still count as\na great writer \u2014 or at least, a better writer than someone who wrote eleven\nthat were merely good. Whereas if you're a quiet, law-abiding citizen most of\nthe time but occasionally cut someone up and bury them in your backyard,\nyou're a bad guy.  \n  \nAlmost everyone makes the mistake of treating ideas as if they were\nindications of character rather than talent \u2014 as if having a stupid idea made\nyou stupid. There's a huge weight of tradition advising us to play it safe.\n\"Even a fool is thought wise if he keeps silent,\" says the Old Testament\n(Proverbs 17:28).  \n  \nWell, that may be fine advice for a bunch of goatherds in Bronze Age\nPalestine. There conservatism would be the order of the day. But times have\nchanged. It might still be reasonable to stick with the Old Testament in\npolitical questions, but materially the world now has a lot more state.\nTradition is less of a guide, not just because things change faster, but\nbecause the space of possibilities is so large. The more complicated the world\ngets, the more valuable it is to be willing to look like a fool.  \n  \n**Delegation**  \n  \nAnd yet the more successful people become, the more heat they get if they\nscrew up \u2014 or even seem to screw up. In this respect, as in many others, the\neminent are prisoners of their own success. So the best way to understand the\nadvantages of being an outsider may be to look at the disadvantages of being\nan insider.  \n  \nIf you ask eminent people what's wrong with their lives, the first thing\nthey'll complain about is the lack of time. A friend of mine at Google is\nfairly high up in the company and went to work for them long before they went\npublic. In other words, he's now rich enough not to have to work. I asked him\nif he could still endure the annoyances of having a job, now that he didn't\nhave to. And he said that there weren't really any annoyances, except \u2014 and he\ngot a wistful look when he said this \u2014 that he got _so much email_.  \n  \nThe eminent feel like everyone wants to take a bite out of them. The problem\nis so widespread that people pretending to be eminent do it by pretending to\nbe overstretched.  \n  \nThe lives of the eminent become scheduled, and that's not good for thinking.\nOne of the great advantages of being an outsider is long, uninterrupted blocks\nof time. That's what I remember about grad school: apparently endless supplies\nof time, which I spent worrying about, but not writing, my dissertation.\nObscurity is like health food \u2014 unpleasant, perhaps, but good for you. Whereas\nfame tends to be like the alcohol produced by fermentation. When it reaches a\ncertain concentration, it kills off the yeast that produced it.  \n  \nThe eminent generally respond to the shortage of time by turning into\nmanagers. They don't have time to work. They're surrounded by junior people\nthey're supposed to help or supervise. The obvious solution is to have the\njunior people do the work. Some good stuff happens this way, but there are\nproblems it doesn't work so well for: the kind where it helps to have\neverything in one head.  \n  \nFor example, it recently emerged that the famous glass artist Dale Chihuly\nhasn't actually blown glass for 27 years. He has assistants do the work for\nhim. But one of the most valuable sources of ideas in the visual arts is the\nresistance of the medium. That's why oil paintings look so different from\nwatercolors. In principle you could make any mark in any medium; in practice\nthe medium steers you. And if you're no longer doing the work yourself, you\nstop learning from this.  \n  \nSo if you want to beat those eminent enough to delegate, one way to do it is\nto take advantage of direct contact with the medium. In the arts it's obvious\nhow: blow your own glass, edit your own films, stage your own plays. And in\nthe process pay close attention to accidents and to new ideas you have on the\nfly. This technique can be generalized to any sort of work: if you're an\noutsider, don't be ruled by plans. Planning is often just a weakness forced on\nthose who delegate.  \n  \nIs there a general rule for finding problems best solved in one head? Well,\nyou can manufacture them by taking any project usually done by multiple people\nand trying to do it all yourself. Wozniak's work was a classic example: he did\neverything himself, hardware and software, and the result was miraculous. He\nclaims not one bug was ever found in the Apple II, in either hardware or\nsoftware.  \n  \nAnother way to find good problems to solve in one head is to focus on the\ngrooves in the chocolate bar \u2014 the places where tasks are divided when they're\nsplit between several people. If you want to beat delegation, focus on a\nvertical slice: for example, be both writer and editor, or both design\nbuildings and construct them.  \n  \nOne especially good groove to span is the one between tools and things made\nwith them. For example, programming languages and applications are usually\nwritten by different people, and this is responsible for a lot of the worst\nflaws in [programming languages](hundred.html). I think every language should\nbe designed simultaneously with a large application written in it, the way C\nwas with Unix.  \n  \nTechniques for competing with delegation translate well into business, because\ndelegation is endemic there. Instead of avoiding it as a drawback of senility,\nmany companies embrace it as a sign of maturity. In big companies software is\noften designed, implemented, and sold by three separate types of people. In\nstartups one person may have to do all three. And though this feels stressful,\nit's one reason startups win. The needs of customers and the means of\nsatisfying them are all in one head.  \n  \n**Focus**  \n  \nThe very skill of insiders can be a weakness. Once someone is good at\nsomething, they tend to spend all their time doing that. This kind of focus is\nvery valuable, actually. Much of the skill of experts is the ability to ignore\nfalse trails. But focus has drawbacks: you don't learn from other fields, and\nwhen a new approach arrives, you may be the last to notice.  \n  \nFor outsiders this translates into two ways to win. One is to work on a\nvariety of things. Since you can't derive as much benefit (yet) from a narrow\nfocus, you may as well cast a wider net and derive what benefit you can from\nsimilarities between fields. Just as you can compete with delegation by\nworking on larger vertical slices, you can compete with specialization by\nworking on larger horizontal slices \u2014 by both writing and illustrating your\nbook, for example.  \n  \nThe second way to compete with focus is to see what focus overlooks. In\nparticular, new things. So if you're not good at anything yet, consider\nworking on something so new that no one else is either. It won't have any\nprestige yet, if no one is good at it, but you'll have it all to yourself.  \n  \nThe potential of a new medium is usually underestimated, precisely because no\none has yet explored its possibilities. Before [Durer](pilate.html) tried\nmaking engravings, no one took them very seriously. Engraving was for making\nlittle devotional images \u2014 basically fifteenth century baseball cards of\nsaints. Trying to make masterpieces in this medium must have seemed to Durer's\ncontemporaries the way that, say, making masterpieces in\n[comics](http://www.fantagraphics.com/artist/clowes/clowes.html) might seem to\nthe average person today.  \n  \nIn the computer world we get not new mediums but new platforms: the\nminicomputer, the microprocessor, the web-based application. At first they're\nalways dismissed as being unsuitable for real work. And yet someone always\ndecides to try anyway, and it turns out you can do more than anyone expected.\nSo in the future when you hear people say of a new platform: yeah, it's\npopular and cheap, but not ready yet for real work, jump on it.  \n  \nAs well as being more comfortable working on established lines, insiders\ngenerally have a vested interest in perpetuating them. The professor who made\nhis reputation by discovering some new idea is not likely to be the one to\ndiscover its replacement. This is particularly true with companies, who have\nnot only skill and pride anchoring them to the status quo, but money as well.\nThe Achilles heel of successful companies is their inability to cannibalize\nthemselves. Many innovations consist of replacing something with a cheaper\nalternative, and companies just don't want to see a path whose immediate\neffect is to cut an existing source of revenue.  \n  \nSo if you're an outsider you should actively seek out contrarian projects.\nInstead of working on things the eminent have made prestigious, work on things\nthat could steal that prestige.  \n  \nThe really juicy new approaches are not the ones insiders reject as\nimpossible, but those they ignore as undignified. For example, after Wozniak\ndesigned the Apple II he offered it first to his employer, HP. They passed.\nOne of the reasons was that, to save money, he'd designed the Apple II to use\na TV as a monitor, and HP felt they couldn't produce anything so declasse.  \n  \n**Less**  \n  \nWozniak used a TV as a monitor for the simple reason that he couldn't afford a\nmonitor. Outsiders are not merely free but compelled to make things that are\ncheap and lightweight. And both are good bets for growth: cheap things spread\nfaster, and lightweight things evolve faster.  \n  \nThe eminent, on the other hand, are almost forced to work on a large scale.\nInstead of garden sheds they must design huge art museums. One reason they\nwork on big things is that they can: like our hypothetical novelist, they're\nflattered by such opportunities. They also know that big projects will by\ntheir sheer bulk impress the audience. A garden shed, however lovely, would be\neasy to ignore; a few might even snicker at it. You can't snicker at a giant\nmuseum, no matter how much you dislike it. And finally, there are all those\npeople the eminent have working for them; they have to choose projects that\ncan keep them all busy.  \n  \nOutsiders are free of all this. They can work on small things, and there's\nsomething very pleasing about small things. Small things can be perfect; big\nones always have something wrong with them. But there's a [magic](isetta.html)\nin small things that goes beyond such rational explanations. All kids know it.\nSmall things have more personality.  \n  \nPlus making them is more fun. You can do what you want; you don't have to\nsatisfy committees. And perhaps most important, small things can be done fast.\nThe prospect of seeing the finished project hangs in the air like the smell of\ndinner cooking. If you work fast, maybe you could have it done tonight.  \n  \nWorking on small things is also a good way to learn. The most important kinds\nof learning happen one project at a time. (\"Next time, I won't...\") The faster\nyou cycle through projects, the faster you'll evolve.  \n  \nPlain materials have a charm like small scale. And in addition there's the\nchallenge of making do with less. Every designer's ears perk up at the mention\nof that game, because it's a game you can't lose. Like the JV playing the\nvarsity, if you even tie, you win. So paradoxically there are cases where\nfewer resources yield better results, because the designers' pleasure at their\nown ingenuity more than compensates. [5]  \n  \nSo if you're an outsider, take advantage of your ability to make small and\ninexpensive things. Cultivate the pleasure and simplicity of that kind of\nwork; one day you'll miss it.  \n  \n**Responsibility**  \n  \nWhen you're old and eminent, what will you miss about being young and obscure?\nWhat people seem to miss most is the lack of responsibilities.  \n  \nResponsibility is an occupational disease of eminence. In principle you could\navoid it, just as in principle you could avoid getting fat as you get old, but\nfew do. I sometimes suspect that responsibility is a trap and that the most\nvirtuous route would be to shirk it, but regardless it's certainly\nconstraining.  \n  \nWhen you're an outsider you're constrained too, of course. You're short of\nmoney, for example. But that constrains you in different ways. How does\nresponsibility constrain you? The worst thing is that it allows you not to\nfocus on real work. Just as the most dangerous forms of\n[procrastination](procrastination.html) are those that seem like work, the\ndanger of responsibilities is not just that they can consume a whole day, but\nthat they can do it without setting off the kind of alarms you'd set off if\nyou spent a whole day sitting on a park bench.  \n  \nA lot of the pain of being an outsider is being aware of one's own\nprocrastination. But this is actually a good thing. You're at least close\nenough to work that the smell of it makes you hungry.  \n  \nAs an outsider, you're just one step away from getting things done. A huge\nstep, admittedly, and one that most people never seem to make, but only one\nstep. If you can summon up the energy to get started, you can work on projects\nwith an intensity (in both senses) that few insiders can match. For insiders\nwork turns into a duty, laden with responsibilities and expectations. It's\nnever so pure as it was when they were young.  \n  \nWork like a dog being taken for a walk, instead of an ox being yoked to the\nplow. That's what they miss.  \n  \n**Audience**  \n  \nA lot of outsiders make the mistake of doing the opposite; they admire the\neminent so much that they copy even their flaws. Copying is a good way to\nlearn, but copy the right things. When I was in college I imitated the pompous\ndiction of famous professors. But this wasn't what _made_ them eminent \u2014 it\nwas more a flaw their eminence had allowed them to sink into. Imitating it was\nlike pretending to have gout in order to seem rich.  \n  \nHalf the distinguishing qualities of the eminent are actually disadvantages.\nImitating these is not only a waste of time, but will make you seem a fool to\nyour models, who are often well aware of it.  \n  \nWhat are the genuine advantages of being an insider? The greatest is an\naudience. It often seems to outsiders that the great advantage of insiders is\nmoney \u2014 that they have the resources to do what they want. But so do people\nwho inherit money, and that doesn't seem to help, not as much as an audience.\nIt's good for morale to know people want to see what you're making; it draws\nwork out of you.  \n  \nIf I'm right that the defining advantage of insiders is an audience, then we\nlive in exciting times, because just in the last ten years the Internet has\nmade audiences a lot more liquid. Outsiders don't have to content themselves\nanymore with a proxy audience of a few smart friends. Now, thanks to the\nInternet, they can start to grow themselves actual audiences. This is great\nnews for the marginal, who retain the advantages of outsiders while\nincreasingly being able to siphon off what had till recently been the\nprerogative of the elite.  \n  \nThough the Web has been around for more than ten years, I think we're just\nbeginning to see its democratizing effects. Outsiders are still learning how\nto steal audiences. But more importantly, audiences are still learning how to\nbe stolen \u2014 they're still just beginning to realize how much\n[deeper](http://journalism.nyu.edu/pubzone/weblogs/pressthink/2004/03/15/lott_case.html)\nbloggers can dig than journalists, how much [more\ninteresting](http://reddit.com) a democratic news site can be than a front\npage controlled by editors, and how much\n[funnier](http://www.youtube.com/watch?v=SLbFDMplZDs) a bunch of kids with\nwebcams can be than mass-produced sitcoms.  \n  \nThe big media companies shouldn't worry that people will post their\ncopyrighted material on YouTube. They should worry that people will post their\nown stuff on YouTube, and audiences will watch that instead.  \n  \n**Hacking**  \n  \nIf I had to condense the power of the marginal into one sentence it would be:\njust try hacking something together. That phrase draws in most threads I've\nmentioned here. Hacking something together means deciding what to do as you're\ndoing it, not a subordinate executing the vision of his boss. It implies the\nresult won't be pretty, because it will be made quickly out of inadequate\nmaterials. It may work, but it won't be the sort of thing the eminent would\nwant to put their name on. Something hacked together means something that\nbarely solves the problem, or maybe doesn't solve the problem at all, but\nanother you discovered en route. But that's ok, because the main value of that\ninitial version is not the thing itself, but what it leads to. Insiders who\ndaren't walk through the mud in their nice clothes will never make it to the\nsolid ground on the other side.  \n  \nThe word \"try\" is an especially valuable component. I disagree here with Yoda,\nwho said there is no try. There is try. It implies there's no punishment if\nyou fail. You're driven by curiosity instead of duty. That means the wind of\nprocrastination will be in your favor: instead of avoiding this work, this\nwill be what you do as a way of avoiding other work. And when you do it,\nyou'll be in a better mood. The more the work depends on imagination, the more\nthat matters, because most people have more ideas when they're happy.  \n  \nIf I could go back and redo my twenties, that would be one thing I'd do more\nof: just try hacking things together. Like many people that age, I spent a lot\nof time worrying about what I should do. I also spent some time trying to\nbuild stuff. I should have spent less time worrying and more time building. If\nyou're not sure what to do, make something.  \n  \nRaymond Chandler's advice to thriller writers was \"When in doubt, have a man\ncome through a door with a gun in his hand.\" He followed that advice. Judging\nfrom his books, he was often in doubt. But though the result is occasionally\ncheesy, it's never boring. In life, as in books, action is underrated.  \n  \nFortunately the number of things you can just hack together keeps increasing.\nPeople fifty years ago would be astonished that one could just hack together a\nmovie, for example. Now you can even hack together distribution. Just make\nstuff and put it online.  \n  \n**Inappropriate**  \n  \nIf you really want to score big, the place to focus is the margin of the\nmargin: the territories only recently captured from the insiders. That's where\nyou'll find the juiciest projects still undone, either because they seemed too\nrisky, or simply because there were too few insiders to explore everything.  \n  \nThis is why I spend most of my time writing [essays](essay.html) lately. The\nwriting of essays used to be limited to those who could get them published. In\nprinciple you could have written them and just shown them to your friends; in\npractice that didn't work. [6] An essayist needs the resistance of an\naudience, just as an engraver needs the resistance of the plate.  \n  \nUp till a few years ago, writing essays was the ultimate insider's game.\nDomain experts were allowed to publish essays about their field, but the pool\nallowed to write on general topics was about eight people who went to the\nright parties in New York. Now the reconquista has overrun this territory,\nand, not surprisingly, found it sparsely cultivated. There are so many essays\nyet unwritten. They tend to be the naughtier ones; the insiders have pretty\nmuch exhausted the motherhood and apple pie topics.  \n  \nThis leads to my final suggestion: a technique for determining when you're on\nthe right track. You're on the right track when people complain that you're\nunqualified, or that you've done something inappropriate. If people are\ncomplaining, that means you're doing something rather than sitting around,\nwhich is the first step. And if they're driven to such empty forms of\ncomplaint, that means you've probably done something good.  \n  \nIf you make something and people complain that it doesn't _work_ , that's a\nproblem. But if the worst thing they can hit you with is your own status as an\noutsider, that implies that in every other respect you've succeeded. Pointing\nout that someone is unqualified is as desperate as resorting to racial slurs.\nIt's just a legitimate sounding way of saying: we don't like your type around\nhere.  \n  \nBut the best thing of all is when people call what you're doing inappropriate.\nI've been hearing this word all my life and I only recently realized that it\nis, in fact, the sound of the homing beacon. \"Inappropriate\" is the null\ncriticism. It's merely the adjective form of \"I don't like it.\"  \n  \nSo that, I think, should be the highest goal for the marginal. Be\ninappropriate. When you hear people saying that, you're golden. And they,\nincidentally, are busted.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] The facts about Apple's early history are from an interview with [Steve\nWozniak](http://foundersatwork.com/steve-wozniak.html) in Jessica Livingston's\n_Founders at Work_.  \n  \n[2] As usual the popular image is several decades behind reality. Now the\nmisunderstood artist is not a chain-smoking drunk who pours his soul into big,\nmessy canvases that philistines see and say \"that's not art\" because it isn't\na picture of anything. The philistines have now been trained that anything\nhung on a wall is art. Now the misunderstood artist is a coffee-drinking vegan\ncartoonist whose work they see and say \"that's not art\" because it looks like\nstuff they've seen in the Sunday paper.  \n  \n[3] In fact this would do fairly well as a definition of politics: what\ndetermines rank in the absence of objective tests.  \n  \n[4] In high school you're led to believe your whole future depends on where\nyou go to college, but it turns out only to buy you a couple years. By your\nmid-twenties the people worth impressing already judge you more by what you've\ndone than where you went to school.  \n  \n[5] Managers are presumably wondering, how can I make this miracle happen? How\ncan I make the people working for me do more with less? Unfortunately the\nconstraint probably has to be self-imposed. If you're _expected_ to do more\nwith less, then you're being starved, not eating virtuously.  \n  \n[6] Without the prospect of publication, the closest most people come to\nwriting essays is to write in a journal. I find I never get as deeply into\nsubjects as I do in proper essays. As the name implies, you don't go back and\nrewrite journal entries over and over for two weeks.  \n  \n**Thanks** to Sam Altman, Trevor Blackwell, Paul Buchheit, Sarah Harlin,\nJessica Livingston, Jackie McDonough, Robert Morris, Olin Shivers, and Chris\nSmall for reading drafts of this, and to Chris Small and Chad Fowler for\ninviting me to speak.  \n  \n\nFebruary 2009  \n  \nA lot of cities look at Silicon Valley and ask \"How could we make something\nlike that happen here?\" The [organic](siliconvalley.html) way to do it is to\nestablish a first-rate university in a place where rich people want to live.\nThat's how Silicon Valley happened. But could you shortcut the process by\nfunding startups?  \n  \nPossibly. Let's consider what it would take.  \n  \nThe first thing to understand is that encouraging startups is a different\nproblem from encouraging startups in a particular city. The latter is much\nmore expensive.  \n  \nPeople sometimes think they could improve the startup scene in their town by\nstarting something like [Y Combinator](http://ycombinator.com) there, but in\nfact it will have near zero effect. I know because Y Combinator itself had\nnear zero effect on Boston when we were based there half the year. The people\nwe funded came from all over the country (indeed, the world) and afterward\nthey went wherever they could get more funding\u2014which generally meant Silicon\nValley.  \n  \nThe seed funding business is not a regional business, because at that stage\nstartups are mobile. They're just a couple founders with laptops. [1]  \n  \nIf you want to encourage startups in a particular city, you have to fund\nstartups that won't leave. There are two ways to do that: have rules\npreventing them from leaving, or fund them at the point in their life when\nthey naturally take root. The first approach is a mistake, because it becomes\na filter for selecting bad startups. If your terms force startups to do things\nthey don't want to, only the desperate ones will take your money.  \n  \nGood startups will move to another city as a condition of funding. What they\nwon't do is agree not to move the next time they need funding. So the only way\nto get them to stay is to give them enough that they never need to leave.  \n  \n___  \n  \nHow much would that take? If you want to keep startups from leaving your town,\nyou have to give them enough that they're not tempted by an offer from Silicon\nValley VCs that requires them to move. A startup would be able to refuse such\nan offer if they had grown to the point where they were (a) rooted in your\ntown and/or (b) so successful that VCs would fund them even if they didn't\nmove.  \n  \nHow much would it cost to grow a startup to that point? A minimum of several\nhundred thousand dollars. [Wufoo](http://wufoo.com) seem to have rooted\nthemselves in Tampa on $118k, but they're an extreme case. On average it would\ntake at least half a million.  \n  \nSo if it seems too good to be true to think you could grow a local silicon\nvalley by giving startups $15-20k each like Y Combinator, that's because it\nis. To make them stick around you'd have to give them at least 20 times that\nmuch.  \n  \nHowever, even that is an interesting prospect. Suppose to be on the safe side\nit would cost a million dollars per startup. If you could get startups to\nstick to your town for a million apiece, then for a billion dollars you could\nbring in a thousand startups. That probably wouldn't push you past Silicon\nValley itself, but it might get you second place.  \n  \nFor the price of a football stadium, any town that was decent to live in could\nmake itself one of the biggest startup hubs in the world.  \n  \nWhat's more, it wouldn't take very long. You could probably do it in five\nyears. During the term of one mayor. And it would get easier over time,\nbecause the more startups you had in town, the less it would take to get new\nones to move there. By the time you had a thousand startups in town, the VCs\nwouldn't be trying so hard to get them to move to Silicon Valley; instead\nthey'd be opening local offices. Then you'd really be in good shape. You'd\nhave started a self-sustaining chain reaction like the one that drives the\nValley.  \n  \n___  \n  \nBut now comes the hard part. You have to pick the startups. How do you do\nthat? Picking startups is a rare and valuable skill, and the handful of people\nwho have it are not readily hireable. And this skill is so hard to measure\nthat if a government did try to hire people with it, they'd almost certainly\nget the wrong ones.  \n  \nFor example, a city could give money to a VC fund to establish a local branch,\nand let them make the choices. But only a bad VC fund would take that deal.\nThey wouldn't _seem_ bad to the city officials. They'd seem very impressive.\nBut they'd be bad at picking startups. That's the characteristic failure mode\nof VCs. All VCs look impressive to limited partners. The difference between\nthe good ones and the bad ones only becomes visible in the other half of their\njobs: choosing and advising startups. [2]  \n  \nWhat you really want is a pool of local angel investors\u2014people investing money\nthey made from their own startups. But unfortunately you run into a chicken\nand egg problem here. If your city isn't already a startup hub, there won't be\npeople there who got rich from startups. And there is no way I can think of\nthat a city could attract angels from outside. By definition they're rich.\nThere's no incentive that would make them move. [3]  \n  \nHowever, a city could select startups by piggybacking on the expertise of\ninvestors who weren't local. It would be pretty straightforward to make a list\nof the most eminent Silicon Valley angels and from that to generate a list of\nall the startups they'd invested in. If a city offered these companies a\nmillion dollars each to move, a lot of the earlier stage ones would probably\ntake it.  \n  \nPreposterous as this plan sounds, it's probably the most efficient way a city\ncould select good startups.  \n  \nIt would hurt the startups somewhat to be separated from their original\ninvestors. On the other hand, the extra million dollars would give them a lot\nmore runway.  \n  \n___  \n  \nWould the transplanted startups survive? Quite possibly. The only way to find\nout would be to try it. It would be a pretty cheap experiment, as civil\nexpenditures go. Pick 30 startups that eminent angels have recently invested\nin, give them each a million dollars if they'll relocate to your city, and see\nwhat happens after a year. If they seem to be thriving, you can try importing\nstartups on a larger scale.  \n  \nDon't be too legalistic about the conditions under which they're allowed to\nleave. Just have a gentlemen's agreement.  \n  \nDon't try to do it on the cheap and pick only 10 for the initial experiment.\nIf you do this on too small a scale you'll just guarantee failure. Startups\nneed to be around other startups. 30 would be enough to feel like a community.  \n  \nDon't try to make them all work in some renovated warehouse you've made into\nan \"incubator.\" Real startups prefer to work in their own spaces.  \n  \nIn fact, don't impose any restrictions on the startups at all. Startup\nfounders are mostly [hackers](gba.html), and hackers are much more constrained\nby gentlemen's agreements than regulations. If they shake your hand on a\npromise, they'll keep it. But show them a lock and their first thought is how\nto pick it.  \n  \nInterestingly, the 30-startup experiment could be done by any sufficiently\nrich private citizen. And what pressure it would put on the city if it worked.\n[4]  \n  \n___  \n  \nShould the city take stock in return for the money? In principle they're\nentitled to, but how would they choose valuations for the startups? You\ncouldn't just give them all the same valuation: that would be too low for some\n(who'd turn you down) and too high for others (because it might make their\nnext round a \"down round\"). And since we're assuming we're doing this without\nbeing able to pick startups, we also have to assume we can't value them, since\nthat's practically the same thing.  \n  \nAnother reason not to take stock in the startups is that startups are often\ninvolved in disreputable things. So are established companies, but they don't\nget blamed for it. If someone gets murdered by someone they met on Facebook,\nthe press will treat the story as if it were about Facebook. If someone gets\nmurdered by someone they met at a supermarket, the press will just treat it as\na story about a murder. So understand that if you invest in startups, they\nmight build things that get used for pornography, or file-sharing, or the\nexpression of unfashionable opinions. You should probably sponsor this project\njointly with your political opponents, so they can't use whatever the startups\ndo as a club to beat you with.  \n  \nIt would be too much of a political liability just to give the startups the\nmoney, though. So the best plan would be to make it convertible debt, but\nwhich didn't convert except in a really big round, like $20 million.  \n  \n___  \n  \nHow well this scheme worked would depend on the [city](cities.html). There are\nsome towns, like Portland, that would be easy to turn into startup hubs, and\nothers, like Detroit, where it would really be an uphill battle. So be honest\nwith yourself about the sort of town you have before you try this.  \n  \nIt will be easier in proportion to how much your town resembles San Francisco.\nDo you have good weather? Do people live downtown, or have they abandoned the\ncenter for the suburbs? Would the city be described as \"hip\" and \"tolerant,\"\nor as reflecting \"traditional values?\" Are there good universities nearby? Are\nthere walkable neighborhoods? Would nerds feel at home? If you answered yes to\nall these questions, you might be able not only to pull off this scheme, but\nto do it for less than a million per startup.  \n  \nI realize the chance of any city having the political will to carry out this\nplan is microscopically small. I just wanted to explore what it would take if\none did. How hard would it be to jumpstart a silicon valley? It's fascinating\nto think this prize might be within the reach of so many cities. So even\nthough they'll all still spend the money on the stadium, at least now someone\ncan ask them: why did you choose to do that instead of becoming a serious\nrival to Silicon Valley?  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] What people who start these supposedly local seed firms always find is\nthat (a) their applicants come from all over, not just the local area, and (b)\nthe local startups also apply to the other seed firms. So what ends up\nhappening is that the applicant pool gets partitioned by quality rather than\ngeography.  \n  \n[2] Interestingly, the bad VCs fail by choosing startups run by people like\nthem\u2014people who are good presenters, but have no real substance. It's a case\nof the fake leading the fake. And since everyone involved is so plausible, the\nLPs who invest in these funds have no idea what's happening till they measure\ntheir returns.  \n  \n[3] Not even being a tax haven, I suspect. That makes some rich people move,\nbut not the type who would make good angel investors in startups.  \n  \n[4] Thanks to Michael Keenan for pointing this out.  \n  \n**Thanks** to Trevor Blackwell, Jessica Livingston, Robert Morris, and Fred\nWilson for reading drafts of this.  \n  \n\nNovember 2014  \n  \nIt struck me recently how few of the most successful people I know are mean.\nThere are exceptions, but remarkably few.  \n  \nMeanness isn't rare. In fact, one of the things the internet has shown us is\nhow mean people can be. A few decades ago, only famous people and professional\nwriters got to publish their opinions. Now everyone can, and we can all see\nthe long tail of meanness that had previously been hidden.  \n  \nAnd yet while there are clearly a lot of mean people out there, there are next\nto none among the most successful people I know. What's going on here? Are\nmeanness and success inversely correlated?  \n  \nPart of what's going on, of course, is selection bias. I only know people who\nwork in certain fields: startup founders, programmers, professors. I'm willing\nto believe that successful people in other fields are mean. Maybe successful\nhedge fund managers are mean; I don't know enough to say. It seems quite\nlikely that most successful drug lords are mean. But there are at least big\nchunks of the world that mean people don't rule, and that territory seems to\nbe growing.  \n  \nMy wife and Y Combinator cofounder Jessica is one of those rare people who\nhave x-ray vision for character. Being married to her is like standing next to\nan airport baggage scanner. She came to the startup world from investment\nbanking, and she has always been struck both by how consistently successful\nstartup founders turn out to be good people, and how consistently bad people\nfail as startup founders.  \n  \nWhy? I think there are several reasons. One is that being mean makes you\nstupid. That's why I hate fights. You never do your best work in a fight,\nbecause fights are not sufficiently general. Winning is always a function of\nthe situation and the people involved. You don't win fights by thinking of big\nideas but by thinking of tricks that work in one particular case. And yet\nfighting is just as much work as thinking about real problems. Which is\nparticularly painful to someone who cares how their brain is used: your brain\ngoes fast but you get nowhere, like a car spinning its wheels.  \n  \nStartups don't win by attacking. They win by transcending. There are\nexceptions of course, but usually the way to win is to race ahead, not to stop\nand fight.  \n  \nAnother reason mean founders lose is that they can't get the best people to\nwork for them. They can hire people who will put up with them because they\nneed a job. But the best people have other options. A mean person can't\nconvince the best people to work for him unless he is super convincing. And\nwhile having the best people helps any organization, it's critical for\nstartups.  \n  \nThere is also a complementary force at work: if you want to build great\nthings, it helps to be driven by a spirit of benevolence. The startup founders\nwho end up richest are not the ones driven by money. The ones driven by money\ntake the big acquisition offer that nearly every successful startup gets en\nroute. [1] The ones who keep going are driven by something else. They may not\nsay so explicitly, but they're usually trying to improve the world. Which\nmeans people with a desire to improve the world have a natural advantage. [2]  \n  \nThe exciting thing is that startups are not just one random type of work in\nwhich meanness and success are inversely correlated. This kind of work is the\nfuture.  \n  \nFor most of history success meant control of scarce resources. One got that by\nfighting, whether literally in the case of pastoral nomads driving hunter-\ngatherers into marginal lands, or metaphorically in the case of Gilded Age\nfinanciers contending with one another to assemble railroad monopolies. For\nmost of history, success meant success at zero-sum games. And in most of them\nmeanness was not a handicap but probably an advantage.  \n  \nThat is changing. Increasingly the games that matter are not zero-sum.\nIncreasingly you win not by fighting to get control of a scarce resource, but\nby having new ideas and building new things. [3]  \n  \nThere have long been games where you won by having new ideas. In the third\ncentury BC, Archimedes won by doing that. At least until an invading Roman\narmy killed him. Which illustrates why this change is happening: for new ideas\nto matter, you need a certain degree of civil order. And not just not being at\nwar. You also need to prevent the sort of economic violence that nineteenth\ncentury magnates practiced against one another and communist countries\npracticed against their citizens. People need to feel that what they create\ncan't be stolen. [4]  \n  \nThat has always been the case for thinkers, which is why this trend began with\nthem. When you think of successful people from history who weren't ruthless,\nyou get mathematicians and writers and artists. The exciting thing is that\ntheir m.o. seems to be spreading. The games played by intellectuals are\nleaking into the real world, and this is reversing the historical polarity of\nthe relationship between meanness and success.  \n  \nSo I'm really glad I stopped to think about this. Jessica and I have always\nworked hard to teach our kids not to be mean. We tolerate noise and mess and\njunk food, but not meanness. And now I have both an additional reason to crack\ndown on it, and an additional argument to use when I do: that being mean makes\nyou fail.  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] I'm not saying all founders who take big acquisition offers are driven\nonly by money, but rather that those who don't aren't. Plus one can have\nbenevolent motives for being driven by money \u2014 for example, to take care of\none's family, or to be free to work on projects that improve the world.  \n  \n[2] It's unlikely that every successful startup improves the world. But their\nfounders, like parents, truly believe they do. Successful founders are in love\nwith their companies. And while this sort of love is as blind as the love\npeople have for one another, it is genuine.  \n  \n[3] [Peter Thiel](http://startupclass.samaltman.com/courses/lec05) would point\nout that successful founders still get rich from controlling monopolies, just\nmonopolies they create rather than ones they capture. And while this is\nlargely true, it means a big change in the sort of person who wins.  \n  \n[4] To be fair, the Romans didn't mean to kill Archimedes. The Roman commander\nspecifically ordered that he be spared. But he got killed in the chaos anyway.  \n  \nIn sufficiently disordered times, even thinking requires control of scarce\nresources, because living at all is a scarce resource.  \n  \n  \n  \n**Thanks** to Sam Altman, Ron Conway, Daniel Gackle, Jessica Livingston,\nRobert Morris, Geoff Ralston, and Fred Wilson for reading drafts of this.  \n  \n\nApril 2007  \n  \nA few days ago I suddenly realized Microsoft was dead. I was talking to a\nyoung startup founder about how Google was different from Yahoo. I said that\nYahoo had been warped from the start by their fear of Microsoft. That was why\nthey'd positioned themselves as a \"media company\" instead of a technology\ncompany. Then I looked at his face and realized he didn't understand. It was\nas if I'd told him how much girls liked Barry Manilow in the mid 80s. Barry\nwho?  \n  \nMicrosoft? He didn't say anything, but I could tell he didn't quite believe\nanyone would be frightened of them.  \n  \nMicrosoft cast a shadow over the software world for almost 20 years starting\nin the late 80s. I can remember when it was IBM before them. I mostly ignored\nthis shadow. I never used Microsoft software, so it only affected me\nindirectly\u2014for example, in the spam I got from botnets. And because I wasn't\npaying attention, I didn't notice when the shadow disappeared.  \n  \nBut it's gone now. I can sense that. No one is even afraid of Microsoft\nanymore. They still make a lot of money\u2014so does IBM, for that matter. But\nthey're not dangerous.  \n  \nWhen did Microsoft die, and of what? I know they seemed dangerous as late as\n2001, because I wrote an [essay](road.html) then about how they were less\ndangerous than they seemed. I'd guess they were dead by 2005. I know when we\nstarted Y Combinator we didn't worry about Microsoft as competition for the\nstartups we funded. In fact, we've never even invited them to the demo days we\norganize for startups to present to investors. We invite Yahoo and Google and\nsome other Internet companies, but we've never bothered to invite Microsoft.\nNor has anyone there ever even sent us an email. They're in a different world.  \n  \nWhat killed them? Four things, I think, all of them occurring simultaneously\nin the mid 2000s.  \n  \nThe most obvious is Google. There can only be one big man in town, and they're\nclearly it. Google is the most dangerous company now by far, in both the good\nand bad senses of the word. Microsoft can at best [limp](http://live.com)\nalong afterward.  \n  \nWhen did Google take the lead? There will be a tendency to push it back to\ntheir IPO in August 2004, but they weren't setting the terms of the debate\nthen. I'd say they took the lead in 2005\\. Gmail was one of the things that\nput them over the edge. Gmail showed they could do more than search.  \n  \nGmail also showed how much you could do with web-based software, if you took\nadvantage of what later came to be called \"Ajax.\" And that was the second\ncause of Microsoft's death: everyone can see the desktop is over. It now seems\ninevitable that applications will live on the web\u2014not just email, but\neverything, right up to [Photoshop](http://snipshot.com). Even Microsoft sees\nthat now.  \n  \nIronically, Microsoft unintentionally helped create Ajax. The x in Ajax is\nfrom the XMLHttpRequest object, which lets the browser communicate with the\nserver in the background while displaying a page. (Originally the only way to\ncommunicate with the server was to ask for a new page.) XMLHttpRequest was\ncreated by Microsoft in the late 90s because they needed it for Outlook. What\nthey didn't realize was that it would be useful to a lot of other people\ntoo\u2014in fact, to anyone who wanted to make web apps work like desktop ones.  \n  \nThe other critical component of Ajax is Javascript, the programming language\nthat runs in the browser. Microsoft saw the danger of Javascript and tried to\nkeep it broken for as long as they could. [1] But eventually the open source\nworld won, by producing Javascript libraries that grew over the brokenness of\nExplorer the way a tree grows over barbed wire.  \n  \nThe third cause of Microsoft's death was broadband Internet. Anyone who cares\ncan have fast Internet access now. And the bigger the pipe to the server, the\nless you need the desktop.  \n  \nThe last nail in the coffin came, of all places, from Apple. Thanks to OS X,\nApple has come back from the dead in a way that is extremely rare in\ntechnology. [2] Their victory is so complete that I'm now surprised when I\ncome across a computer running Windows. Nearly all the people we fund at Y\nCombinator use Apple laptops. It was the same in the audience at [startup\nschool](http://www.bosstalks.com/StartupSchool2007/all_macs_and_all_writing.jpg).\nAll the computer people use Macs or Linux now. Windows is for grandmas, like\nMacs used to be in the 90s. So not only does the desktop no longer matter, no\none who cares about computers uses Microsoft's anyway.  \n  \nAnd of course Apple has Microsoft on the run in music too, with TV and phones\non the way.  \n  \nI'm glad Microsoft is dead. They were like Nero or Commodus\u2014evil in the way\nonly inherited power can make you. Because remember, the Microsoft monopoly\ndidn't begin with Microsoft. They got it from IBM. The software business was\noverhung by a monopoly from about the mid-1950s to about 2005. For practically\nits whole existence, that is. One of the reasons \"Web 2.0\" has such an air of\neuphoria about it is the feeling, conscious or not, that this era of monopoly\nmay finally be over.  \n  \nOf course, as a hacker I can't help thinking about how something broken could\nbe fixed. Is there some way Microsoft could come back? In principle, yes. To\nsee how, envision two things: (a) the amount of cash Microsoft now has on\nhand, and (b) Larry and Sergey making the rounds of all the search engines ten\nyears ago trying to sell the idea for Google for a million dollars, and being\nturned down by everyone.  \n  \nThe surprising fact is, brilliant hackers\u2014dangerously brilliant hackers\u2014can be\nhad very cheaply, by the standards of a company as rich as Microsoft. They\ncan't [hire](hiring.html) smart people anymore, but they could buy as many as\nthey wanted for only an order of magnitude more. So if they wanted to be a\ncontender again, this is how they could do it:\n\n  1. Buy all the good \"Web 2.0\" startups. They could get substantially all of them for less than they'd have to pay for Facebook.  \n  \n\n  2. Put them all in a building in Silicon Valley, surrounded by lead shielding to protect them from any contact with Redmond. \n\nI feel safe suggesting this, because they'd never do it. Microsoft's biggest\nweakness is that they still don't realize how much they suck. They still think\nthey can write software in house. Maybe they can, by the standards of the\ndesktop world. But that world ended a few years ago.  \n  \nI already know what the reaction to this essay will be. Half the readers will\nsay that Microsoft is still an enormously profitable company, and that I\nshould be more careful about drawing conclusions based on what a few people\nthink in our insular little \"Web 2.0\" bubble. The other half, the younger\nhalf, will complain that this is old news.  \n  \n  \n  \n  \n  \n**See also:** [Microsoft is Dead: the Cliffs Notes](cliffsnotes.html)  \n  \n**Notes**  \n  \n[1] It doesn't take a conscious effort to make software incompatible. All you\nhave to do is not work too hard at fixing bugs\u2014which, if you're a big company,\nyou produce in copious quantities. The situation is analogous to the writing\nof \"literary theorists.\" Most don't try to be obscure; they just don't make an\neffort to be clear. It wouldn't pay.  \n  \n[2] In part because Steve Jobs got pushed out by John Sculley in a way that's\nrare among technology companies. If Apple's board hadn't made that blunder,\nthey wouldn't have had to bounce back.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nOctober 2006  \n  \n _(This essay is derived from a talk at MIT.)_  \n  \nTill recently graduating seniors had two choices: get a job or go to grad\nschool. I think there will increasingly be a third option: to start your own\nstartup. But how common will that be?  \n  \nI'm sure the default will always be to get a job, but starting a startup could\nwell become as popular as grad school. In the late 90s my professor friends\nused to complain that they couldn't get grad students, because all the\nundergrads were going to work for startups. I wouldn't be surprised if that\nsituation returns, but with one difference: this time they'll be starting\ntheir own instead of going to work for other people's.  \n  \nThe most ambitious students will at this point be asking: Why wait till you\ngraduate? Why not start a startup while you're in college? In fact, why go to\ncollege at all? Why not start a startup instead?  \n  \nA year and a half ago I gave a [talk](hiring.html) where I said that the\naverage age of the founders of Yahoo, Google, and Microsoft was 24, and that\nif grad students could start startups, why not undergrads? I'm glad I phrased\nthat as a question, because now I can pretend it wasn't merely a rhetorical\none. At the time I couldn't imagine why there should be any lower limit for\nthe age of startup founders. Graduation is a bureaucratic change, not a\nbiological one. And certainly there are undergrads as competent technically as\nmost grad students. So why shouldn't undergrads be able to start startups as\nwell as grad students?  \n  \nI now realize that something does change at graduation: you lose a huge excuse\nfor failing. Regardless of how complex your life is, you'll find that everyone\nelse, including your family and friends, will discard all the low bits and\nregard you as having a single occupation at any given time. If you're in\ncollege and have a summer job writing software, you still read as a student.\nWhereas if you graduate and get a job programming, you'll be instantly\nregarded by everyone as a programmer.  \n  \nThe problem with starting a startup while you're still in school is that\nthere's a built-in escape hatch. If you start a startup in the summer between\nyour junior and senior year, it reads to everyone as a summer job. So if it\ngoes nowhere, big deal; you return to school in the fall with all the other\nseniors; no one regards you as a failure, because your occupation is student,\nand you didn't fail at that. Whereas if you start a startup just one year\nlater, after you graduate, as long as you're not accepted to grad school in\nthe fall the startup reads to everyone as your occupation. You're now a\nstartup founder, so you have to do well at that.  \n  \nFor nearly everyone, the opinion of one's peers is the most powerful motivator\nof all\u2014more powerful even than the nominal goal of most startup founders,\ngetting rich. [1] About a month into each funding cycle we have an event\ncalled Prototype Day where each startup presents to the others what they've\ngot so far. You might think they wouldn't need any more motivation. They're\nworking on their cool new idea; they have funding for the immediate future;\nand they're playing a game with only two outcomes: wealth or failure. You'd\nthink that would be motivation enough. And yet the prospect of a demo pushes\nmost of them into a rush of activity.  \n  \nEven if you start a startup explicitly to get rich, the money you might get\nseems pretty theoretical most of the time. What drives you day to day is not\nwanting to look bad.  \n  \nYou probably can't change that. Even if you could, I don't think you'd want\nto; someone who really, truly doesn't care what his peers think of him is\nprobably a psychopath. So the best you can do is consider this force like a\nwind, and set up your boat accordingly. If you know your peers are going to\npush you in some direction, choose good peers, and position yourself so they\npush you in a direction you like.  \n  \nGraduation changes the prevailing winds, and those make a difference. Starting\na startup is so hard that it's a close call even for the ones that succeed.\nHowever high a startup may be flying now, it probably has a few leaves stuck\nin the landing gear from those trees it barely cleared at the end of the\nrunway. In such a close game, the smallest increase in the forces against you\ncan be enough to flick you over the edge into failure.  \n  \nWhen we first started [Y Combinator](http://ycombinator.com) we encouraged\npeople to start startups while they were still in college. That's partly\nbecause Y Combinator began as a kind of summer program. We've kept the program\nshape\u2014all of us having dinner together once a week turns out to be a good\nidea\u2014but we've decided now that the party line should be to tell people to\nwait till they graduate.  \n  \nDoes that mean you can't start a startup in college? Not at all. Sam Altman,\nthe co-founder of [Loopt](http://loopt.com), had just finished his sophomore\nyear when we funded them, and Loopt is probably the most promising of all the\nstartups we've funded so far. But Sam Altman is a very unusual guy. Within\nabout three minutes of meeting him, I remember thinking \"Ah, so this is what\nBill Gates must have been like when he was 19.\"  \n  \nIf it can work to start a startup during college, why do we tell people not\nto? For the same reason that the probably apocryphal violinist, whenever he\nwas asked to judge someone's playing, would always say they didn't have enough\ntalent to make it as a pro. Succeeding as a musician takes determination as\nwell as talent, so this answer works out to be the right advice for everyone.\nThe ones who are uncertain believe it and give up, and the ones who are\nsufficiently determined think \"screw that, I'll succeed anyway.\"  \n  \nSo our official policy now is only to fund undergrads we can't talk out of it.\nAnd frankly, if you're not certain, you _should_ wait. It's not as if all the\nopportunities to start companies are going to be gone if you don't do it now.\nMaybe the window will close on some idea you're working on, but that won't be\nthe last idea you'll have. For every idea that times out, new ones become\nfeasible. Historically the opportunities to start startups have only increased\nwith time.  \n  \nIn that case, you might ask, why not wait longer? Why not go work for a while,\nor go to grad school, and then start a startup? And indeed, that might be a\ngood idea. If I had to pick the sweet spot for startup founders, based on who\nwe're most excited to see applications from, I'd say it's probably the mid-\ntwenties. Why? What advantages does someone in their mid-twenties have over\nsomeone who's 21? And why isn't it older? What can 25 year olds do that 32\nyear olds can't? Those turn out to be questions worth examining.  \n  \n**Plus**  \n  \nIf you start a startup soon after college, you'll be a young founder by\npresent standards, so you should know what the relative advantages of young\nfounders are. They're not what you might think. As a young founder your\nstrengths are: stamina, poverty, rootlessness, colleagues, and ignorance.  \n  \nThe importance of stamina shouldn't be surprising. If you've heard anything\nabout startups you've probably heard about the long hours. As far as I can\ntell these are universal. I can't think of any successful startups whose\nfounders worked 9 to 5. And it's particularly necessary for younger founders\nto work long hours because they're probably not as efficient as they'll be\nlater.  \n  \nYour second advantage, poverty, might not sound like an advantage, but it is a\nhuge one. Poverty implies you can live cheaply, and this is critically\nimportant for startups. Nearly every startup that fails, fails by running out\nof money. It's a little misleading to put it this way, because there's usually\nsome other underlying cause. But regardless of the source of your problems, a\nlow burn rate gives you more opportunity to recover from them. And since most\nstartups make all kinds of mistakes at first, room to recover from mistakes is\na valuable thing to have.  \n  \nMost startups end up doing something different than they planned. The way the\nsuccessful ones find something that works is by trying things that don't. So\nthe worst thing you can do in a startup is to have a rigid, pre-ordained plan\nand then start spending a lot of money to implement it. Better to operate\ncheaply and give your ideas time to evolve.  \n  \nRecent grads can live on practically nothing, and this gives you an edge over\nolder founders, because the main cost in software startups is people. The guys\nwith kids and mortgages are at a real disadvantage. This is one reason I'd bet\non the 25 year old over the 32 year old. The 32 year old probably is a better\nprogrammer, but probably also has a much more expensive life. Whereas a 25\nyear old has some work experience (more on that later) but can live as cheaply\nas an undergrad.  \n  \nRobert Morris and I were 29 and 30 respectively when we started Viaweb, but\nfortunately we still lived like 23 year olds. We both had roughly zero assets.\nI would have loved to have a mortgage, since that would have meant I had a\n_house_. But in retrospect having nothing turned out to be convenient. I\nwasn't tied down and I was used to living cheaply.  \n  \nEven more important than living cheaply, though, is thinking cheaply. One\nreason the Apple II was so popular was that it was cheap. The computer itself\nwas cheap, and it used cheap, off-the-shelf peripherals like a cassette tape\nrecorder for data storage and a TV as a monitor. And you know why? Because Woz\ndesigned this computer for himself, and he couldn't afford anything more.  \n  \nWe benefitted from the same phenomenon. Our prices were daringly low for the\ntime. The top level of service was $300 a month, which was an order of\nmagnitude below the norm. In retrospect this was a smart move, but we didn't\ndo it because we were smart. $300 a month seemed like a lot of money to us.\nLike Apple, we created something inexpensive, and therefore popular, simply\nbecause we were poor.  \n  \nA lot of startups have that form: someone comes along and makes something for\na tenth or a hundredth of what it used to cost, and the existing players can't\nfollow because they don't even want to think about a world in which that's\npossible. Traditional long distance carriers, for example, didn't even want to\nthink about VoIP. (It was coming, all the same.) Being poor helps in this\ngame, because your own personal bias points in the same direction technology\nevolves in.  \n  \nThe advantages of rootlessness are similar to those of poverty. When you're\nyoung you're more mobile\u2014not just because you don't have a house or much\nstuff, but also because you're less likely to have serious relationships. This\nturns out to be important, because a lot of startups involve someone moving.  \n  \nThe founders of Kiko, for example, are now en route to the Bay Area to start\ntheir next startup. It's a better place for what they want to do. And it was\neasy for them to decide to go, because neither as far as I know has a serious\ngirlfriend, and everything they own will fit in one car\u2014or more precisely,\nwill either fit in one car or is crappy enough that they don't mind leaving it\nbehind.  \n  \nThey at least were in Boston. What if they'd been in Nebraska, like Evan\nWilliams was at their age? Someone wrote recently that the drawback of Y\nCombinator was that you had to move to participate. It couldn't be any other\nway. The kind of conversations we have with founders, we have to have in\nperson. We fund a dozen startups at a time, and we can't be in a dozen places\nat once. But even if we could somehow magically save people from moving, we\nwouldn't. We wouldn't be doing founders a favor by letting them stay in\nNebraska. Places that aren't [startup hubs](siliconvalley.html) are toxic to\nstartups. You can tell that from indirect evidence. You can tell how hard it\nmust be to start a startup in Houston or Chicago or Miami from the\nmicroscopically small number, per capita, that succeed there. I don't know\nexactly what's suppressing all the startups in these towns\u2014probably a hundred\nsubtle little things\u2014but something must be. [2]  \n  \nMaybe this will change. Maybe the increasing cheapness of startups will mean\nthey'll be able to survive anywhere, instead of only in the most hospitable\nenvironments. Maybe 37signals is the pattern for the future. But maybe not.\nHistorically there have always been certain towns that were centers for\ncertain industries, and if you weren't in one of them you were at a\ndisadvantage. So my guess is that 37signals is an anomaly. We're looking at a\npattern much older than \"Web 2.0\" here.  \n  \nPerhaps the reason more startups per capita happen in the Bay Area than Miami\nis simply that there are more founder-type people there. Successful startups\nare almost never started by one person. Usually they begin with a conversation\nin which someone mentions that something would be a good idea for a company,\nand his friend says, \"Yeah, that is a good idea, let's try it.\" If you're\nmissing that second person who says \"let's try it,\" the startup never happens.\nAnd that is another area where undergrads have an edge. They're surrounded by\npeople willing to say that. At a good college you're concentrated together\nwith a lot of other ambitious and technically minded people\u2014probably more\nconcentrated than you'll ever be again. If your nucleus spits out a neutron,\nthere's a good chance it will hit another nucleus.  \n  \nThe number one question people ask us at Y Combinator is: Where can I find a\nco-founder? That's the biggest problem for someone starting a startup at 30.\nWhen they were in school they knew a lot of good co-founders, but by 30\nthey've either lost touch with them or these people are tied down by jobs they\ndon't want to leave.  \n  \nViaweb was an anomaly in this respect too. Though we were comparatively old,\nwe weren't tied down by impressive jobs. I was trying to be an artist, which\nis not very constraining, and Robert, though 29, was still in grad school due\nto a little interruption in his academic career back in 1988. So arguably the\nWorm made Viaweb possible. Otherwise Robert would have been a junior professor\nat that age, and he wouldn't have had time to work on crazy speculative\nprojects with me.  \n  \nMost of the questions people ask Y Combinator we have some kind of answer for,\nbut not the co-founder question. There is no good answer. Co-founders really\nshould be people you already know. And by far the best place to meet them is\nschool. You have a large sample of smart people; you get to compare how they\nall perform on identical tasks; and everyone's life is pretty fluid. A lot of\nstartups grow out of schools for this reason. Google, Yahoo, and Microsoft,\namong others, were all founded by people who met in school. (In Microsoft's\ncase, it was high school.)  \n  \nMany students feel they should wait and get a little more experience before\nthey start a company. All other things being equal, they should. But all other\nthings are not quite as equal as they look. Most students don't realize how\nrich they are in the scarcest ingredient in startups, co-founders. If you wait\ntoo long, you may find that your friends are now involved in some project they\ndon't want to abandon. The better they are, the more likely this is to happen.  \n  \nOne way to mitigate this problem might be to actively plan your startup while\nyou're getting those n years of experience. Sure, go off and get jobs or go to\ngrad school or whatever, but get together regularly to scheme, so the idea of\nstarting a startup stays alive in everyone's brain. I don't know if this\nworks, but it can't hurt to try.  \n  \nIt would be helpful just to realize what an advantage you have as students.\nSome of your classmates are probably going to be successful startup founders;\nat a great technical university, that is a near certainty. So which ones? If I\nwere you I'd look for the people who are not just smart, but incurable\n[builders](http://my-computer.cruftlabs.com:8080/photos/motorcouch/0067.html).\nLook for the people who keep starting projects, and finish at least some of\nthem. That's what we look for. Above all else, above academic credentials and\neven the idea you apply with, we look for people who build things.  \n  \nThe other place co-founders meet is at work. Fewer do than at school, but\nthere are things you can do to improve the odds. The most important,\nobviously, is to work somewhere that has a lot of smart, young people. Another\nis to work for a company located in a startup hub. It will be easier to talk a\nco-worker into quitting with you in a place where startups are happening all\naround you.  \n  \nYou might also want to look at the employment agreement you sign when you get\nhired. Most will say that any ideas you think of while you're employed by the\ncompany belong to them. In practice it's hard for anyone to prove what ideas\nyou had when, so the line gets drawn at code. If you're going to start a\nstartup, don't write any of the code while you're still employed. Or at least\ndiscard any code you wrote while still employed and start over. It's not so\nmuch that your employer will find out and sue you. It won't come to that;\ninvestors or acquirers or (if you're so lucky) underwriters will nail you\nfirst. Between t = 0 and when you buy that yacht, _someone_ is going to ask if\nany of your code legally belongs to anyone else, and you need to be able to\nsay no. [3]  \n  \nThe most overreaching employee agreement I've seen so far is Amazon's. In\naddition to the usual clauses about owning your ideas, you also can't be a\nfounder of a startup that has another founder who worked at Amazon\u2014even if you\ndidn't know them or even work there at the same time. I suspect they'd have a\nhard time enforcing this, but it's a bad sign they even try. There are plenty\nof other places to work; you may as well choose one that keeps more of your\noptions open.  \n  \nSpeaking of cool places to work, there is of course Google. But I notice\nsomething slightly frightening about Google: zero startups come out of there.\nIn that respect it's a black hole. People seem to like working at Google too\nmuch to leave. So if you hope to start a startup one day, the evidence so far\nsuggests you shouldn't work there.  \n  \nI realize this seems odd advice. If they make your life so good that you don't\nwant to leave, why not work there? Because, in effect, you're probably getting\na local maximum. You need a certain activation energy to start a startup. So\nan employer who's fairly pleasant to work for can lull you into staying\nindefinitely, even if it would be a net win for you to leave. [4]  \n  \nThe best place to work, if you want to start a startup, is probably a startup.\nIn addition to being the right sort of experience, one way or another it will\nbe over quickly. You'll either end up rich, in which case problem solved, or\nthe startup will get bought, in which case it it will start to suck to work\nthere and it will be easy to leave, or most likely, the thing will blow up and\nyou'll be free again.  \n  \nYour final advantage, ignorance, may not sound very useful. I deliberately\nused a controversial word for it; you might equally call it innocence. But it\nseems to be a powerful force. My Y Combinator co-founder Jessica Livingston is\njust about to publish a book of\n[interviews](http://www.amazon.com/gp/product/1590597141) with startup\nfounders, and I noticed a remarkable pattern in them. One after another said\nthat if they'd known how hard it would be, they would have been too\nintimidated to start.  \n  \nIgnorance can be useful when it's a counterweight to other forms of stupidity.\nIt's useful in starting startups because you're capable of more than you\nrealize. Starting startups is harder than you expect, but you're also capable\nof more than you expect, so they balance out.  \n  \nMost people look at a company like Apple and think, how could I ever make such\na thing? Apple is an institution, and I'm just a person. But every institution\nwas at one point just a handful of people in a room deciding to start\nsomething. Institutions are made up, and made up by people no different from\nyou.  \n  \nI'm not saying everyone could start a startup. I'm sure most people couldn't;\nI don't know much about the population at large. When you get to groups I know\nwell, like hackers, I can say more precisely. At the top schools, I'd guess as\nmany as a quarter of the CS majors could make it as startup founders if they\nwanted.  \n  \nThat \"if they wanted\" is an important qualification\u2014so important that it's\nalmost cheating to append it like that\u2014because once you get over a certain\nthreshold of intelligence, which most CS majors at top schools are past, the\ndeciding factor in whether you succeed as a founder is how much you want to.\nYou don't have to be that smart. If you're not a genius, just start a startup\nin some unsexy field where you'll have less competition, like software for\nhuman resources departments. I picked that example at random, but I feel safe\nin predicting that whatever they have now, it wouldn't take genius to do\nbetter. There are a lot of people out there working on boring stuff who are\ndesperately in need of better software, so however short you think you fall of\nLarry and Sergey, you can ratchet down the coolness of the idea far enough to\ncompensate.  \n  \nAs well as preventing you from being intimidated, ignorance can sometimes help\nyou discover new ideas. [Steve\nWozniak](http://foundersatwork.com/stevewozniak.html) put this very strongly:\n\n> All the best things that I did at Apple came from (a) not having money and\n> (b) not having done it before, ever. Every single thing that we came out\n> with that was really great, I'd never once done that thing in my life.\n\nWhen you know nothing, you have to reinvent stuff for yourself, and if you're\nsmart your reinventions may be better than what preceded them. This is\nespecially true in fields where the rules change. All our ideas about software\nwere developed in a time when processors were slow, and memories and disks\nwere tiny. Who knows what obsolete assumptions are embedded in the\nconventional wisdom? And the way these assumptions are going to get fixed is\nnot by explicitly deallocating them, but by something more akin to garbage\ncollection. Someone ignorant but smart will come along and reinvent\neverything, and in the process simply fail to reproduce certain existing\nideas.  \n  \n**Minus**  \n  \nSo much for the advantages of young founders. What about the disadvantages?\nI'm going to start with what goes wrong and try to trace it back to the root\ncauses.  \n  \nWhat goes wrong with young founders is that they build stuff that looks like\nclass projects. It was only recently that we figured this out ourselves. We\nnoticed a lot of similarities between the startups that seemed to be falling\nbehind, but we couldn't figure out how to put it into words. Then finally we\nrealized what it was: they were building class projects.  \n  \nBut what does that really mean? What's wrong with class projects? What's the\ndifference between a class project and a real startup? If we could answer that\nquestion it would be useful not just to would-be startup founders but to\nstudents in general, because we'd be a long way toward explaining the mystery\nof the so-called real world.  \n  \nThere seem to be two big things missing in class projects: (1) an iterative\ndefinition of a real problem and (2) intensity.  \n  \nThe first is probably unavoidable. Class projects will inevitably solve fake\nproblems. For one thing, real problems are rare and valuable. If a professor\nwanted to have students solve real problems, he'd face the same paradox as\nsomeone trying to give an example of whatever \"paradigm\" might succeed the\nStandard Model of physics. There may well be something that does, but if you\ncould think of an example you'd be entitled to the Nobel Prize. Similarly,\ngood new problems are not to be had for the asking.  \n  \nIn technology the difficulty is compounded by the fact that real startups tend\nto discover the problem they're solving by a process of evolution. Someone has\nan idea for something; they build it; and in doing so (and probably only by\ndoing so) they realize the problem they should be solving is another one. Even\nif the professor let you change your project description on the fly, there\nisn't time enough to do that in a college class, or a market to supply\nevolutionary pressures. So class projects are mostly about implementation,\nwhich is the least of your problems in a startup.  \n  \nIt's not just that in a startup you work on the idea as well as\nimplementation. The very implementation is different. Its main purpose is to\nrefine the idea. Often the only value of most of the stuff you build in the\nfirst six months is that it proves your initial idea was mistaken. And that's\nextremely valuable. If you're free of a misconception that everyone else still\nshares, you're in a powerful position. But you're not thinking that way about\na class project. Proving your initial plan was mistaken would just get you a\nbad grade. Instead of building stuff to throw away, you tend to want every\nline of code to go toward that final goal of showing you did a lot of work.  \n  \nThat leads to our second difference: the way class projects are measured.\nProfessors will tend to judge you by the distance between the starting point\nand where you are now. If someone has achieved a lot, they should get a good\ngrade. But customers will judge you from the other direction: the distance\nremaining between where you are now and the features they need. The market\ndoesn't give a shit how hard you worked. Users just want your software to do\nwhat they need, and you get a zero otherwise. That is one of the most\ndistinctive differences between school and the real world: there is no reward\nfor putting in a good effort. In fact, the whole concept of a \"good effort\" is\na fake idea adults invented to encourage kids. It is not found in nature.  \n  \nSuch lies seem to be helpful to kids. But unfortunately when you graduate they\ndon't give you a list of all the lies they told you during your education. You\nhave to get them beaten out of you by contact with the real world. And this is\nwhy so many jobs want work experience. I couldn't understand that when I was\nin college. I knew how to program. In fact, I could tell I knew how to program\nbetter than most people doing it for a living. So what was this mysterious\n\"work experience\" and why did I need it?  \n  \nNow I know what it is, and part of the confusion is grammatical. Describing it\nas \"work experience\" implies it's like experience operating a certain kind of\nmachine, or using a certain programming language. But really what work\nexperience refers to is not some specific expertise, but the elimination of\ncertain habits left over from childhood.  \n  \nOne of the defining qualities of kids is that they flake. When you're a kid\nand you face some hard test, you can cry and say \"I can't\" and they won't make\nyou do it. Of course, no one can make you do anything in the grownup world\neither. What they do instead is fire you. And when motivated by that you find\nyou can do a lot more than you realized. So one of the things employers expect\nfrom someone with \"work experience\" is the elimination of the flake reflex\u2014the\nability to get things done, with no excuses.  \n  \nThe other thing you get from work experience is an understanding of what work\nis, and in particular, how intrinsically horrible it is. Fundamentally the\nequation is a brutal one: you have to spend most of your waking hours doing\nstuff someone else wants, or starve. There are a few places where the work is\nso interesting that this is concealed, because what other people want done\nhappens to coincide with what you want to work on. But you only have to\nimagine what would happen if they diverged to see the underlying reality.  \n  \nIt's not so much that adults lie to kids about this as never explain it. They\nnever explain what the deal is with money. You know from an early age that\nyou'll have some sort of job, because everyone asks what you're going to \"be\"\nwhen you grow up. What they don't tell you is that as a kid you're sitting on\nthe shoulders of someone else who's treading water, and that starting working\nmeans you get thrown into the water on your own, and have to start treading\nwater yourself or sink. \"Being\" something is incidental; the immediate problem\nis not to drown.  \n  \nThe relationship between work and money tends to dawn on you only gradually.\nAt least it did for me. One's first thought tends to be simply \"This sucks.\nI'm in debt. Plus I have to get up on monday and go to work.\" Gradually you\nrealize that these two things are as tightly connected as only a market can\nmake them.  \n  \nSo the most important advantage 24 year old founders have over 20 year old\nfounders is that they know what they're trying to avoid. To the average\nundergrad the idea of getting rich translates into buying Ferraris, or being\nadmired. To someone who has learned from experience about the relationship\nbetween money and work, it translates to something way more important: it\nmeans you get to opt out of the brutal equation that governs the lives of\n99.9% of people. Getting rich means you can stop treading water.  \n  \nSomeone who gets this will work much harder at making a startup succeed\u2014with\nthe proverbial energy of a drowning man, in fact. But understanding the\nrelationship between money and work also changes the way you work. You don't\nget money just for working, but for doing things other people want. Someone\nwho's figured that out will automatically focus more on the user. And that\ncures the other half of the class-project syndrome. After you've been working\nfor a while, you yourself tend to measure what you've done the same way the\nmarket does.  \n  \nOf course, you don't have to spend years working to learn this stuff. If\nyou're sufficiently perceptive you can grasp these things while you're still\nin school. Sam Altman did. He must have, because Loopt is no class project.\nAnd as his example suggests, this can be valuable knowledge. At a minimum, if\nyou get this stuff, you already have most of what you gain from the \"work\nexperience\" employers consider so desirable. But of course if you really get\nit, you can use this information in a way that's more valuable to you than\nthat.  \n  \n**Now**  \n  \nSo suppose you think you might start a startup at some point, either when you\ngraduate or a few years after. What should you do now? For both jobs and grad\nschool, there are ways to prepare while you're in college. If you want to get\na job when you graduate, you should get summer jobs at places you'd like to\nwork. If you want to go to grad school, it will help to work on research\nprojects as an undergrad. What's the equivalent for startups? How do you keep\nyour options maximally open?  \n  \nOne thing you can do while you're still in school is to learn how startups\nwork. Unfortunately that's not easy. Few if any colleges have classes about\nstartups. There may be business school classes on entrepreneurship, as they\ncall it over there, but these are likely to be a waste of time. Business\nschools like to talk about startups, but philosophically they're at the\nopposite end of the spectrum. Most books on startups also seem to be useless.\nI've looked at a few and none get it right. Books in most fields are written\nby people who know the subject from experience, but for startups there's a\nunique problem: by definition the founders of successful startups don't need\nto write books to make money. As a result most books on the subject end up\nbeing written by people who don't understand it.  \n  \nSo I'd be skeptical of classes and books. The way to learn about startups is\nby watching them in action, preferably by working at one. How do you do that\nas an undergrad? Probably by sneaking in through the back door. Just hang\naround a lot and gradually start doing things for them. Most startups are (or\nshould be) very cautious about hiring. Every hire increases the burn rate, and\nbad hires early on are hard to recover from. However, startups usually have a\nfairly informal atmosphere, and there's always a lot that needs to be done. If\nyou just start doing stuff for them, many will be too busy to shoo you away.\nYou can thus gradually work your way into their confidence, and maybe turn it\ninto an official job later, or not, whichever you prefer. This won't work for\nall startups, but it would work for most I've known.  \n  \nNumber two, make the most of the great advantage of school: the wealth of co-\nfounders. Look at the people around you and ask yourself which you'd like to\nwork with. When you apply that test, you may find you get surprising results.\nYou may find you'd prefer the quiet guy you've mostly ignored to someone who\nseems impressive but has an attitude to match. I'm not suggesting you suck up\nto people you don't really like because you think one day they'll be\nsuccessful. Exactly the opposite, in fact: you should only start a startup\nwith someone you like, because a startup will put your friendship through a\nstress test. I'm just saying you should think about who you really admire and\nhang out with them, instead of whoever circumstances throw you together with.  \n  \nAnother thing you can do is learn skills that will be useful to you in a\nstartup. These may be different from the skills you'd learn to get a job. For\nexample, thinking about getting a job will make you want to learn programming\nlanguages you think employers want, like Java and C++. Whereas if you start a\nstartup, you get to pick the language, so you have to think about which will\nactually let you get the most done. If you use that test you might end up\nlearning Ruby or Python instead.  \n  \nBut the most important skill for a startup founder isn't a programming\ntechnique. It's a knack for understanding users and figuring out how to give\nthem what they want. I know I repeat this, but that's because it's so\nimportant. And it's a skill you can learn, though perhaps habit might be a\nbetter word. Get into the habit of thinking of software as having users. What\ndo those users want? What would make them say wow?  \n  \nThis is particularly valuable for undergrads, because the concept of users is\nmissing from most college programming classes. The way you get taught\nprogramming in college would be like teaching writing as grammar, without\nmentioning that its purpose is to communicate something to an audience.\nFortunately an audience for software is now only an http request away. So in\naddition to the programming you do for your classes, why not build some kind\nof website people will find useful? At the very least it will teach you how to\nwrite software with users. In the best case, it might not just be preparation\nfor a startup, but the startup itself, like it was for Yahoo and Google.  \n  \n  \n  \n**Notes**  \n  \n[1] Even the desire to protect one's children seems weaker, judging from\nthings people have historically done to their kids rather than risk their\ncommunity's disapproval. (I assume we still do things that will be regarded in\nthe future as barbaric, but historical abuses are easier for us to see.)  \n  \n[2] Worrying that Y Combinator makes founders move for 3 months also suggests\none underestimates how hard it is to start a startup. You're going to have to\nput up with much greater inconveniences than that.  \n  \n[3] Most employee agreements say that any idea relating to the company's\npresent or potential future business belongs to them. Often as not the second\nclause could include any possible startup, and anyone doing due diligence for\nan investor or acquirer will assume the worst.  \n  \nTo be safe either (a) don't use code written while you were still employed in\nyour previous job, or (b) get your employer to renounce, in writing, any claim\nto the code you write for your side project. Many will consent to (b) rather\nthan lose a prized employee. The downside is that you'll have to tell them\nexactly what your project does.  \n  \n[4] Geshke and Warnock only founded Adobe because Xerox ignored them. If Xerox\nhad used what they built, they would probably never have left PARC.  \n  \n**Thanks** to Jessica Livingston and Robert Morris for reading drafts of this,\nand to Jeff Arnold and the SIPB for inviting me to speak.  \n  \n[](http://reddit.com) [ Comment](http://reddit.com/info/l1xb/comments) on this\nessay.  \n  \n\nAugust 2015  \n  \nIf you have a US startup called X and you don't have x.com, you should\nprobably change your name.  \n  \nThe reason is not just that people can't find you. For companies with mobile\napps, especially, having the right domain name is not as critical as it used\nto be for getting users. The problem with not having the .com of your name is\nthat it signals weakness. Unless you're so big that your reputation precedes\nyou, a marginal domain suggests you're a marginal company. Whereas (as Stripe\nshows) having x.com signals strength even if it has no relation to what you\ndo.  \n  \nEven good founders can be in denial about this. Their denial derives from two\nvery powerful forces: identity, and lack of imagination.  \n  \nX is what we _are_ , founders think. There's no other name as good. Both of\nwhich are false.  \n  \nYou can fix the first by stepping back from the problem. Imagine you'd called\nyour company something else. If you had, surely you'd be just as attached to\nthat name as you are to your current one. The idea of switching to your\ncurrent name would seem repellent. [1]  \n  \nThere's nothing intrinsically great about your current name. Nearly all your\nattachment to it comes from it being attached to you. [2]  \n  \nThe way to neutralize the second source of denial, your inability to think of\nother potential names, is to acknowledge that you're bad at naming. Naming is\na completely separate skill from those you need to be a good founder. You can\nbe a great startup founder but hopeless at thinking of names for your company.  \n  \nOnce you acknowledge that, you stop believing there is nothing else you could\nbe called. There are lots of other potential names that are as good or better;\nyou just can't think of them.  \n  \nHow do you find them? One answer is the default way to solve problems you're\nbad at: find someone else who can think of names. But with company names there\nis another possible approach. It turns out almost any word or word pair that\nis not an obviously bad name is a sufficiently good one, and the number of\nsuch domains is so large that you can find plenty that are cheap or even\nuntaken. So make a list and try to buy some. That's what\n[Stripe](http://www.quora.com/How-did-Stripe-come-up-with-its-name?share=1)\ndid. (Their search also turned up parse.com, which their friends at Parse\ntook.)  \n  \nThe reason I know that naming companies is a distinct skill orthogonal to the\nothers you need in a startup is that I happen to have it. Back when I was\nrunning YC and did more office hours with startups, I would often help them\nfind new names. 80% of the time we could find at least one good name in a 20\nminute office hour slot.  \n  \nNow when I do office hours I have to focus on more important questions, like\nwhat the company is doing. I tell them when they need to change their name.\nBut I know the power of the forces that have them in their grip, so I know\nmost won't listen. [3]  \n  \nThere are of course examples of startups that have succeeded without having\nthe .com of their name. There are startups that have succeeded despite any\nnumber of different mistakes. But this mistake is less excusable than most.\nIt's something that can be fixed in a couple days if you have sufficient\ndiscipline to acknowledge the problem.  \n  \n100% of the top 20 YC companies by valuation have the .com of their name. 94%\nof the top 50 do. But only 66% of companies in the current batch have the .com\nof their name. Which suggests there are lessons ahead for most of the rest,\none way or another.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] Incidentally, this thought experiment works for [nationality and\nreligion](identity.html) too.  \n  \n[2] The liking you have for a name that has become part of your identity\nmanifests itself not directly, which would be easy to discount, but as a\ncollection of specious beliefs about its intrinsic qualities. (This too is\ntrue of nationality and religion as well.)  \n  \n[3] Sometimes founders know it's a problem that they don't have the .com of\ntheir name, but delusion strikes a step later in the belief that they'll be\nable to buy it despite having no evidence it's for sale. Don't believe a\ndomain is for sale unless the owner has already told you an asking price.  \n  \n**Thanks** to Sam Altman, Jessica Livingston, and Geoff Ralston for reading\ndrafts of this.  \n  \n\nFebruary 2003  \n  \nWhen we were in junior high school, my friend Rich and I made a map of the\nschool lunch tables according to popularity. This was easy to do, because kids\nonly ate lunch with others of about the same popularity. We graded them from A\nto E. A tables were full of football players and cheerleaders and so on. E\ntables contained the kids with mild cases of Down's Syndrome, what in the\nlanguage of the time we called \"retards.\"  \n  \nWe sat at a D table, as low as you could get without looking physically\ndifferent. We were not being especially candid to grade ourselves as D. It\nwould have taken a deliberate lie to say otherwise. Everyone in the school\nknew exactly how popular everyone else was, including us.  \n  \nMy stock gradually rose during high school. Puberty finally arrived; I became\na decent soccer player; I started a scandalous underground newspaper. So I've\nseen a good part of the popularity landscape.  \n  \nI know a lot of people who were nerds in school, and they all tell the same\nstory: there is a strong correlation between being smart and being a nerd, and\nan even stronger inverse correlation between being a nerd and being popular.\nBeing smart seems to _make_ you unpopular.  \n  \nWhy? To someone in school now, that may seem an odd question to ask. The mere\nfact is so overwhelming that it may seem strange to imagine that it could be\nany other way. But it could. Being smart doesn't make you an outcast in\nelementary school. Nor does it harm you in the real world. Nor, as far as I\ncan tell, is the problem so bad in most other countries. But in a typical\nAmerican secondary school, being smart is likely to make your life difficult.\nWhy?  \n  \n  \n  \nThe key to this mystery is to rephrase the question slightly. Why don't smart\nkids make themselves popular? If they're so smart, why don't they figure out\nhow popularity works and beat the system, just as they do for standardized\ntests?  \n  \nOne argument says that this would be impossible, that the smart kids are\nunpopular because the other kids envy them for being smart, and nothing they\ncould do could make them popular. I wish. If the other kids in junior high\nschool envied me, they did a great job of concealing it. And in any case, if\nbeing smart were really an enviable quality, the girls would have broken\nranks. The guys that guys envy, girls like.  \n  \nIn the schools I went to, being smart just didn't matter much. Kids didn't\nadmire it or despise it. All other things being equal, they would have\npreferred to be on the smart side of average rather than the dumb side, but\nintelligence counted far less than, say, physical appearance, charisma, or\nathletic ability.  \n  \nSo if intelligence in itself is not a factor in popularity, why are smart kids\nso consistently unpopular? The answer, I think, is that they don't really want\nto be popular.  \n  \nIf someone had told me that at the time, I would have laughed at him. Being\nunpopular in school makes kids miserable, some of them so miserable that they\ncommit suicide. Telling me that I didn't want to be popular would have seemed\nlike telling someone dying of thirst in a desert that he didn't want a glass\nof water. Of course I wanted to be popular.  \n  \nBut in fact I didn't, not enough. There was something else I wanted more: to\nbe smart. Not simply to do well in school, though that counted for something,\nbut to design beautiful rockets, or to write well, or to understand how to\nprogram computers. In general, to make great things.  \n  \nAt the time I never tried to separate my wants and weigh them against one\nanother. If I had, I would have seen that being smart was more important. If\nsomeone had offered me the chance to be the most popular kid in school, but\nonly at the price of being of average intelligence (humor me here), I wouldn't\nhave taken it.  \n  \nMuch as they suffer from their unpopularity, I don't think many nerds would.\nTo them the thought of average intelligence is unbearable. But most kids would\ntake that deal. For half of them, it would be a step up. Even for someone in\nthe eightieth percentile (assuming, as everyone seemed to then, that\nintelligence is a scalar), who wouldn't drop thirty points in exchange for\nbeing loved and admired by everyone?  \n  \nAnd that, I think, is the root of the problem. Nerds serve two masters. They\nwant to be popular, certainly, but they want even more to be smart. And\npopularity is not something you can do in your spare time, not in the fiercely\ncompetitive environment of an American secondary school.  \n  \n  \n  \nAlberti, arguably the archetype of the Renaissance Man, writes that \"no art,\nhowever minor, demands less than total dedication if you want to excel in it.\"\nI wonder if anyone in the world works harder at anything than American school\nkids work at popularity. Navy SEALs and neurosurgery residents seem slackers\nby comparison. They occasionally take vacations; some even have hobbies. An\nAmerican teenager may work at being popular every waking hour, 365 days a\nyear.  \n  \nI don't mean to suggest they do this consciously. Some of them truly are\nlittle Machiavellis, but what I really mean here is that teenagers are always\non duty as conformists.  \n  \nFor example, teenage kids pay a great deal of attention to clothes. They don't\nconsciously dress to be popular. They dress to look good. But to who? To the\nother kids. Other kids' opinions become their definition of right, not just\nfor clothes, but for almost everything they do, right down to the way they\nwalk. And so every effort they make to do things \"right\" is also, consciously\nor not, an effort to be more popular.  \n  \nNerds don't realize this. They don't realize that it takes work to be popular.\nIn general, people outside some very demanding field don't realize the extent\nto which success depends on constant (though often unconscious) effort. For\nexample, most people seem to consider the ability to draw as some kind of\ninnate quality, like being tall. In fact, most people who \"can draw\" like\ndrawing, and have spent many hours doing it; that's why they're good at it.\nLikewise, popular isn't just something you are or you aren't, but something\nyou make yourself.  \n  \nThe main reason nerds are unpopular is that they have other things to think\nabout. Their attention is drawn to books or the natural world, not fashions\nand parties. They're like someone trying to play soccer while balancing a\nglass of water on his head. Other players who can focus their whole attention\non the game beat them effortlessly, and wonder why they seem so incapable.  \n  \nEven if nerds cared as much as other kids about popularity, being popular\nwould be more work for them. The popular kids learned to be popular, and to\nwant to be popular, the same way the nerds learned to be smart, and to want to\nbe smart: from their parents. While the nerds were being trained to get the\nright answers, the popular kids were being trained to please.  \n  \n  \n  \nSo far I've been finessing the relationship between smart and nerd, using them\nas if they were interchangeable. In fact it's only the context that makes them\nso. A nerd is someone who isn't socially adept enough. But \"enough\" depends on\nwhere you are. In a typical American school, standards for coolness are so\nhigh (or at least, so specific) that you don't have to be especially awkward\nto look awkward by comparison.  \n  \nFew smart kids can spare the attention that popularity requires. Unless they\nalso happen to be good-looking, natural athletes, or siblings of popular kids,\nthey'll tend to become nerds. And that's why smart people's lives are worst\nbetween, say, the ages of eleven and seventeen. Life at that age revolves far\nmore around popularity than before or after.  \n  \nBefore that, kids' lives are dominated by their parents, not by other kids.\nKids do care what their peers think in elementary school, but this isn't their\nwhole life, as it later becomes.  \n  \nAround the age of eleven, though, kids seem to start treating their family as\na day job. They create a new world among themselves, and standing in this\nworld is what matters, not standing in their family. Indeed, being in trouble\nin their family can win them points in the world they care about.  \n  \nThe problem is, the world these kids create for themselves is at first a very\ncrude one. If you leave a bunch of eleven-year-olds to their own devices, what\nyou get is _Lord of the Flies._ Like a lot of American kids, I read this book\nin school. Presumably it was not a coincidence. Presumably someone wanted to\npoint out to us that we were savages, and that we had made ourselves a cruel\nand stupid world. This was too subtle for me. While the book seemed entirely\nbelievable, I didn't get the additional message. I wish they had just told us\noutright that we were savages and our world was stupid.  \n  \n  \n  \nNerds would find their unpopularity more bearable if it merely caused them to\nbe ignored. Unfortunately, to be unpopular in school is to be actively\npersecuted.  \n  \nWhy? Once again, anyone currently in school might think this a strange\nquestion to ask. How could things be any other way? But they could be. Adults\ndon't normally persecute nerds. Why do teenage kids do it?  \n  \nPartly because teenagers are still half children, and many children are just\nintrinsically cruel. Some torture nerds for the same reason they pull the legs\noff spiders. Before you develop a conscience, torture is amusing.  \n  \nAnother reason kids persecute nerds is to make themselves feel better. When\nyou tread water, you lift yourself up by pushing water down. Likewise, in any\nsocial hierarchy, people unsure of their own position will try to emphasize it\nby maltreating those they think rank below. I've read that this is why poor\nwhites in the United States are the group most hostile to blacks.  \n  \nBut I think the main reason other kids persecute nerds is that it's part of\nthe mechanism of popularity. Popularity is only partially about individual\nattractiveness. It's much more about alliances. To become more popular, you\nneed to be constantly doing things that bring you close to other popular\npeople, and nothing brings people closer than a common enemy.  \n  \nLike a politician who wants to distract voters from bad times at home, you can\ncreate an enemy if there isn't a real one. By singling out and persecuting a\nnerd, a group of kids from higher in the hierarchy create bonds between\nthemselves. Attacking an outsider makes them all insiders. This is why the\nworst cases of bullying happen with groups. Ask any nerd: you get much worse\ntreatment from a group of kids than from any individual bully, however\nsadistic.  \n  \nIf it's any consolation to the nerds, it's nothing personal. The group of kids\nwho band together to pick on you are doing the same thing, and for the same\nreason, as a bunch of guys who get together to go hunting. They don't actually\nhate you. They just need something to chase.  \n  \nBecause they're at the bottom of the scale, nerds are a safe target for the\nentire school. If I remember correctly, the most popular kids don't persecute\nnerds; they don't need to stoop to such things. Most of the persecution comes\nfrom kids lower down, the nervous middle classes.  \n  \nThe trouble is, there are a lot of them. The distribution of popularity is not\na pyramid, but tapers at the bottom like a pear. The least popular group is\nquite small. (I believe we were the only D table in our cafeteria map.) So\nthere are more people who want to pick on nerds than there are nerds.  \n  \nAs well as gaining points by distancing oneself from unpopular kids, one loses\npoints by being close to them. A woman I know says that in high school she\nliked nerds, but was afraid to be seen talking to them because the other girls\nwould make fun of her. Unpopularity is a communicable disease; kids too nice\nto pick on nerds will still ostracize them in self-defense.  \n  \nIt's no wonder, then, that smart kids tend to be unhappy in middle school and\nhigh school. Their other interests leave them little attention to spare for\npopularity, and since popularity resembles a zero-sum game, this in turn makes\nthem targets for the whole school. And the strange thing is, this nightmare\nscenario happens without any conscious malice, merely because of the shape of\nthe situation.  \n  \n  \n  \nFor me the worst stretch was junior high, when kid culture was new and harsh,\nand the specialization that would later gradually separate the smarter kids\nhad barely begun. Nearly everyone I've talked to agrees: the nadir is\nsomewhere between eleven and fourteen.  \n  \nIn our school it was eighth grade, which was ages twelve and thirteen for me.\nThere was a brief sensation that year when one of our teachers overheard a\ngroup of girls waiting for the school bus, and was so shocked that the next\nday she devoted the whole class to an eloquent plea not to be so cruel to one\nanother.  \n  \nIt didn't have any noticeable effect. What struck me at the time was that she\nwas surprised. You mean she doesn't know the kind of things they say to one\nanother? You mean this isn't normal?  \n  \nIt's important to realize that, no, the adults don't know what the kids are\ndoing to one another. They know, in the abstract, that kids are monstrously\ncruel to one another, just as we know in the abstract that people get tortured\nin poorer countries. But, like us, they don't like to dwell on this depressing\nfact, and they don't see evidence of specific abuses unless they go looking\nfor it.  \n  \nPublic school teachers are in much the same position as prison wardens.\nWardens' main concern is to keep the prisoners on the premises. They also need\nto keep them fed, and as far as possible prevent them from killing one\nanother. Beyond that, they want to have as little to do with the prisoners as\npossible, so they leave them to create whatever social organization they want.\nFrom what I've read, the society that the prisoners create is warped, savage,\nand pervasive, and it is no fun to be at the bottom of it.  \n  \nIn outline, it was the same at the schools I went to. The most important thing\nwas to stay on the premises. While there, the authorities fed you, prevented\novert violence, and made some effort to teach you something. But beyond that\nthey didn't want to have too much to do with the kids. Like prison wardens,\nthe teachers mostly left us to ourselves. And, like prisoners, the culture we\ncreated was barbaric.  \n  \n  \n  \nWhy is the real world more hospitable to nerds? It might seem that the answer\nis simply that it's populated by adults, who are too mature to pick on one\nanother. But I don't think this is true. Adults in prison certainly pick on\none another. And so, apparently, do society wives; in some parts of Manhattan,\nlife for women sounds like a continuation of high school, with all the same\npetty intrigues.  \n  \nI think the important thing about the real world is not that it's populated by\nadults, but that it's very large, and the things you do have real effects.\nThat's what school, prison, and ladies-who-lunch all lack. The inhabitants of\nall those worlds are trapped in little bubbles where nothing they do can have\nmore than a local effect. Naturally these societies degenerate into savagery.\nThey have no function for their form to follow.  \n  \nWhen the things you do have real effects, it's no longer enough just to be\npleasing. It starts to be important to get the right answers, and that's where\nnerds show to advantage. Bill Gates will of course come to mind. Though\nnotoriously lacking in social skills, he gets the right answers, at least as\nmeasured in revenue.  \n  \nThe other thing that's different about the real world is that it's much\nlarger. In a large enough pool, even the smallest minorities can achieve a\ncritical mass if they clump together. Out in the real world, nerds collect in\ncertain places and form their own societies where intelligence is the most\nimportant thing. Sometimes the current even starts to flow in the other\ndirection: sometimes, particularly in university math and science departments,\nnerds deliberately exaggerate their awkwardness in order to seem smarter. John\nNash so admired Norbert Wiener that he adopted his habit of touching the wall\nas he walked down a corridor.  \n  \n  \n  \nAs a thirteen-year-old kid, I didn't have much more experience of the world\nthan what I saw immediately around me. The warped little world we lived in\nwas, I thought, _the world._ The world seemed cruel and boring, and I'm not\nsure which was worse.  \n  \nBecause I didn't fit into this world, I thought that something must be wrong\nwith me. I didn't realize that the reason we nerds didn't fit in was that in\nsome ways we were a step ahead. We were already thinking about the kind of\nthings that matter in the real world, instead of spending all our time playing\nan exacting but mostly pointless game like the others.  \n  \nWe were a bit like an adult would be if he were thrust back into middle\nschool. He wouldn't know the right clothes to wear, the right music to like,\nthe right slang to use. He'd seem to the kids a complete alien. The thing is,\nhe'd know enough not to care what they thought. We had no such confidence.  \n  \nA lot of people seem to think it's good for smart kids to be thrown together\nwith \"normal\" kids at this stage of their lives. Perhaps. But in at least some\ncases the reason the nerds don't fit in really is that everyone else is crazy.\nI remember sitting in the audience at a \"pep rally\" at my high school,\nwatching as the cheerleaders threw an effigy of an opposing player into the\naudience to be torn to pieces. I felt like an explorer witnessing some bizarre\ntribal ritual.  \n  \n  \n  \nIf I could go back and give my thirteen year old self some advice, the main\nthing I'd tell him would be to stick his head up and look around. I didn't\nreally grasp it at the time, but the whole world we lived in was as fake as a\nTwinkie. Not just school, but the entire town. Why do people move to suburbia?\nTo have kids! So no wonder it seemed boring and sterile. The whole place was a\ngiant nursery, an artificial town created explicitly for the purpose of\nbreeding children.  \n  \nWhere I grew up, it felt as if there was nowhere to go, and nothing to do.\nThis was no accident. Suburbs are deliberately designed to exclude the outside\nworld, because it contains things that could endanger children.  \n  \nAnd as for the schools, they were just holding pens within this fake world.\nOfficially the purpose of schools is to teach kids. In fact their primary\npurpose is to keep kids locked up in one place for a big chunk of the day so\nadults can get things done. And I have no problem with this: in a specialized\nindustrial society, it would be a disaster to have kids running around loose.  \n  \nWhat bothers me is not that the kids are kept in prisons, but that (a) they\naren't told about it, and (b) the prisons are run mostly by the inmates. Kids\nare sent off to spend six years memorizing meaningless facts in a world ruled\nby a caste of giants who run after an oblong brown ball, as if this were the\nmost natural thing in the world. And if they balk at this surreal cocktail,\nthey're called misfits.  \n  \n  \n  \nLife in this twisted world is stressful for the kids. And not just for the\nnerds. Like any war, it's damaging even to the winners.  \n  \nAdults can't avoid seeing that teenage kids are tormented. So why don't they\ndo something about it? Because they blame it on puberty. The reason kids are\nso unhappy, adults tell themselves, is that monstrous new chemicals,\n_hormones_ , are now coursing through their bloodstream and messing up\neverything. There's nothing wrong with the system; it's just inevitable that\nkids will be miserable at that age.  \n  \nThis idea is so pervasive that even the kids believe it, which probably\ndoesn't help. Someone who thinks his feet naturally hurt is not going to stop\nto consider the possibility that he is wearing the wrong size shoes.  \n  \nI'm suspicious of this theory that thirteen-year-old kids are intrinsically\nmessed up. If it's physiological, it should be universal. Are Mongol nomads\nall nihilists at thirteen? I've read a lot of history, and I have not seen a\nsingle reference to this supposedly universal fact before the twentieth\ncentury. Teenage apprentices in the Renaissance seem to have been cheerful and\neager. They got in fights and played tricks on one another of course\n(Michelangelo had his nose broken by a bully), but they weren't crazy.  \n  \nAs far as I can tell, the concept of the hormone-crazed teenager is coeval\nwith suburbia. I don't think this is a coincidence. I think teenagers are\ndriven crazy by the life they're made to lead. Teenage apprentices in the\nRenaissance were working dogs. Teenagers now are neurotic lapdogs. Their\ncraziness is the craziness of the idle everywhere.  \n  \n  \n  \nWhen I was in school, suicide was a constant topic among the smarter kids. No\none I knew did it, but several planned to, and some may have tried. Mostly\nthis was just a pose. Like other teenagers, we loved the dramatic, and suicide\nseemed very dramatic. But partly it was because our lives were at times\ngenuinely miserable.  \n  \nBullying was only part of the problem. Another problem, and possibly an even\nworse one, was that we never had anything real to work on. Humans like to\nwork; in most of the world, your work is your identity. And all the work we\ndid was [pointless](essay.html), or seemed so at the time.  \n  \nAt best it was practice for real work we might do far in the future, so far\nthat we didn't even know at the time what we were practicing for. More often\nit was just an arbitrary series of hoops to jump through, words without\ncontent designed mainly for testability. (The three main causes of the Civil\nWar were.... Test: List the three main causes of the Civil War.)  \n  \nAnd there was no way to opt out. The adults had agreed among themselves that\nthis was to be the route to college. The only way to escape this empty life\nwas to submit to it.  \n  \n  \n  \nTeenage kids used to have a more active role in society. In pre-industrial\ntimes, they were all apprentices of one sort or another, whether in shops or\non farms or even on warships. They weren't left to create their own societies.\nThey were junior members of adult societies.  \n  \nTeenagers seem to have respected adults more then, because the adults were the\nvisible experts in the skills they were trying to learn. Now most kids have\nlittle idea what their parents do in their distant offices, and see no\nconnection (indeed, there is precious little) between schoolwork and the work\nthey'll do as adults.  \n  \nAnd if teenagers respected adults more, adults also had more use for\nteenagers. After a couple years' training, an apprentice could be a real help.\nEven the newest apprentice could be made to carry messages or sweep the\nworkshop.  \n  \nNow adults have no immediate use for teenagers. They would be in the way in an\noffice. So they drop them off at school on their way to work, much as they\nmight drop the dog off at a kennel if they were going away for the weekend.  \n  \nWhat happened? We're up against a hard one here. The cause of this problem is\nthe same as the cause of so many present ills: specialization. As jobs become\nmore specialized, we have to train longer for them. Kids in pre-industrial\ntimes started working at about 14 at the latest; kids on farms, where most\npeople lived, began far earlier. Now kids who go to college don't start\nworking full-time till 21 or 22. With some degrees, like MDs and PhDs, you may\nnot finish your training till 30.  \n  \nTeenagers now are useless, except as cheap labor in industries like fast food,\nwhich evolved to exploit precisely this fact. In almost any other kind of\nwork, they'd be a net loss. But they're also too young to be left\nunsupervised. Someone has to watch over them, and the most efficient way to do\nthis is to collect them together in one place. Then a few adults can watch all\nof them.  \n  \nIf you stop there, what you're describing is literally a prison, albeit a\npart-time one. The problem is, many schools practically do stop there. The\nstated purpose of schools is to educate the kids. But there is no external\npressure to do this well. And so most schools do such a bad job of teaching\nthat the kids don't really take it seriously-- not even the smart kids. Much\nof the time we were all, students and teachers both, just going through the\nmotions.  \n  \nIn my high school French class we were supposed to read Hugo's _Les\nMiserables._ I don't think any of us knew French well enough to make our way\nthrough this enormous book. Like the rest of the class, I just skimmed the\nCliff's Notes. When we were given a test on the book, I noticed that the\nquestions sounded odd. They were full of long words that our teacher wouldn't\nhave used. Where had these questions come from? From the Cliff's Notes, it\nturned out. The teacher was using them too. We were all just pretending.  \n  \nThere are certainly great public school teachers. The energy and imagination\nof my fourth grade teacher, Mr. Mihalko, made that year something his students\nstill talk about, thirty years later. But teachers like him were individuals\nswimming upstream. They couldn't fix the system.  \n  \n  \n  \nIn almost any group of people you'll find hierarchy. When groups of adults\nform in the real world, it's generally for some common purpose, and the\nleaders end up being those who are best at it. The problem with most schools\nis, they have no purpose. But hierarchy there must be. And so the kids make\none out of nothing.  \n  \nWe have a phrase to describe what happens when rankings have to be created\nwithout any meaningful criteria. We say that the situation _degenerates into a\npopularity contest._ And that's exactly what happens in most American schools.\nInstead of depending on some real test, one's rank depends mostly on one's\nability to increase one's rank. It's like the court of Louis XIV. There is no\nexternal opponent, so the kids become one another's opponents.  \n  \nWhen there is some real external test of skill, it isn't painful to be at the\nbottom of the hierarchy. A rookie on a football team doesn't resent the skill\nof the veteran; he hopes to be like him one day and is happy to have the\nchance to learn from him. The veteran may in turn feel a sense of _noblesse\noblige_. And most importantly, their status depends on how well they do\nagainst opponents, not on whether they can push the other down.  \n  \nCourt hierarchies are another thing entirely. This type of society debases\nanyone who enters it. There is neither admiration at the bottom, nor _noblesse\noblige_ at the top. It's kill or be killed.  \n  \nThis is the sort of society that gets created in American secondary schools.\nAnd it happens because these schools have no real purpose beyond keeping the\nkids all in one place for a certain number of hours each day. What I didn't\nrealize at the time, and in fact didn't realize till very recently, is that\nthe twin horrors of school life, the cruelty and the boredom, both have the\nsame cause.  \n  \n  \n  \nThe mediocrity of American public schools has worse consequences than just\nmaking kids unhappy for six years. It breeds a rebelliousness that actively\ndrives kids away from the things they're supposed to be learning.  \n  \nLike many nerds, probably, it was years after high school before I could bring\nmyself to read anything we'd been assigned then. And I lost more than books. I\nmistrusted words like \"character\" and \"integrity\" because they had been so\ndebased by adults. As they were used then, these words all seemed to mean the\nsame thing: obedience. The kids who got praised for these qualities tended to\nbe at best dull-witted prize bulls, and at worst facile schmoozers. If that\nwas what character and integrity were, I wanted no part of them.  \n  \nThe word I most misunderstood was \"tact.\" As used by adults, it seemed to mean\nkeeping your mouth shut. I assumed it was derived from the same root as\n\"tacit\" and \"taciturn,\" and that it literally meant being quiet. I vowed that\nI would never be tactful; they were never going to shut me up. In fact, it's\nderived from the same root as \"tactile,\" and what it means is to have a deft\ntouch. Tactful is the opposite of clumsy. I don't think I learned this until\ncollege.  \n  \n  \n  \nNerds aren't the only losers in the popularity rat race. Nerds are unpopular\nbecause they're distracted. There are other kids who deliberately opt out\nbecause they're so disgusted with the whole process.  \n  \nTeenage kids, even rebels, don't like to be alone, so when kids opt out of the\nsystem, they tend to do it as a group. At the schools I went to, the focus of\nrebellion was drug use, specifically marijuana. The kids in this tribe wore\nblack concert t-shirts and were called \"freaks.\"  \n  \nFreaks and nerds were allies, and there was a good deal of overlap between\nthem. Freaks were on the whole smarter than other kids, though never studying\n(or at least never appearing to) was an important tribal value. I was more in\nthe nerd camp, but I was friends with a lot of freaks.  \n  \nThey used drugs, at least at first, for the social bonds they created. It was\nsomething to do together, and because the drugs were illegal, it was a shared\nbadge of rebellion.  \n  \nI'm not claiming that bad schools are the whole reason kids get into trouble\nwith drugs. After a while, drugs have their own momentum. No doubt some of the\nfreaks ultimately used drugs to escape from other problems-- trouble at home,\nfor example. But, in my school at least, the reason most kids _started_ using\ndrugs was rebellion. Fourteen-year-olds didn't start smoking pot because\nthey'd heard it would help them forget their problems. They started because\nthey wanted to join a different tribe.  \n  \nMisrule breeds rebellion; this is not a new idea. And yet the authorities\nstill for the most part act as if drugs were themselves the cause of the\nproblem.  \n  \n  \n  \nThe real problem is the emptiness of school life. We won't see solutions till\nadults realize that. The adults who may realize it first are the ones who were\nthemselves nerds in school. Do you want your kids to be as unhappy in eighth\ngrade as you were? I wouldn't. Well, then, is there anything we can do to fix\nthings? Almost certainly. There is nothing inevitable about the current\nsystem. It has come about mostly by default.  \n  \nAdults, though, are busy. Showing up for school plays is one thing. Taking on\nthe educational bureaucracy is another. Perhaps a few will have the energy to\ntry to change things. I suspect the hardest part is realizing that you can.  \n  \nNerds still in school should not hold their breath. Maybe one day a heavily\narmed force of adults will show up in helicopters to rescue you, but they\nprobably won't be coming this month. Any immediate improvement in nerds' lives\nis probably going to have to come from the nerds themselves.  \n  \nMerely understanding the situation they're in should make it less painful.\nNerds aren't losers. They're just playing a different game, and a game much\ncloser to the one played in the real world. Adults know this. It's hard to\nfind successful adults now who don't claim to have been nerds in high school.  \n  \nIt's important for nerds to realize, too, that school is not life. School is a\nstrange, artificial thing, half sterile and half feral. It's all-encompassing,\nlike life, but it isn't the real thing. It's only temporary, and if you look,\nyou can see beyond it even while you're still in it.  \n  \nIf life seems awful to kids, it's neither because hormones are turning you all\ninto monsters (as your parents believe), nor because life actually is awful\n(as you believe). It's because the adults, who no longer have any economic use\nfor you, have abandoned you to spend years cooped up together with nothing\nreal to do. _Any_ society of that type is awful to live in. You don't have to\nlook any further to explain why teenage kids are unhappy.  \n  \nI've said some harsh things in this essay, but really the thesis is an\noptimistic one-- that several problems we take for granted are in fact not\ninsoluble after all. Teenage kids are not inherently unhappy monsters. That\nshould be encouraging news to kids and adults both.  \n  \n  \n  \n**Thanks** to Sarah Harlin, Trevor Blackwell, Robert Morris, Eric Raymond, and\nJackie Weicker for reading drafts of this essay, and Maria Daniels for\nscanning photos.  \n  \n  \n\nFebruary 2008  \n  \nThe fiery reaction to the release of [Arc](arc.html) had an unexpected\nconsequence: it made me realize I had a design philosophy. The main complaint\nof the more articulate critics was that Arc seemed so flimsy. After years of\nworking on it, all I had to show for myself were a few thousand lines of\nmacros? Why hadn't I worked on more substantial problems?  \n  \nAs I was mulling over these remarks it struck me how familiar they seemed.\nThis was exactly the kind of thing people said at first about Viaweb, and Y\nCombinator, and most of my essays.  \n  \nWhen we launched Viaweb, it seemed laughable to VCs and e-commerce \"experts.\"\nWe were just a couple guys in an apartment, which did not seem cool in 1995\nthe way it does now. And the thing we'd built, as far as they could tell,\nwasn't even software. Software, to them, equalled big, honking Windows apps.\nSince Viaweb was the first web-based app they'd seen, it seemed to be nothing\nmore than a website. They were even more contemptuous when they discovered\nthat Viaweb didn't process credit card transactions (we didn't for the whole\nfirst year). Transaction processing seemed to them what e-commerce was all\nabout. It sounded serious and difficult.  \n  \nAnd yet, mysteriously, Viaweb ended up crushing all its competitors.  \n  \nThe initial reaction to [Y Combinator](http://ycombinator.com) was almost\nidentical. It seemed laughably lightweight. Startup funding meant series A\nrounds: millions of dollars given to a small number of startups founded by\npeople with established credentials after months of serious, businesslike\nmeetings, on terms described in a document a foot thick. Y Combinator seemed\ninconsequential. It's too early to say yet whether Y Combinator will turn out\nlike Viaweb, but judging from the number of imitations, a lot of people seem\nto think we're on to something.  \n  \nI can't measure whether my essays are successful, except in page views, but\nthe reaction to them is at least different from when I started. At first the\ndefault reaction of the Slashdot trolls was (translated into articulate\nterms): \"Who is this guy and what authority does he have to write about these\ntopics? I haven't read the essay, but there's no way anything so short and\nwritten in such an informal style could have anything useful to say about such\nand such topic, when people with degrees in the subject have already written\nmany thick books about it.\" Now there's a new generation of trolls on a new\ngeneration of sites, but they have at least started to omit the initial \"Who\nis this guy?\"  \n  \nNow people are saying the same things about Arc that they said at first about\nViaweb and Y Combinator and most of my essays. Why the pattern? The answer, I\nrealized, is that my m.o. for all four has been the same.  \n  \nHere it is: I like to find (a) simple solutions (b) to overlooked problems (c)\nthat actually need to be solved, and (d) deliver them as informally as\npossible, (e) starting with a very crude version 1, then (f) iterating\nrapidly.  \n  \nWhen I first laid out these principles explicitly, I noticed something\nstriking: this is practically a recipe for generating a contemptuous initial\nreaction. Though simple solutions are better, they don't seem as impressive as\ncomplex ones. Overlooked problems are by definition problems that most people\nthink don't matter. Delivering solutions in an informal way means that instead\nof judging something by the way it's presented, people have to actually\nunderstand it, which is more work. And starting with a crude version 1 means\nyour initial effort is always small and incomplete.  \n  \nI'd noticed, of course, that people never seemed to grasp new ideas at first.\nI thought it was just because most people were stupid. Now I see there's more\nto it than that.  Like a contrarian investment fund, someone following this\nstrategy will almost always be doing things that seem wrong to the average\nperson.  \n  \nAs with contrarian investment strategies, that's exactly the point. This\ntechnique is successful (in the long term) because it gives you all the\nadvantages other people forgo by trying to seem legit. If you work on\noverlooked problems, you're more likely to discover new things, because you\nhave less competition. If you deliver solutions informally, you (a) save all\nthe effort you would have had to expend to make them look impressive, and (b)\navoid the danger of fooling yourself as well as your audience. And if you\nrelease a crude version 1 then iterate, your solution can benefit from the\nimagination of nature, which, as Feynman pointed out, is more powerful than\nyour own.  \n  \nIn the case of Viaweb, the simple solution was to make the software run on the\nserver. The overlooked problem was to generate web sites automatically; in\n1995, online stores were all made by hand by human designers, but we knew this\nwouldn't scale. The part that actually mattered was graphic design, not\ntransaction processing. The informal delivery mechanism was me, showing up in\njeans and a t-shirt at some retailer's office. And the crude version 1 was, if\nI remember correctly, less than 10,000 lines of code when we launched.  \n  \nThe power of this technique extends beyond startups and programming languages\nand essays. It probably extends to any kind of creative work. Certainly it can\nbe used in painting: this is exactly what Cezanne and Klee did.  \n  \nAt Y Combinator we bet money on it, in the sense that we encourage the\nstartups we fund to work this way. There are always new ideas right under your\nnose. So look for simple things that other people have overlooked\u2014things\npeople will later claim were \"obvious\"\u2014especially when they've been led astray\nby obsolete conventions, or by trying to do things that are superficially\nimpressive. Figure out what the real problem is, and make sure you solve that.\nDon't worry about trying to look corporate; the product is what wins in the\nlong term. And launch as soon as you can, so you start learning from users\nwhat you should have been making.  \n  \n[Reddit](http://reddit.com) is a classic example of this approach. When Reddit\nfirst launched, it seemed like there was nothing to it. To the graphically\nunsophisticated its deliberately minimal design seemed like no design at all.\nBut Reddit solved the real problem, which was to tell people what was new and\notherwise stay out of the way. As a result it became massively successful. Now\nthat conventional ideas have caught up with it, it seems obvious. People look\nat Reddit and think the founders were lucky. Like all such things, it was\nharder than it looked. The Reddits pushed so hard against the current that\nthey reversed it; now it looks like they're merely floating downstream.  \n  \nSo when you look at something like Reddit and think \"I wish I could think of\nan idea like that,\" remember: ideas like that are all around you. But you\nignore them because they look wrong.  \n  \n  \n\nJanuary 2020  \n  \nWhen I was young, I thought old people had everything figured out. Now that\nI'm old, I know this isn't true.  \n  \nI constantly feel like a noob. It seems like I'm always talking to some\nstartup working in a new field I know nothing about, or reading a book about a\ntopic I don't understand well enough, or visiting some new country where I\ndon't know how things work.  \n  \nIt's not pleasant to feel like a noob. And the word \"noob\" is certainly not a\ncompliment. And yet today I realized something encouraging about being a noob:\nthe more of a noob you are locally, the less of a noob you are globally.  \n  \nFor example, if you stay in your home country, you'll feel less of a noob than\nif you move to Farawavia, where everything works differently. And yet you'll\nknow more if you move. So the feeling of being a noob is inversely correlated\nwith actual ignorance.  \n  \nBut if the feeling of being a noob is good for us, why do we dislike it? What\nevolutionary purpose could such an aversion serve?  \n  \nI think the answer is that there are two sources of feeling like a noob: being\nstupid, and doing something novel. Our dislike of feeling like a noob is our\nbrain telling us \"Come on, come on, figure this out.\" Which was the right\nthing to be thinking for most of human history. The life of hunter-gatherers\nwas complex, but it didn't change as much as life does now. They didn't\nsuddenly have to figure out what to do about cryptocurrency. So it made sense\nto be biased toward competence at existing problems over the discovery of new\nones. It made sense for humans to dislike the feeling of being a noob, just\nas, in a world where food was scarce, it made sense for them to dislike the\nfeeling of being hungry.  \n  \nNow that too much food is more of a problem than too little, our dislike of\nfeeling hungry leads us astray. And I think our dislike of feeling like a noob\ndoes too.  \n  \nThough it feels unpleasant, and people will sometimes ridicule you for it, the\nmore you feel like a noob, the better.  \n  \n  \n  \n  \n  \n\nThere is a kind of mania for object-oriented programming at the moment, but\nsome of the [smartest programmers](reesoo.html) I know are some of the least\nexcited about it.  \n  \nMy own feeling is that object-oriented programming is a useful technique in\nsome cases, but it isn't something that has to pervade every program you\nwrite. You should be able to define new types, but you shouldn't have to\nexpress every program as the definition of new types.  \n  \nI think there are five reasons people like object-oriented programming, and\nthree and a half of them are bad:  \n  \n\n  1. Object-oriented programming is exciting if you have a statically-typed language without lexical closures or macros. To some degree, it offers a way around these limitations. (See [Greenspun's Tenth Rule](quotes.html).)  \n  \n\n  2. Object-oriented programming is popular in big companies, because it suits the way they write software. At big companies, software tends to be written by large (and frequently changing) teams of mediocre programmers. Object-oriented programming imposes a discipline on these programmers that prevents any one of them from doing too much damage. The price is that the resulting code is bloated with protocols and full of duplication. This is not too high a price for big companies, because their software is probably going to be bloated and full of duplication anyway.  \n  \n\n  3. Object-oriented programming generates a lot of what looks like work. Back in the days of fanfold, there was a type of programmer who would only put five or ten lines of code on a page, preceded by twenty lines of elaborately formatted comments. Object-oriented programming is like crack for these people: it lets you incorporate all this scaffolding right into your source code. Something that a Lisp hacker might handle by pushing a symbol onto a list becomes a whole file of classes and methods. So it is a good tool if you want to convince yourself, or someone else, that you are doing a lot of work.  \n  \n\n  4. If a language is itself an object-oriented program, it can be extended by users. Well, maybe. Or maybe you can do even better by offering the sub-concepts of object-oriented programming a la carte. Overloading, for example, is not intrinsically tied to classes. We'll see.  \n  \n\n  5. Object-oriented abstractions map neatly onto the domains of certain specific kinds of programs, like simulations and CAD systems. \n\nI personally have never needed object-oriented abstractions. Common Lisp has\nan enormously powerful object system and I've never used it once. I've done a\nlot of things (e.g. making hash tables full of closures) that would have\nrequired object-oriented techniques to do in wimpier languages, but I have\nnever had to use CLOS.  \n  \nMaybe I'm just stupid, or have worked on some limited subset of applications.\nThere is a danger in designing a language based on one's own experience of\nprogramming. But it seems more dangerous to put stuff in that you've never\nneeded because it's thought to be a good idea.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nMarch 2007  \n  \n _(This essay is derived from talks at the 2007 Startup School and the\nBerkeley CSUA.)_  \n  \nWe've now been doing Y Combinator long enough to have some data about success\nrates. Our first batch, in the summer of 2005, had eight startups in it. Of\nthose eight, it now looks as if at least four succeeded. Three have been\nacquired: [Reddit](http://reddit.com) was a merger of two, Reddit and\nInfogami, and a third was acquired that we can't talk about yet. Another from\nthat batch was [Loopt](http://loopt.com), which is doing so well they could\nprobably be acquired in about ten minutes if they wanted to.  \n  \nSo about half the founders from that first summer, less than two years ago,\nare now rich, at least by their standards. (One thing you learn when you get\nrich is that there are many degrees of it.)  \n  \nI'm not ready to predict our success rate will stay as high as 50%. That first\nbatch could have been an anomaly. But we should be able to do better than the\noft-quoted (and probably made up) standard figure of 10%. I'd feel safe aiming\nat 25%.  \n  \nEven the founders who fail don't seem to have such a bad time. Of those first\neight startups, three are now probably dead. In two cases the founders just\nwent on to do other things at the end of the summer. I don't think they were\ntraumatized by the experience. The closest to a traumatic failure was Kiko,\nwhose founders kept working on their startup for a whole year before being\nsquashed by Google Calendar. But they ended up happy. They sold their software\non eBay for a quarter of a million dollars. After they paid back their angel\ninvestors, they had about a year's salary each. [1] Then they immediately went\non to start a new and much more exciting startup,\n[Justin.TV](http://justin.tv).  \n  \nSo here is an even more striking statistic: 0% of that first batch had a\nterrible experience. They had ups and downs, like every startup, but I don't\nthink any would have traded it for a job in a cubicle. And that statistic is\nprobably not an anomaly. Whatever our long-term success rate ends up being, I\nthink the rate of people who wish they'd gotten a regular job will stay close\nto 0%.  \n  \nThe big mystery to me is: why don't more people start startups? If nearly\neveryone who does it prefers it to a regular job, and a significant percentage\nget rich, why doesn't everyone want to do this? A lot of people think we get\nthousands of applications for each funding cycle. In fact we usually only get\nseveral hundred. Why don't more people apply? And while it must seem to anyone\nwatching this world that startups are popping up like crazy, the number is\nsmall compared to the number of people with the necessary skills. The great\nmajority of programmers still go straight from college to cubicle, and stay\nthere.  \n  \nIt seems like people are not acting in their own interest. What's going on?\nWell, I can answer that. Because of Y Combinator's position at the very start\nof the venture funding process, we're probably the world's leading experts on\nthe psychology of people who aren't sure if they want to start a company.  \n  \nThere's nothing wrong with being unsure. If you're a hacker thinking about\nstarting a startup and hesitating before taking the leap, you're part of a\ngrand tradition. Larry and Sergey seem to have felt the same before they\nstarted Google, and so did Jerry and Filo before they started Yahoo. In fact,\nI'd guess the most successful startups are the ones started by uncertain\nhackers rather than gung-ho business guys.  \n  \nWe have some evidence to support this. Several of the most successful startups\nwe've funded told us later that they only decided to apply at the last moment.\nSome decided only hours before the deadline.  \n  \nThe way to deal with uncertainty is to analyze it into components. Most people\nwho are reluctant to do something have about eight different reasons mixed\ntogether in their heads, and don't know themselves which are biggest. Some\nwill be justified and some bogus, but unless you know the relative proportion\nof each, you don't know whether your overall uncertainty is mostly justified\nor mostly bogus.  \n  \nSo I'm going to list all the components of people's reluctance to start\nstartups, and explain which are real. Then would-be founders can use this as a\nchecklist to examine their own feelings.  \n  \nI admit my goal is to increase your self-confidence. But there are two things\ndifferent here from the usual confidence-building exercise. One is that I'm\nmotivated to be honest. Most people in the confidence-building business have\nalready achieved their goal when you buy the book or pay to attend the seminar\nwhere they tell you how great you are. Whereas if I encourage people to start\nstartups who shouldn't, I make my own life worse. If I encourage too many\npeople to apply to Y Combinator, it just means more work for me, because I\nhave to read all the applications.  \n  \nThe other thing that's going to be different is my approach. Instead of being\npositive, I'm going to be negative. Instead of telling you \"come on, you can\ndo it\" I'm going to consider all the reasons you aren't doing it, and show why\nmost (but not all) should be ignored. We'll start with the one everyone's born\nwith.  \n  \n**1\\. Too young**  \n  \nA lot of people think they're too young to start a startup. Many are right.\nThe median age worldwide is about 27, so probably a third of the population\ncan truthfully say they're too young.  \n  \nWhat's too young? One of our goals with Y Combinator was to discover the lower\nbound on the age of startup founders. It always seemed to us that investors\nwere too conservative here\u2014that they wanted to fund professors, when really\nthey should be funding grad students or even undergrads.  \n  \nThe main thing we've discovered from pushing the edge of this envelope is not\nwhere the edge is, but how fuzzy it is. The outer limit may be as low as 16.\nWe don't look beyond 18 because people younger than that can't legally enter\ninto contracts. But the most successful founder we've funded so far, Sam\nAltman, was 19 at the time.  \n  \nSam Altman, however, is an outlying data point. When he was 19, he seemed like\nhe had a 40 year old inside him. There are other 19 year olds who are 12\ninside.  \n  \nThere's a reason we have a distinct word \"adult\" for people over a certain\nage. There is a threshold you cross. It's conventionally fixed at 21, but\ndifferent people cross it at greatly varying ages. You're old enough to start\na startup if you've crossed this threshold, whatever your age.  \n  \nHow do you tell? There are a couple tests adults use. I realized these tests\nexisted after meeting Sam Altman, actually. I noticed that I felt like I was\ntalking to someone much older. Afterward I wondered, what am I even measuring?\nWhat made him seem older?  \n  \nOne test adults use is whether you still have the kid flake reflex. When\nyou're a little kid and you're asked to do something hard, you can cry and say\n\"I can't do it\" and the adults will probably let you off. As a kid there's a\nmagic button you can press by saying \"I'm just a kid\" that will get you out of\nmost difficult situations. Whereas adults, by definition, are not allowed to\nflake. They still do, of course, but when they do they're ruthlessly pruned.  \n  \nThe other way to tell an adult is by how they react to a challenge. Someone\nwho's not yet an adult will tend to respond to a challenge from an adult in a\nway that acknowledges their dominance. If an adult says \"that's a stupid\nidea,\" a kid will either crawl away with his tail between his legs, or rebel.\nBut rebelling presumes inferiority as much as submission. The adult response\nto \"that's a stupid idea,\" is simply to look the other person in the eye and\nsay \"Really? Why do you think so?\"  \n  \nThere are a lot of adults who still react childishly to challenges, of course.\nWhat you don't often find are kids who react to challenges like adults. When\nyou do, you've found an adult, whatever their age.  \n  \n**2\\. Too inexperienced**  \n  \nI once wrote that startup founders should be at least 23, and that people\nshould work for another company for a few years before starting their own. I\nno longer believe that, and what changed my mind is the example of the\nstartups we've funded.  \n  \nI still think 23 is a better age than 21. But the best way to get experience\nif you're 21 is to start a startup. So, paradoxically, if you're too\ninexperienced to start a startup, what you should do is start one. That's a\nway more efficient cure for inexperience than a normal job. In fact, getting a\nnormal job may actually make you less able to start a startup, by turning you\ninto a tame animal who thinks he needs an office to work in and a product\nmanager to tell him what software to write.  \n  \nWhat really convinced me of this was the Kikos. They started a startup right\nout of college. Their inexperience caused them to make a lot of mistakes. But\nby the time we funded their second startup, a year later, they had become\nextremely formidable. They were certainly not tame animals. And there is no\nway they'd have grown so much if they'd spent that year working at Microsoft,\nor even Google. They'd still have been diffident junior programmers.  \n  \nSo now I'd advise people to go ahead and start startups right out of college.\nThere's no better time to take risks than when you're young. Sure, you'll\nprobably fail. But even failure will get you to the ultimate goal faster than\ngetting a job.  \n  \nIt worries me a bit to be saying this, because in effect we're advising people\nto educate themselves by failing at our expense, but it's the truth.  \n  \n**3\\. Not determined enough**  \n  \nYou need a lot of determination to succeed as a startup founder. It's probably\nthe single best predictor of success.  \n  \nSome people may not be determined enough to make it. It's hard for me to say\nfor sure, because I'm so determined that I can't imagine what's going on in\nthe heads of people who aren't. But I know they exist.  \n  \nMost hackers probably underestimate their determination. I've seen a lot\nbecome visibly more determined as they get used to running a startup. I can\nthink of several we've funded who would have been delighted at first to be\nbought for $2 million, but are now set on world domination.  \n  \nHow can you tell if you're determined enough, when Larry and Sergey themselves\nwere unsure at first about starting a company? I'm guessing here, but I'd say\nthe test is whether you're sufficiently driven to work on your own projects.\nThough they may have been unsure whether they wanted to start a company, it\ndoesn't seem as if Larry and Sergey were meek little research assistants,\nobediently doing their advisors' bidding. They started projects of their own.  \n  \n**4\\. Not smart enough**  \n  \nYou may need to be moderately smart to succeed as a startup founder. But if\nyou're worried about this, you're probably mistaken. If you're smart enough to\nworry that you might not be smart enough to start a startup, you probably are.  \n  \nAnd in any case, starting a startup just doesn't require that much\nintelligence. Some startups do. You have to be good at math to write\nMathematica. But most companies do more mundane stuff where the decisive\nfactor is effort, not brains. Silicon Valley can warp your perspective on\nthis, because there's a cult of smartness here. People who aren't smart at\nleast try to act that way. But if you think it takes a lot of intelligence to\nget rich, try spending a couple days in some of the fancier bits of New York\nor LA.  \n  \nIf you don't think you're smart enough to start a startup doing something\ntechnically difficult, just write enterprise software. Enterprise software\ncompanies aren't technology companies, they're sales companies, and sales\ndepends mostly on effort.  \n  \n**5\\. Know nothing about business**  \n  \nThis is another variable whose coefficient should be zero. You don't need to\nknow anything about business to start a startup. The initial focus should be\nthe product. All you need to know in this phase is how to build things people\nwant. If you succeed, you'll have to think about how to make money from it.\nBut this is so easy you can pick it up on the fly.  \n  \nI get a fair amount of flak for telling founders just to make something great\nand not worry too much about making money. And yet all the empirical evidence\npoints that way: pretty much 100% of startups that make something popular\nmanage to make money from it. And acquirers tell me privately that revenue is\nnot what they buy startups for, but their strategic value. Which means,\nbecause they made something people want. Acquirers know the rule holds for\nthem too: if users love you, you can always make money from that somehow, and\nif they don't, the cleverest business model in the world won't save you.  \n  \nSo why do so many people argue with me? I think one reason is that they hate\nthe idea that a bunch of twenty year olds could get rich from building\nsomething cool that doesn't make any money. They just don't want that to be\npossible. But how possible it is doesn't depend on how much they want it to\nbe.  \n  \nFor a while it annoyed me to hear myself described as some kind of\nirresponsible pied piper, leading impressionable young hackers down the road\nto ruin. But now I realize this kind of controversy is a sign of a good idea.  \n  \nThe most valuable truths are the ones most people don't believe. They're like\nundervalued stocks. If you start with them, you'll have the whole field to\nyourself. So when you find an idea you know is good but most people disagree\nwith, you should not merely ignore their objections, but push aggressively in\nthat direction. In this case, that means you should seek out ideas that would\nbe popular but seem hard to make money from.  \n  \nWe'll bet a seed round you can't make something popular that we can't figure\nout how to make money from.  \n  \n**6\\. No cofounder**  \n  \nNot having a cofounder is a real problem. A startup is too much for one person\nto bear. And though we differ from other investors on a lot of questions, we\nall agree on this. All investors, without exception, are more likely to fund\nyou with a cofounder than without.  \n  \nWe've funded two single founders, but in both cases we suggested their first\npriority should be to find a cofounder. Both did. But we'd have preferred them\nto have cofounders before they applied. It's not super hard to get a cofounder\nfor a project that's just been funded, and we'd rather have cofounders\ncommitted enough to sign up for something super hard.  \n  \nIf you don't have a cofounder, what should you do? Get one. It's more\nimportant than anything else. If there's no one where you live who wants to\nstart a startup with you, move where there are people who do. If no one wants\nto work with you on your current idea, switch to an idea people want to work\non.  \n  \nIf you're still in school, you're surrounded by potential cofounders. A few\nyears out it gets harder to find them. Not only do you have a smaller pool to\ndraw from, but most already have jobs, and perhaps even families to support.\nSo if you had friends in college you used to scheme about startups with, stay\nin touch with them as well as you can. That may help keep the dream alive.  \n  \nIt's possible you could meet a cofounder through something like a user's group\nor a conference. But I wouldn't be too optimistic. You need to work with\nsomeone to know whether you want them as a cofounder. [2]  \n  \nThe real lesson to draw from this is not how to find a cofounder, but that you\nshould start startups when you're young and there are lots of them around.  \n  \n**7\\. No idea**  \n  \nIn a sense, it's not a problem if you don't have a good idea, because most\nstartups change their idea anyway. In the average Y Combinator startup, I'd\nguess 70% of the idea is new at the end of the first three months. Sometimes\nit's 100%.  \n  \nIn fact, we're so sure the founders are more important than the initial idea\nthat we're going to try something new this funding cycle. We're going to let\npeople apply with no idea at all. If you want, you can answer the question on\nthe application form that asks what you're going to do with \"We have no idea.\"\nIf you seem really good we'll accept you anyway. We're confident we can sit\ndown with you and cook up some promising project.  \n  \nReally this just codifies what we do already. We put little weight on the\nidea. We ask mainly out of politeness. The kind of question on the application\nform that we really care about is the one where we ask what cool things you've\nmade. If what you've made is version one of a promising startup, so much the\nbetter, but the main thing we care about is whether you're good at making\nthings. Being lead developer of a popular open source project counts almost as\nmuch.  \n  \nThat solves the problem if you get funded by Y Combinator. What about in the\ngeneral case? Because in another sense, it is a problem if you don't have an\nidea. If you start a startup with no idea, what do you do next?  \n  \nSo here's the brief recipe for getting startup ideas. Find something that's\nmissing in your own life, and supply that need\u2014no matter how specific to you\nit seems. Steve Wozniak built himself a computer; who knew so many other\npeople would want them? A need that's narrow but genuine is a better starting\npoint than one that's broad but hypothetical. So even if the problem is simply\nthat you don't have a date on Saturday night, if you can think of a way to fix\nthat by writing software, you're onto something, because a lot of other people\nhave the same problem.  \n  \n**8\\. No room for more startups**  \n  \nA lot of people look at the ever-increasing number of startups and think \"this\ncan't continue.\" Implicit in their thinking is a fallacy: that there is some\nlimit on the number of startups there could be. But this is false. No one\nclaims there's any limit on the number of people who can work for salary at\n1000-person companies. Why should there be any limit on the number who can\nwork for equity at 5-person companies? [3]  \n  \nNearly everyone who works is satisfying some kind of need. Breaking up\ncompanies into smaller units doesn't make those needs go away. Existing needs\nwould probably get satisfied more efficiently by a network of startups than by\na few giant, hierarchical organizations, but I don't think that would mean\nless opportunity, because satisfying current needs would lead to more.\nCertainly this tends to be the case in individuals. Nor is there anything\nwrong with that. We take for granted things that medieval kings would have\nconsidered effeminate luxuries, like whole buildings heated to spring\ntemperatures year round. And if things go well, our descendants will take for\ngranted things we would consider shockingly luxurious. There is no absolute\nstandard for material wealth. Health care is a component of it, and that alone\nis a black hole. For the foreseeable future, people will want ever more\nmaterial wealth, so there is no limit to the amount of work available for\ncompanies, and for startups in particular.  \n  \nUsually the limited-room fallacy is not expressed directly. Usually it's\nimplicit in statements like \"there are only so many startups Google,\nMicrosoft, and Yahoo can buy.\" Maybe, though the list of acquirers is a lot\nlonger than that. And whatever you think of other acquirers, Google is not\nstupid. The reason big companies buy startups is that they've created\nsomething valuable. And why should there be any limit to the number of\nvaluable startups companies can acquire, any more than there is a limit to the\namount of wealth individual people want? Maybe there would be practical limits\non the number of startups any one acquirer could assimilate, but if there is\nvalue to be had, in the form of upside that founders are willing to forgo in\nreturn for an immediate payment, acquirers will evolve to consume it. Markets\nare pretty smart that way.  \n  \n**9\\. Family to support**  \n  \nThis one is real. I wouldn't advise anyone with a family to start a startup.\nI'm not saying it's a bad idea, just that I don't want to take responsibility\nfor advising it. I'm willing to take responsibility for telling 22 year olds\nto start startups. So what if they fail? They'll learn a lot, and that job at\nMicrosoft will still be waiting for them if they need it. But I'm not prepared\nto cross moms.  \n  \nWhat you can do, if you have a family and want to start a startup, is start a\nconsulting business you can then gradually turn into a product business.\nEmpirically the chances of pulling that off seem very small. You're never\ngoing to produce Google this way. But at least you'll never be without an\nincome.  \n  \nAnother way to decrease the risk is to join an existing startup instead of\nstarting your own. Being one of the first employees of a startup is a lot like\nbeing a founder, in both the good ways and the bad. You'll be roughly 1/n^2\nfounder, where n is your employee number.  \n  \nAs with the question of cofounders, the real lesson here is to start startups\nwhen you're young.  \n  \n**10\\. Independently wealthy**  \n  \nThis is my excuse for not starting a startup. Startups are stressful. Why do\nit if you don't need the money? For every \"serial entrepreneur,\" there are\nprobably twenty sane ones who think \"Start another company? Are you crazy?\"  \n  \nI've come close to starting new startups a couple times, but I always pull\nback because I don't want four years of my life to be consumed by random\nschleps. I know this business well enough to know you can't do it half-\nheartedly. What makes a good startup founder so dangerous is his willingness\nto endure infinite schleps.  \n  \nThere is a bit of a problem with retirement, though. Like a lot of people, I\nlike to work. And one of the many weird little problems you discover when you\nget rich is that a lot of the interesting people you'd like to work with are\nnot rich. They need to work at something that pays the bills. Which means if\nyou want to have them as colleagues, you have to work at something that pays\nthe bills too, even though you don't need to. I think this is what drives a\nlot of serial entrepreneurs, actually.  \n  \nThat's why I love working on Y Combinator so much. It's an excuse to work on\nsomething interesting with people I like.  \n  \n**11\\. Not ready for commitment**  \n  \nThis was my reason for not starting a startup for most of my twenties. Like a\nlot of people that age, I valued freedom most of all. I was reluctant to do\nanything that required a commitment of more than a few months. Nor would I\nhave wanted to do anything that completely took over my life the way a startup\ndoes. And that's fine. If you want to spend your time travelling around, or\nplaying in a band, or whatever, that's a perfectly legitimate reason not to\nstart a company.  \n  \nIf you start a startup that succeeds, it's going to consume at least three or\nfour years. (If it fails, you'll be done a lot quicker.) So you shouldn't do\nit if you're not ready for commitments on that scale. Be aware, though, that\nif you get a regular job, you'll probably end up working there for as long as\na startup would take, and you'll find you have much less spare time than you\nmight expect. So if you're ready to clip on that ID badge and go to that\norientation session, you may also be ready to start that startup.  \n  \n**12\\. Need for structure**  \n  \nI'm told there are people who need structure in their lives. This seems to be\na nice way of saying they need someone to tell them what to do. I believe such\npeople exist. There's plenty of empirical evidence: armies, religious cults,\nand so on. They may even be the majority.  \n  \nIf you're one of these people, you probably shouldn't start a startup. In\nfact, you probably shouldn't even go to work for one. In a good startup, you\ndon't get told what to do very much. There may be one person whose job title\nis CEO, but till the company has about twelve people no one should be telling\nanyone what to do. That's too inefficient. Each person should just do what\nthey need to without anyone telling them.  \n  \nIf that sounds like a recipe for chaos, think about a soccer team. Eleven\npeople manage to work together in quite complicated ways, and yet only in\noccasional emergencies does anyone tell anyone else what to do. A reporter\nonce asked David Beckham if there were any language problems at Real Madrid,\nsince the players were from about eight different countries. He said it was\nnever an issue, because everyone was so good they never had to talk. They all\njust did the right thing.  \n  \nHow do you tell if you're independent-minded enough to start a startup? If\nyou'd bristle at the suggestion that you aren't, then you probably are.  \n  \n**13\\. Fear of uncertainty**  \n  \nPerhaps some people are deterred from starting startups because they don't\nlike the uncertainty. If you go to work for Microsoft, you can predict fairly\naccurately what the next few years will be like\u2014all too accurately, in fact.\nIf you start a startup, anything might happen.  \n  \nWell, if you're troubled by uncertainty, I can solve that problem for you: if\nyou start a startup, it will probably fail. Seriously, though, this is not a\nbad way to think about the whole experience. Hope for the best, but expect the\nworst. In the worst case, it will at least be interesting. In the best case\nyou might get rich.  \n  \nNo one will blame you if the startup tanks, so long as you made a serious\neffort. There may once have been a time when employers would regard that as a\nmark against you, but they wouldn't now. I asked managers at big companies,\nand they all said they'd prefer to hire someone who'd tried to start a startup\nand failed over someone who'd spent the same time working at a big company.  \n  \nNor will investors hold it against you, as long as you didn't fail out of\nlaziness or incurable stupidity. I'm told there's a lot of stigma attached to\nfailing in other places\u2014in Europe, for example. Not here. In America,\ncompanies, like practically everything else, are disposable.  \n  \n**14\\. Don't realize what you're avoiding**  \n  \nOne reason people who've been out in the world for a year or two make better\nfounders than people straight from college is that they know what they're\navoiding. If their startup fails, they'll have to get a job, and they know how\nmuch jobs suck.  \n  \nIf you've had summer jobs in college, you may think you know what jobs are\nlike, but you probably don't. Summer jobs at technology companies are not real\njobs. If you get a summer job as a waiter, that's a real job. Then you have to\ncarry your weight. But software companies don't hire students for the summer\nas a source of cheap labor. They do it in the hope of recruiting them when\nthey graduate. So while they're happy if you produce, they don't expect you\nto.  \n  \nThat will change if you get a real job after you graduate. Then you'll have to\nearn your keep. And since most of what big companies do is boring, you're\ngoing to have to work on boring stuff. Easy, compared to college, but boring.\nAt first it may seem cool to get paid for doing easy stuff, after paying to do\nhard stuff in college. But that wears off after a few months. Eventually it\ngets demoralizing to work on dumb stuff, even if it's easy and you get paid a\nlot.  \n  \nAnd that's not the worst of it. The thing that really sucks about having a\nregular job is the expectation that you're supposed to be there at certain\ntimes. Even Google is afflicted with this, apparently. And what this means, as\neveryone who's had a regular job can tell you, is that there are going to be\ntimes when you have absolutely no desire to work on anything, and you're going\nto have to go to work anyway and sit in front of your screen and pretend to.\nTo someone who likes work, as most good hackers do, this is torture.  \n  \nIn a startup, you skip all that. There's no concept of office hours in most\nstartups. Work and life just get mixed together. But the good thing about that\nis that no one minds if you have a life at work. In a startup you can do\nwhatever you want most of the time. If you're a founder, what you want to do\nmost of the time is work. But you never have to pretend to.  \n  \nIf you took a nap in your office in a big company, it would seem\nunprofessional. But if you're starting a startup and you fall asleep in the\nmiddle of the day, your cofounders will just assume you were tired.  \n  \n**15\\. Parents want you to be a doctor**  \n  \nA significant number of would-be startup founders are probably dissuaded from\ndoing it by their parents. I'm not going to say you shouldn't listen to them.\nFamilies are entitled to their own traditions, and who am I to argue with\nthem? But I will give you a couple reasons why a safe career might not be what\nyour parents really want for you.  \n  \nOne is that parents tend to be more conservative for their kids than they\nwould be for themselves. This is actually a rational response to their\nsituation. Parents end up sharing more of their kids' ill fortune than good\nfortune. Most parents don't mind this; it's part of the job; but it does tend\nto make them excessively conservative. And erring on the side of conservatism\nis still erring. In almost everything, reward is proportionate to risk. So by\nprotecting their kids from risk, parents are, without realizing it, also\nprotecting them from rewards. If they saw that, they'd want you to take more\nrisks.  \n  \nThe other reason parents may be mistaken is that, like generals, they're\nalways fighting the last war. If they want you to be a doctor, odds are it's\nnot just because they want you to help the sick, but also because it's a\nprestigious and lucrative career. [4] But not so lucrative or prestigious as\nit was when their opinions were formed. When I was a kid in the seventies, a\ndoctor was _the_ thing to be. There was a sort of golden triangle involving\ndoctors, Mercedes 450SLs, and tennis. All three vertices now seem pretty\ndated.  \n  \nThe parents who want you to be a doctor may simply not realize how much things\nhave changed. Would they be that unhappy if you were Steve Jobs instead? So I\nthink the way to deal with your parents' opinions about what you should do is\nto treat them like feature requests. Even if your only goal is to please them,\nthe way to do that is not simply to give them what they ask for. Instead think\nabout why they're asking for something, and see if there's a better way to\ngive them what they need.  \n  \n**16\\. A job is the default**  \n  \nThis leads us to the last and probably most powerful reason people get regular\njobs: it's the default thing to do. Defaults are enormously powerful,\nprecisely because they operate without any conscious choice.  \n  \nTo almost everyone except criminals, it seems an axiom that if you need money,\nyou should get a job. Actually this tradition is not much more than a hundred\nyears old. Before that, the default way to make a living was by farming. It's\na bad plan to treat something only a hundred years old as an axiom. By\nhistorical standards, that's something that's changing pretty rapidly.  \n  \nWe may be seeing another such change right now. I've read a lot of economic\nhistory, and I understand the startup world pretty well, and it now seems to\nme fairly likely that we're seeing the beginning of a change like the one from\nfarming to manufacturing.  \n  \nAnd you know what? If you'd been around when that change began (around 1000 in\nEurope) it would have seemed to nearly everyone that running off to the city\nto make your fortune was a crazy thing to do. Though serfs were in principle\nforbidden to leave their manors, it can't have been that hard to run away to a\ncity. There were no guards patrolling the perimeter of the village. What\nprevented most serfs from leaving was that it seemed insanely risky. Leave\none's plot of land? Leave the people you'd spent your whole life with, to live\nin a giant city of three or four thousand complete strangers? How would you\nlive? How would you get food, if you didn't grow it?  \n  \nFrightening as it seemed to them, it's now the default with us to live by our\nwits. So if it seems risky to you to start a startup, think how risky it once\nseemed to your ancestors to live as we do now. Oddly enough, the people who\nknow this best are the very ones trying to get you to stick to the old model.\nHow can Larry and Sergey say you should come work as their employee, when they\ndidn't get jobs themselves?  \n  \nNow we look back on medieval peasants and wonder how they stood it. How grim\nit must have been to till the same fields your whole life with no hope of\nanything better, under the thumb of lords and priests you had to give all your\nsurplus to and acknowledge as your masters. I wouldn't be surprised if one day\npeople look back on what we consider a normal job in the same way. How grim it\nwould be to commute every day to a cubicle in some soulless office complex,\nand be told what to do by someone you had to acknowledge as a boss\u2014someone who\ncould call you into their office and say \"take a seat,\" and you'd sit! Imagine\nhaving to ask _permission_ to release software to users. Imagine being sad on\nSunday afternoons because the weekend was almost over, and tomorrow you'd have\nto get up and go to work. How did they stand it?  \n  \nIt's exciting to think we may be on the cusp of another shift like the one\nfrom farming to manufacturing. That's why I care about startups. Startups\naren't interesting just because they're a way to make a lot of money. I\ncouldn't care less about other ways to do that, like speculating in\nsecurities. At most those are interesting the way puzzles are. There's more\ngoing on with startups. They may represent one of those rare, historic shifts\nin the way [wealth](wealth.html) is created.  \n  \nThat's ultimately what drives us to work on Y Combinator. We want to make\nmoney, if only so we don't have to stop doing it, but that's not the main\ngoal. There have only been a handful of these great economic shifts in human\nhistory. It would be an amazing hack to make one happen faster.  \n  \n  \n  \n**Notes**  \n  \n[1] The only people who lost were us. The angels had convertible debt, so they\nhad first claim on the proceeds of the auction. Y Combinator only got 38 cents\non the dollar.  \n  \n[2] The best kind of organization for that might be an open source project,\nbut those don't involve a lot of face to face meetings. Maybe it would be\nworth starting one that did.  \n  \n[3] There need to be some number of big companies to acquire the startups, so\nthe number of big companies couldn't decrease to zero.  \n  \n[4] Thought experiment: If doctors did the same work, but as impoverished\noutcasts, which parents would still want their kids to be doctors?  \n  \n**Thanks** to Trevor Blackwell, Jessica Livingston, and Robert Morris for\nreading drafts of this, to the founders of Zenter for letting me use their\nweb-based PowerPoint killer even though it isn't launched yet, and to Ming-Hay\nLuk of the Berkeley CSUA for inviting me to speak.  \n  \n  \n  \n[Comment](http://news.ycombinator.com/comments?id=6668) on this essay.  \n  \n\nNovember 2019  \n  \nIf you discover something new, there's a significant chance you'll be accused\nof some form of heresy.  \n  \nTo discover new things, you have to work on ideas that are good but non-\nobvious; if an idea is obviously good, other people are probably already\nworking on it. One common way for a good idea to be non-obvious is for it to\nbe hidden in the shadow of some mistaken assumption that people are very\nattached to. But anything you discover from working on such an idea will tend\nto contradict the mistaken assumption that was concealing it. And you will\nthus get a lot of heat from people attached to the mistaken assumption.\nGalileo and Darwin are famous examples of this phenomenon, but it's probably\nalways an ingredient in the resistance to new ideas.  \n  \nSo it's particularly dangerous for an organization or society to have a\nculture of pouncing on heresy. When you suppress heresies, you don't just\nprevent people from contradicting the mistaken assumption you're trying to\nprotect. You also suppress any idea that implies indirectly that it's false.  \n  \nEvery cherished mistaken assumption has a dead zone of unexplored ideas around\nit. And the more preposterous the assumption, the bigger the dead zone it\ncreates.  \n  \nThere is a positive side to this phenomenon though. If you're looking for new\nideas, one way to find them is by [_looking for heresies_](say.html). When you\nlook at the question this way, the depressingly large dead zones around\nmistaken assumptions become excitingly large mines of new ideas.  \n  \n  \n  \n  \n  \n\nSeptember 2009  \n  \nI bet you the current issue of _Cosmopolitan_ has an article whose title\nbegins with a number. \"7 Things He Won't Tell You about Sex,\" or something\nlike that. Some popular magazines feature articles of this type on the cover\nof every issue. That can't be happening by accident. Editors must know they\nattract readers.  \n  \nWhy do readers like the list of n things so much? Mainly because it's easier\nto read than a regular article. [1] Structurally, the list of n things is a\ndegenerate case of essay. An essay can go anywhere the writer wants. In a list\nof n things the writer agrees to constrain himself to a collection of points\nof roughly equal importance, and he tells the reader explicitly what they are.  \n  \nSome of the work of reading an article is understanding its structure\u2014figuring\nout what in high school we'd have called its \"outline.\" Not explicitly, of\ncourse, but someone who really understands an article probably has something\nin his brain afterward that corresponds to such an outline. In a list of n\nthings, this work is done for you. Its structure is an exoskeleton.  \n  \nAs well as being explicit, the structure is guaranteed to be of the simplest\npossible type: a few main points with few to no subordinate ones, and no\nparticular connection between them.  \n  \nBecause the main points are unconnected, the list of n things is random\naccess. There's no thread of reasoning you have to follow. You could read the\nlist in any order. And because the points are independent of one another, they\nwork like watertight compartments in an unsinkable ship. If you get bored\nwith, or can't understand, or don't agree with one point, you don't have to\ngive up on the article. You can just abandon that one and skip to the next. A\nlist of n things is parallel and therefore fault tolerant.  \n  \nThere are times when this format is what a writer wants. One, obviously, is\nwhen what you have to say actually is a list of n things. I once wrote an\nessay about the [mistakes that kill startups](startupmistakes.html), and a few\npeople made fun of me for writing something whose title began with a number.\nBut in that case I really was trying to make a complete catalog of a number of\nindependent things. In fact, one of the questions I was trying to answer was\nhow many there were.  \n  \nThere are other less legitimate reasons for using this format. For example, I\nuse it when I get close to a deadline. If I have to give a talk and I haven't\nstarted it a few days beforehand, I'll sometimes play it safe and make the\ntalk a list of n things.  \n  \nThe list of n things is easier for writers as well as readers. When you're\nwriting a real essay, there's always a chance you'll hit a dead end. A real\nessay is a train of thought, and some trains of thought just peter out. That's\nan alarming possibility when you have to give a talk in a few days. What if\nyou run out of ideas? The compartmentalized structure of the list of n things\nprotects the writer from his own stupidity in much the same way it protects\nthe reader. If you run out of ideas on one point, no problem: it won't kill\nthe essay. You can take out the whole point if you need to, and the essay will\nstill survive.  \n  \nWriting a list of n things is so relaxing. You think of n/2 of them in the\nfirst 5 minutes. So bang, there's the structure, and you just have to fill it\nin. As you think of more points, you just add them to the end. Maybe you take\nout or rearrange or combine a few, but at every stage you have a valid (though\ninitially low-res) list of n things. It's like the sort of programming where\nyou write a version 1 very quickly and then gradually modify it, but at every\npoint have working code\u2014or the style of painting where you begin with a\ncomplete but very blurry sketch done in an hour, then spend a week cranking up\nthe resolution.  \n  \nBecause the list of n things is easier for writers too, it's not always a\ndamning sign when readers prefer it. It's not necessarily evidence readers are\nlazy; it could also mean they don't have much confidence in the writer. The\nlist of n things is in that respect the cheeseburger of essay forms. If you're\neating at a restaurant you suspect is bad, your best bet is to order the\ncheeseburger. Even a bad cook can make a decent cheeseburger. And there are\npretty strict conventions about what a cheeseburger should look like. You can\nassume the cook isn't going to try something weird and artistic. The list of n\nthings similarly limits the damage that can be done by a bad writer. You know\nit's going to be about whatever the title says, and the format prevents the\nwriter from indulging in any flights of fancy.  \n  \nBecause the list of n things is the easiest essay form, it should be a good\none for beginning writers. And in fact it is what most beginning writers are\ntaught. The classic 5 paragraph essay is really a list of n things for n = 3.\nBut the students writing them don't realize they're using the same structure\nas the articles they read in _Cosmopolitan_. They're not allowed to include\nthe numbers, and they're expected to spackle over the gaps with gratuitous\ntransitions (\"Furthermore...\") and cap the thing at either end with\nintroductory and concluding paragraphs so it will look superficially like a\nreal essay. [2]  \n  \nIt seems a fine plan to start students off with the list of n things. It's the\neasiest form. But if we're going to do that, why not do it openly? Let them\nwrite lists of n things like the pros, with numbers and no transitions or\n\"conclusion.\"  \n  \nThere is one case where the list of n things is a dishonest format: when you\nuse it to attract attention by falsely claiming the list is an exhaustive one.\nI.e. if you write an article that purports to be about _the_ 7 secrets of\nsuccess. That kind of title is the same sort of reflexive challenge as a\nwhodunit. You have to at least look at the article to check whether they're\nthe same 7 you'd list. Are you overlooking one of the secrets of success?\nBetter check.  \n  \nIt's fine to put \"The\" before the number if you really believe you've made an\nexhaustive list. But evidence suggests most things with titles like this are\nlinkbait.  \n  \nThe greatest weakness of the list of n things is that there's so little room\nfor new thought. The main point of essay writing, when done right, is the new\nideas you have while doing it. A real essay, as the name implies, is\n[dynamic](essay.html): you don't know what you're going to write when you\nstart. It will be about whatever you discover in the course of writing it.  \n  \nThis can only happen in a very limited way in a list of n things. You make the\ntitle first, and that's what it's going to be about. You can't have more new\nideas in the writing than will fit in the watertight compartments you set up\ninitially. And your brain seems to know this: because you don't have room for\nnew ideas, you don't have them.  \n  \nAnother advantage of admitting to beginning writers that the 5 paragraph essay\nis really a list of n things is that we can warn them about this. It only lets\nyou experience the defining characteristic of essay writing on a small scale:\nin thoughts of a sentence or two. And it's particularly dangerous that the 5\nparagraph essay buries the list of n things within something that looks like a\nmore sophisticated type of essay. If you don't know you're using this form,\nyou don't know you need to escape it.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] Articles of this type are also startlingly popular on Delicious, but I\nthink that's because [delicious/popular](http://delicious.com/popular) is\ndriven by bookmarking, not because Delicious users are stupid. Delicious users\nare collectors, and a list of n things seems particularly collectible because\nit's a collection itself.  \n  \n[2] Most \"word problems\" in school math textbooks are similarly misleading.\nThey look superficially like the application of math to real problems, but\nthey're not. So if anything they reinforce the impression that math is merely\na complicated but pointless collection of stuff to be memorized.  \n  \n  \n  \n  \n  \n\nAugust 2005  \n  \n _(This essay is derived from a talk at Oscon 2005.)_  \n  \nLately companies have been paying more attention to open source. Ten years ago\nthere seemed a real danger Microsoft would extend its monopoly to servers. It\nseems safe to say now that open source has prevented that. A recent survey\nfound 52% of companies are replacing Windows servers with Linux servers. [1]  \n  \nMore significant, I think, is _which_ 52% they are. At this point, anyone\nproposing to run Windows on servers should be prepared to explain what they\nknow about servers that Google, Yahoo, and Amazon don't.  \n  \nBut the biggest thing business has to learn from open source is not about\nLinux or Firefox, but about the forces that produced them. Ultimately these\nwill affect a lot more than what software you use.  \n  \nWe may be able to get a fix on these underlying forces by triangulating from\nopen source and blogging. As you've probably noticed, they have a lot in\ncommon.  \n  \nLike open source, blogging is something people do themselves, for free,\nbecause they enjoy it. Like open source hackers, bloggers compete with people\nworking for money, and often win. The method of ensuring quality is also the\nsame: Darwinian. Companies ensure quality through rules to prevent employees\nfrom screwing up. But you don't need that when the audience can communicate\nwith one another. People just produce whatever they want; the good stuff\nspreads, and the bad gets ignored. And in both cases, feedback from the\naudience improves the best work.  \n  \nAnother thing blogging and open source have in common is the Web. People have\nalways been willing to do great work for free, but before the Web it was\nharder to reach an audience or collaborate on projects.  \n  \n**Amateurs**  \n  \nI think the most important of the new principles business has to learn is that\npeople work a lot harder on stuff they like. Well, that's news to no one. So\nhow can I claim business has to learn it? When I say business doesn't know\nthis, I mean the structure of business doesn't reflect it.  \n  \nBusiness still reflects an older model, exemplified by the French word for\nworking: _travailler_. It has an English cousin, travail, and what it means is\ntorture. [2]  \n  \nThis turns out not to be the last word on work, however. As societies get\nricher, they learn something about work that's a lot like what they learn\nabout diet. We know now that the healthiest diet is the one our peasant\nancestors were forced to eat because they were poor. Like rich food, idleness\nonly seems desirable when you don't get enough of it. I think we were designed\nto work, just as we were designed to eat a certain amount of fiber, and we\nfeel bad if we don't.  \n  \nThere's a name for people who work for the love of it: amateurs. The word now\nhas such bad connotations that we forget its etymology, though it's staring us\nin the face. \"Amateur\" was originally rather a complimentary word. But the\nthing to be in the twentieth century was professional, which amateurs, by\ndefinition, are not.  \n  \nThat's why the business world was so surprised by one lesson from open source:\nthat people working for love often surpass those working for money. Users\ndon't switch from Explorer to Firefox because they want to hack the source.\nThey switch because it's a better browser.  \n  \nIt's not that Microsoft isn't trying. They know controlling the browser is one\nof the keys to retaining their monopoly. The problem is the same they face in\noperating systems: they can't pay people enough to build something better than\na group of inspired hackers will build for free.  \n  \nI suspect professionalism was always overrated-- not just in the literal sense\nof working for money, but also connotations like formality and detachment.\nInconceivable as it would have seemed in, say, 1970, I think professionalism\nwas largely a fashion, driven by conditions that happened to exist in the\ntwentieth century.  \n  \nOne of the most powerful of those was the existence of \"channels.\"\nRevealingly, the same term was used for both products and information: there\nwere distribution channels, and TV and radio channels.  \n  \nIt was the narrowness of such channels that made professionals seem so\nsuperior to amateurs. There were only a few jobs as professional journalists,\nfor example, so competition ensured the average journalist was fairly good.\nWhereas anyone can express opinions about current events in a bar. And so the\naverage person expressing his opinions in a bar sounds like an idiot compared\nto a journalist writing about the subject.  \n  \nOn the Web, the barrier for publishing your ideas is even lower. You don't\nhave to buy a drink, and they even let kids in. Millions of people are\npublishing online, and the average level of what they're writing, as you might\nexpect, is not very good. This has led some in the media to conclude that\nblogs don't present much of a threat-- that blogs are just a fad.  \n  \nActually, the fad is the word \"blog,\" at least the way the print media now use\nit. What they mean by \"blogger\" is not someone who publishes in a weblog\nformat, but anyone who publishes online. That's going to become a problem as\nthe Web becomes the default medium for publication. So I'd like to suggest an\nalternative word for someone who publishes online. How about \"writer?\"  \n  \nThose in the print media who dismiss the writing online because of its low\naverage quality are missing an important point: no one reads the _average_\nblog. In the old world of channels, it meant something to talk about average\nquality, because that's what you were getting whether you liked it or not. But\nnow you can read any writer you want. So the average quality of writing online\nisn't what the print media are competing against. They're competing against\nthe best writing online. And, like Microsoft, they're losing.  \n  \nI know that from my own experience as a reader. Though most print publications\nare online, I probably read two or three articles on individual people's sites\nfor every one I read on the site of a newspaper or magazine.  \n  \nAnd when I read, say, New York Times stories, I never reach them through the\nTimes front page. Most I find through aggregators like Google News or Slashdot\nor Delicious. Aggregators show how much [better](http://reddit.com) you can do\nthan the channel. The New York Times front page is a list of articles written\nby people who work for the New York Times. Delicious is a list of articles\nthat are interesting. And it's only now that you can see the two side by side\nthat you notice how little overlap there is.  \n  \nMost articles in the print media are boring. For example, the president\nnotices that a majority of voters now think invading Iraq was a mistake, so he\nmakes an address to the nation to drum up support. Where is the man bites dog\nin that? I didn't hear the speech, but I could probably tell you exactly what\nhe said. A speech like that is, in the most literal sense, not news: there is\nnothing _new_ in it. [3]  \n  \nNor is there anything new, except the names and places, in most \"news\" about\nthings going wrong. A child is abducted; there's a tornado; a ferry sinks;\nsomeone gets bitten by a shark; a small plane crashes. And what do you learn\nabout the world from these stories? Absolutely nothing. They're outlying data\npoints; what makes them gripping also makes them irrelevant.  \n  \nAs in software, when professionals produce such crap, it's not surprising if\namateurs can do better. Live by the channel, die by the channel: if you depend\non an oligopoly, you sink into bad habits that are hard to overcome when you\nsuddenly get competition. [4]  \n  \n**Workplaces**  \n  \nAnother thing blogs and open source software have in common is that they're\noften made by people working at home. That may not seem surprising. But it\nshould be. It's the architectural equivalent of a home-made aircraft shooting\ndown an F-18. Companies spend millions to build office buildings for a single\npurpose: to be a place to work. And yet people working in their own homes,\nwhich aren't even designed to be workplaces, end up being more productive.  \n  \nThis proves something a lot of us have suspected. The average office is a\nmiserable place to get work done. And a lot of what makes offices bad are the\nvery qualities we associate with professionalism. The sterility of offices is\nsupposed to suggest efficiency. But suggesting efficiency is a different thing\nfrom actually being efficient.  \n  \nThe atmosphere of the average workplace is to productivity what flames painted\non the side of a car are to speed. And it's not just the way offices look\nthat's bleak. The way people act is just as bad.  \n  \nThings are different in a startup. Often as not a startup begins in an\napartment. Instead of matching beige cubicles they have an assortment of\nfurniture they bought used. They work odd hours, wearing the most casual of\nclothing. They look at whatever they want online without worrying whether it's\n\"work safe.\" The cheery, bland language of the office is replaced by wicked\nhumor. And you know what? The company at this stage is probably the most\nproductive it's ever going to be.  \n  \nMaybe it's not a coincidence. Maybe some aspects of professionalism are\nactually a net lose.  \n  \nTo me the most demoralizing aspect of the traditional office is that you're\nsupposed to be there at certain times. There are usually a few people in a\ncompany who really have to, but the reason most employees work fixed hours is\nthat the company can't measure their productivity.  \n  \nThe basic idea behind office hours is that if you can't make people work, you\ncan at least prevent them from having fun. If employees have to be in the\nbuilding a certain number of hours a day, and are forbidden to do non-work\nthings while there, then they must be working. In theory. In practice they\nspend a lot of their time in a no-man's land, where they're neither working\nnor having fun.  \n  \nIf you could measure how much work people did, many companies wouldn't need\nany fixed workday. You could just say: this is what you have to do. Do it\nwhenever you like, wherever you like. If your work requires you to talk to\nother people in the company, then you may need to be here a certain amount.\nOtherwise we don't care.  \n  \nThat may seem utopian, but it's what we told people who came to work for our\ncompany. There were no fixed office hours. I never showed up before 11 in the\nmorning. But we weren't saying this to be benevolent. We were saying: if you\nwork here we expect you to get a lot done. Don't try to fool us just by being\nhere a lot.  \n  \nThe problem with the facetime model is not just that it's demoralizing, but\nthat the people pretending to work interrupt the ones actually working. I'm\nconvinced the facetime model is the main reason large organizations have so\nmany meetings. Per capita, large organizations accomplish very little. And yet\nall those people have to be on site at least eight hours a day. When so much\ntime goes in one end and so little achievement comes out the other, something\nhas to give. And meetings are the main mechanism for taking up the slack.  \n  \nFor one year I worked at a regular nine to five job, and I remember well the\nstrange, cozy feeling that comes over one during meetings. I was very aware,\nbecause of the novelty, that I was being paid for programming. It seemed just\namazing, as if there was a machine on my desk that spat out a dollar bill\nevery two minutes no matter what I did. Even while I was in the bathroom! But\nbecause the imaginary machine was always running, I felt I always ought to be\nworking. And so meetings felt wonderfully relaxing. They counted as work, just\nlike programming, but they were so much easier. All you had to do was sit and\nlook attentive.  \n  \nMeetings are like an opiate with a network effect. So is email, on a smaller\nscale. And in addition to the direct cost in time, there's the cost in\nfragmentation-- breaking people's day up into bits too small to be useful.  \n  \nYou can see how dependent you've become on something by removing it suddenly.\nSo for big companies I propose the following experiment. Set aside one day\nwhere meetings are forbidden-- where everyone has to sit at their desk all day\nand work without interruption on things they can do without talking to anyone\nelse. Some amount of communication is necessary in most jobs, but I'm sure\nmany employees could find eight hours worth of stuff they could do by\nthemselves. You could call it \"Work Day.\"  \n  \nThe other problem with pretend work is that it often looks better than real\nwork. When I'm writing or hacking I spend as much time just thinking as I do\nactually typing. Half the time I'm sitting drinking a cup of tea, or walking\naround the neighborhood. This is a critical phase-- this is where ideas come\nfrom-- and yet I'd feel guilty doing this in most offices, with everyone else\nlooking busy.  \n  \nIt's hard to see how bad some practice is till you have something to compare\nit to. And that's one reason open source, and even blogging in some cases, are\nso important. They show us what real work looks like.  \n  \nWe're funding eight new startups at the moment. A friend asked what they were\ndoing for office space, and seemed surprised when I said we expected them to\nwork out of whatever apartments they found to live in. But we didn't propose\nthat to save money. We did it because we want their software to be good.\nWorking in crappy informal spaces is one of the things startups do right\nwithout realizing it. As soon as you get into an office, work and life start\nto drift apart.  \n  \nThat is one of the key tenets of professionalism. Work and life are supposed\nto be separate. But that part, I'm convinced, is a mistake.  \n  \n**Bottom-Up**  \n  \nThe third big lesson we can learn from open source and blogging is that ideas\ncan bubble up from the bottom, instead of flowing down from the top. Open\nsource and blogging both work bottom-up: people make what they want, and the\nbest stuff prevails.  \n  \nDoes this sound familiar? It's the principle of a market economy. Ironically,\nthough open source and blogs are done for free, those worlds resemble market\neconomies, while most companies, for all their talk about the value of free\nmarkets, are run internally like communist states.  \n  \nThere are two forces that together steer design: ideas about what to do next,\nand the enforcement of quality. In the channel era, both flowed down from the\ntop. For example, newspaper editors assigned stories to reporters, then edited\nwhat they wrote.  \n  \nOpen source and blogging show us things don't have to work that way. Ideas and\neven the enforcement of quality can flow bottom-up. And in both cases the\nresults are not merely acceptable, but better. For example, open source\nsoftware is more reliable precisely because it's open source; anyone can find\nmistakes.  \n  \nThe same happens with writing. As we got close to publication, I found I was\nvery worried about the essays in [Hackers &\nPainters](http://www.amazon.com/exec/obidos/tg/detail/-/0596006624) that\nhadn't been online. Once an essay has had a couple thousand page views I feel\nreasonably confident about it. But these had had literally orders of magnitude\nless scrutiny. It felt like releasing software without testing it.  \n  \nThat's what all publishing used to be like. If you got ten people to read a\nmanuscript, you were lucky. But I'd become so used to publishing online that\nthe old method now seemed alarmingly unreliable, like navigating by dead\nreckoning once you'd gotten used to a GPS.  \n  \nThe other thing I like about publishing online is that you can write what you\nwant and publish when you want. Earlier this year I wrote\n[something](inequality.html) that seemed suitable for a magazine, so I sent it\nto an editor I know. As I was waiting to hear back, I found to my surprise\nthat I was hoping they'd reject it. Then I could put it online right away. If\nthey accepted it, it wouldn't be read by anyone for months, and in the\nmeantime I'd have to fight word-by-word to save it from being mangled by some\ntwenty five year old copy editor. [5]  \n  \nMany employees would _like_ to build great things for the companies they work\nfor, but more often than not management won't let them. How many of us have\nheard stories of employees going to management and saying, please let us build\nthis thing to make money for you-- and the company saying no? The most famous\nexample is probably Steve Wozniak, who originally wanted to build\nmicrocomputers for his then-employer, HP. And they turned him down. On the\nblunderometer, this episode ranks with IBM accepting a non-exclusive license\nfor DOS. But I think this happens all the time. We just don't hear about it\nusually, because to prove yourself right you have to quit and start your own\ncompany, like Wozniak did.  \n  \n**Startups**  \n  \nSo these, I think, are the three big lessons open source and blogging have to\nteach business: (1) that people work harder on stuff they like, (2) that the\nstandard office environment is very unproductive, and (3) that bottom-up often\nworks better than top-down.  \n  \nI can imagine managers at this point saying: what is this guy talking about?\nWhat good does it do me to know that my programmers would be more productive\nworking at home on their own projects? I need their asses in here working on\nversion 3.2 of our software, or we're never going to make the release date.  \n  \nAnd it's true, the benefit that specific manager could derive from the forces\nI've described is near zero. When I say business can learn from open source, I\ndon't mean any specific business can. I mean business can learn about new\nconditions the same way a gene pool does. I'm not claiming companies can get\nsmarter, just that dumb ones will die.  \n  \nSo what will business look like when it has assimilated the lessons of open\nsource and blogging? I think the big obstacle preventing us from seeing the\nfuture of business is the assumption that people working for you have to be\nemployees. But think about what's going on underneath: the company has some\nmoney, and they pay it to the employee in the hope that he'll make something\nworth more than they paid him. Well, there are other ways to arrange that\nrelationship. Instead of paying the guy money as a salary, why not give it to\nhim as investment? Then instead of coming to your office to work on your\nprojects, he can work wherever he wants on projects of his own.  \n  \nBecause few of us know any alternative, we have no idea how much better we\ncould do than the traditional employer-employee relationship. Such customs\nevolve with glacial slowness. Our employer-employee relationship still retains\na big chunk of master-servant DNA. [6]  \n  \nI dislike being on either end of it. I'll work my ass off for a customer, but\nI resent being told what to do by a boss. And being a boss is also horribly\nfrustrating; half the time it's easier just to do stuff yourself than to get\nsomeone else to do it for you. I'd rather do almost anything than give or\nreceive a performance review.  \n  \nOn top of its unpromising origins, employment has accumulated a lot of cruft\nover the years. The list of what you can't ask in job interviews is now so\nlong that for convenience I assume it's infinite. Within the office you now\nhave to walk on eggshells lest anyone [say](say.html) or do something that\nmakes the company prey to a lawsuit. And God help you if you fire anyone.  \n  \nNothing shows more clearly that employment is not an ordinary economic\nrelationship than companies being sued for firing people. In any purely\neconomic relationship you're free to do what you want. If you want to stop\nbuying steel pipe from one supplier and start buying it from another, you\ndon't have to explain why. No one can accuse you of _unjustly_ switching pipe\nsuppliers. Justice implies some kind of paternal obligation that isn't there\nin transactions between equals.  \n  \nMost of the legal restrictions on employers are intended to protect employees.\nBut you can't have action without an equal and opposite reaction. You can't\nexpect employers to have some kind of paternal responsibility toward employees\nwithout putting employees in the position of children. And that seems a bad\nroad to go down.  \n  \nNext time you're in a moderately large city, drop by the main post office and\nwatch the body language of the people working there. They have the same sullen\nresentment as children made to do something they don't want to. Their union\nhas exacted pay increases and work restrictions that would have been the envy\nof previous generations of postal workers, and yet they don't seem any happier\nfor it. It's demoralizing to be on the receiving end of a paternalistic\nrelationship, no matter how cozy the terms. Just ask any teenager.  \n  \nI see the disadvantages of the employer-employee relationship because I've\nbeen on both sides of a better one: the investor-founder relationship. I\nwouldn't claim it's painless. When I was running a startup, the thought of our\ninvestors used to keep me up at night. And now that I'm an\n[investor](http://ycombinator.com), the thought of our startups keeps me up at\nnight. All the pain of whatever problem you're trying to solve is still there.\nBut the pain hurts less when it isn't mixed with resentment.  \n  \nI had the misfortune to participate in what amounted to a controlled\nexperiment to prove that. After Yahoo bought our startup I went to work for\nthem. I was doing exactly the same work, except with bosses. And to my horror\nI started acting like a child. The situation pushed buttons I'd forgotten I\nhad.  \n  \nThe big advantage of investment over employment, as the examples of open\nsource and blogging suggest, is that people working on projects of their own\nare enormously more productive. And a [startup](start.html) is a project of\none's own in two senses, both of them important: it's creatively one's own,\nand also economically ones's own.  \n  \nGoogle is a rare example of a big company in tune with the forces I've\ndescribed. They've tried hard to make their offices less sterile than the\nusual cube farm. They give employees who do great work large grants of stock\nto simulate the rewards of a startup. They even let hackers spend 20% of their\ntime on their own projects.  \n  \nWhy not let people spend 100% of their time on their own projects, and instead\nof trying to approximate the value of what they create, give them the actual\nmarket value? Impossible? That is in fact what venture capitalists do.  \n  \nSo am I claiming that no one is going to be an employee anymore-- that\neveryone should go and start a startup? Of course not. But more people could\ndo it than do it now. At the moment, even the smartest students leave school\nthinking they have to get a [job](hiring.html). Actually what they need to do\nis make something valuable. A job is one way to do that, but the more\nambitious ones will ordinarily be better off taking money from an investor\nthan an employer.  \n  \nHackers tend to think business is for MBAs. But business administration is not\nwhat you're doing in a startup. What you're doing is business _creation_. And\nthe first phase of that is mostly product creation-- that is, hacking. That's\nthe hard part. It's a lot harder to create something people love than to take\nsomething people love and figure out how to make money from it.  \n  \nAnother thing that keeps people away from starting startups is the risk.\nSomeone with kids and a mortgage should think twice before doing it. But most\nyoung hackers have neither.  \n  \nAnd as the example of open source and blogging suggests, you'll enjoy it more,\neven if you fail. You'll be working on your own thing, instead of going to\nsome office and doing what you're told. There may be more pain in your own\ncompany, but it won't hurt as much.  \n  \nThat may be the greatest effect, in the long run, of the forces underlying\nopen source and blogging: finally ditching the old paternalistic employer-\nemployee relationship, and replacing it with a purely economic one, between\nequals.  \n  \n  \n  \n**Notes**  \n  \n[1] Survey by Forrester Research reported in the cover story of Business Week,\n31 Jan 2005. Apparently someone believed you have to replace the actual server\nin order to switch the operating system.  \n  \n[2] It derives from the late Latin _tripalium_ , a torture device so called\nbecause it consisted of three stakes. I don't know how the stakes were used.\n\"Travel\" has the same root.  \n  \n[3] It would be much bigger news, in that sense, if the president faced\nunscripted questions by giving a press conference.  \n  \n[4] One measure of the incompetence of newspapers is that so many still make\nyou register to read stories. I have yet to find a blog that tried that.  \n  \n[5] They accepted the article, but I took so long to send them the final\nversion that by the time I did the section of the magazine they'd accepted it\nfor had disappeared in a reorganization.  \n  \n[6] The word \"boss\" is derived from the Dutch _baas_ , meaning \"master.\"  \n  \n**Thanks** to Sarah Harlin, Jessica Livingston, and Robert Morris for reading\ndrafts of this.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nApril 2010  \n  \nThe best way to come up with startup ideas is to ask yourself the question:\nwhat do you wish someone would make for you?  \n  \nThere are two types of startup ideas: those that grow organically out of your\nown life, and those that you decide, from afar, are going to be necessary to\nsome class of users other than you. Apple was the first type. Apple happened\nbecause Steve Wozniak wanted a computer. Unlike most people who wanted\ncomputers, he could design one, so he did. And since lots of other people\nwanted the same thing, Apple was able to sell enough of them to get the\ncompany rolling. They still rely on this principle today, incidentally. The\niPhone is the phone Steve Jobs wants. [1]  \n  \nOur own startup, Viaweb, was of the second type. We made software for building\nonline stores. We didn't need this software ourselves. We weren't direct\nmarketers. We didn't even know when we started that our users were called\n\"direct marketers.\" But we were comparatively old when we started the company\n(I was 30 and Robert Morris was 29), so we'd seen enough to know users would\nneed this type of software. [2]  \n  \nThere is no sharp line between the two types of ideas, but the most successful\nstartups seem to be closer to the Apple type than the Viaweb type. When he was\nwriting that first Basic interpreter for the Altair, Bill Gates was writing\nsomething he would use, as were Larry and Sergey when they wrote the first\nversions of Google.  \n  \nOrganic ideas are generally preferable to the made up kind, but particularly\nso when the founders are young. It takes experience to predict what other\npeople will want. The worst ideas we see at Y Combinator are from young\nfounders making things they think other people will want.  \n  \nSo if you want to start a startup and don't know yet what you're going to do,\nI'd encourage you to focus initially on organic ideas. What's missing or\nbroken in your daily life? Sometimes if you just ask that question you'll get\nimmediate answers. It must have seemed obviously broken to Bill Gates that you\ncould only program the Altair in machine language.  \n  \nYou may need to stand outside yourself a bit to see brokenness, because you\ntend to get used to it and take it for granted. You can be sure it's there,\nthough. There are always great ideas sitting right under our noses. In 2004 it\nwas ridiculous that Harvard undergrads were still using a Facebook printed on\npaper. Surely that sort of thing should have been online.  \n  \nThere are ideas that obvious lying around now. The reason you're overlooking\nthem is the same reason you'd have overlooked the idea of building Facebook in\n2004: organic startup ideas usually don't seem like startup ideas at first. We\nknow now that Facebook was very successful, but put yourself back in 2004.\nPutting undergraduates' profiles online wouldn't have seemed like much of a\nstartup idea. And in fact, it wasn't initially a startup idea. When Mark spoke\nat a YC dinner this winter he said he wasn't trying to start a company when he\nwrote the first version of Facebook. It was just a project. So was the Apple I\nwhen Woz first started working on it. He didn't think he was starting a\ncompany. If these guys had thought they were starting companies, they might\nhave been tempted to do something more \"serious,\" and that would have been a\nmistake.  \n  \nSo if you want to come up with organic startup ideas, I'd encourage you to\nfocus more on the idea part and less on the startup part. Just fix things that\nseem broken, regardless of whether it seems like the problem is important\nenough to build a company on. If you keep pursuing such threads it would be\nhard not to end up making something of value to a lot of people, and when you\ndo, surprise, you've got a company. [3]  \n  \nDon't be discouraged if what you produce initially is something other people\ndismiss as a toy. In fact, that's a good sign. That's probably why everyone\nelse has been overlooking the idea. The first microcomputers were dismissed as\ntoys. And the first planes, and the first cars. At this point, when someone\ncomes to us with something that users like but that we could envision forum\ntrolls dismissing as a toy, it makes us especially likely to invest.  \n  \nWhile young founders are at a disadvantage when coming up with made-up ideas,\nthey're the best source of organic ones, because they're at the forefront of\ntechnology. They use the latest stuff. They only just decided what to use, so\nwhy wouldn't they? And because they use the latest stuff, they're in a\nposition to discover valuable types of fixable brokenness first.  \n  \nThere's nothing more valuable than an unmet need that is just becoming\nfixable. If you find something broken that you can fix for a lot of people,\nyou've found a gold mine. As with an actual gold mine, you still have to work\nhard to get the gold out of it. But at least you know where the seam is, and\nthat's the hard part.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] This suggests a way to predict areas where Apple will be weak: things\nSteve Jobs doesn't use. E.g. I doubt he is much into gaming.  \n  \n[2] In retrospect, we should have _become_ direct marketers. If I were doing\nViaweb again, I'd open our own online store. If we had, we'd have understood\nusers a lot better. I'd encourage anyone starting a startup to become one of\nits users, however unnatural it seems.  \n  \n[3] Possible exception: It's hard to compete directly with open source\nsoftware. You can build things for programmers, but there has to be some part\nyou can charge for.  \n  \n**Thanks** to Sam Altman, Trevor Blackwell, and Jessica Livingston for reading\ndrafts of this.  \n  \n\nJuly 2020  \n  \n\"Few people are capable of expressing with equanimity opinions which differ\nfrom the prejudices of their social environment. Most people are even\nincapable of forming such opinions.\"  \n  \n\u0097 Einstein  \n  \n  \nThere has been a lot of talk about privilege lately. Although the concept is\noverused, there is something to it, and in particular to the idea that\nprivilege makes you blind \u0097 that you can't see things that are visible to\nsomeone whose life is very different from yours.  \n  \nBut one of the most pervasive examples of this kind of blindness is one that I\nhaven't seen mentioned explicitly. I'm going to call it _orthodox privilege_ :\nThe more conventional-minded someone is, the more it seems to them that it's\nsafe for everyone to express their opinions.  \n  \nIt's safe for _them_ to express their opinions, because the source of their\nopinions is whatever it's currently acceptable to believe. So it seems to them\nthat it must be safe for everyone. They literally can't imagine a true\nstatement that would get you in trouble.  \n  \nAnd yet at every point in history, there [_were_](say.html) true things that\nwould get you in trouble to say. Is ours the first where this isn't so? What\nan amazing coincidence that would be.  \n  \nSurely it should at least be the default assumption that our time is not\nunique, and that there are true things you can't say now, just as there have\nalways been. You would think. But even in the face of such overwhelming\nhistorical evidence, most people will go with their gut on this one.  \n  \nIn the most extreme cases, people suffering from orthodox privilege will not\nonly deny that there's anything true that you can't say, but will accuse you\nof heresy merely for saying there is. Though if there's more than one heresy\ncurrent in your time, these accusations will be weirdly non-deterministic: you\nmust either be an xist or a yist.  \n  \nFrustrating as it is to deal with these people, it's important to realize that\nthey're in earnest. They're not pretending they think it's impossible for an\nidea to be both unorthodox and true. The world really looks that way to them.  \n  \nIndeed, this is a uniquely tenacious form of privilege. People can overcome\nthe blindness induced by most forms of privilege by learning more about\nwhatever they're not. But they can't overcome orthodox privilege just by\nlearning more. They'd have to become more independent-minded. If that happens\nat all, it doesn't happen on the time scale of one conversation.  \n  \nIt may be possible to convince some people that orthodox privilege must exist\neven though they can't sense it, just as one can with, say, dark matter. There\nmay be some who could be convinced, for example, that it's very unlikely that\nthis is the first point in history at which there's nothing true you can't\nsay, even if they can't imagine specific examples.  \n  \nBut in general I don't think it will work to say \"check your privilege\" about\nthis type of privilege, because those in its demographic don't realize they're\nin it. It doesn't seem to conventional-minded people that they're\nconventional-minded. It just seems to them that they're right. Indeed, they\ntend to be particularly sure of it.  \n  \nPerhaps the solution is to appeal to politeness. If someone says they can hear\na high-pitched noise that you can't, it's only polite to take them at their\nword, instead of demanding evidence that's impossible to produce, or simply\ndenying that they hear anything. Imagine how rude that would seem. Similarly,\nif someone says they can think of things that are true but that cannot be\nsaid, it's only polite to take them at their word, even if you can't think of\nany yourself.  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n**Thanks** to Sam Altman, Trevor Blackwell, Patrick Collison, Antonio Garcia-\nMartinez, Jessica Livingston, Robert Morris, Michael Nielsen, Geoff Ralston,\nMax Roser, and Harj Taggar for reading drafts of this.  \n  \n\nJune 2021  \n  \nA few days ago, on the way home from school, my nine year old son told me he\ncouldn't wait to get home to write more of the story he was working on. This\nmade me as happy as anything I've heard him say \u2014 not just because he was\nexcited about his story, but because he'd discovered this way of working.\nWorking on a project of your own is as different from ordinary work as skating\nis from walking. It's more fun, but also much more productive.  \n  \nWhat proportion of great work has been done by people who were skating in this\nsense? If not all of it, certainly a lot.  \n  \nThere is something special about working on a project of your own. I wouldn't\nsay exactly that you're happier. A better word would be excited, or engaged.\nYou're happy when things are going well, but often they aren't. When I'm\nwriting an essay, most of the time I'm worried and puzzled: worried that the\nessay will turn out badly, and puzzled because I'm groping for some idea that\nI can't see clearly enough. Will I be able to pin it down with words? In the\nend I usually can, if I take long enough, but I'm never sure; the first few\nattempts often fail.  \n  \nYou have moments of happiness when things work out, but they don't last long,\nbecause then you're on to the next problem. So why do it at all? Because to\nthe kind of people who like working this way, nothing else feels as right. You\nfeel as if you're an animal in its natural habitat, doing what you were meant\nto do \u2014 not always happy, maybe, but awake and alive.  \n  \nMany kids experience the excitement of working on projects of their own. The\nhard part is making this converge with the work you do as an adult. And our\ncustoms make it harder. We treat \"playing\" and \"hobbies\" as qualitatively\ndifferent from \"work\". It's not clear to a kid building a treehouse that\nthere's a direct (though long) route from that to architecture or engineering.\nAnd instead of pointing out the route, we conceal it, by implicitly treating\nthe stuff kids do as different from real work. [1]  \n  \nInstead of telling kids that their treehouses could be on the path to the work\nthey do as adults, we tell them the path goes through school. And\nunfortunately schoolwork tends to be very different from working on projects\nof one's own. It's usually neither a project, nor one's own. So as school gets\nmore serious, working on projects of one's own is something that survives, if\nat all, as a thin thread off to the side.  \n  \nIt's a bit sad to think of all the high school kids turning their backs on\nbuilding treehouses and sitting in class dutifully learning about Darwin or\nNewton to pass some exam, when the work that made Darwin and Newton famous was\nactually closer in spirit to building treehouses than studying for exams.  \n  \nIf I had to choose between my kids getting good grades and working on\nambitious projects of their own, I'd pick the projects. And not because I'm an\nindulgent parent, but because I've been on the other end and I know which has\nmore predictive value. When I was picking startups for Y Combinator, I didn't\ncare about applicants' grades. But if they'd worked on projects of their own,\nI wanted to hear all about those. [2]  \n  \nIt may be inevitable that school is the way it is. I'm not saying we have to\nredesign it (though I'm not saying we don't), just that we should understand\nwhat it does to our attitudes to work \u2014 that it steers us toward the dutiful\nplodding kind of work, often using competition as bait, and away from skating.  \n  \nThere are occasionally times when schoolwork becomes a project of one's own.\nWhenever I had to write a paper, that would become a project of my own \u2014\nexcept in English classes, ironically, because the things one has to write in\nEnglish classes are so [_bogus_](essay.html). And when I got to college and\nstarted taking CS classes, the programs I had to write became projects of my\nown. Whenever I was writing or programming, I was usually skating, and that\nhas been true ever since.  \n  \nSo where exactly is the edge of projects of one's own? That's an interesting\nquestion, partly because the answer is so complicated, and partly because\nthere's so much at stake. There turn out to be two senses in which work can be\none's own: 1) that you're doing it voluntarily, rather than merely because\nsomeone told you to, and 2) that you're doing it by yourself.  \n  \nThe edge of the former is quite sharp. People who care a lot about their work\nare usually very sensitive to the difference between pulling, and being\npushed, and work tends to fall into one category or the other. But the test\nisn't simply whether you're told to do something. You can choose to do\nsomething you're told to do. Indeed, you can own it far more thoroughly than\nthe person who told you to do it.  \n  \nFor example, math homework is for most people something they're told to do.\nBut for my father, who was a mathematician, it wasn't. Most of us think of the\nproblems in a math book as a way to test or develop our knowledge of the\nmaterial explained in each section. But to my father the problems were the\npart that mattered, and the text was merely a sort of annotation. Whenever he\ngot a new math book it was to him like being given a puzzle: here was a new\nset of problems to solve, and he'd immediately set about solving all of them.  \n  \nThe other sense of a project being one's own \u2014 working on it by oneself \u2014 has\na much softer edge. It shades gradually into collaboration. And interestingly,\nit shades into collaboration in two different ways. One way to collaborate is\nto share a single project. For example, when two mathematicians collaborate on\na proof that takes shape in the course of a conversation between them. The\nother way is when multiple people work on separate projects of their own that\nfit together like a jigsaw puzzle. For example, when one person writes the\ntext of a book and another does the graphic design. [3]  \n  \nThese two paths into collaboration can of course be combined. But under the\nright conditions, the excitement of working on a project of one's own can be\npreserved for quite a while before disintegrating into the turbulent flow of\nwork in a large organization. Indeed, the history of successful organizations\nis partly the history of techniques for preserving that excitement. [4]  \n  \nThe team that made the original Macintosh were a great example of this\nphenomenon. People like Burrell Smith and Andy Hertzfeld and Bill Atkinson and\nSusan Kare were not just following orders. They were not tennis balls hit by\nSteve Jobs, but rockets let loose by Steve Jobs. There was a lot of\ncollaboration between them, but they all seem to have individually felt the\nexcitement of working on a project of one's own.  \n  \nIn Andy Hertzfeld's book on the Macintosh, he describes how they'd come back\ninto the office after dinner and work late into the night. People who've never\nexperienced the thrill of working on a project they're excited about can't\ndistinguish this kind of working long hours from the kind that happens in\nsweatshops and boiler rooms, but they're at opposite ends of the spectrum.\nThat's why it's a mistake to insist dogmatically on \"work/life balance.\"\nIndeed, the mere expression \"work/life\" embodies a mistake: it assumes work\nand life are distinct. For those to whom the word \"work\" automatically implies\nthe dutiful plodding kind, they are. But for the skaters, the relationship\nbetween work and life would be better represented by a dash than a slash. I\nwouldn't want to work on anything that I didn't want to take over my life.  \n  \nOf course, it's easier to achieve this level of motivation when you're making\nsomething like the Macintosh. It's easy for something new to feel like a\nproject of your own. That's one of the reasons for the tendency programmers\nhave to rewrite things that don't need rewriting, and to write their own\nversions of things that already exist. This sometimes alarms managers, and\nmeasured by total number of characters typed, it's rarely the optimal\nsolution. But it's not always driven simply by arrogance or cluelessness.\nWriting code from scratch is also much more rewarding \u2014 so much more rewarding\nthat a good programmer can end up net ahead, despite the shocking waste of\ncharacters. Indeed, it may be one of the advantages of capitalism that it\nencourages such rewriting. A company that needs software to do something can't\nuse the software already written to do it at another company, and thus has to\nwrite their own, which often turns out better. [5]  \n  \nThe natural alignment between skating and solving new problems is one of the\nreasons the payoffs from startups are so high. Not only is the market price of\nunsolved problems higher, you also get a discount on productivity when you\nwork on them. In fact, you get a double increase in productivity: when you're\ndoing a clean-sheet design, it's easier to recruit skaters, and they get to\nspend all their time skating.  \n  \nSteve Jobs knew a thing or two about skaters from having watched Steve\nWozniak. If you can find the right people, you only have to tell them what to\ndo at the highest level. They'll handle the details. Indeed, they insist on\nit. For a project to feel like your own, you must have sufficient autonomy.\nYou can't be working to order, or [_slowed down_](artistsship.html) by\nbureaucracy.  \n  \nOne way to ensure autonomy is not to have a boss at all. There are two ways to\ndo that: to be the boss yourself, and to work on projects outside of work.\nThough they're at opposite ends of the scale financially, startups and open\nsource projects have a lot in common, including the fact that they're often\nrun by skaters. And indeed, there's a wormhole from one end of the scale to\nthe other: one of the best ways to discover [_startup\nideas_](startupideas.html) is to work on a project just for fun.  \n  \nIf your projects are the kind that make money, it's easy to work on them. It's\nharder when they're not. And the hardest part, usually, is morale. That's\nwhere adults have it harder than kids. Kids just plunge in and build their\ntreehouse without worrying about whether they're wasting their time, or how it\ncompares to other treehouses. And frankly we could learn a lot from kids here.\nThe high standards most grownups have for \"real\" work do not always serve us\nwell.  \n  \nThe most important phase in a project of one's own is at the beginning: when\nyou go from thinking it might be cool to do x to actually doing x. And at that\npoint high standards are not merely useless but positively harmful. There are\na few people who start too many new projects, but far more, I suspect, who are\ndeterred by fear of failure from starting projects that would have succeeded\nif they had.  \n  \nBut if we couldn't benefit as kids from the knowledge that our treehouses were\non the path to grownup projects, we can at least benefit as grownups from\nknowing that our projects are on a path that stretches back to treehouses.\nRemember that careless confidence you had as a kid when starting something\nnew? That would be a powerful thing to recapture.  \n  \nIf it's harder as adults to retain that kind of confidence, we at least tend\nto be more aware of what we're doing. Kids bounce, or are herded, from one\nkind of work to the next, barely realizing what's happening to them. Whereas\nwe know more about different types of work and have more control over which we\ndo. Ideally we can have the best of both worlds: to be deliberate in choosing\nto work on projects of our own, and carelessly confident in starting new ones.  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] \"Hobby\" is a curious word. Now it means work that isn't _real_ work \u2014 work\nthat one is not to be judged by \u2014 but originally it just meant an obsession in\na fairly general sense (even a political opinion, for example) that one\nmetaphorically rode as a child rides a hobby-horse. It's hard to say if its\nrecent, narrower meaning is a change for the better or the worse. For sure\nthere are lots of false positives \u2014 lots of projects that end up being\nimportant but are dismissed initially as mere hobbies. But on the other hand,\nthe concept provides valuable cover for projects in the early, ugly duckling\nphase.  \n  \n[2] Tiger parents, as parents so often do, are fighting the last war. Grades\nmattered more in the old days when the route to success was to acquire\n[_credentials_](credentials.html) while ascending some predefined ladder. But\nit's just as well that their tactics are focused on grades. How awful it would\nbe if they invaded the territory of projects, and thereby gave their kids a\ndistaste for this kind of work by forcing them to do it. Grades are already a\ngrim, fake world, and aren't harmed much by parental interference, but working\non one's own projects is a more delicate, private thing that could be damaged\nvery easily.  \n  \n[3] The complicated, gradual edge between working on one's own projects and\ncollaborating with others is one reason there is so much disagreement about\nthe idea of the \"lone genius.\" In practice people collaborate (or not) in all\nkinds of different ways, but the idea of the lone genius is definitely not a\nmyth. There's a core of truth to it that goes with a certain way of working.  \n  \n[4] Collaboration is powerful too. The optimal organization would combine\ncollaboration and ownership in such a way as to do the least damage to each.\nInterestingly, companies and university departments approach this ideal from\nopposite directions: companies insist on collaboration, and occasionally also\nmanage both to recruit skaters and allow them to skate, and university\ndepartments insist on the ability to do independent research (which is by\ncustom treated as skating, whether it is or not), and the people they hire\ncollaborate as much as they choose.  \n  \n[5] If a company could design its software in such a way that the best newly\narrived programmers always got a clean sheet, it could have a kind of eternal\nyouth. That might not be impossible. If you had a software backbone defining a\ngame with sufficiently clear rules, individual programmers could write their\nown players.  \n  \n  \n  \n  \n  \n**Thanks** to Trevor Blackwell, Paul Buchheit, Andy Hertzfeld, Jessica\nLivingston, and Peter Norvig for reading drafts of this.  \n  \n\nAugust 2011  \n  \nI realized recently that we may be able to solve part of the patent problem\nwithout waiting for the government.  \n  \nI've never been 100% sure whether patents help or hinder technological\nprogress. When I was a kid I thought they helped. I thought they protected\ninventors from having their ideas stolen by big companies. Maybe that was\ntruer in the past, when more things were physical. But regardless of whether\npatents are in general a good thing, there do seem to be bad ways of using\nthem. And since bad uses of patents seem to be increasing, there is an\nincreasing call for patent reform.  \n  \nThe problem with patent reform is that it has to go through the government.\nThat tends to be slow. But recently I realized we can also attack the problem\ndownstream. As well as pinching off the stream of patents at the point where\nthey're issued, we may in some cases be able to pinch it off at the point\nwhere they're used.  \n  \nOne way of using patents that clearly does not encourage innovation is when\nestablished companies with bad products use patents to suppress small\ncompetitors with good products. This is the type of abuse we may be able to\ndecrease without having to go through the government.  \n  \nThe way to do it is to get the companies that are above pulling this sort of\ntrick to pledge publicly not to. Then the ones that won't make such a pledge\nwill be very conspicuous. Potential employees won't want to work for them. And\ninvestors, too, will be able to see that they're the sort of company that\ncompetes by litigation rather than by making good products.  \n  \nHere's the pledge:\n\n> No first use of software patents against companies with less than 25 people.\n\nI've deliberately traded precision for brevity. The patent pledge is not\nlegally binding. It's like Google's \"Don't be evil.\" They don't define what\nevil is, but by publicly saying that, they're saying they're willing to be\nheld to a standard that, say, Altria is not. And though constraining, \"Don't\nbe evil\" has been good for Google. Technology companies win by attracting the\nmost productive people, and the most productive people are attracted to\nemployers who hold themselves to a higher standard than the law requires. [1]  \n  \nThe patent pledge is in effect a narrower but open source \"Don't be evil.\" I\nencourage every technology company to adopt it. If you want to help fix\npatents, encourage your employer to.  \n  \nAlready most technology companies wouldn't sink to using patents on startups.\nYou don't see Google or Facebook suing startups for patent infringement. They\ndon't need to. So for the better technology companies, the patent pledge\nrequires no change in behavior. They're just promising to do what they'd do\nanyway. And when all the companies that won't use patents on startups have\nsaid so, the holdouts will be very conspicuous.  \n  \nThe patent pledge doesn't fix every problem with patents. It won't stop patent\ntrolls, for example; they're already pariahs. But the problem the patent\npledge does fix may be more serious than the problem of patent trolls. Patent\ntrolls are just parasites. A clumsy parasite may occasionally kill the host,\nbut that's not its goal. Whereas companies that sue startups for patent\ninfringement generally do it with explicit goal of keeping their product off\nthe market.  \n  \nCompanies that use patents on startups are attacking innovation at the root.\nNow there's something any individual can do about this problem, without\nwaiting for the government: ask companies where they stand.  \n  \n  \n  \n[Patent Pledge Site](http://thepatentpledge.org)  \n  \n  \n  \n**Notes:**  \n  \n[1] Because the pledge is deliberately vague, we're going to need common sense\nwhen intepreting it. And even more vice versa: the pledge is vague in order to\nmake people use common sense when interpreting it.  \n  \nSo for example I've deliberately avoided saying whether the 25 people have to\nbe employees, or whether contractors count too. If a company has to split\nhairs that fine about whether a suit would violate the patent pledge, it's\nprobably still a dick move.  \n  \n\nApril 2016  \n  \n _(This is a talk I gave at an event called Opt412 in Pittsburgh. Much of it\nwill apply to other towns. But not all, because as I say in the talk,\nPittsburgh has some important advantages over most would-be startup hubs.)_  \n  \nWhat would it take to make Pittsburgh into a startup hub, like Silicon Valley?\nI understand Pittsburgh pretty well, because I grew up here, in Monroeville.\nAnd I understand Silicon Valley pretty well because that's where I live now.\nCould you get that kind of startup ecosystem going here?  \n  \nWhen I agreed to speak here, I didn't think I'd be able to give a very\noptimistic talk. I thought I'd be talking about what Pittsburgh could do to\nbecome a startup hub, very much in the subjunctive. Instead I'm going to talk\nabout what Pittsburgh can do.  \n  \nWhat changed my mind was an article I read in, of all places, the _New York\nTimes_ food section. The title was \"[_Pittsburgh's Youth-Driven Food\nBoom_](http://www.nytimes.com/2016/03/16/dining/pittsburgh-restaurants.html).\"\nTo most people that might not even sound interesting, let alone something\nrelated to startups. But it was electrifying to me to read that title. I don't\nthink I could pick a more promising one if I tried. And when I read the\narticle I got even more excited. It said \"people ages 25 to 29 now make up 7.6\npercent of all residents, up from 7 percent about a decade ago.\" Wow, I\nthought, Pittsburgh could be the next Portland. It could become the cool place\nall the people in their twenties want to go live.  \n  \nWhen I got here a couple days ago, I could feel the difference. I lived here\nfrom 1968 to 1984. I didn't realize it at the time, but during that whole\nperiod the city was in free fall. On top of the flight to the suburbs that\nhappened everywhere, the steel and nuclear businesses were both dying. Boy are\nthings different now. It's not just that downtown seems a lot more prosperous.\nThere is an energy here that was not here when I was a kid.  \n  \nWhen I was a kid, this was a place young people left. Now it's a place that\nattracts them.  \n  \nWhat does that have to do with startups? Startups are made of people, and the\naverage age of the people in a typical startup is right in that 25 to 29\nbracket.  \n  \nI've seen how powerful it is for a city to have those people. Five years ago\nthey shifted the center of gravity of Silicon Valley from the peninsula to San\nFrancisco. Google and Facebook are on the peninsula, but the next generation\nof big winners are all in SF. The reason the center of gravity shifted was the\ntalent war, for programmers especially. Most 25 to 29 year olds want to live\nin the city, not down in the boring suburbs. So whether they like it or not,\nfounders know they have to be in the city. I know multiple founders who would\nhave preferred to live down in the Valley proper, but who made themselves move\nto SF because they knew otherwise they'd lose the talent war.  \n  \nSo being a magnet for people in their twenties is a very promising thing to\nbe. It's hard to imagine a place becoming a startup hub without also being\nthat. When I read that statistic about the increasing percentage of 25 to 29\nyear olds, I had exactly the same feeling of excitement I get when I see a\nstartup's graphs start to creep upward off the x axis.  \n  \nNationally the percentage of 25 to 29 year olds is 6.8%. That means you're .8%\nahead. The population is 306,000, so we're talking about a surplus of about\n2500 people. That's the population of a small town, and that's just the\nsurplus. So you have a toehold. Now you just have to expand it.  \n  \nAnd though \"youth-driven food boom\" may sound frivolous, it is anything but.\nRestaurants and cafes are a big part of the personality of a city. Imagine\nwalking down a street in Paris. What are you walking past? Little restaurants\nand cafes. Imagine driving through some depressing random exurb. What are you\ndriving past? Starbucks and McDonalds and Pizza Hut. As Gertrude Stein said,\nthere is no there there. You could be anywhere.  \n  \nThese independent restaurants and cafes are not just feeding people. They're\nmaking there be a there here.  \n  \nSo here is my first concrete recommendation for turning Pittsburgh into the\nnext Silicon Valley: do everything you can to encourage this youth-driven food\nboom. What could the city do? Treat the people starting these little\nrestaurants and cafes as your users, and go ask them what they want. I can\nguess at least one thing they might want: a fast permit process. San Francisco\nhas left you a huge amount of room to beat them in that department.  \n  \nI know restaurants aren't the prime mover though. The prime mover, as the\nTimes article said, is cheap housing. That's a big advantage. But that phrase\n\"cheap housing\" is a bit misleading. There are plenty of places that are\ncheaper. What's special about Pittsburgh is not that it's cheap, but that it's\na cheap place you'd actually want to live.  \n  \nPart of that is the buildings themselves. I realized a long time ago, back\nwhen I was a poor twenty-something myself, that the best deals were places\nthat had once been rich, and then became poor. If a place has always been\nrich, it's nice but too expensive. If a place has always been poor, it's cheap\nbut grim. But if a place was once rich and then got poor, you can find palaces\nfor cheap. And that's what's bringing people here. When Pittsburgh was rich, a\nhundred years ago, the people who lived here built big solid buildings. Not\nalways in the best taste, but definitely solid. So here is another piece of\nadvice for becoming a startup hub: don't destroy the buildings that are\nbringing people here. When cities are on the way back up, like Pittsburgh is\nnow, developers race to tear down the old buildings. Don't let that happen.\nFocus on historic preservation. Big real estate development projects are not\nwhat's bringing the twenty-somethings here. They're the opposite of the new\nrestaurants and cafes; they subtract personality from the city.  \n  \nThe empirical evidence suggests you cannot be too strict about historic\npreservation. The tougher cities are about it, the better they seem to do.  \n  \nBut the appeal of Pittsburgh is not just the buildings themselves. It's the\nneighborhoods they're in. Like San Francisco and New York, Pittsburgh is\nfortunate in being a pre-car city. It's not too spread out. Because those 25\nto 29 year olds do not like driving. They prefer walking, or bicycling, or\ntaking public transport. If you've been to San Francisco recently you can't\nhelp noticing the huge number of bicyclists. And this is not just a fad that\nthe twenty-somethings have adopted. In this respect they have discovered a\nbetter way to live. The beards will go, but not the bikes. Cities where you\ncan get around without driving are just better period. So I would suggest you\ndo everything you can to capitalize on this. As with historic preservation, it\nseems impossible to go too far.  \n  \nWhy not make Pittsburgh the most bicycle and pedestrian friendly city in the\ncountry? See if you can go so far that you make San Francisco seem backward by\ncomparison. If you do, it's very unlikely you'll regret it. The city will seem\nlike a paradise to the young people you want to attract. If they do leave to\nget jobs elsewhere, it will be with regret at leaving behind such a place. And\nwhat's the downside? Can you imagine a headline \"City ruined by becoming too\nbicycle-friendly?\" It just doesn't happen.  \n  \nSo suppose cool old neighborhoods and cool little restaurants make this the\nnext Portland. Will that be enough? It will put you in a way better position\nthan Portland itself, because Pittsburgh has something Portland lacks: a\nfirst-rate research university. CMU plus little cafes means you have more than\nhipsters drinking lattes. It means you have hipsters drinking lattes while\ntalking about distributed systems. Now you're getting really close to San\nFrancisco.  \n  \nIn fact you're better off than San Francisco in one way, because CMU is\ndowntown, but Stanford and Berkeley are out in the suburbs.  \n  \nWhat can CMU do to help Pittsburgh become a startup hub? Be an even better\nresearch university. CMU is one of the best universities in the world, but\nimagine what things would be like if it were the very best, and everyone knew\nit. There are a lot of ambitious people who must go to the best place,\nwherever it is. If CMU were it, they would all come here. There would be kids\nin Kazakhstan dreaming of one day living in Pittsburgh.  \n  \nBeing that kind of talent magnet is the most important contribution\nuniversities can make toward making their city a startup hub. In fact it is\npractically the only contribution they can make.  \n  \nBut wait, shouldn't universities be setting up programs with words like\n\"innovation\" and \"entrepreneurship\" in their names? No, they should not. These\nkind of things almost always turn out to be disappointments. They're pursuing\nthe wrong targets. The way to get innovation is not to aim for innovation but\nto aim for something more specific, like better batteries or better 3D\nprinting. And the way to learn about entrepreneurship is to do it, which you\n[_can't in school_](before.html).  \n  \nI know it may disappoint some administrators to hear that the best thing a\nuniversity can do to encourage startups is to be a great university. It's like\ntelling people who want to lose weight that the way to do it is to eat less.  \n  \nBut if you want to know where startups come from, look at the empirical\nevidence. Look at the histories of the most successful startups, and you'll\nfind they grow organically out of a couple of founders building something that\nstarts as an interesting side project. Universities are great at bringing\ntogether founders, but beyond that the best thing they can do is get out of\nthe way. For example, by not claiming ownership of \"intellectual property\"\nthat students and faculty develop, and by having liberal rules about deferred\nadmission and leaves of absence.  \n  \nIn fact, one of the most effective things a university could do to encourage\nstartups is an elaborate form of getting out of the way invented by Harvard.\nHarvard used to have exams for the fall semester after Christmas. At the\nbeginning of January they had something called \"Reading Period\" when you were\nsupposed to be studying for exams. And Microsoft and Facebook have something\nin common that few people realize: they were both started during Reading\nPeriod. It's the perfect situation for producing the sort of side projects\nthat turn into startups. The students are all on campus, but they don't have\nto do anything because they're supposed to be studying for exams.  \n  \nHarvard may have closed this window, because a few years ago they moved exams\nbefore Christmas and shortened reading period from 11 days to 7. But if a\nuniversity really wanted to help its students start startups, the empirical\nevidence, weighted by market cap, suggests the best thing they can do is\nliterally nothing.  \n  \nThe culture of Pittsburgh is another of its strengths. It seems like a city\nhas to be socially liberal to be a startup hub, and it's pretty clear why. A\ncity has to tolerate strangeness to be a home for startups, because startups\nare so strange. And you can't choose to allow just the forms of strangeness\nthat will turn into big startups, because they're all intermingled. You have\nto tolerate all strangeness.  \n  \nThat immediately rules out [_big chunks of the\nUS_](http://www.nytimes.com/2016/04/06/us/gay-rights-mississippi-north-\ncarolina.html). I'm optimistic it doesn't rule out Pittsburgh. One of the\nthings I remember from growing up here, though I didn't realize at the time\nthat there was anything unusual about it, is how well people got along. I'm\nstill not sure why. Maybe one reason was that everyone felt like an immigrant.\nWhen I was a kid in Monroeville, people didn't call themselves American. They\ncalled themselves Italian or Serbian or Ukranian. Just imagine what it must\nhave been like here a hundred years ago, when people were pouring in from\ntwenty different countries. Tolerance was the only option.  \n  \nWhat I remember about the culture of Pittsburgh is that it was both tolerant\nand pragmatic. That's how I'd describe the culture of Silicon Valley too. And\nit's not a coincidence, because Pittsburgh was the Silicon Valley of its time.\nThis was a city where people built new things. And while the things people\nbuild have changed, the spirit you need to do that kind of work is the same.  \n  \nSo although an influx of latte-swilling hipsters may be annoying in some ways,\nI would go out of my way to encourage them. And more generally to tolerate\nstrangeness, even unto the degree wacko Californians do. For Pittsburgh that\nis a conservative choice: it's a return to the city's roots.  \n  \nUnfortunately I saved the toughest part for last. There is one more thing you\nneed to be a startup hub, and Pittsburgh hasn't got it: investors. Silicon\nValley has a big investor community because it's had 50 years to grow one. New\nYork has a big investor community because it's full of people who like money a\nlot and are quick to notice new ways to get it. But Pittsburgh has neither of\nthese. And the cheap housing that draws other people here has no effect on\ninvestors.  \n  \nIf an investor community grows up here, it will happen the same way it did in\nSilicon Valley: slowly and organically. So I would not bet on having a big\ninvestor community in the short term. But fortunately there are three trends\nthat make that less necessary than it used to be. One is that startups are\nincreasingly cheap to start, so you just don't need as much outside money as\nyou used to. The second is that thanks to things like Kickstarter, a startup\ncan get to revenue faster. You can put something on Kickstarter from anywhere.\nThe third is programs like Y Combinator. A startup from anywhere in the world\ncan go to YC for 3 months, pick up funding, and then return home if they want.  \n  \nMy advice is to make Pittsburgh a great place for startups, and gradually more\nof them will stick. Some of those will succeed; some of their founders will\nbecome investors; and still more startups will stick.  \n  \nThis is not a fast path to becoming a startup hub. But it is at least a path,\nwhich is something few other cities have. And it's not as if you have to make\npainful sacrifices in the meantime. Think about what I've suggested you should\ndo. Encourage local restaurants, save old buildings, take advantage of\ndensity, make CMU the best, promote tolerance. These are the things that make\nPittsburgh good to live in now. All I'm saying is that you should do even more\nof them.  \n  \nAnd that's an encouraging thought. If Pittsburgh's path to becoming a startup\nhub is to be even more itself, then it has a good chance of succeeding. In\nfact it probably has the best chance of any city its size. It will take some\neffort, and a lot of time, but if any city can do it, Pittsburgh can.  \n  \n  \n  \n  \n  \n  \n  \n**Thanks** to Charlie Cheever and Jessica Livingston for reading drafts of\nthis, and to Meg Cheever for organizing Opt412 and inviting me to speak.  \n  \n\nDecember 2014  \n  \nMany startups go through a point a few months before they die where although\nthey have a significant amount of money in the bank, they're also losing a lot\neach month, and revenue growth is either nonexistent or mediocre. The company\nhas, say, 6 months of runway. Or to put it more brutally, 6 months before\nthey're out of business. They expect to avoid that by raising more from\ninvestors. [1]  \n  \nThat last sentence is the fatal one.  \n  \nThere may be nothing founders are so prone to delude themselves about as how\ninterested investors will be in giving them additional funding. It's hard to\nconvince investors the first time too, but founders expect that. What bites\nthem the second time is a confluence of three forces:\n\n  1. The company is spending more now than it did the first time it raised money.  \n  \n\n  2. Investors have much higher standards for companies that have already raised money.  \n  \n\n  3. The company is now starting to read as a failure. The first time it raised money, it was neither a success nor a failure; it was too early to ask. Now it's possible to ask that question, and the default answer is failure, because at this point that is the default outcome. \n\nI'm going to call the situation I described in the first paragraph \"the fatal\npinch.\" I try to resist coining phrases, but making up a name for this\nsituation may snap founders into realizing when they're in it.  \n  \nOne of the things that makes the fatal pinch so dangerous is that it's self-\nreinforcing. Founders overestimate their chances of raising more money, and so\nare slack about reaching profitability, which further decreases their chances\nof raising money.  \n  \nNow that you know about the fatal pinch, how do you avoid it? Y Combinator\ntells founders who raise money to act as if it's the last they'll ever get.\nBecause the self-reinforcing nature of this situation works the other way too:\nthe less you need further investment, the easier it is to get.  \n  \nWhat do you do if you're already in the fatal pinch? The first step is to re-\nevaluate the probability of raising more money. I will now, by an amazing feat\nof clairvoyance, do this for you: the probability is zero. [2]  \n  \nThree options remain: you can shut down the company, you can increase how much\nyou make, and you can decrease how much you spend.  \n  \nYou should shut down the company if you're certain it will fail no matter what\nyou do. Then at least you can give back the money you have left, and save\nyourself however many months you would have spent riding it down.  \n  \nCompanies rarely _have_ to fail though. What I'm really doing here is giving\nyou the option of admitting you've already given up.  \n  \nIf you don't want to shut down the company, that leaves increasing revenues\nand decreasing expenses. In most startups, expenses = people, and decreasing\nexpenses = firing people. [3] Deciding to fire people is usually hard, but\nthere's one case in which it shouldn't be: when there are people you already\nknow you should fire but you're in denial about it. If so, now's the time.  \n  \nIf that makes you profitable, or will enable you to make it to profitability\non the money you have left, you've avoided the immediate danger.  \n  \nOtherwise you have three options: you either have to fire good people, get\nsome or all of the employees to take less salary for a while, or increase\nrevenues.  \n  \nGetting people to take less salary is a weak solution that will only work when\nthe problem isn't too bad. If your current trajectory won't quite get you to\nprofitability but you can get over the threshold by cutting salaries a little,\nyou might be able to make the case to everyone for doing it. Otherwise you're\nprobably just postponing the problem, and that will be obvious to the people\nwhose salaries you're proposing to cut. [4]  \n  \nWhich leaves two options, firing good people and making more money. While\ntrying to balance them, keep in mind the eventual goal: to be a successful\nproduct company in the sense of having a single thing lots of people use.  \n  \nYou should lean more toward firing people if the source of your trouble is\noverhiring. If you went out and hired 15 people before you even knew what you\nwere building, you've created a broken company. You need to figure out what\nyou're building, and it will probably be easier to do that with a handful of\npeople than 15. Plus those 15 people might not even be the ones you need for\nwhatever you end up building. So the solution may be to shrink and then figure\nout what direction to grow in. After all, you're not doing those 15 people any\nfavors if you fly the company into ground with them aboard. They'll all lose\ntheir jobs eventually, along with all the time they expended on this doomed\ncompany.  \n  \nWhereas if you only have a handful of people, it may be better to focus on\ntrying to make more money. It may seem facile to suggest a startup make more\nmoney, as if that could be done for the asking. Usually a startup is already\ntrying as hard as it can to sell whatever it sells. What I'm suggesting here\nis not so much to try harder to make money but to try to make money in a\ndifferent way. For example, if you have only one person selling while the rest\nare writing code, consider having everyone work on selling. What good will\nmore code do you when you're out of business? If you have to write code to\nclose a certain deal, go ahead; that follows from everyone working on selling.\nBut only work on whatever will get you the most revenue the soonest.  \n  \nAnother way to make money differently is to sell different things, and in\nparticular to do more consultingish work. I say consultingish because there is\na long slippery slope from making products to pure consulting, and you don't\nhave to go far down it before you start to offer something really attractive\nto customers. Although your product may not be very appealing yet, if you're a\nstartup your programmers will often be way better than the ones your customers\nhave. Or you may have expertise in some new field they don't understand. So if\nyou change your sales conversations just a little from \"do you want to buy our\nproduct?\" to \"what do you need that you'd pay a lot for?\" you may find it's\nsuddenly a lot easier to extract money from customers.  \n  \nBe ruthlessly mercenary when you start doing this, though. You're trying to\nsave your company from death here, so make customers pay a lot, quickly. And\nto the extent you can, try to avoid the worst pitfalls of consulting. The\nideal thing might be if you built a precisely defined derivative version of\nyour product for the customer, and it was otherwise a straight product sale.\nYou keep the IP and no billing by the hour.  \n  \nIn the best case, this consultingish work may not be just something you do to\nsurvive, but may turn out to be the [thing-that-doesn't-scale](ds.html) that\ndefines your company. Don't expect it to be, but as you dive into individual\nusers' needs, keep your eyes open for narrow openings that have wide vistas\nbeyond.  \n  \nThere is usually so much demand for custom work that unless you're really\nincompetent there has to be some point down the slope of consulting at which\nyou can survive. But I didn't use the term slippery slope by accident;\ncustomers' insatiable demand for custom work will always be pushing you toward\nthe bottom. So while you'll probably survive, the problem now becomes to\nsurvive with the least damage and distraction.  \n  \nThe good news is, plenty of successful startups have passed through near-death\nexperiences and gone on to flourish. You just have to realize in time that\nyou're near death. And if you're in the fatal pinch, you are.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] There are a handful of companies that can't reasonably expect to make\nmoney for the first year or two, because what they're building takes so long.\nFor these companies substitute \"progress\" for \"revenue growth.\" You're not one\nof these companies unless your initial investors agreed in advance that you\nwere. And frankly even these companies wish they weren't, because the\nilliquidity of \"progress\" puts them at the mercy of investors.  \n  \n[2] There's a variant of the fatal pinch where your existing investors help\nyou along by promising to invest more. Or rather, where you read them as\npromising to invest more, while they think they're just mentioning the\npossibility. The way to solve this problem, if you have 8 months of runway or\nless, is to try to get the money right now. Then you'll either get the money,\nin which case (immediate) problem solved, or at least prevent your investors\nfrom helping you to remain in denial about your fundraising prospects.  \n  \n[3] Obviously, if you have significant expenses other than salaries that you\ncan eliminate, do it now.  \n  \n[4] Unless of course the source of the problem is that you're paying\nyourselves high salaries. If by cutting the founders' salaries to the minimum\nyou need, you can make it to profitability, you should. But it's a bad sign if\nyou needed to read this to realize that.  \n  \n**Thanks** to Sam Altman, Paul Buchheit, Jessica Livingston, and Geoff Ralston\nfor reading drafts of this.  \n  \n\nNovember 2004  \n  \nA lot of people are writing now about why Kerry lost. Here I want to examine a\nmore specific question: why were the exit polls so wrong?  \n  \nIn Ohio, which Kerry ultimately lost 49-51, exit polls gave him a 52-48\nvictory. And this wasn't just random error. In every swing state they\noverestimated the Kerry vote. In Florida, which Bush ultimately won 52-47,\nexit polls predicted a dead heat.  \n  \n(These are not early numbers. They're from about midnight eastern time, long\nafter polls closed in Ohio and Florida. And yet by the next afternoon the exit\npoll numbers online corresponded to the returns. The only way I can imagine\nthis happening is if those in charge of the exit polls cooked the books after\nseeing the actual returns. But that's another issue.)  \n  \nWhat happened? The source of the problem may be a variant of the Bradley\nEffect. This term was invented after Tom Bradley, the black mayor of Los\nAngeles, lost an election for governor of California despite a comfortable\nlead in the polls. Apparently voters were afraid to say they planned to vote\nagainst him, lest their motives be (perhaps correctly) suspected.  \n  \nIt seems likely that something similar happened in exit polls this year. In\ntheory, exit polls ought to be very accurate. You're not asking people what\nthey would do. You're asking what they just did.  \n  \nHow can you get errors asking that? Because some people don't respond. To get\na truly random sample, pollsters ask, say, every 20th person leaving the\npolling place who they voted for. But not everyone wants to answer. And the\npollsters can't simply ignore those who won't, or their sample isn't random\nanymore. So what they do, apparently, is note down the age and race and sex of\nthe person, and guess from that who they voted for.  \n  \nThis works so long as there is no _correlation_ between who people vote for\nand whether they're willing to talk about it. But this year there may have\nbeen. It may be that a significant number of those who voted for Bush didn't\nwant to say so.  \n  \nWhy not? Because people in the US are more conservative than they're willing\nto admit. The values of the elite in this country, at least at the moment, are\nNPR values. The average person, as I think both Republicans and Democrats\nwould agree, is more socially conservative. But while some openly flaunt the\nfact that they don't share the opinions of the elite, others feel a little\nnervous about it, as if they had bad table manners.  \n  \nFor example, according to current NPR values, you [can't say](say.html)\nanything that might be perceived as disparaging towards homosexuals. To do so\nis \"homophobic.\" And yet a large number of Americans are deeply religious, and\nthe Bible is quite explicit on the subject of homosexuality. What are they to\ndo? I think what many do is keep their opinions, but keep them to themselves.  \n  \nThey know what they believe, but they also know what they're supposed to\nbelieve. And so when a stranger (for example, a pollster) asks them their\nopinion about something like gay marriage, they will not always say what they\nreally think.  \n  \nWhen the values of the elite are liberal, polls will tend to underestimate the\nconservativeness of ordinary voters. This seems to me the leading theory to\nexplain why the exit polls were so far off this year. NPR values said one\nought to vote for Kerry. So all the people who voted for Kerry felt virtuous\nfor doing so, and were eager to tell pollsters they had. No one who voted for\nKerry did it as an act of quiet defiance.  \n  \n  \n  \n  \n\nMay 2002  \n  \n\"The quantity of meaning compressed into a small space by algebraic signs, is\nanother circumstance that facilitates the reasonings we are accustomed to\ncarry on by their aid.\"  \n  \n\\- Charles Babbage, quoted in Iverson's Turing Award Lecture  \n  \n  \nIn the discussion about issues raised by [Revenge of the Nerds](icad.html) on\nthe LL1 mailing list, Paul Prescod wrote something that stuck in my mind.\n\n> Python's goal is regularity and readability, not succinctness.\n\nOn the face of it, this seems a rather damning thing to claim about a\nprogramming language. As far as I can tell, succinctness = power. If so, then\nsubstituting, we get\n\n> Python's goal is regularity and readability, not power.\n\nand this doesn't seem a tradeoff (if it _is_ a tradeoff) that you'd want to\nmake. It's not far from saying that Python's goal is not to be effective as a\nprogramming language.  \n  \nDoes succinctness = power? This seems to me an important question, maybe the\nmost important question for anyone interested in language design, and one that\nit would be useful to confront directly. I don't feel sure yet that the answer\nis a simple yes, but it seems a good hypothesis to begin with.  \n  \n**Hypothesis**  \n  \nMy hypothesis is that succinctness is power, or is close enough that except in\npathological examples you can treat them as identical.  \n  \nIt seems to me that succinctness is what programming languages are _for._\nComputers would be just as happy to be told what to do directly in machine\nlanguage. I think that the main reason we take the trouble to develop high-\nlevel languages is to get leverage, so that we can say (and more importantly,\nthink) in 10 lines of a high-level language what would require 1000 lines of\nmachine language. In other words, the main point of high-level languages is to\nmake source code smaller.  \n  \nIf smaller source code is the purpose of high-level languages, and the power\nof something is how well it achieves its purpose, then the measure of the\npower of a programming language is how small it makes your programs.  \n  \nConversely, a language that doesn't make your programs small is doing a bad\njob of what programming languages are supposed to do, like a knife that\ndoesn't cut well, or printing that's illegible.  \n  \n**Metrics**  \n  \nSmall in what sense though? The most common measure of code size is lines of\ncode. But I think that this metric is the most common because it is the\neasiest to measure. I don't think anyone really believes it is the true test\nof the length of a program. Different languages have different conventions for\nhow much you should put on a line; in C a lot of lines have nothing on them\nbut a delimiter or two.  \n  \nAnother easy test is the number of characters in a program, but this is not\nvery good either; some languages (Perl, for example) just use shorter\nidentifiers than others.  \n  \nI think a better measure of the size of a program would be the number of\nelements, where an element is anything that would be a distinct node if you\ndrew a tree representing the source code. The name of a variable or function\nis an element; an integer or a floating-point number is an element; a segment\nof literal text is an element; an element of a pattern, or a format directive,\nis an element; a new block is an element. There are borderline cases (is -5\ntwo elements or one?) but I think most of them are the same for every\nlanguage, so they don't affect comparisons much.  \n  \nThis metric needs fleshing out, and it could require interpretation in the\ncase of specific languages, but I think it tries to measure the right thing,\nwhich is the number of parts a program has. I think the tree you'd draw in\nthis exercise is what you have to make in your head in order to conceive of\nthe program, and so its size is proportionate to the amount of work you have\nto do to write or read it.  \n  \n**Design**  \n  \nThis kind of metric would allow us to compare different languages, but that is\nnot, at least for me, its main value. The main value of the succinctness test\nis as a guide in _designing_ languages. The most useful comparison between\nlanguages is between two potential variants of the same language. What can I\ndo in the language to make programs shorter?  \n  \nIf the conceptual load of a program is proportionate to its complexity, and a\ngiven programmer can tolerate a fixed conceptual load, then this is the same\nas asking, what can I do to enable programmers to get the most done? And that\nseems to me identical to asking, how can I design a good language?  \n  \n(Incidentally, nothing makes it more patently obvious that the old chestnut\n\"all languages are equivalent\" is false than designing languages. When you are\ndesigning a new language, you're _constantly_ comparing two languages-- the\nlanguage if I did x, and if I didn't-- to decide which is better. If this were\nreally a meaningless question, you might as well flip a coin.)  \n  \nAiming for succinctness seems a good way to find new ideas. If you can do\nsomething that makes many different programs shorter, it is probably not a\ncoincidence: you have probably discovered a useful new abstraction. You might\neven be able to write a program to help by searching source code for repeated\npatterns. Among other languages, those with a reputation for succinctness\nwould be the ones to look to for new ideas: Forth, Joy, Icon.  \n  \n**Comparison**  \n  \nThe first person to write about these issues, as far as I know, was Fred\nBrooks in the _Mythical Man Month_. He wrote that programmers seemed to\ngenerate about the same amount of code per day regardless of the language.\nWhen I first read this in my early twenties, it was a big surprise to me and\nseemed to have huge implications. It meant that (a) the only way to get\nsoftware written faster was to use a more succinct language, and (b) someone\nwho took the trouble to do this could leave competitors who didn't in the\ndust.  \n  \nBrooks' hypothesis, if it's true, seems to be at the very heart of hacking. In\nthe years since, I've paid close attention to any evidence I could get on the\nquestion, from formal studies to anecdotes about individual projects. I have\nseen nothing to contradict him.  \n  \nI have not yet seen evidence that seemed to me conclusive, and I don't expect\nto. Studies like Lutz Prechelt's comparison of programming languages, while\ngenerating the kind of results I expected, tend to use problems that are too\nshort to be meaningful tests. A better test of a language is what happens in\nprograms that take a month to write. And the only real test, if you believe as\nI do that the main purpose of a language is to be good to think in (rather\nthan just to tell a computer what to do once you've thought of it) is what new\nthings you can write in it. So any language comparison where you have to meet\na predefined spec is testing slightly the wrong thing.  \n  \nThe true test of a language is how well you can discover and solve new\nproblems, not how well you can use it to solve a problem someone else has\nalready formulated. These two are quite different criteria. In art, mediums\nlike embroidery and mosaic work well if you know beforehand what you want to\nmake, but are absolutely lousy if you don't. When you want to discover the\nimage as you make it-- as you have to do with anything as complex as an image\nof a person, for example-- you need to use a more fluid medium like pencil or\nink wash or oil paint. And indeed, the way tapestries and mosaics are made in\npractice is to make a painting first, then copy it. (The word \"cartoon\" was\noriginally used to describe a painting intended for this purpose).  \n  \nWhat this means is that we are never likely to have accurate comparisons of\nthe relative power of programming languages. We'll have precise comparisons,\nbut not accurate ones. In particular, explicit studies for the purpose of\ncomparing languages, because they will probably use small problems, and will\nnecessarily use predefined problems, will tend to underestimate the power of\nthe more powerful languages.  \n  \nReports from the field, though they will necessarily be less precise than\n\"scientific\" studies, are likely to be more meaningful. For example, Ulf Wiger\nof Ericsson did a [study](http://www.erlang.se/publications/Ulf_Wiger.pdf)\nthat concluded that Erlang was 4-10x more succinct than C++, and\nproportionately faster to develop software in:\n\n> Comparisons between Ericsson-internal development projects indicate similar\n> line/hour productivity, including all phases of software development, rather\n> independently of which language (Erlang, PLEX, C, C++, or Java) was used.\n> What differentiates the different languages then becomes source code volume.\n\nThe study also deals explictly with a point that was only implicit in Brooks'\nbook (since he measured lines of debugged code): programs written in more\npowerful languages tend to have fewer bugs. That becomes an end in itself,\npossibly more important than programmer productivity, in applications like\nnetwork switches.  \n  \n**The Taste Test**  \n  \nUltimately, I think you have to go with your gut. What does it feel like to\nprogram in the language? I think the way to find (or design) the best language\nis to become hypersensitive to how well a language lets you think, then\nchoose/design the language that feels best. If some language feature is\nawkward or restricting, don't worry, you'll know about it.  \n  \nSuch hypersensitivity will come at a cost. You'll find that you can't _stand_\nprogramming in clumsy languages. I find it unbearably restrictive to program\nin languages without macros, just as someone used to dynamic typing finds it\nunbearably restrictive to have to go back to programming in a language where\nyou have to declare the type of every variable, and can't make a list of\nobjects of different types.  \n  \nI'm not the only one. I know many Lisp hackers that this has happened to. In\nfact, the most accurate measure of the relative power of programming languages\nmight be the percentage of people who know the language who will take any job\nwhere they get to use that language, regardless of the application domain.  \n  \n**Restrictiveness**  \n  \nI think most hackers know what it means for a language to feel restrictive.\nWhat's happening when you feel that? I think it's the same feeling you get\nwhen the street you want to take is blocked off, and you have to take a long\ndetour to get where you wanted to go. There is something you want to say, and\nthe language won't let you.  \n  \nWhat's really going on here, I think, is that a restrictive language is one\nthat isn't succinct enough. The problem is not simply that you can't say what\nyou planned to. It's that the detour the language makes you take is _longer._\nTry this thought experiment. Suppose there were some program you wanted to\nwrite, and the language wouldn't let you express it the way you planned to,\nbut instead forced you to write the program in some other way that was\n_shorter._ For me at least, that wouldn't feel very restrictive. It would be\nlike the street you wanted to take being blocked off, and the policeman at the\nintersection directing you to a shortcut instead of a detour. Great!  \n  \nI think most (ninety percent?) of the feeling of restrictiveness comes from\nbeing forced to make the program you write in the language longer than one you\nhave in your head. Restrictiveness is mostly lack of succinctness. So when a\nlanguage feels restrictive, what that (mostly) means is that it isn't succinct\nenough, and when a language isn't succinct, it will feel restrictive.  \n  \n**Readability**  \n  \nThe quote I began with mentions two other qualities, regularity and\nreadability. I'm not sure what regularity is, or what advantage, if any, code\nthat is regular and readable has over code that is merely readable. But I\nthink I know what is meant by readability, and I think it is also related to\nsuccinctness.  \n  \nWe have to be careful here to distinguish between the readability of an\nindividual line of code and the readability of the whole program. It's the\nsecond that matters. I agree that a line of Basic is likely to be more\nreadable than a line of Lisp. But a program written in Basic is is going to\nhave more lines than the same program written in Lisp (especially once you\ncross over into Greenspunland). The total effort of reading the Basic program\nwill surely be greater.\n\n> total effort = effort per line x number of lines\n\nI'm not as sure that readability is directly proportionate to succinctness as\nI am that power is, but certainly succinctness is a factor (in the\nmathematical sense; see equation above) in readability. So it may not even be\nmeaningful to say that the goal of a language is readability, not\nsuccinctness; it could be like saying the goal was readability, not\nreadability.  \n  \nWhat readability-per-line does mean, to the user encountering the language for\nthe first time, is that source code will _look unthreatening_. So readability-\nper-line could be a good marketing decision, even if it is a bad design\ndecision. It's isomorphic to the very successful technique of letting people\npay in installments: instead of frightening them with a high upfront price,\nyou tell them the low monthly payment. Installment plans are a net lose for\nthe buyer, though, as mere readability-per-line probably is for the\nprogrammer. The buyer is going to make a _lot_ of those low, low payments; and\nthe programmer is going to read a _lot_ of those individually readable lines.  \n  \nThis tradeoff predates programming languages. If you're used to reading novels\nand newspaper articles, your first experience of reading a math paper can be\ndismaying. It could take half an hour to read a single page. And yet, I am\npretty sure that the notation is not the problem, even though it may feel like\nit is. The math paper is hard to read because the ideas are hard. If you\nexpressed the same ideas in prose (as mathematicians had to do before they\nevolved succinct notations), they wouldn't be any easier to read, because the\npaper would grow to the size of a book.  \n  \n**To What Extent?**  \n  \nA number of people have rejected the idea that succinctness = power. I think\nit would be more useful, instead of simply arguing that they are the same or\naren't, to ask: to what _extent_ does succinctness = power? Because clearly\nsuccinctness is a large part of what higher-level languages are for. If it is\nnot all they're for, then what else are they for, and how important,\nrelatively, are these other functions?  \n  \nI'm not proposing this just to make the debate more civilized. I really want\nto know the answer. When, if ever, is a language too succinct for its own\ngood?  \n  \nThe hypothesis I began with was that, except in pathological examples, I\nthought succinctness could be considered identical with power. What I meant\nwas that in any language anyone would design, they would be identical, but\nthat if someone wanted to design a language explicitly to disprove this\nhypothesis, they could probably do it. I'm not even sure of that, actually.  \n  \n**Languages, not Programs**  \n  \nWe should be clear that we are talking about the succinctness of languages,\nnot of individual programs. It certainly is possible for individual programs\nto be written too densely.  \n  \nI wrote about this in [On Lisp](onlisp.html). A complex macro may have to save\nmany times its own length to be justified. If writing some hairy macro could\nsave you ten lines of code every time you use it, and the macro is itself ten\nlines of code, then you get a net saving in lines if you use it more than\nonce. But that could still be a bad move, because macro definitions are harder\nto read than ordinary code. You might have to use the macro ten or twenty\ntimes before it yielded a net improvement in readability.  \n  \nI'm sure every language has such tradeoffs (though I suspect the stakes get\nhigher as the language gets more powerful). Every programmer must have seen\ncode that some clever person has made marginally shorter by using dubious\nprogramming tricks.  \n  \nSo there is no argument about that-- at least, not from me. Individual\nprograms can certainly be too succinct for their own good. The question is,\ncan a language be? Can a language compel programmers to write code that's\nshort (in elements) at the expense of overall readability?  \n  \nOne reason it's hard to imagine a language being too succinct is that if there\nwere some excessively compact way to phrase something, there would probably\nalso be a longer way. For example, if you felt Lisp programs using a lot of\nmacros or higher-order functions were too dense, you could, if you preferred,\nwrite code that was isomorphic to Pascal. If you don't want to express\nfactorial in Arc as a call to a higher-order function  (rec zero 1 * 1-)  you\ncan also write out a recursive definition:  (rfn fact (x) (if (zero x) 1 (* x\n(fact (1- x)))))  Though I can't off the top of my head think of any examples,\nI am interested in the question of whether a language could be too succinct.\nAre there languages that force you to write code in a way that is crabbed and\nincomprehensible? If anyone has examples, I would be very interested to see\nthem.  \n  \n(Reminder: What I'm looking for are programs that are very dense according to\nthe metric of \"elements\" sketched above, not merely programs that are short\nbecause delimiters can be omitted and everything has a one-character name.)  \n  \n  \n  \n  \n\nJuly 2008  \n  \nAt this year's startup school, David Heinemeier Hansson gave a\n[talk](http://www.omnisio.com/startupschool08/david-heinemeier-hansson-at-\nstartup-school-08) in which he suggested that startup founders should do\nthings the old fashioned way. Instead of hoping to get rich by building a\nvaluable company and then selling stock in a \"liquidity event,\" founders\nshould start companies that make money and live off the revenues.  \n  \nSounds like a good plan. Let's think about the optimal way to do this.  \n  \nOne disadvantage of living off the revenues of your company is that you have\nto keep running it. And as anyone who runs their own business can tell you,\nthat requires your complete attention. You can't just start a business and\ncheck out once things are going well, or they stop going well surprisingly\nfast.  \n  \nThe main economic motives of startup founders seem to be freedom and security.\nThey want enough money that (a) they don't have to worry about running out of\nmoney and (b) they can spend their time how they want. Running your own\nbusiness offers neither. You certainly don't have freedom: no boss is so\ndemanding. Nor do you have security, because if you stop paying attention to\nthe company, its revenues go away, and with them your income.  \n  \nThe best case, for most people, would be if you could hire someone to manage\nthe company for you once you'd grown it to a certain size. Suppose you could\nfind a really good manager. Then you would have both freedom and security. You\ncould pay as little attention to the business as you wanted, knowing that your\nmanager would keep things running smoothly. And that being so, revenues would\ncontinue to flow in, so you'd have security as well.  \n  \nThere will of course be some founders who wouldn't like that idea: the ones\nwho like running their company so much that there's nothing else they'd rather\ndo. But this group must be small. The way you succeed in most businesses is to\nbe fanatically attentive to customers' needs. What are the odds that your own\ndesires would coincide exactly with the demands of this powerful, external\nforce?  \n  \nSure, running your own company can be fairly interesting. Viaweb was more\ninteresting than any job I'd had before. And since I made much more money from\nit, it offered the highest ratio of income to boringness of anything I'd done,\nby orders of magnitude. But was it _the_ most interesting work I could imagine\ndoing? No.  \n  \nWhether the number of founders in the same position is asymptotic or merely\nlarge, there are certainly a lot of them. For them the right approach would be\nto hand the company over to a professional manager eventually, if they could\nfind one who was good enough.  \n  \n_____  \n  \nSo far so good. But what if your manager was hit by a bus? What you really\nwant is a management company to run your company for you. Then you don't\ndepend on any one person.  \n  \nIf you own rental property, there are companies you can hire to manage it for\nyou. Some will do everything, from finding tenants to fixing leaks. Of course,\nrunning companies is a lot more complicated than managing rental property, but\nlet's suppose there were management companies that could do it for you. They'd\ncharge a lot, but wouldn't it be worth it? I'd sacrifice a large percentage of\nthe income for the extra peace of mind.  \n  \nI realize what I'm describing already sounds too good to be true, but I can\nthink of a way to make it even more attractive. If company management\ncompanies existed, there would be an additional service they could offer\nclients: they could let them insure their returns by pooling their risk. After\nall, even a perfect manager can't save a company when, as sometimes happens,\nits whole market dies, just as property managers can't save you from the\nbuilding burning down. But a company that managed a large enough number of\ncompanies could say to all its clients: we'll combine the revenues from all\nyour companies, and pay you your proportionate share.  \n  \nIf such management companies existed, they'd offer the maximum of freedom and\nsecurity. Someone would run your company for you, and you'd be protected even\nif it happened to die.  \n  \nLet's think about how such a management company might be organized. The\nsimplest way would be to have a new kind of stock representing the total pool\nof companies they were managing. When you signed up, you'd trade your\ncompany's stock for shares of this pool, in proportion to an estimate of your\ncompany's value that you'd both agreed upon. Then you'd automatically get your\nshare of the returns of the whole pool.  \n  \nThe catch is that because this kind of trade would be hard to undo, you\ncouldn't switch management companies. But there's a way they could fix that:\nsuppose all the company management companies got together and agreed to allow\ntheir clients to exchange shares in all their pools. Then you could, in\neffect, simultaneously choose all the management companies to run yours for\nyou, in whatever proportion you wanted, and change your mind later as often as\nyou wanted.  \n  \nIf such pooled-risk company management companies existed, signing up with one\nwould seem the ideal plan for most people following the route David advocated.  \n  \nGood news: they do exist. What I've just described is an acquisition by a\npublic company.  \n  \n_____  \n  \nUnfortunately, though public acquirers are structurally identical to pooled-\nrisk company management companies, they don't think of themselves that way.\nWith a property management company, you can just walk in whenever you want and\nsay \"manage my rental property for me\" and they'll do it. Whereas acquirers\nare, as of this writing, extremely fickle. Sometimes they're in a buying mood\nand they'll overpay enormously; other times they're not interested. They're\nlike property management companies run by madmen. Or more precisely, by\nBenjamin Graham's Mr. Market.  \n  \nSo while on average public acquirers behave like pooled-risk company managers,\nyou need a window of several years to get average case performance. If you\nwait long enough (five years, say) you're likely to hit an up cycle where some\nacquirer is hot to buy you. But you can't choose when it happens.  \n  \nYou can't assume investors will carry you for as long as you might have to\nwait. Your company has to make money. Opinions are divided about how early to\nfocus on that. [Joe Kraus](http://susanitsa.wordpress.com/2006/11/08/the-joe-\nkraus-qa-better-late/) says you should try charging customers right away. And\nyet some of the most successful startups, including Google, ignored revenue at\nfirst and concentrated exclusively on development. The answer probably depends\non the type of company you're starting. I can imagine some where trying to\nmake sales would be a good heuristic for product design, and others where it\nwould just be a distraction. The test is probably whether it helps you to\nunderstand your users.  \n  \nYou can choose whichever revenue strategy you think is best for the type of\ncompany you're starting, so long as you're profitable. Being profitable\nensures you'll get at least the average of the acquisition market\u2014in which\npublic companies do behave as pooled-risk company management companies.  \n  \nDavid isn't mistaken in saying you should start a company to live off its\nrevenues. The mistake is thinking this is somehow opposed to starting a\ncompany and selling it. In fact, for most people the latter is merely the\noptimal case of the former.  \n  \n  \n  \n  \n  \n**Thanks** to Trevor Blackwell, Jessica Livingston, Michael Mandel, Robert\nMorris, and Fred Wilson for reading drafts of this.  \n  \n  \n  \n\nDecember 2005  \n  \nThe most impressive people I know are all terrible procrastinators. So could\nit be that procrastination isn't always bad?  \n  \nMost people who write about procrastination write about how to cure it. But\nthis is, strictly speaking, impossible. There are an infinite number of things\nyou could be doing. No matter what you work on, you're not working on\neverything else. So the question is not how to avoid procrastination, but how\nto procrastinate well.  \n  \nThere are three variants of procrastination, depending on what you do instead\nof working on something: you could work on (a) nothing, (b) something less\nimportant, or (c) something more important. That last type, I'd argue, is good\nprocrastination.  \n  \nThat's the \"absent-minded professor,\" who forgets to shave, or eat, or even\nperhaps look where he's going while he's thinking about some interesting\nquestion. His mind is absent from the everyday world because it's hard at work\nin another.  \n  \nThat's the sense in which the most impressive people I know are all\nprocrastinators. They're type-C procrastinators: they put off working on small\nstuff to work on big stuff.  \n  \nWhat's \"small stuff?\" Roughly, work that has zero chance of being mentioned in\nyour obituary. It's hard to say at the time what will turn out to be your best\nwork (will it be your magnum opus on Sumerian temple architecture, or the\ndetective thriller you wrote under a pseudonym?), but there's a whole class of\ntasks you can safely rule out: shaving, doing your laundry, cleaning the\nhouse, writing thank-you notes\u2014anything that might be called an errand.  \n  \nGood procrastination is avoiding errands to do real work.  \n  \nGood in a sense, at least. The people who want you to do the errands won't\nthink it's good. But you probably have to annoy them if you want to get\nanything done. The mildest seeming people, if they want to do real work, all\nhave a certain degree of ruthlessness when it comes to avoiding errands.  \n  \nSome errands, like replying to letters, go away if you ignore them (perhaps\ntaking friends with them). Others, like mowing the lawn, or filing tax\nreturns, only get worse if you put them off. In principle it shouldn't work to\nput off the second kind of errand. You're going to have to do whatever it is\neventually. Why not (as past-due notices are always saying) do it now?  \n  \nThe reason it pays to put off even those errands is that real work needs two\nthings errands don't: big chunks of time, and the right mood. If you get\ninspired by some project, it can be a net win to blow off everything you were\nsupposed to do for the next few days to work on it. Yes, those errands may\ncost you more time when you finally get around to them. But if you get a lot\ndone during those few days, you will be net more productive.  \n  \nIn fact, it may not be a difference in degree, but a difference in kind. There\nmay be types of work that can only be done in long, uninterrupted stretches,\nwhen inspiration hits, rather than dutifully in scheduled little slices.\nEmpirically it seems to be so. When I think of the people I know who've done\ngreat things, I don't imagine them dutifully crossing items off to-do lists. I\nimagine them sneaking off to work on some new idea.  \n  \nConversely, forcing someone to perform errands synchronously is bound to limit\ntheir productivity. The cost of an interruption is not just the time it takes,\nbut that it breaks the time on either side in half. You probably only have to\ninterrupt someone a couple times a day before they're unable to work on hard\nproblems at all.  \n  \nI've wondered a lot about why [startups](start.html) are most productive at\nthe very beginning, when they're just a couple guys in an apartment. The main\nreason may be that there's no one to interrupt them yet. In theory it's good\nwhen the founders finally get enough money to hire people to do some of the\nwork for them. But it may be better to be overworked than interrupted. Once\nyou dilute a startup with ordinary office workers\u2014with type-B\nprocrastinators\u2014the whole company starts to resonate at their frequency.\nThey're interrupt-driven, and soon you are too.  \n  \nErrands are so effective at killing great projects that a lot of people use\nthem for that purpose. Someone who has decided to write a novel, for example,\nwill suddenly find that the house needs cleaning. People who fail to write\nnovels don't do it by sitting in front of a blank page for days without\nwriting anything. They do it by feeding the cat, going out to buy something\nthey need for their apartment, meeting a friend for coffee, checking email. \"I\ndon't have time to work,\" they say. And they don't; they've made sure of that.  \n  \n(There's also a variant where one has no place to work. The cure is to visit\nthe places where famous people worked, and see how unsuitable they were.)  \n  \nI've used both these excuses at one time or another. I've learned a lot of\ntricks for making myself work over the last 20 years, but even now I don't win\nconsistently. Some days I get real work done. Other days are eaten up by\nerrands. And I know it's usually my fault: I _let_ errands eat up the day, to\navoid facing some hard problem.  \n  \nThe most dangerous form of procrastination is unacknowledged type-B\nprocrastination, because it doesn't feel like procrastination. You're \"getting\nthings done.\" Just the wrong things.  \n  \nAny advice about procrastination that concentrates on crossing things off your\nto-do list is not only incomplete, but positively misleading, if it doesn't\nconsider the possibility that the to-do list is itself a form of type-B\nprocrastination. In fact, possibility is too weak a word. Nearly everyone's\nis. Unless you're working on the biggest things you could be working on,\nyou're type-B procrastinating, no matter how much you're getting done.  \n  \nIn his famous essay [You and Your Research](hamming.html) (which I recommend\nto anyone ambitious, no matter what they're working on), Richard Hamming\nsuggests that you ask yourself three questions:\n\n  1. What are the most important problems in your field?  \n  \n\n  2. Are you working on one of them?  \n  \n\n  3. Why not? \n\nHamming was at Bell Labs when he started asking such questions. In principle\nanyone there ought to have been able to work on the most important problems in\ntheir field. Perhaps not everyone can make an equally dramatic mark on the\nworld; I don't know; but whatever your capacities, there are projects that\nstretch them. So Hamming's exercise can be generalized to:\n\n> What's the best thing you could be working on, and why aren't you?\n\nMost people will shy away from this question. I shy away from it myself; I see\nit there on the page and quickly move on to the next sentence. Hamming used to\ngo around actually asking people this, and it didn't make him popular. But\nit's a question anyone ambitious should face.  \n  \nThe trouble is, you may end up hooking a very big fish with this bait. To do\ngood work, you need to do more than find good projects. Once you've found\nthem, you have to get yourself to work on them, and that can be hard. The\nbigger the problem, the harder it is to get yourself to work on it.  \n  \nOf course, the main reason people find it difficult to work on a particular\nproblem is that they don't [enjoy](hs.html) it. When you're young, especially,\nyou often find yourself working on stuff you don't really like-- because it\nseems impressive, for example, or because you've been assigned to work on it.\nMost grad students are stuck working on big problems they don't really like,\nand grad school is thus synonymous with procrastination.  \n  \nBut even when you like what you're working on, it's easier to get yourself to\nwork on small problems than big ones. Why? Why is it so hard to work on big\nproblems? One reason is that you may not get any reward in the forseeable\nfuture. If you work on something you can finish in a day or two, you can\nexpect to have a nice feeling of accomplishment fairly soon. If the reward is\nindefinitely far in the future, it seems less real.  \n  \nAnother reason people don't work on big projects is, ironically, fear of\nwasting time. What if they fail? Then all the time they spent on it will be\nwasted. (In fact it probably won't be, because work on hard projects almost\nalways leads somewhere.)  \n  \nBut the trouble with big problems can't be just that they promise no immediate\nreward and might cause you to waste a lot of time. If that were all, they'd be\nno worse than going to visit your in-laws. There's more to it than that. Big\nproblems are _terrifying_. There's an almost physical pain in facing them.\nIt's like having a vacuum cleaner hooked up to your imagination. All your\ninitial ideas get sucked out immediately, and you don't have any more, and yet\nthe vacuum cleaner is still sucking.  \n  \nYou can't look a big problem too directly in the eye. You have to approach it\nsomewhat obliquely. But you have to adjust the angle just right: you have to\nbe facing the big problem directly enough that you catch some of the\nexcitement radiating from it, but not so much that it paralyzes you. You can\ntighten the angle once you get going, just as a sailboat can sail closer to\nthe wind once it gets underway.  \n  \nIf you want to work on big things, you seem to have to trick yourself into\ndoing it. You have to work on small things that could grow into big things, or\nwork on successively larger things, or split the moral load with\ncollaborators. It's not a sign of weakness to depend on such tricks. The very\nbest work has been done this way.  \n  \nWhen I talk to people who've managed to make themselves work on big things, I\nfind that all blow off errands, and all feel guilty about it. I don't think\nthey should feel guilty. There's more to do than anyone could. So someone\ndoing the best work they can is inevitably going to leave a lot of errands\nundone. It seems a mistake to feel bad about that.  \n  \nI think the way to \"solve\" the problem of procrastination is to let delight\npull you instead of making a to-do list push you. Work on an ambitious project\nyou really enjoy, and sail as close to the wind as you can, and you'll leave\nthe right things undone.  \n  \n  \n  \n  \n  \n**Thanks** to Trevor Blackwell, Jessica Livingston, and Robert Morris for\nreading drafts of this.  \n  \n\n1993\n\n_(This essay is from the introduction to_[On Lisp](onlisp.html) _.)_  \n  \nIt's a long-standing principle of programming style that the functional\nelements of a program should not be too large. If some component of a program\ngrows beyond the stage where it's readily comprehensible, it becomes a mass of\ncomplexity which conceals errors as easily as a big city conceals fugitives.\nSuch software will be hard to read, hard to test, and hard to debug.  \n  \nIn accordance with this principle, a large program must be divided into\npieces, and the larger the program, the more it must be divided. How do you\ndivide a program? The traditional approach is called _top-down design:_ you\nsay \"the purpose of the program is to do these seven things, so I divide it\ninto seven major subroutines. The first subroutine has to do these four\nthings, so it in turn will have four of its own subroutines,\" and so on. This\nprocess continues until the whole program has the right level of granularity--\neach part large enough to do something substantial, but small enough to be\nunderstood as a single unit.  \n  \nExperienced Lisp programmers divide up their programs differently. As well as\ntop-down design, they follow a principle which could be called _bottom-up\ndesign_ \\-- changing the language to suit the problem. In Lisp, you don't just\nwrite your program down toward the language, you also build the language up\ntoward your program. As you're writing a program you may think \"I wish Lisp\nhad such-and-such an operator.\" So you go and write it. Afterward you realize\nthat using the new operator would simplify the design of another part of the\nprogram, and so on. Language and program evolve together. Like the border\nbetween two warring states, the boundary between language and program is drawn\nand redrawn, until eventually it comes to rest along the mountains and rivers,\nthe natural frontiers of your problem. In the end your program will look as if\nthe language had been designed for it. And when language and program fit one\nanother well, you end up with code which is clear, small, and efficient.  \n  \nIt's worth emphasizing that bottom-up design doesn't mean just writing the\nsame program in a different order. When you work bottom-up, you usually end up\nwith a different program. Instead of a single, monolithic program, you will\nget a larger language with more abstract operators, and a smaller program\nwritten in it. Instead of a lintel, you'll get an arch.  \n  \nIn typical code, once you abstract out the parts which are merely bookkeeping,\nwhat's left is much shorter; the higher you build up the language, the less\ndistance you will have to travel from the top down to it. This brings several\nadvantages:  \n  \n\n  1. By making the language do more of the work, bottom-up design yields programs which are smaller and more agile. A shorter program doesn't have to be divided into so many components, and fewer components means programs which are easier to read or modify. Fewer components also means fewer connections between components, and thus less chance for errors there. As industrial designers strive to reduce the number of moving parts in a machine, experienced Lisp programmers use bottom-up design to reduce the size and complexity of their programs.  \n  \n\n  2. Bottom-up design promotes code re-use. When you write two or more programs, many of the utilities you wrote for the first program will also be useful in the succeeding ones. Once you've acquired a large substrate of utilities, writing a new program can take only a fraction of the effort it would require if you had to start with raw Lisp.  \n  \n\n  3. Bottom-up design makes programs easier to read.  An instance of this type of abstraction asks the reader to understand a general-purpose operator; an instance of functional abstraction asks the reader to understand a special-purpose subroutine. [1]  \n  \n\n  4. Because it causes you always to be on the lookout for patterns in your code, working bottom-up helps to clarify your ideas about the design of your program. If two distant components of a program are similar in form, you'll be led to notice the similarity and perhaps to redesign the program in a simpler way. \n\nBottom-up design is possible to a certain degree in languages other than Lisp.\nWhenever you see library functions, bottom-up design is happening. However,\nLisp gives you much broader powers in this department, and augmenting the\nlanguage plays a proportionately larger role in Lisp style-- so much so that\nLisp is not just a different language, but a whole different way of\nprogramming.  \n  \nIt's true that this style of development is better suited to programs which\ncan be written by small groups. However, at the same time, it extends the\nlimits of what can be done by a small group. In _The Mythical Man-Month_ ,\nFrederick Brooks proposed that the productivity of a group of programmers does\nnot grow linearly with its size. As the size of the group increases, the\nproductivity of individual programmers goes down. The experience of Lisp\nprogramming suggests a more cheerful way to phrase this law: as the size of\nthe group decreases, the productivity of individual programmers goes up. A\nsmall group wins, relatively speaking, simply because it's smaller. When a\nsmall group also takes advantage of the techniques that Lisp makes possible,\nit can [win outright](avg.html).  \n  \n  \n  \n**New:** [Download On Lisp for Free](onlisptext.html).  \n  \n  \n  \n\n* * *\n\n  \n  \n[1] \"But no one can read the program without understanding all your new\nutilities.\" To see why such statements are usually mistaken, see Section 4.8.  \n  \n\nNovember 2016  \n  \nIf you're a California voter, there is an important proposition on your ballot\nthis year: Proposition 62, which bans the death penalty.  \n  \nWhen I was younger I used to think the debate about the death penalty was\nabout when it's ok to take a human life. Is it ok to kill a killer?  \n  \nBut that is not the issue here.  \n  \nThe real world does not work like the version I was shown on TV growing up.\nThe police often arrest the wrong person. Defendants' lawyers are often\nincompetent. And prosecutors are often motivated more by publicity than\njustice.  \n  \nIn the real world, [about 4%](http://time.com/79572/more-innocent-people-on-\ndeath-row-than-estimated-study/) of people sentenced to death are innocent. So\nthis is not about whether it's ok to kill killers. This is about whether it's\nok to kill innocent people.  \n  \nA child could answer that one for you.  \n  \nThis year, in California, you have a chance to end this, by voting yes on\nProposition 62. But beware, because there is another proposition, Proposition\n66, whose goal is to make it easier to execute people. So yes on 62, no on 66.  \n  \nIt's time.  \n  \n\nMarch 2012  \n  \nAs a child I read a book of stories about a famous judge in eighteenth century\nJapan called Ooka Tadasuke. One of the cases he decided was brought by the\nowner of a food shop. A poor student who could afford only rice was eating his\nrice while enjoying the delicious cooking smells coming from the food shop.\nThe owner wanted the student to pay for the smells he was enjoying.  \n  \nThe student was stealing his smells!  \n  \nThis story often comes to mind when I hear the RIAA and MPAA accusing people\nof stealing music and movies.  \n  \nIt sounds ridiculous to us to treat smells as property. But I can imagine\nscenarios in which one could charge for smells. Imagine we were living on a\nmoon base where we had to buy air by the liter. I could imagine air suppliers\nadding scents at an extra charge.  \n  \nThe reason it seems ridiculous to us to treat smells as property is that it\nwouldn't work to. It would work on a moon base, though.  \n  \nWhat counts as property depends on what works to treat as property. And that\nnot only can change, but has changed. Humans may always (for some definition\nof human and always) have treated small items carried on one's person as\nproperty. But hunter gatherers didn't treat land, for example, as property in\nthe way we do. [1]  \n  \nThe reason so many people think of property as having a single unchanging\ndefinition is that its definition changes very slowly. [2] But we are in the\nmidst of such a change now. The record labels and movie studios used to\ndistribute what they made like air shipped through tubes on a moon base. But\nwith the arrival of networks, it's as if we've moved to a planet with a\nbreathable atmosphere. Data moves like smells now. And through a combination\nof wishful thinking and short-term greed, the labels and studios have put\nthemselves in the position of the food shop owner, accusing us all of stealing\ntheir smells.  \n  \n(The reason I say short-term greed is that the underlying problem with the\nlabels and studios is that the people who run them are driven by bonuses\nrather than equity. If they were driven by equity they'd be looking for ways\nto take advantage of technological change instead of fighting it. But building\nnew things takes too long. Their bonuses depend on this year's revenues, and\nthe best way to increase those is to extract more money from stuff they do\nalready.)  \n  \nSo what does this mean? Should people not be able to charge for content?\nThere's not a single yes or no answer to that question. People should be able\nto charge for content when it works to charge for content.  \n  \nBut by \"works\" I mean something more subtle than \"when they can get away with\nit.\" I mean when people can charge for content without warping society in\norder to do it. After all, the companies selling smells on the moon base could\ncontinue to sell them on the Earth, if they lobbied successfully for laws\nrequiring us all to continue to breathe through tubes down here too, even\nthough we no longer needed to.  \n  \nThe crazy legal measures that the labels and studios have been taking have a\nlot of that flavor. Newspapers and magazines are just as screwed, but they are\nat least declining gracefully. The RIAA and MPAA would make us breathe through\ntubes if they could.  \n  \nUltimately it comes down to common sense. When you're abusing the legal system\nby trying to use mass lawsuits against randomly chosen people as a form of\nexemplary punishment, or lobbying for laws that would break the Internet if\nthey passed, that's ipso facto evidence you're using a definition of property\nthat doesn't work.  \n  \nThis is where it's helpful to have working democracies and multiple sovereign\ncountries. If the world had a single, autocratic government, the labels and\nstudios could buy laws making the definition of property be whatever they\nwanted. But fortunately there are still some countries that are not copyright\ncolonies of the US, and even in the US,\n[politicians](http://tctechcrunch2011.files.wordpress.com/2012/01/congress-on-\nsopa-done.png) still seem to be afraid of actual voters, in sufficient\nnumbers. [3]  \n  \nThe people running the US may not like it when voters or other countries\nrefuse to bend to their will, but ultimately it's in all our interest that\nthere's not a single point of attack for people trying to warp the law to\nserve their own purposes. Private property is an extremely useful idea \u2014\narguably one of our greatest inventions. So far, each new definition of it has\nbrought us increasing material wealth. [4] It seems reasonable to suppose the\nnewest one will too. It would be a disaster if we all had to keep running an\nobsolete version just because a few powerful people were too lazy to upgrade.  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] If you want to learn more about hunter gatherers I strongly recommend\nElizabeth Marshall Thomas's [_The Harmless\nPeople_](http://www.amazon.com/Harmless-People-Elizabeth-Marshall-\nThomas/dp/0394427793) and [_The Old Way_](http://www.amazon.com/Old-Way-Story-\nFirst-People/dp/0374225524).  \n  \n[2] Change in the definition of property is driven mostly by technological\nprogress, however, and since technological progress is accelerating, so\npresumably will the rate of change in the definition of property. Which means\nit's all the more important for societies to be able to respond gracefully to\nsuch changes, because they will come at an ever increasing rate.  \n  \n[3] As far as I know, the term \"copyright colony\" was first used by [Myles\nPeterson](http://torrentfreak.com/australia-us-copyright-colony-or-just-a-\ngood-friend-120121/).  \n  \n[4] The state of technology isn't simply a function of the definition of\nproperty. They each constrain the other. But that being so, you can't mess\nwith the definition of property without affecting (and probably harming) the\nstate of technology. The history of the USSR offers a vivid illustration of\nthat.  \n  \n**Thanks** to Sam Altman and Geoff Ralston for reading drafts of this.  \n  \n\nSeptember 2009  \n  \nPublishers of all types, from news to music, are unhappy that consumers won't\npay for content anymore. At least, that's how they see it.  \n  \nIn fact consumers never really were paying for content, and publishers weren't\nreally selling it either. If the content was what they were selling, why has\nthe price of books or music or movies always depended mostly on the format?\nWhy didn't better content cost more? [1]  \n  \nA copy of _Time_ costs $5 for 58 pages, or 8.6 cents a page. _The Economist_\ncosts $7 for 86 pages, or 8.1 cents a page. Better journalism is actually\nslightly cheaper.  \n  \nAlmost every form of publishing has been organized as if the medium was what\nthey were selling, and the content was irrelevant. Book publishers, for\nexample, set prices based on the cost of producing and distributing books.\nThey treat the words printed in the book the same way a textile manufacturer\ntreats the patterns printed on its fabrics.  \n  \nEconomically, the print media are in the business of marking up paper. We can\nall imagine an old-style editor getting a scoop and saying \"this will sell a\nlot of papers!\" Cross out that final S and you're describing their business\nmodel. The reason they make less money now is that people don't need as much\npaper.  \n  \nA few months ago I ran into a friend in a cafe. I had a copy of the _New York\nTimes_ , which I still occasionally buy on weekends. As I was leaving I\noffered it to him, as I've done countless times before in the same situation.\nBut this time something new happened. I felt that sheepish feeling you get\nwhen you offer someone something worthless. \"Do you, er, want a printout of\nyesterday's news?\" I asked. (He didn't.)  \n  \nNow that the medium is evaporating, publishers have nothing left to sell. Some\nseem to think they're going to sell content\u2014that they were always in the\ncontent business, really. But they weren't, and it's unclear whether anyone\ncould be.  \n  \n**Selling**  \n  \nThere have always been people in the business of selling information, but that\nhas historically been a distinct business from publishing. And the business of\nselling information to consumers has always been a marginal one. When I was a\nkid there were people who used to sell newsletters containing stock tips,\nprinted on colored paper that made them hard for the copiers of the day to\nreproduce. That is a different world, both culturally and economically, from\nthe one publishers currently inhabit.  \n  \nPeople will pay for information they think they can make money from. That's\nwhy they paid for those stock tip newsletters, and why companies pay now for\nBloomberg terminals and Economist Intelligence Unit reports. But will people\npay for information otherwise? History offers little encouragement.  \n  \nIf audiences were willing to pay more for better content, why wasn't anyone\nalready selling it to them? There was no reason you couldn't have done that in\nthe era of physical media. So were the print media and the music labels simply\noverlooking this opportunity? Or is it, rather, nonexistent?  \n  \nWhat about iTunes? Doesn't that show people will pay for content? Well, not\nreally. iTunes is more of a tollbooth than a store. Apple controls the default\npath onto the iPod. They offer a convenient list of songs, and whenever you\nchoose one they ding your credit card for a small amount, just below the\nthreshold of attention. Basically, iTunes makes money by taxing people, not\nselling them stuff. You can only do that if you own the channel, and even then\nyou don't make much from it, because a toll has to be ignorable to work. Once\na toll becomes painful, people start to find ways around it, and that's pretty\neasy with digital content.  \n  \nThe situation is much the same with digital books. Whoever controls the device\nsets the terms. It's in their interest for content to be as cheap as possible,\nand since they own the channel, there's a lot they can do to drive prices\ndown. Prices will fall even further once writers realize they don't need\npublishers. Getting a book printed and distributed is a daunting prospect for\na writer, but most can upload a file.  \n  \nIs software a counterexample? People pay a lot for desktop software, and\nthat's just information. True, but I don't think publishers can learn much\nfrom software. Software companies can charge a lot because (a) many of the\ncustomers are businesses, who get in\n[trouble](http://www.bsa.org/country/News%20and%20Events/News%20Archives/en/2009/en-08312009-mueller.aspx?sc_lang=en)\nif they use pirated versions, and (b) though in form merely information,\nsoftware is treated by both maker and purchaser as a different type of thing\nfrom a song or an article. A Photoshop user needs Photoshop in a way that no\none needs a particular song or article.  \n  \nThat's why there's a separate word, \"content,\" for information that's not\nsoftware. Software is a different business. Software and content blur together\nin some of the most lightweight software, like casual games. But those are\nusually free. To make money the way software companies do, publishers would\nhave to become software companies, and being publishers gives them no\nparticular head start in that domain. [2]  \n  \nThe most promising countertrend is the premium cable channel. People still pay\nfor those. But broadcasting isn't publishing: you're not selling a copy of\nsomething. That's one reason the movie business hasn't seen their revenues\ndecline the way the news and music businesses have. They only have one foot in\npublishing.  \n  \nTo the extent the movie business can avoid becoming publishers, they may avoid\npublishing's problems. But there are limits to how well they'll be able to do\nthat. Once publishing\u2014giving people copies\u2014becomes the most natural way of\ndistributing your content, it probably doesn't work to stick to old forms of\ndistribution just because you make more that way. If free copies of your\ncontent are available online, then you're competing with publishing's form of\ndistribution, and that's just as bad as being a publisher.  \n  \nApparently some people in the music business hope to retroactively convert it\naway from publishing, by getting listeners to pay for subscriptions. It seems\nunlikely that will work if they're just streaming the same files you can get\nas mp3s.  \n  \n**Next**  \n  \nWhat happens to publishing if you can't sell content? You have two choices:\ngive it away and make money from it indirectly, or find ways to embody it in\nthings people will pay for.  \n  \nThe first is probably the future of most current media. [Give music\naway](http://thesixtyone.com) and make money from concerts and t-shirts.\nPublish articles for free and make money from one of a dozen permutations of\nadvertising. Both publishers and investors are down on advertising at the\nmoment, but it has more potential than they realize.  \n  \nI'm not claiming that potential will be realized by the existing players. The\n[optimal](http://ycombinator.com/rfs1.html) ways to make money from the\nwritten word probably require different words written by different people.  \n  \nIt's harder to say what will happen to movies. They could evolve into ads. Or\nthey could return to their roots and make going to the theater a treat. If\nthey made the experience good enough, audiences might start to prefer it to\nwatching pirated movies at home. [3] Or maybe the movie business will dry up,\nand the people working in it will go to work for game developers.  \n  \nI don't know how big embodying information in physical form will be. It may be\nsurprisingly large; people overvalue [physical stuff](stuff.html). There\nshould remain some market for printed books, at least.  \n  \nI can see the evolution of book publishing in the books on my shelves. Clearly\nat some point in the 1960s the big publishing houses started to ask: how\ncheaply can we make books before people refuse to buy them? The answer turned\nout to be one step short of phonebooks. As long as it isn't floppy, consumers\nstill perceive it as a book.  \n  \nThat worked as long as buying printed books was the only way to read them. If\nprinted books are optional, publishers will have to work harder to entice\npeople to buy them. There should be some market, but it's hard to foresee how\nbig, because its size will depend not on macro trends like the amount people\nread, but on the ingenuity of individual publishers. [4]  \n  \nSome magazines may thrive by focusing on the magazine as a physical object.\nFashion magazines could be made lush in a way that would be hard to match\ndigitally, at least for a while. But this is probably not an option for most\nmagazines.  \n  \nI don't know exactly what the future will look like, but I'm not too worried\nabout it. This sort of change tends to create as many good things as it kills.\nIndeed, the really interesting question is not what will happen to existing\nforms, but what new forms will appear.  \n  \nThe reason I've been writing about existing forms is that I don't _know_ what\nnew forms will appear. But though I can't predict specific winners, I can\noffer a recipe for recognizing them. When you see something that's taking\nadvantage of new technology to give people something they want that they\ncouldn't have before, you're probably looking at a winner. And when you see\nsomething that's merely reacting to new technology in an attempt to preserve\nsome existing source of revenue, you're probably looking at a loser.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] I don't like the word \"content\" and tried for a while to avoid using it,\nbut I have to admit there's no other word that means the right thing.\n\"Information\" is too general.  \n  \nIronically, the main reason I don't like \"content\" is the thesis of this\nessay. The word suggests an undifferentiated slurry, but economically that's\nhow both publishers and audiences treat it. Content is information you don't\nneed.  \n  \n[2] Some types of publishers would be at a disadvantage trying to enter the\nsoftware business. Record labels, for example, would probably find it more\nnatural to expand into casinos than software, because the kind of people who\nrun them would be more at home at the mafia end of the business spectrum than\nthe don't-be-evil end.  \n  \n[3] I never watch movies in theaters anymore. The tipping point for me was the\nads they show first.  \n  \n[4] Unfortunately, making physically nice books will only be a niche within a\nniche. Publishers are more likely to resort to expedients like selling\nautographed copies, or editions with the buyer's picture on the cover.  \n  \n**Thanks** to Michael Arrington, Trevor Blackwell, Steven Levy, Robert Morris,\nand Geoff Ralston for reading drafts of this.  \n  \n\nAugust 2004  \n  \nIn a recent [talk](gh.html) I said something that upset a lot of people: that\nyou could get smarter programmers to work on a Python project than you could\nto work on a Java project.  \n  \nI didn't mean by this that Java programmers are dumb. I meant that Python\nprogrammers are smart. It's a lot of work to learn a new programming language.\nAnd people don't learn Python because it will get them a job; they learn it\nbecause they genuinely like to program and aren't satisfied with the languages\nthey already know.  \n  \nWhich makes them exactly the kind of programmers companies should want to\nhire. Hence what, for lack of a better name, I'll call the Python paradox: if\na company chooses to write its software in a comparatively esoteric language,\nthey'll be able to hire better programmers, because they'll attract only those\nwho cared enough to learn it. And for programmers the paradox is even more\npronounced: the language to learn, if you want to get a good job, is a\nlanguage that people don't learn merely to get a job.  \n  \nOnly a few companies have been smart enough to realize this so far. But there\nis a kind of selection going on here too: they're exactly the companies\nprogrammers would most like to work for. Google, for example. When they\nadvertise Java programming jobs, they also want Python experience.  \n  \nA friend of mine who knows nearly all the widely used languages uses Python\nfor most of his projects. He says the main reason is that he likes the way\nsource code looks. That may seem a frivolous reason to choose one language\nover another. But it is not so frivolous as it sounds: when you program, you\nspend more time reading code than writing it. You push blobs of source code\naround the way a sculptor does blobs of clay. So a language that makes source\ncode ugly is maddening to an exacting programmer, as clay full of lumps would\nbe to a sculptor.  \n  \nAt the mention of ugly source code, people will of course think of Perl. But\nthe superficial ugliness of Perl is not the sort I mean. Real ugliness is not\nharsh-looking syntax, but having to build programs out of the wrong concepts.\nPerl may look like a cartoon character swearing, but there are\n[cases](icad.html) where it surpasses Python conceptually.  \n  \nSo far, anyway. Both languages are of course [moving](hundred.html) targets.\nBut they share, along with Ruby (and Icon, and Joy, and J, and Lisp, and\nSmalltalk) the fact that they're created by, and used by, people who really\ncare about programming. And those tend to be the ones who do it well.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nJuly 2009  \n  \nNow that the term \"ramen profitable\" has become widespread, I ought to explain\nprecisely what the idea entails.  \n  \nRamen profitable means a startup makes just enough to pay the founders' living\nexpenses. This is a different form of profitability than startups have\ntraditionally aimed for. Traditional profitability means a big bet is finally\npaying off, whereas the main importance of ramen profitability is that it buys\nyou time. [1]  \n  \nIn the past, a startup would usually become profitable only after raising and\nspending quite a lot of money. A company making computer hardware might not\nbecome profitable for 5 years, during which they spent $50 million. But when\nthey did they might have revenues of $50 million a year. This kind of\nprofitability means the startup has succeeded.  \n  \nRamen profitability is the other extreme: a startup that becomes profitable\nafter 2 months, even though its revenues are only $3000 a month, because the\nonly employees are a couple 25 year old founders who can live on practically\nnothing. Revenues of $3000 a month do not mean the company has succeeded. But\nit does share something with the one that's profitable in the traditional way:\nthey don't need to raise money to survive.  \n  \nRamen profitability is an unfamiliar idea to most people because it only\nrecently became feasible. It's still not feasible for a lot of startups; it\nwould not be for most biotech startups, for example; but it is for many\nsoftware startups because they're now so cheap. For many, the only real cost\nis the founders' living expenses.  \n  \nThe main significance of this type of profitability is that you're no longer\nat the mercy of investors. If you're still losing money, then eventually\nyou'll either have to raise more or shut down. Once you're ramen profitable\nthis painful choice goes away. You can still raise money, but you don't have\nto do it now.  \n  \n* * *  \n  \nThe most obvious advantage of not needing money is that you can get better\nterms. If investors know you need money, they'll sometimes take advantage of\nyou. Some may even deliberately stall, because they know that as you run out\nof money you'll become increasingly pliable.  \n  \nBut there are also three less obvious advantages of ramen profitability. One\nis that it makes you more attractive to investors. If you're already\nprofitable, on however small a scale, it shows that (a) you can get at least\nsomeone to pay you, (b) you're serious about building things people want, and\n(c) you're disciplined enough to keep expenses low.  \n  \nThis is reassuring to investors, because you've addressed three of their\nbiggest worries. It's common for them to fund companies that have smart\nfounders and a big market, and yet still fail. When these companies fail, it's\nusually because (a) people wouldn't pay for what they made, e.g. because it\nwas too hard to sell to them, or the market wasn't ready yet, (b) the founders\nsolved the wrong problem, instead of paying attention to what users needed, or\n(c) the company spent too much and burned through their funding before they\nstarted to make money. If you're ramen profitable, you're already avoiding\nthese mistakes.  \n  \nAnother advantage of ramen profitability is that it's good for morale. A\ncompany tends to feel rather theoretical when you first start it. It's legally\na company, but you feel like you're lying when you call it one. When people\nstart to pay you significant amounts, the company starts to feel real. And\nyour own living expenses are the milestone you feel most, because at that\npoint the future flips state. Now survival is the default, instead of dying.  \n  \nA morale boost on that scale is very valuable in a startup, because the moral\nweight of running a startup is what makes it hard. Startups are still very\nrare. Why don't more people do it? The financial risk? Plenty of 25 year olds\nsave nothing anyway. The long hours? Plenty of people work just as long hours\nin regular jobs. What keeps people from starting startups is the fear of\nhaving so much responsibility. And this is not an irrational fear: it really\nis hard to bear. Anything that takes some of that weight off you will greatly\nincrease your chances of surviving.  \n  \nA startup that reaches ramen profitability may be more likely to succeed than\nnot. Which is pretty exciting, considering the bimodal distribution of\noutcomes in startups: you either fail or make a lot of money.  \n  \nThe fourth advantage of ramen profitability is the least obvious but may be\nthe most important. If you don't need to raise money, you don't have to\ninterrupt working on the company to do it.  \n  \n[Raising money](fundraising.html) is terribly distracting. You're lucky if\nyour productivity is a third of what it was before. And it can last for\nmonths.  \n  \nI didn't understand (or rather, remember) precisely why raising money was so\ndistracting till earlier this year. I'd noticed that startups we funded would\nusually grind to a halt when they switched to raising money, but I didn't\nremember exactly why till YC raised money itself. We had a comparatively easy\ntime of it; the first people I asked said yes; but it took months to work out\nthe details, and during that time I got hardly any real work done. Why?\nBecause I thought about it all the time.  \n  \nAt any given time there tends to be one problem that's the most urgent for a\nstartup. This is what you think about as you fall asleep at night and when you\ntake a shower in the morning. And when you start raising money, that becomes\nthe problem you think about. You only take one shower in the morning, and if\nyou're thinking about investors during it, then you're not thinking about the\nproduct.  \n  \nWhereas if you can choose when you raise money, you can pick a time when\nyou're not in the middle of something else, and you can probably also insist\nthat the round close fast. You may even be able to avoid having the round\noccupy your thoughts, if you don't care whether it closes.  \n  \n* * *  \n  \nRamen profitable means no more than the definition implies. It does not, for\nexample, imply that you're \"bootstrapping\" the startup\u2014that you're never going\nto take money from investors. Empirically that doesn't seem to work very well.\nFew startups succeed without taking investment. Maybe as startups get cheaper\nit will become more common. On the other hand, the money is there, waiting to\nbe invested. If startups need it less, they'll be able to get it on better\nterms, which will make them more inclined to take it. That will tend to\nproduce an equilibrium. [2]  \n  \nAnother thing ramen profitability doesn't imply is Joe Kraus's idea that you\nshould put your [business\nmodel](http://www.brendonwilson.com/blog/2006/04/30/joe-kraus-confessions-of-\na-startup-addict/) in beta when you put your product in beta. He believes you\nshould get people to pay you from the beginning. I think that's too\nconstraining. Facebook didn't, and they've done better than most startups.\nMaking money right away was not only unnecessary for them, but probably would\nhave been harmful. I do think Joe's rule could be useful for many startups,\nthough. When founders seem unfocused, I sometimes suggest they try to get\ncustomers to pay them for something, in the hope that this constraint will\nprod them into action.  \n  \nThe difference between Joe's idea and ramen profitability is that a ramen\nprofitable company doesn't have to be making money the way it ultimately will.\nIt just has to be making money. The most famous example is Google, which\ninitially made money by licensing search to sites like Yahoo.  \n  \nIs there a downside to ramen profitability? Probably the biggest danger is\nthat it might turn you into a consulting firm. Startups have to be product\ncompanies, in the sense of making a single thing that everyone uses. The\ndefining quality of startups is that they grow fast, and consulting just can't\nscale the way a product can. [3] But it's pretty easy to make $3000 a month\nconsulting; in fact, that would be a low rate for contract programming. So\nthere could be a temptation to slide into consulting, and telling yourselves\nyou're a ramen profitable startup, when in fact you're not a startup at all.  \n  \nIt's ok to do a little consulting-type work at first. Startups usually have to\ndo something weird at first. But remember that ramen profitability is not the\ndestination. A startup's destination is to grow really big; ramen\nprofitability is a trick for [not dying](die.html) en route.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] The \"ramen\" in \"ramen profitable\" refers to instant ramen, which is just\nabout the cheapest food available.  \n  \nPlease do not take the term literally. Living on instant ramen would be very\nunhealthy. Rice and beans are a better source of food. Start by investing in a\nrice cooker, if you don't have one.  \n  \nRice and Beans for 2n\n\n    \n    \n      olive oil or butter\n      n yellow onions\n      other fresh vegetables; experiment\n      3n cloves garlic\n      n 12-oz cans white, kidney, or black beans\n      n cubes Knorr beef or vegetable bouillon\n      n teaspoons freshly ground black pepper\n      3n teaspoons ground cumin\n      n cups dry rice, preferably brown\n    \n\nPut rice in rice cooker. Add water as specified on rice package. (Default: 2\ncups water per cup of rice.) Turn on rice cooker and forget about it.  \n  \nChop onions and other vegetables and fry in oil, over fairly low heat, till\nonions are glassy. Put in chopped garlic, pepper, cumin, and a little more\nfat, and stir. Keep heat low. Cook another 2 or 3 minutes, then add beans\n(don't drain the beans), and stir. Throw in the bouillon cube(s), cover, and\ncook on lowish heat for at least 10 minutes more. Stir vigilantly to avoid\nsticking.  \n  \nIf you want to save money, buy beans in giant cans from discount stores.\nSpices are also much cheaper when bought in bulk. If there's an Indian grocery\nstore near you, they'll have big bags of cumin for the same price as the\nlittle jars in supermarkets.  \n  \n[2] There's a good chance that a shift in power from investors to founders\nwould actually increase the size of the venture business. I think investors\ncurrently err too far on the side of being harsh to founders. If they were\nforced to stop, the whole venture business would work better, and you might\nsee something like the increase in trade you always see when restrictive laws\nare removed.  \n  \nInvestors are one of the biggest sources of pain for founders; if they stopped\ncausing so much pain, it would be better to be a founder; and if it were\nbetter to be a founder, more people would do it.  \n  \n[3] It's conceivable that a startup could grow big by transforming consulting\ninto a form that would scale. But if they did that they'd really be a product\ncompany.  \n  \n**Thanks** to Jessica Livingston for reading drafts of this.  \n  \n\nApril 2006, rev August 2009  \n  \nPlato quotes Socrates as saying \"the unexamined life is not worth living.\"\nPart of what he meant was that the proper role of humans is to think, just as\nthe proper role of anteaters is to poke their noses into anthills.  \n  \nA lot of ancient philosophy had the quality \u2014 and I don't mean this in an\ninsulting way \u2014 of the kind of conversations freshmen have late at night in\ncommon rooms:\n\n> What is our purpose? Well, we humans are as conspicuously different from\n> other animals as the anteater. In our case the distinguishing feature is the\n> ability to reason. So obviously that is what we should be doing, and a human\n> who doesn't is doing a bad job of being human \u2014 is no better than an animal.\n\nNow we'd give a different answer. At least, someone Socrates's age would. We'd\nask why we even suppose we have a \"purpose\" in life. We may be better adapted\nfor some things than others; we may be happier doing things we're adapted for;\nbut why assume purpose?  \n  \nThe history of ideas is a history of gradually discarding the assumption that\nit's all about us. No, it turns out, the earth is not the center of the\nuniverse \u2014 not even the center of the solar system. No, it turns out, humans\nare not created by God in his own image; they're just one species among many,\ndescended not merely from apes, but from microorganisms. Even the concept of\n\"me\" turns out to be fuzzy around the edges if you examine it closely.  \n  \nThe idea that we're the center of things is difficult to discard. So difficult\nthat there's probably room to discard more. Richard Dawkins made another step\nin that direction only in the last several decades, with the idea of the\n[selfish gene](http://en.wikipedia.org/wiki/The_Selfish_Gene). No, it turns\nout, we're not even the protagonists: we're just the latest model vehicle our\ngenes have constructed to travel around in. And having kids is our genes\nheading for the lifeboats. Reading that book snapped my brain out of its\nprevious way of thinking the way Darwin's must have when it first appeared.  \n  \n(Few people can experience now what Darwin's contemporaries did when _The\nOrigin of Species_ was first published, because everyone now is raised either\nto take evolution for granted, or to regard it as a heresy. No one encounters\nthe idea of natural selection for the first time as an adult.)  \n  \nSo if you want to discover things that have been overlooked till now, one\nreally good place to look is in our blind spot: in our natural, naive belief\nthat it's all about us. And expect to encounter ferocious opposition if you\ndo.  \n  \nConversely, if you have to choose between two theories, prefer the one that\ndoesn't center on you.  \n  \nThis principle isn't only for big ideas. It works in everyday life, too. For\nexample, suppose you're saving a piece of cake in the fridge, and you come\nhome one day to find your housemate has eaten it. Two possible theories:\n\n> a) Your housemate did it deliberately to upset you. He _knew_ you were\n> saving that piece of cake.  \n>  \n> b) Your housemate was hungry.\n\nI say pick b. No one knows who said \"never attribute to malice what can be\nexplained by incompetence,\" but it is a powerful idea. Its more general\nversion is our answer to the Greeks:\n\n> Don't see purpose where there isn't.\n\nOr better still, the positive version:\n\n> See randomness.\n\n  \n  \n\nJanuary 2016  \n  \nOne advantage of being old is that you can see change happen in your lifetime.\nA lot of the change I've seen is fragmentation. US politics is much more\npolarized than it used to be. Culturally we have ever less common ground. The\ncreative class flocks to a handful of happy cities, abandoning the rest. And\nincreasing economic inequality means the spread between rich and poor is\ngrowing too. I'd like to propose a hypothesis: that all these trends are\ninstances of the same phenomenon. And moreover, that the cause is not some\nforce that's pulling us apart, but rather the erosion of forces that had been\npushing us together.  \n  \nWorse still, for those who worry about these trends, the forces that were\npushing us together were an anomaly, a one-time combination of circumstances\nthat's unlikely to be repeated \u2014 and indeed, that we would not want to repeat.  \n  \nThe two forces were war (above all World War II), and the rise of large\ncorporations.  \n  \nThe effects of World War II were both economic and social. Economically, it\ndecreased variation in income. Like all modern armed forces, America's were\nsocialist economically. From each according to his ability, to each according\nto his need. More or less. Higher ranking members of the military got more (as\nhigher ranking members of socialist societies always do), but what they got\nwas fixed according to their rank. And the flattening effect wasn't limited to\nthose under arms, because the US economy was conscripted too. Between 1942 and\n1945 all wages were set by the National War Labor Board. Like the military,\nthey defaulted to flatness. And this national standardization of wages was so\npervasive that its effects could still be seen years after the war ended. [1]  \n  \nBusiness owners weren't supposed to be making money either. FDR said \"not a\nsingle war millionaire\" would be permitted. To ensure that, any increase in a\ncompany's profits over prewar levels was taxed at 85%. And when what was left\nafter corporate taxes reached individuals, it was taxed again at a marginal\nrate of 93%. [2]  \n  \nSocially too the war tended to decrease variation. Over 16 million men and\nwomen from all sorts of different backgrounds were brought together in a way\nof life that was literally uniform. Service rates for men born in the early\n1920s approached 80%. And working toward a common goal, often under stress,\nbrought them still closer together.  \n  \nThough strictly speaking World War II lasted less than 4 years for the US, its\neffects lasted longer. Wars make central governments more powerful, and World\nWar II was an extreme case of this. In the US, as in all the other Allied\ncountries, the federal government was slow to give up the new powers it had\nacquired. Indeed, in some respects the war didn't end in 1945; the enemy just\nswitched to the Soviet Union. In tax rates, federal power, defense spending,\nconscription, and nationalism, the decades after the war looked more like\nwartime than prewar peacetime. [3] And the social effects lasted too. The kid\npulled into the army from behind a mule team in West Virginia didn't simply go\nback to the farm afterward. Something else was waiting for him, something that\nlooked a lot like the army.  \n  \nIf total war was the big political story of the 20th century, the big economic\nstory was the rise of a new kind of company. And this too tended to produce\nboth social and economic cohesion. [4]  \n  \nThe 20th century was the century of the big, national corporation. General\nElectric, General Foods, General Motors. Developments in finance,\ncommunications, transportation, and manufacturing enabled a new type of\ncompany whose goal was above all scale. Version 1 of this world was low-res: a\nDuplo world of a few giant companies dominating each big market. [5]  \n  \nThe late 19th and early 20th centuries had been a time of consolidation, led\nespecially by J. P. Morgan. Thousands of companies run by their founders were\nmerged into a couple hundred giant ones run by professional managers.\nEconomies of scale ruled the day. It seemed to people at the time that this\nwas the final state of things. John D. Rockefeller said in 1880\n\n> The day of combination is here to stay. Individualism has gone, never to\n> return.\n\nHe turned out to be mistaken, but he seemed right for the next hundred years.  \n  \nThe consolidation that began in the late 19th century continued for most of\nthe 20th. By the end of World War II, as Michael Lind writes, \"the major\nsectors of the economy were either organized as government-backed cartels or\ndominated by a few oligopolistic corporations.\"  \n  \nFor consumers this new world meant the same choices everywhere, but only a few\nof them. When I grew up there were only 2 or 3 of most things, and since they\nwere all aiming at the middle of the market there wasn't much to differentiate\nthem.  \n  \nOne of the most important instances of this phenomenon was in TV. Here there\nwere 3 choices: NBC, CBS, and ABC. Plus public TV for eggheads and communists.\nThe programs that the 3 networks offered were indistinguishable. In fact, here\nthere was a triple pressure toward the center. If one show did try something\ndaring, local affiliates in conservative markets would make them stop. Plus\nsince TVs were expensive, whole families watched the same shows together, so\nthey had to be suitable for everyone.  \n  \nAnd not only did everyone get the same thing, they got it at the same time.\nIt's difficult to imagine now, but every night tens of millions of families\nwould sit down together in front of their TV set watching the same show, at\nthe same time, as their next door neighbors. What happens now with the Super\nBowl used to happen every night. We were literally in sync. [6]  \n  \nIn a way mid-century TV culture was good. The view it gave of the world was\nlike you'd find in a children's book, and it probably had something of the\neffect that (parents hope) children's books have in making people behave\nbetter. But, like children's books, TV was also misleading. Dangerously\nmisleading, for adults. In his autobiography, Robert MacNeil talks of seeing\ngruesome images that had just come in from Vietnam and thinking, we can't show\nthese to families while they're having dinner.  \n  \nI know how pervasive the common culture was, because I tried to opt out of it,\nand it was practically impossible to find alternatives. When I was 13 I\nrealized, more from internal evidence than any outside source, that the ideas\nwe were being fed on TV were crap, and I stopped watching it. [7] But it\nwasn't just TV. It seemed like everything around me was crap. The politicians\nall saying the same things, the consumer brands making almost identical\nproducts with different labels stuck on to indicate how prestigious they were\nmeant to be, the balloon-frame houses with fake \"colonial\" skins, the cars\nwith several feet of gratuitous metal on each end that started to fall apart\nafter a couple years, the \"red delicious\" apples that were red but only\nnominally apples. And in retrospect, it _was_ crap. [8]  \n  \nBut when I went looking for alternatives to fill this void, I found\npractically nothing. There was no Internet then. The only place to look was in\nthe chain bookstore in our local shopping mall. [9] There I found a copy of\n_The Atlantic_. I wish I could say it became a gateway into a wider world, but\nin fact I found it boring and incomprehensible. Like a kid tasting whisky for\nthe first time and pretending to like it, I preserved that magazine as\ncarefully as if it had been a book. I'm sure I still have it somewhere. But\nthough it was evidence that there was, somewhere, a world that wasn't red\ndelicious, I didn't find it till college.  \n  \nIt wasn't just as consumers that the big companies made us similar. They did\nas employers too. Within companies there were powerful forces pushing people\ntoward a single model of how to look and act. IBM was particularly notorious\nfor this, but they were only a little more extreme than other big companies.\nAnd the models of how to look and act varied little between companies. Meaning\neveryone within this world was expected to seem more or less the same. And not\njust those in the corporate world, but also everyone who aspired to it \u2014 which\nin the middle of the 20th century meant most people who weren't already in it.\nFor most of the 20th century, working-class people tried hard to look middle\nclass. You can see it in old photos. Few adults aspired to look dangerous in\n1950.  \n  \nBut the rise of national corporations didn't just compress us culturally. It\ncompressed us economically too, and on both ends.  \n  \nAlong with giant national corporations, we got giant national labor unions.\nAnd in the mid 20th century the corporations cut deals with the unions where\nthey paid over market price for labor. Partly because the unions were\nmonopolies. [10] Partly because, as components of oligopolies themselves, the\ncorporations knew they could safely pass the cost on to their customers,\nbecause their competitors would have to as well. And partly because in mid-\ncentury most of the giant companies were still focused on finding new ways to\nmilk economies of scale. Just as startups rightly pay AWS a premium over the\ncost of running their own servers so they can focus on growth, many of the big\nnational corporations were willing to pay a premium for labor. [11]  \n  \nAs well as pushing incomes up from the bottom, by overpaying unions, the big\ncompanies of the 20th century also pushed incomes down at the top, by\nunderpaying their top management. Economist J. K. Galbraith wrote in 1967 that\n\"There are few corporations in which it would be suggested that executive\nsalaries are at a maximum.\" [12]  \n  \nTo some extent this was an illusion. Much of the de facto pay of executives\nnever showed up on their income tax returns, because it took the form of\nperks. The higher the rate of income tax, the more pressure there was to pay\nemployees upstream of it. (In the UK, where taxes were even higher than in the\nUS, companies would even pay their kids' private school tuitions.) One of the\nmost valuable things the big companies of the mid 20th century gave their\nemployees was job security, and this too didn't show up in tax returns or\nincome statistics. So the nature of employment in these organizations tended\nto yield falsely low numbers about economic inequality. But even accounting\nfor that, the big companies paid their best people less than market price.\nThere was no market; the expectation was that you'd work for the same company\nfor decades if not your whole career. [13]  \n  \nYour work was so illiquid there was little chance of getting market price. But\nthat same illiquidity also encouraged you not to seek it. If the company\npromised to employ you till you retired and give you a pension afterward, you\ndidn't want to extract as much from it this year as you could. You needed to\ntake care of the company so it could take care of you. Especially when you'd\nbeen working with the same group of people for decades. If you tried to\nsqueeze the company for more money, you were squeezing the organization that\nwas going to take care of _them_. Plus if you didn't put the company first you\nwouldn't be promoted, and if you couldn't switch ladders, promotion on this\none was the only way up. [14]  \n  \nTo someone who'd spent several formative years in the armed forces, this\nsituation didn't seem as strange as it does to us now. From their point of\nview, as big company executives, they were high-ranking officers. They got\npaid a lot more than privates. They got to have expense account lunches at the\nbest restaurants and fly around on the company's Gulfstreams. It probably\ndidn't occur to most of them to ask if they were being paid market price.  \n  \nThe ultimate way to get market price is to work for yourself, by starting your\nown company. That seems obvious to any ambitious person now. But in the mid\n20th century it was an alien concept. Not because starting one's own company\nseemed too ambitious, but because it didn't seem ambitious enough. Even as\nlate as the 1970s, when I grew up, the ambitious plan was to get lots of\neducation at prestigious institutions, and then join some other prestigious\ninstitution and work one's way up the hierarchy. Your prestige was the\nprestige of the institution you belonged to. People did start their own\nbusinesses of course, but educated people rarely did, because in those days\nthere was practically zero concept of starting what we now call a\n[_startup_](growth.html): a business that starts small and grows big. That was\nmuch harder to do in the mid 20th century. Starting one's own business meant\nstarting a business that would start small and stay small. Which in those days\nof big companies often meant scurrying around trying to avoid being trampled\nby elephants. It was more prestigious to be one of the executive class riding\nthe elephant.  \n  \nBy the 1970s, no one stopped to wonder where the big prestigious companies had\ncome from in the first place. It seemed like they'd always been there, like\nthe chemical elements. And indeed, there was a double wall between ambitious\nkids in the 20th century and the origins of the big companies. Many of the big\ncompanies were roll-ups that didn't have clear founders. And when they did,\nthe founders didn't seem like us. Nearly all of them had been uneducated, in\nthe sense of not having been to college. They were what Shakespeare called\nrude mechanicals. College trained one to be a member of the professional\nclasses. Its graduates didn't expect to do the sort of grubby menial work that\nAndrew Carnegie or Henry Ford started out doing. [15]  \n  \nAnd in the 20th century there were more and more college graduates. They\nincreased from about 2% of the population in 1900 to about 25% in 2000. In the\nmiddle of the century our two big forces intersect, in the form of the GI\nBill, which sent 2.2 million World War II veterans to college. Few thought of\nit in these terms, but the result of making college the canonical path for the\nambitious was a world in which it was socially acceptable to work for Henry\nFord, but not to be Henry Ford. [16]  \n  \nI remember this world well. I came of age just as it was starting to break up.\nIn my childhood it was still dominant. Not quite so dominant as it had been.\nWe could see from old TV shows and yearbooks and the way adults acted that\npeople in the 1950s and 60s had been even more conformist than us. The mid-\ncentury model was already starting to get old. But that was not how we saw it\nat the time. We would at most have said that one could be a bit more daring in\n1975 than 1965. And indeed, things hadn't changed much yet.  \n  \nBut change was coming soon. And when the Duplo economy started to\ndisintegrate, it disintegrated in several different ways at once. Vertically\nintegrated companies literally dis-integrated because it was more efficient\nto. Incumbents faced new competitors as (a) markets went global and (b)\ntechnical innovation started to trump economies of scale, turning size from an\nasset into a liability. Smaller companies were increasingly able to survive as\nformerly narrow channels to consumers broadened. Markets themselves started to\nchange faster, as whole new categories of products appeared. And last but not\nleast, the federal government, which had previously smiled upon J. P. Morgan's\nworld as the natural state of things, began to realize it wasn't the last word\nafter all.  \n  \nWhat J. P. Morgan was to the horizontal axis, Henry Ford was to the vertical.\nHe wanted to do everything himself. The giant plant he built at River Rouge\nbetween 1917 and 1928 literally took in iron ore at one end and sent cars out\nthe other. 100,000 people worked there. At the time it seemed the future. But\nthat is not how car companies operate today. Now much of the design and\nmanufacturing happens in a long supply chain, whose products the car companies\nultimately assemble and sell. The reason car companies operate this way is\nthat it works better. Each company in the supply chain focuses on what they\nknow best. And they each have to do it well or they can be swapped out for\nanother supplier.  \n  \nWhy didn't Henry Ford realize that networks of cooperating companies work\nbetter than a single big company? One reason is that supplier networks take a\nwhile to evolve. In 1917, doing everything himself seemed to Ford the only way\nto get the scale he needed. And the second reason is that if you want to solve\na problem using a network of cooperating companies, you have to be able to\ncoordinate their efforts, and you can do that much better with computers.\nComputers reduce the transaction costs that Coase argued are the raison d'etre\nof corporations. That is a fundamental change.  \n  \nIn the early 20th century, big companies were synonymous with efficiency. In\nthe late 20th century they were synonymous with inefficiency. To some extent\nthis was because the companies themselves had become sclerotic. But it was\nalso because our standards were higher.  \n  \nIt wasn't just within existing industries that change occurred. The industries\nthemselves changed. It became possible to make lots of new things, and\nsometimes the existing companies weren't the ones who did it best.  \n  \nMicrocomputers are a classic example. The market was pioneered by upstarts\nlike Apple. When it got big enough, IBM decided it was worth paying attention\nto. At the time IBM completely dominated the computer industry. They assumed\nthat all they had to do, now that this market was ripe, was to reach out and\npick it. Most people at the time would have agreed with them. But what\nhappened next illustrated how much more complicated the world had become. IBM\ndid launch a microcomputer. Though quite successful, it did not crush Apple.\nBut even more importantly, IBM itself ended up being supplanted by a supplier\ncoming in from the side \u2014 from software, which didn't even seem to be the same\nbusiness. IBM's big mistake was to accept a non-exclusive license for DOS. It\nmust have seemed a safe move at the time. No other computer manufacturer had\never been able to outsell them. What difference did it make if other\nmanufacturers could offer DOS too? The result of that miscalculation was an\nexplosion of inexpensive PC clones. Microsoft now owned the PC standard, and\nthe customer. And the microcomputer business ended up being Apple vs\nMicrosoft.  \n  \nBasically, Apple bumped IBM and then Microsoft stole its wallet. That sort of\nthing did not happen to big companies in mid-century. But it was going to\nhappen increasingly often in the future.  \n  \nChange happened mostly by itself in the computer business. In other\nindustries, legal obstacles had to be removed first. Many of the mid-century\noligopolies had been anointed by the federal government with policies (and in\nwartime, large orders) that kept out competitors. This didn't seem as dubious\nto government officials at the time as it sounds to us. They felt a two-party\nsystem ensured sufficient competition in politics. It ought to work for\nbusiness too.  \n  \nGradually the government realized that anti-competitive policies were doing\nmore harm than good, and during the Carter administration it started to remove\nthem. The word used for this process was misleadingly narrow: deregulation.\nWhat was really happening was de-oligopolization. It happened to one industry\nafter another. Two of the most visible to consumers were air travel and long-\ndistance phone service, which both became dramatically cheaper after\nderegulation.  \n  \nDeregulation also contributed to the wave of hostile takeovers in the 1980s.\nIn the old days the only limit on the inefficiency of companies, short of\nactual bankruptcy, was the inefficiency of their competitors. Now companies\nhad to face absolute rather than relative standards. Any public company that\ndidn't generate sufficient returns on its assets risked having its management\nreplaced with one that would. Often the new managers did this by breaking\ncompanies up into components that were more valuable separately. [17]  \n  \nVersion 1 of the national economy consisted of a few big blocks whose\nrelationships were negotiated in back rooms by a handful of executives,\npoliticians, regulators, and labor leaders. Version 2 was higher resolution:\nthere were more companies, of more different sizes, making more different\nthings, and their relationships changed faster. In this world there were still\nplenty of back room negotiations, but more was left to market forces. Which\nfurther accelerated the fragmentation.  \n  \nIt's a little misleading to talk of versions when describing a gradual\nprocess, but not as misleading as it might seem. There was a lot of change in\na few decades, and what we ended up with was qualitatively different. The\ncompanies in the S&P 500 in 1958 had been there an average of 61 years. By\n2012 that number was 18 years. [18]  \n  \nThe breakup of the Duplo economy happened simultaneously with the spread of\ncomputing power. To what extent were computers a precondition? It would take a\nbook to answer that. Obviously the spread of computing power was a\nprecondition for the rise of startups. I suspect it was for most of what\nhappened in finance too. But was it a precondition for globalization or the\nLBO wave? I don't know, but I wouldn't discount the possibility. It may be\nthat the refragmentation was driven by computers in the way the industrial\nrevolution was driven by steam engines. Whether or not computers were a\nprecondition, they have certainly accelerated it.  \n  \nThe new fluidity of companies changed people's relationships with their\nemployers. Why climb a corporate ladder that might be yanked out from under\nyou? Ambitious people started to think of a career less as climbing a single\nladder than as a series of jobs that might be at different companies. More\nmovement (or even potential movement) between companies introduced more\ncompetition in salaries. Plus as companies became smaller it became easier to\nestimate how much an employee contributed to the company's revenue. Both\nchanges drove salaries toward market price. And since people vary dramatically\nin productivity, paying market price meant salaries started to diverge.  \n  \nBy no coincidence it was in the early 1980s that the term \"yuppie\" was coined.\nThat word is not much used now, because the phenomenon it describes is so\ntaken for granted, but at the time it was a label for something novel. Yuppies\nwere young professionals who made lots of money. To someone in their twenties\ntoday, this wouldn't seem worth naming. Why wouldn't young professionals make\nlots of money? But until the 1980s, being underpaid early in your career was\npart of what it meant to be a professional. Young professionals were paying\ntheir dues, working their way up the ladder. The rewards would come later.\nWhat was novel about yuppies was that they wanted market price for the work\nthey were doing now.  \n  \nThe first yuppies did not work for startups. That was still in the future. Nor\ndid they work for big companies. They were professionals working in fields\nlike law, finance, and consulting. But their example rapidly inspired their\npeers. Once they saw that new BMW 325i, they wanted one too.  \n  \nUnderpaying people at the beginning of their career only works if everyone\ndoes it. Once some employer breaks ranks, everyone else has to, or they can't\nget good people. And once started this process spreads through the whole\neconomy, because at the beginnings of people's careers they can easily switch\nnot merely employers but industries.  \n  \nBut not all young professionals benefitted. You had to produce to get paid a\nlot. It was no coincidence that the first yuppies worked in fields where it\nwas easy to measure that.  \n  \nMore generally, an idea was returning whose name sounds old-fashioned\nprecisely because it was so rare for so long: that you could make your\nfortune. As in the past there were multiple ways to do it. Some made their\nfortunes by creating wealth, and others by playing zero-sum games. But once it\nbecame possible to make one's fortune, the ambitious had to decide whether or\nnot to. A physicist who chose physics over Wall Street in 1990 was making a\nsacrifice that a physicist in 1960 didn't have to think about.  \n  \nThe idea even flowed back into big companies. CEOs of big companies make more\nnow than they used to, and I think much of the reason is prestige. In 1960,\ncorporate CEOs had immense prestige. They were the winners of the only\neconomic game in town. But if they made as little now as they did then, in\nreal dollar terms, they'd seem like small fry compared to professional\nathletes and whiz kids making millions from startups and hedge funds. They\ndon't like that idea, so now they try to get as much as they can, which is\nmore than they had been getting. [19]  \n  \nMeanwhile a similar fragmentation was happening at the other end of the\neconomic scale. As big companies' oligopolies became less secure, they were\nless able to pass costs on to customers and thus less willing to overpay for\nlabor. And as the Duplo world of a few big blocks fragmented into many\ncompanies of different sizes \u2014 some of them overseas \u2014 it became harder for\nunions to enforce their monopolies. As a result workers' wages also tended\ntoward market price. Which (inevitably, if unions had been doing their job)\ntended to be lower. Perhaps dramatically so, if automation had decreased the\nneed for some kind of work.  \n  \nAnd just as the mid-century model induced social as well as economic cohesion,\nits breakup brought social as well as economic fragmentation. People started\nto dress and act differently. Those who would later be called the \"creative\nclass\" became more mobile. People who didn't care much for religion felt less\npressure to go to church for appearances' sake, while those who liked it a lot\nopted for increasingly colorful forms. Some switched from meat loaf to tofu,\nand others to Hot Pockets. Some switched from driving Ford sedans to driving\nsmall imported cars, and others to driving SUVs. Kids who went to private\nschools or wished they did started to dress \"preppy,\" and kids who wanted to\nseem rebellious made a conscious effort to look disreputable. In a hundred\nways people spread apart. [20]  \n  \nAlmost four decades later, fragmentation is still increasing. Has it been net\ngood or bad? I don't know; the question may be unanswerable. Not entirely bad\nthough. We take for granted the forms of fragmentation we like, and worry only\nabout the ones we don't. But as someone who caught the tail end of mid-century\n[_conformism_](https://books.google.com/ngrams/graph?content=well-\nadjusted&year_start=1800&year_end=2000&corpus=15&smoothing=3), I can tell you\nit was no utopia. [21]  \n  \nMy goal here is not to say whether fragmentation has been good or bad, just to\nexplain why it's happening. With the centripetal forces of total war and 20th\ncentury oligopoly mostly gone, what will happen next? And more specifically,\nis it possible to reverse some of the fragmentation we've seen?  \n  \nIf it is, it will have to happen piecemeal. You can't reproduce mid-century\ncohesion the way it was originally produced. It would be insane to go to war\njust to induce more national unity. And once you understand the degree to\nwhich the economic history of the 20th century was a low-res version 1, it's\nclear you can't reproduce that either.  \n  \n20th century cohesion was something that happened at least in a sense\nnaturally. The war was due mostly to external forces, and the Duplo economy\nwas an evolutionary phase. If you want cohesion now, you'd have to induce it\ndeliberately. And it's not obvious how. I suspect the best we'll be able to do\nis address the symptoms of fragmentation. But that may be enough.  \n  \nThe form of fragmentation people worry most about lately is [_economic\ninequality_](ineq.html), and if you want to eliminate that you're up against a\ntruly formidable headwind that has been in operation since the stone age.\nTechnology.  \n  \nTechnology is a lever. It magnifies work. And the lever not only grows\nincreasingly long, but the rate at which it grows is itself increasing.  \n  \nWhich in turn means the variation in the amount of wealth people can create\nhas not only been increasing, but accelerating. The unusual conditions that\nprevailed in the mid 20th century masked this underlying trend. The ambitious\nhad little choice but to join large organizations that made them march in step\nwith lots of other people \u2014 literally in the case of the armed forces,\nfiguratively in the case of big corporations. Even if the big corporations had\nwanted to pay people proportionate to their value, they couldn't have figured\nout how. But that constraint has gone now. Ever since it started to erode in\nthe 1970s, we've seen the underlying forces at work again. [22]  \n  \nNot everyone who gets rich now does it by creating wealth, certainly. But a\nsignificant number do, and the Baumol Effect means all their peers get dragged\nalong too. [23] And as long as it's possible to get rich by creating wealth,\nthe default tendency will be for economic inequality to increase. Even if you\neliminate all the other ways to get rich. You can mitigate this with subsidies\nat the bottom and taxes at the top, but unless taxes are high enough to\ndiscourage people from creating wealth, you're always going to be fighting a\nlosing battle against increasing variation in productivity. [24]  \n  \nThat form of fragmentation, like the others, is here to stay. Or rather, back\nto stay. Nothing is forever, but the tendency toward fragmentation should be\nmore forever than most things, precisely because it's not due to any\nparticular cause. It's simply a reversion to the mean. When Rockefeller said\nindividualism was gone, he was right for a hundred years. It's back now, and\nthat's likely to be true for longer.  \n  \nI worry that if we don't acknowledge this, we're headed for trouble. If we\nthink 20th century cohesion disappeared because of few policy tweaks, we'll be\ndeluded into thinking we can get it back (minus the bad parts, somehow) with a\nfew countertweaks. And then we'll waste our time trying to eliminate\nfragmentation, when we'd be better off thinking about how to mitigate its\nconsequences.  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] Lester Thurow, writing in 1975, said the wage differentials prevailing at\nthe end of World War II had become so embedded that they \"were regarded as\n'just' even after the egalitarian pressures of World War II had disappeared.\nBasically, the same differentials exist to this day, thirty years later.\" But\nGoldin and Margo think market forces in the postwar period also helped\npreserve the wartime compression of wages \u2014 specifically increased demand for\nunskilled workers, and oversupply of educated ones.  \n  \n(Oddly enough, the American custom of having employers pay for health\ninsurance derives from efforts by businesses to circumvent NWLB wage controls\nin order to attract workers.)  \n  \n[2] As always, tax rates don't tell the whole story. There were lots of\nexemptions, especially for individuals. And in World War II the tax codes were\nso new that the government had little acquired immunity to tax avoidance. If\nthe rich paid high taxes during the war it was more because they wanted to\nthan because they had to.  \n  \nAfter the war, federal tax receipts as a percentage of GDP were about the same\nas they are now. In fact, for the entire period since the war, tax receipts\nhave stayed close to 18% of GDP, despite dramatic changes in tax rates. The\nlowest point occurred when marginal income tax rates were highest: 14.1% in\n1950. Looking at the data, it's hard to avoid the conclusion that tax rates\nhave had little effect on what people actually paid.  \n  \n[3] Though in fact the decade preceding the war had been a time of\nunprecedented federal power, in response to the Depression. Which is not\nentirely a coincidence, because the Depression was one of the causes of the\nwar. In many ways the New Deal was a sort of dress rehearsal for the measures\nthe federal government took during wartime. The wartime versions were much\nmore drastic and more pervasive though. As Anthony Badger wrote, \"for many\nAmericans the decisive change in their experiences came not with the New Deal\nbut with World War II.\"  \n  \n[4] I don't know enough about the origins of the world wars to say, but it's\nnot inconceivable they were connected to the rise of big corporations. If that\nwere the case, 20th century cohesion would have a single cause.  \n  \n[5] More precisely, there was a bimodal economy consisting, in Galbraith's\nwords, of \"the world of the technically dynamic, massively capitalized and\nhighly organized corporations on the one hand and the hundreds of thousands of\nsmall and traditional proprietors on the other.\" Money, prestige, and power\nwere concentrated in the former, and there was near zero crossover.  \n  \n[6] I wonder how much of the decline in families eating together was due to\nthe decline in families watching TV together afterward.  \n  \n[7] I know when this happened because it was the season Dallas premiered.\nEveryone else was talking about what was happening on Dallas, and I had no\nidea what they meant.  \n  \n[8] I didn't realize it till I started doing research for this essay, but the\nmeretriciousness of the products I grew up with is a well-known byproduct of\noligopoly. When companies can't compete on price, they compete on tailfins.  \n  \n[9] Monroeville Mall was at the time of its completion in 1969 the largest in\nthe country. In the late 1970s the movie _Dawn of the Dead_ was shot there.\nApparently the mall was not just the location of the movie, but its\ninspiration; the crowds of shoppers drifting through this huge mall reminded\nGeorge Romero of zombies. My first job was scooping ice cream in the Baskin-\nRobbins.  \n  \n[10] Labor unions were exempted from antitrust laws by the Clayton Antitrust\nAct in 1914 on the grounds that a person's work is not \"a commodity or article\nof commerce.\" I wonder if that means service companies are also exempt.  \n  \n[11] The relationships between unions and unionized companies can even be\nsymbiotic, because unions will exert political pressure to protect their\nhosts. According to Michael Lind, when politicians tried to attack the A&P\nsupermarket chain because it was putting local grocery stores out of business,\n\"A&P successfully defended itself by allowing the unionization of its\nworkforce in 1938, thereby gaining organized labor as a constituency.\" I've\nseen this phenomenon myself: hotel unions are responsible for more of the\npolitical pressure against Airbnb than hotel companies.  \n  \n[12] Galbraith was clearly puzzled that corporate executives would work so\nhard to make money for other people (the shareholders) instead of themselves.\nHe devoted much of _The New Industrial State_ to trying to figure this out.  \n  \nHis theory was that professionalism had replaced money as a motive, and that\nmodern corporate executives were, like (good) scientists, motivated less by\nfinancial rewards than by the desire to do good work and thereby earn the\nrespect of their peers. There is something in this, though I think lack of\nmovement between companies combined with self-interest explains much of\nobserved behavior.  \n  \n[13] Galbraith (p. 94) says a 1952 study of the 800 highest paid executives at\n300 big corporations found that three quarters of them had been with their\ncompany for more than 20 years.  \n  \n[14] It seems likely that in the first third of the 20th century executive\nsalaries were low partly because companies then were more dependent on banks,\nwho would have disapproved if executives got too much. This was certainly true\nin the beginning. The first big company CEOs were J. P. Morgan's hired hands.  \n  \nCompanies didn't start to finance themselves with retained earnings till the\n1920s. Till then they had to pay out their earnings in dividends, and so\ndepended on banks for capital for expansion. Bankers continued to sit on\ncorporate boards till the Glass-Steagall act in 1933.  \n  \nBy mid-century big companies funded 3/4 of their growth from earnings. But the\nearly years of bank dependence, reinforced by the financial controls of World\nWar II, must have had a big effect on social conventions about executive\nsalaries. So it may be that the lack of movement between companies was as much\nthe effect of low salaries as the cause.  \n  \nIncidentally, the switch in the 1920s to financing growth with retained\nearnings was one cause of the 1929 crash. The banks now had to find someone\nelse to lend to, so they made more margin loans.  \n  \n[15] Even now it's hard to get them to. One of the things I find hardest to\nget into the heads of would-be startup founders is how important it is to do\ncertain kinds of menial work early in the life of a company. Doing [_things\nthat don't scale_](ds.html) is to how Henry Ford got started as a high-fiber\ndiet is to the traditional peasant's diet: they had no choice but to do the\nright thing, while we have to make a conscious effort.  \n  \n[16] Founders weren't celebrated in the press when I was a kid. \"Our founder\"\nmeant a photograph of a severe-looking man with a walrus mustache and a wing\ncollar who had died decades ago. The thing to be when I was a kid was an\n_executive_. If you weren't around then it's hard to grasp the cachet that\nterm had. The fancy version of everything was called the \"executive\" model.  \n  \n[17] The wave of hostile takeovers in the 1980s was enabled by a combination\nof circumstances: court decisions striking down state anti-takeover laws,\nstarting with the Supreme Court's 1982 decision in Edgar v. MITE Corp.; the\nReagan administration's comparatively sympathetic attitude toward takeovers;\nthe Depository Institutions Act of 1982, which allowed banks and savings and\nloans to buy corporate bonds; a new SEC rule issued in 1982 (rule 415) that\nmade it possible to bring corporate bonds to market faster; the creation of\nthe junk bond business by Michael Milken; a vogue for conglomerates in the\npreceding period that caused many companies to be combined that never should\nhave been; a decade of inflation that left many public companies trading below\nthe value of their assets; and not least, the increasing complacency of\nmanagements.  \n  \n[18] Foster, Richard. \"Creative Destruction Whips through Corporate America.\"\nInnosight, February 2012.  \n  \n[19] CEOs of big companies may be overpaid. I don't know enough about big\ncompanies to say. But it is certainly not impossible for a CEO to make 200x as\nmuch difference to a company's revenues as the average employee. Look at what\nSteve Jobs did for Apple when he came back as CEO. It would have been a good\ndeal for the board to give him 95% of the company. Apple's market cap the day\nSteve came back in July 1997 was 1.73 billion. 5% of Apple now (January 2016)\nwould be worth about 30 billion. And it would not be if Steve hadn't come\nback; Apple probably wouldn't even exist anymore.  \n  \nMerely including Steve in the sample might be enough to answer the question of\nwhether public company CEOs in the aggregate are overpaid. And that is not as\nfacile a trick as it might seem, because the broader your holdings, the more\nthe aggregate is what you care about.  \n  \n[20] The late 1960s were famous for social upheaval. But that was more\nrebellion (which can happen in any era if people are provoked sufficiently)\nthan fragmentation. You're not seeing fragmentation unless you see people\nbreaking off to both left and right.  \n  \n[21] Globally the trend has been in the other direction. While the US is\nbecoming more fragmented, the world as a whole is becoming less fragmented,\nand mostly in good ways.  \n  \n[22] There were a handful of ways to make a fortune in the mid 20th century.\nThe main one was drilling for oil, which was open to newcomers because it was\nnot something big companies could dominate through economies of scale. How did\nindividuals accumulate large fortunes in an era of such high taxes? Giant tax\nloopholes defended by two of the most powerful men in Congress, Sam Rayburn\nand Lyndon Johnson.  \n  \nBut becoming a Texas oilman was not in 1950 something one could aspire to the\nway starting a startup or going to work on Wall Street were in 2000, because\n(a) there was a strong local component and (b) success depended so much on\nluck.  \n  \n[23] The Baumol Effect induced by startups is very visible in Silicon Valley.\nGoogle will pay people millions of dollars a year to keep them from leaving to\nstart or join startups.  \n  \n[24] I'm not claiming variation in productivity is the only cause of economic\ninequality in the US. But it's a significant cause, and it will become as big\na cause as it needs to, in the sense that if you ban other ways to get rich,\npeople who want to get rich will use this route instead.  \n  \n  \n  \n**Thanks** to Sam Altman, Trevor Blackwell, Paul Buchheit, Patrick Collison,\nRon Conway, Chris Dixon, Benedict Evans, Richard Florida, Ben Horowitz,\nJessica Livingston, Robert Morris, Tim O'Reilly, Geoff Ralston, Max Roser,\nAlexia Tsotsis, and Qasar Younis for reading drafts of this. Max also told me\nabout several valuable sources.  \n  \n  \n  \n**Bibliography**  \n  \nAllen, Frederick Lewis. _The Big Change_. Harper, 1952.  \n  \nAveritt, Robert. _The Dual Economy_. Norton, 1968.  \n  \nBadger, Anthony. _The New Deal_. Hill and Wang, 1989.  \n  \nBainbridge, John. _The Super-Americans_. Doubleday, 1961.  \n  \nBeatty, Jack. _Collossus_. Broadway, 2001.  \n  \nBrinkley, Douglas. _Wheels for the World_. Viking, 2003.  \n  \nBrownleee, W. Elliot. _Federal Taxation in America_. Cambridge, 1996.  \n  \nChandler, Alfred. _The Visible Hand_. Harvard, 1977.  \n  \nChernow, Ron. _The House of Morgan_. Simon & Schuster, 1990.  \n  \nChernow, Ron. _Titan: The Life of John D. Rockefeller_. Random House, 1998.  \n  \nGalbraith, John. _The New Industrial State_. Houghton Mifflin, 1967.  \n  \nGoldin, Claudia and Robert A. Margo. \"The Great Compression: The Wage\nStructure in the United States at Mid-Century.\" NBER Working Paper 3817, 1991.  \n  \nGordon, John. _An Empire of Wealth_. HarperCollins, 2004.  \n  \nKlein, Maury. _The Genesis of Industrial America, 1870-1920_. Cambridge, 2007.  \n  \nLind, Michael. _Land of Promise_. HarperCollins, 2012.  \n  \nMickelthwaite, John, and Adrian Wooldridge. _The Company_. Modern Library,\n2003.  \n  \nNasaw, David. _Andrew Carnegie_. Penguin, 2006.  \n  \nSobel, Robert. _The Age of Giant Corporations_. Praeger, 1993.  \n  \nThurow, Lester. _Generating Inequality: Mechanisms of Distribution_. Basic\nBooks, 1975.  \n  \nWitte, John. _The Politics and Development of the Federal Income Tax_.\nWisconsin, 1985.  \n  \n  \n  \n**Related:**  \n  \n\nNovember 2022  \n  \nIn the science fiction books I read as a kid, reading had often been replaced\nby some more efficient way of acquiring knowledge. Mysterious \"tapes\" would\nload it into one's brain like a program being loaded into a computer.  \n  \nThat sort of thing is unlikely to happen anytime soon. Not just because it\nwould be hard to build a replacement for reading, but because even if one\nexisted, it would be insufficient. Reading about x doesn't just teach you\nabout x; it also teaches you how to write. [1]  \n  \nWould that matter? If we replaced reading, would anyone need to be good at\nwriting?  \n  \nThe reason it would matter is that writing is not just a way to convey ideas,\nbut also a way to have them.  \n  \nA good writer doesn't just think, and then write down what he thought, as a\nsort of transcript. A good writer will almost always discover new things in\nthe process of writing. And there is, as far as I know, no substitute for this\nkind of discovery. Talking about your ideas with other people is a good way to\ndevelop them. But even after doing this, you'll find you still discover new\nthings when you sit down to write. There is a kind of thinking that can only\nbe done by [_writing_](words.html).  \n  \nThere are of course kinds of thinking that can be done without writing. If you\ndon't need to go too deeply into a problem, you can solve it without writing.\nIf you're thinking about how two pieces of machinery should fit together,\nwriting about it probably won't help much. And when a problem can be described\nformally, you can sometimes solve it in your head. But if you need to solve a\ncomplicated, ill-defined problem, it will almost always help to write about\nit. Which in turn means that someone who's not good at writing will almost\nalways be at a disadvantage in solving such problems.  \n  \nYou can't think well without writing well, and you can't write well without\nreading well. And I mean that last \"well\" in both senses. You have to be good\nat reading, and read good things. [2]  \n  \nPeople who just want information may find other ways to get it. But people who\nwant to have ideas can't afford to.  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] Audiobooks can give you examples of good writing, but having them read to\nyou doesn't teach you as much about writing as reading them yourself.  \n  \n[2] By \"good at reading\" I don't mean good at the mechanics of reading. You\ndon't have to be good at extracting words from the page so much as extracting\nmeaning from the words.  \n  \n\nApril 2021  \n  \nWhen intellectuals talk about the death penalty, they talk about things like\nwhether it's permissible for the state to take someone's life, whether the\ndeath penalty acts as a deterrent, and whether more death sentences are given\nto some groups than others. But in practice the debate about the death penalty\nis not about whether it's ok to kill murderers. It's about whether it's ok to\nkill innocent people, because at least 4% of people on death row are\n[_innocent_](https://www.pnas.org/content/111/20/7230).  \n  \nWhen I was a kid I imagined that it was unusual for people to be convicted of\ncrimes they hadn't committed, and that in murder cases especially this must be\nvery rare. Far from it. Now, thanks to organizations like the [_Innocence\nProject_](https://innocenceproject.org/all-cases), we see a constant stream of\nstories about murder convictions being overturned after new evidence emerges.\nSometimes the police and prosecutors were just very sloppy. Sometimes they\nwere crooked, and knew full well they were convicting an innocent person.  \n  \nKenneth Adams and three other men spent 18 years in prison on a murder\nconviction. They were exonerated after DNA testing implicated three different\nmen, two of whom later confessed. The police had been told about the other men\nearly in the investigation, but never followed up the lead.  \n  \nKeith Harward spent 33 years in prison on a murder conviction. He was\nconvicted because \"experts\" said his teeth matched photos of bite marks on one\nvictim. He was exonerated after DNA testing showed the murder had been\ncommitted by another man, Jerry Crotty.  \n  \nRicky Jackson and two other men spent 39 years in prison after being convicted\nof murder on the testimony of a 12 year old boy, who later recanted and said\nhe'd been coerced by police. Multiple people have confirmed the boy was\nelsewhere at the time. The three men were exonerated after the county\nprosecutor dropped the charges, saying \"The state is conceding the obvious.\"  \n  \nAlfred Brown spent 12 years in prison on a murder conviction, including 10\nyears on death row. He was exonerated after it was discovered that the\nassistant district attorney had concealed phone records proving he could not\nhave committed the crimes.  \n  \nGlenn Ford spent 29 years on death row after having been convicted of murder.\nHe was exonerated after new evidence proved he was not even at the scene when\nthe murder occurred. The attorneys assigned to represent him had never tried a\njury case before.  \n  \nCameron Willingham was actually executed in 2004 by lethal injection. The\n\"expert\" who testified that he deliberately set fire to his house has since\nbeen discredited. A re-examination of the case ordered by the state of Texas\nin 2009 concluded that \"a finding of arson could not be sustained.\"  \n  \n[_Rich Glossip_](https://saverichardglossip.com/facts) has spent 20 years on\ndeath row after being convicted of murder on the testimony of the actual\nkiller, who escaped with a life sentence in return for implicating him. In\n2015 he came within minutes of execution before it emerged that Oklahoma had\nbeen planning to kill him with an illegal combination of drugs. They still\nplan to go ahead with the execution, perhaps as soon as this summer, despite\n[_new evidence_](https://www.usnews.com/news/best-\nstates/oklahoma/articles/2020-10-14/attorney-for-oklahoma-death-row-inmate-\nclaims-new-evidence) exonerating him.  \n  \nI could go on. There are hundreds of similar cases. In Florida alone, 29 death\nrow prisoners have been exonerated so far.  \n  \nFar from being rare, wrongful murder convictions are [_very\ncommon_](https://deathpenaltyinfo.org/policy-issues/innocence/description-of-\ninnocence-cases). Police are under pressure to solve a crime that has gotten a\nlot of attention. When they find a suspect, they want to believe he's guilty,\nand ignore or even destroy evidence suggesting otherwise. District attorneys\nwant to be seen as effective and tough on crime, and in order to win\nconvictions are willing to manipulate witnesses and withhold evidence. Court-\nappointed defense attorneys are overworked and often incompetent. There's a\nready supply of criminals willing to give false testimony in return for a\nlighter sentence, suggestible witnesses who can be made to say whatever police\nwant, and bogus \"experts\" eager to claim that science proves the defendant is\nguilty. And juries want to believe them, since otherwise some terrible crime\nremains unsolved.  \n  \nThis circus of incompetence and dishonesty is the real issue with the death\npenalty. We don't even reach the point where theoretical questions about the\nmoral justification or effectiveness of capital punishment start to matter,\nbecause so many of the people sentenced to death are actually innocent.\nWhatever it means in theory, in practice capital punishment means killing\ninnocent people.  \n  \n  \n  \n  \n  \n  \n  \n**Thanks** to Trevor Blackwell, Jessica Livingston, and Don Knight for reading\ndrafts of this.  \n  \n  \n  \n**Related:**  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nOctober 2009  \n  \n _(This essay is derived from a talk at the 2009 Startup School.)_  \n  \nI wasn't sure what to talk about at Startup School, so I decided to ask the\nfounders of the startups we'd funded. What hadn't I written about yet?  \n  \nI'm in the unusual position of being able to test the essays I write about\nstartups. I hope the ones on other topics are right, but I have no way to test\nthem. The ones on startups get tested by about 70 people every 6 months.  \n  \nSo I sent all the founders an email asking what surprised them about starting\na startup. This amounts to asking what I got wrong, because if I'd explained\nthings well enough, nothing should have surprised them.  \n  \nI'm proud to report I got one response saying:\n\n> What surprised me the most is that everything was actually fairly\n> predictable!\n\nThe bad news is that I got over 100 other responses listing the surprises they\nencountered.  \n  \nThere were very clear patterns in the responses; it was remarkable how often\nseveral people had been surprised by exactly the same thing. These were the\nbiggest:  \n  \n**1\\. Be Careful with Cofounders**  \n  \nThis was the surprise mentioned by the most founders. There were two types of\nresponses: that you have to be careful who you pick as a cofounder, and that\nyou have to work hard to maintain your relationship.  \n  \nWhat people wished they'd paid more attention to when choosing cofounders was\ncharacter and commitment, not ability. This was particularly true with\nstartups that failed. The lesson: don't pick cofounders who will flake.  \n  \nHere's a typical reponse:\n\n> You haven't seen someone's true colors unless you've worked with them on a\n> startup.\n\nThe reason character is so important is that it's tested more severely than in\nmost other situations. One founder said explicitly that the relationship\nbetween founders was more important than ability:\n\n> I would rather cofound a startup with a friend than a stranger with higher\n> output. Startups are so hard and emotional that the bonds and emotional and\n> social support that come with friendship outweigh the extra output lost.\n\nWe learned this lesson a long time ago. If you look at the YC application,\nthere are more questions about the commitment and relationship of the founders\nthan their ability.  \n  \nFounders of successful startups talked less about choosing cofounders and more\nabout how hard they worked to maintain their relationship.\n\n> One thing that surprised me is how the relationship of startup founders goes\n> from a friendship to a marriage. My relationship with my cofounder went from\n> just being friends to seeing each other all the time, fretting over the\n> finances and cleaning up shit. And the startup was our baby. I summed it up\n> once like this: \"It's like we're married, but we're not fucking.\"\n\nSeveral people used that word \"married.\" It's a far more intense relationship\nthan you usually see between coworkers\u2014partly because the stresses are so much\ngreater, and partly because at first the founders are the whole company. So\nthis relationship has to be built of top quality materials and carefully\nmaintained. It's the basis of everything.  \n  \n**2\\. Startups Take Over Your Life**  \n  \nJust as the relationship between cofounders is more intense than it usually is\nbetween coworkers, so is the relationship between the founders and the\ncompany. Running a startup is not like having a job or being a student,\nbecause it never stops. This is so foreign to most people's experience that\nthey don't get it till it happens. [1]\n\n> I didn't realize I would spend almost every waking moment either working or\n> thinking about our startup. You enter a whole different way of life when\n> it's your company vs. working for someone else's company.\n\nIt's exacerbated by the fast pace of startups, which makes it seem like time\nslows down:\n\n> I think the thing that's been most surprising to me is how one's perspective\n> on time shifts. Working on our startup, I remember time seeming to stretch\n> out, so that a month was a huge interval.\n\nIn the best case, total immersion can be exciting:\n\n> It's surprising how much you become consumed by your startup, in that you\n> think about it day and night, but never once does it feel like \"work.\"\n\nThough I have to say, that quote is from someone we funded this summer. In a\ncouple years he may not sound so chipper.  \n  \n**3\\. It's an Emotional Roller-coaster**  \n  \nThis was another one lots of people were surprised about. The ups and downs\nwere more extreme than they were prepared for.  \n  \nIn a startup, things seem great one moment and hopeless the next. And by next,\nI mean a couple hours later.\n\n> The emotional ups and downs were the biggest surprise for me. One day, we'd\n> think of ourselves as the next Google and dream of buying islands; the next,\n> we'd be pondering how to let our loved ones know of our utter failure; and\n> on and on.\n\nThe hard part, obviously, is the lows. For a lot of founders that was the big\nsurprise:\n\n> How hard it is to keep everyone motivated during rough days or weeks, i.e.\n> how low the lows can be.\n\nAfter a while, if you don't have significant success to cheer you up, it wears\nyou out:\n\n> Your most basic advice to founders is \"just don't die,\" but the energy to\n> keep a company going in lieu of unburdening success isn't free; it is\n> siphoned from the founders themselves.\n\nThere's a limit to how much you can take. If you get to the point where you\ncan't keep working anymore, it's not the end of the world. Plenty of famous\nfounders have had some failures along the way.  \n  \n**4\\. It Can Be Fun**  \n  \nThe good news is, the highs are also very high. Several founders said what\nsurprised them most about doing a startup was how fun it was:\n\n> I think you've left out just how fun it is to do a startup. I am more\n> fulfilled in my work than pretty much any of my friends who did not start\n> companies.\n\nWhat they like most is the freedom:\n\n> I'm surprised by how much better it feels to be working on something that is\n> challenging and creative, something I believe in, as opposed to the hired-\n> gun stuff I was doing before. I knew it would feel better; what's surprising\n> is how much better.\n\nFrankly, though, if I've misled people here, I'm not eager to fix that. I'd\nrather have everyone think starting a startup is grim and hard than have\nfounders go into it expecting it to be fun, and a few months later saying\n\"This is supposed to be _fun_? Are you kidding?\"  \n  \nThe truth is, it wouldn't be fun for most people. A lot of what we try to do\nin the application process is to weed out the people who wouldn't like it,\nboth for our sake and theirs.  \n  \nThe best way to put it might be that starting a startup is fun the way a\nsurvivalist training course would be fun, if you're into that sort of thing.\nWhich is to say, not at all, if you're not.  \n  \n**5\\. Persistence Is the Key**  \n  \nA lot of founders were surprised how important persistence was in startups. It\nwas both a negative and a positive surprise: they were surprised both by the\ndegree of persistence required\n\n> Everyone said how determined and resilient you must be, but going through it\n> made me realize that the determination required was still understated.\n\nand also by the degree to which persistence alone was able to dissolve\nobstacles:\n\n> If you are persistent, even problems that seem out of your control (i.e.\n> immigration) seem to work themselves out.\n\nSeveral founders mentioned specifically how much more important persistence\nwas than intelligence.\n\n> I've been surprised again and again by just how much more important\n> persistence is than raw intelligence.\n\nThis applies not just to intelligence but to ability in general, and that's\nwhy so many people said character was more important in choosing cofounders.  \n  \n**6\\. Think Long-Term**  \n  \nYou need persistence because everything takes longer than you expect. A lot of\npeople were surprised by that.\n\n> I'm continually surprised by how long everything can take. Assuming your\n> product doesn't experience the explosive growth that very few products do,\n> everything from development to dealmaking (especially dealmaking) seems to\n> take 2-3x longer than I always imagine.\n\nOne reason founders are surprised is that because they work fast, they expect\neveryone else to. There's a shocking amount of shear stress at every point\nwhere a startup touches a more bureaucratic organization, like a big company\nor a VC fund. That's why fundraising and the enterprise market kill and maim\nso many startups. [2]  \n  \nBut I think the reason most founders are surprised by how long it takes is\nthat they're overconfident. They think they're going to be an instant success,\nlike YouTube or Facebook. You tell them only 1 out of 100 successful startups\nhas a trajectory like that, and they all think \"we're going to be that 1.\"  \n  \nMaybe they'll listen to one of the more successful founders:\n\n> The top thing I didn't understand before going into it is that persistence\n> is the name of the game. For the vast majority of startups that become\n> successful, it's going to be a _really_ long journey, at least 3 years and\n> probably 5+.\n\nThere is a positive side to thinking longer-term. It's not just that you have\nto resign yourself to everything taking longer than it should. If you work\npatiently it's less stressful, and you can do better work:\n\n> Because we're relaxed, it's so much easier to have fun doing what we do.\n> Gone is the awkward nervous energy fueled by the desperate need to not fail\n> guiding our actions. We can concentrate on doing what's best for our\n> company, product, employees and customers.\n\nThat's why things get so much better when you hit ramen profitability. You can\nshift into a different mode of working.  \n  \n**7\\. Lots of Little Things**  \n  \nWe often emphasize how rarely startups win simply because they hit on some\nmagic idea. I think founders have now gotten that into their heads. But a lot\nwere surprised to find this also applies within startups. You have to do lots\nof different things:\n\n> It's much more of a grind than glamorous. A timeslice selected at random\n> would more likely find me tracking down a weird DLL loading bug on Swedish\n> Windows, or tracking down a bug in the financial model Excel spreadsheet the\n> night before a board meeting, rather than having brilliant flashes of\n> strategic insight.\n\nMost hacker-founders would like to spend all their time programming. You won't\nget to, unless you fail. Which can be transformed into: If you spend all your\ntime programming, you will fail.  \n  \nThe principle extends even into programming. There is rarely a single\nbrilliant hack that ensures success:\n\n> I learnt never to bet on any one feature or deal or anything to bring you\n> success. It is never a single thing. Everything is just incremental and you\n> just have to keep doing lots of those things until you strike something.\n\nEven in the rare cases where a clever hack makes your fortune, you probably\nwon't know till later:\n\n> There is no such thing as a killer feature. Or at least you won't know what\n> it is.\n\nSo the best strategy is to try lots of different things. The reason not to put\nall your eggs in one basket is not the usual one, which applies even when you\nknow which basket is best. In a startup you don't even know that.  \n  \n**8\\. Start with Something Minimal**  \n  \nLots of founders mentioned how important it was to launch with the simplest\npossible thing. By this point everyone knows you should release fast and\niterate. It's practically a mantra at YC. But even so a lot of people seem to\nhave been burned by not doing it:\n\n> Build the absolute smallest thing that can be considered a complete\n> application and ship it.\n\nWhy do people take too long on the first version? Pride, mostly. They hate to\nrelease something that could be better. They worry what people will say about\nthem. But you have to overcome this:\n\n> Doing something \"simple\" at first glance does not mean you aren't doing\n> something meaningful, defensible, or valuable.\n\nDon't worry what people will say. If your first version is so impressive that\ntrolls don't make fun of it, you waited too long to launch. [3]  \n  \nOne founder said this should be your approach to all programming, not just\nstartups, and I tend to agree.\n\n> Now, when coding, I try to think \"How can I write this such that if people\n> saw my code, they'd be amazed at how little there is and how little it\n> does?\"\n\nOver-engineering is poison. It's not like doing extra work for extra credit.\nIt's more like telling a lie that you then have to remember so you don't\ncontradict it.  \n  \n**9\\. Engage Users**  \n  \nProduct development is a conversation with the user that doesn't really start\ntill you launch. Before you launch, you're like a police artist before he's\nshown the first version of his sketch to the witness.  \n  \nIt's so important to launch fast that it may be better to think of your\ninitial version not as a product, but as a trick for getting users to start\ntalking to you.\n\n> I learned to think about the initial stages of a startup as a giant\n> experiment. All products should be considered experiments, and those that\n> have a market show promising results extremely quickly.\n\nOnce you start talking to users, I guarantee you'll be surprised by what they\ntell you.\n\n> When you let customers tell you what they're after, they will often reveal\n> amazing details about what they find valuable as well what they're willing\n> to pay for.\n\nThe surprise is generally positive as well as negative. They won't like what\nyou've built, but there will be other things they would like that would be\ntrivially easy to implement. It's not till you start the conversation by\nlaunching the wrong thing that they can express (or perhaps even realize) what\nthey're looking for.  \n  \n**10\\. Change Your Idea**  \n  \nTo benefit from engaging with users you have to be willing to change your\nidea. We've always encouraged founders to see a startup idea as a hypothesis\nrather than a blueprint. And yet they're still surprised how well it works to\nchange the idea.\n\n> Normally if you complain about something being hard, the general advice is\n> to work harder. With a startup, I think you should find a problem that's\n> easy for you to solve. Optimizing in solution-space is familiar and\n> straightforward, but you can make enormous gains playing around in problem-\n> space.\n\nWhereas mere determination, without flexibility, is a greedy algorithm that\nmay get you nothing more than a mediocre local maximum:\n\n> When someone is determined, there's still a danger that they'll follow a\n> long, hard path that ultimately leads nowhere.\n\nYou want to push forward, but at the same time twist and turn to find the most\npromising path. One founder put it very succinctly:\n\n> Fast iteration is the key to success.\n\nOne reason this advice is so hard to follow is that people don't realize how\nhard it is to judge startup ideas, particularly their own. Experienced\nfounders learn to keep an open mind:\n\n> Now I don't laugh at ideas anymore, because I realized how terrible I was at\n> knowing if they were good or not.\n\nYou can never tell what will work. You just have to do whatever seems best at\neach point. We do this with YC itself. We still don't know if it will work,\nbut it seems like a decent hypothesis.  \n  \n**11\\. Don't Worry about Competitors**  \n  \nWhen you think you've got a great idea, it's sort of like having a guilty\nconscience about something. All someone has to do is look at you funny, and\nyou think \"Oh my God, _they know._ \"  \n  \nThese alarms are almost always false:\n\n> Companies that seemed like competitors and threats at first glance usually\n> never were when you really looked at it. Even if they were operating in the\n> same area, they had a different goal.\n\nOne reason people overreact to competitors is that they overvalue ideas. If\nideas really were the key, a competitor with the same idea would be a real\nthreat. But it's usually execution that matters:\n\n> All the scares induced by seeing a new competitor pop up are forgotten weeks\n> later. It always comes down to your own product and approach to the market.\n\nThis is generally true even if competitors get lots of attention.\n\n> Competitors riding on lots of good blogger perception aren't really the\n> winners and can disappear from the map quickly. You need consumers after\n> all.\n\nHype doesn't make satisfied users, at least not for something as complicated\nas technology.  \n  \n**12\\. It's Hard to Get Users**  \n  \nA lot of founders complained about how hard it was to get users, though.\n\n> I had no idea how much time and effort needed to go into attaining users.\n\nThis is a complicated topic. When you can't get users, it's hard to say\nwhether the problem is lack of exposure, or whether the product's simply bad.\nEven good products can be blocked by switching or integration costs:\n\n> Getting people to use a new service is incredibly difficult. This is\n> especially true for a service that other companies can use, because it\n> requires their developers to do work. If you're small, they don't think it\n> is urgent. [4]\n\nThe sharpest criticism of YC came from a founder who said we didn't focus\nenough on customer acquisition:\n\n> YC preaches \"make something people want\" as an engineering task, a never\n> ending stream of feature after feature until enough people are happy and the\n> application takes off. There's very little focus on the cost of customer\n> acquisition.\n\nThis may be true; this may be something we need to fix, especially for\napplications like games. If you make something where the challenges are mostly\ntechnical, you can rely on word of mouth, like Google did. One founder was\nsurprised by how well that worked for him:\n\n> There is an irrational fear that no one will buy your product. But if you\n> work hard and incrementally make it better, there is no need to worry.\n\nBut with other types of startups you may win less by features and more by\ndeals and marketing.  \n  \n**13\\. Expect the Worst with Deals**  \n  \nDeals fall through. That's a constant of the startup world. Startups are\npowerless, and good startup ideas generally seem wrong. So everyone is nervous\nabout closing deals with you, and you have no way to make them.  \n  \nThis is particularly true with investors:\n\n> In retrospect, it would have been much better if we had operated under the\n> assumption that we would never get any additional outside investment. That\n> would have focused us on finding revenue streams early.\n\nMy advice is generally pessimistic. Assume you won't get money, and if someone\ndoes offer you any, assume you'll never get any more.\n\n> If someone offers you money, take it. You say it a lot, but I think it needs\n> even more emphasizing. We had the opportunity to raise a lot more money than\n> we did last year and I wish we had.\n\nWhy do founders ignore me? Mostly because they're optimistic by nature. The\nmistake is to be optimistic about things you can't control. By all means be\noptimistic about your ability to make something great. But you're asking for\ntrouble if you're optimistic about big companies or investors.  \n  \n**14\\. Investors Are Clueless**  \n  \nA lot of founders mentioned how surprised they were by the cluelessness of\ninvestors:\n\n> They don't even know about the stuff they've invested in. I met some\n> investors that had invested in a hardware device and when I asked them to\n> demo the device they had difficulty switching it on.\n\nAngels are a bit better than VCs, because they usually have startup experience\nthemselves:\n\n> VC investors don't know half the time what they are talking about and are\n> years behind in their thinking. A few were great, but 95% of the investors\n> we dealt with were unprofessional, didn't seem to be very good at business\n> or have any kind of creative vision. Angels were generally much better to\n> talk to.\n\nWhy are founders surprised that VCs are clueless? I think it's because they\nseem so formidable.  \n  \nThe reason VCs seem formidable is that it's their profession to. You get to be\na VC by convincing asset managers to trust you with hundreds of millions of\ndollars. How do you do that? You have to seem confident, and you have to seem\nlike you understand technology. [5]  \n  \n**15\\. You May Have to Play Games**  \n  \nBecause investors are so bad at judging you, you have to work harder than you\nshould at selling yourself. One founder said the thing that surprised him most\nwas\n\n> The degree to which feigning certitude impressed investors.\n\nThis is the thing that has surprised _me_ most about YC founders' experiences.\nThis summer we invited some of the alumni to talk to the new startups about\nfundraising, and pretty much 100% of their advice was about investor\npsychology. I thought I was cynical about VCs, but the founders were much more\ncynical.\n\n> A lot of what startup founders do is just posturing. It works.\n\nVCs themselves have no idea of the extent to which the startups they like are\nthe ones that are best at selling themselves to VCs. [6] It's exactly the same\nphenomenon we saw a step earlier. VCs get money by seeming confident to LPs,\nand founders get money by seeming confident to VCs.  \n  \n**16\\. Luck Is a Big Factor**  \n  \nWith two such random linkages in the path between startups and money, it\nshouldn't be surprising that luck is a big factor in deals. And yet a lot of\nfounders are surprised by it.\n\n> I didn't realize how much of a role luck plays and how much is outside of\n> our control.\n\nIf you think about famous startups, it's pretty clear how big a role luck\nplays. Where would Microsoft be if IBM insisted on an exclusive license for\nDOS?  \n  \nWhy are founders fooled by this? Business guys probably aren't, but hackers\nare used to a world where skill is paramount, and you get what you deserve.\n\n> When we started our startup, I had bought the hype of the startup founder\n> dream: that this is a game of skill. It is, in some ways. Having skill is\n> valuable. So is being determined as all hell. But being lucky is the\n> critical ingredient.\n\nActually the best model would be to say that the outcome is the _product_ of\nskill, determination, and luck. No matter how much skill and determination you\nhave, if you roll a zero for luck, the outcome is zero.  \n  \nThese quotes about luck are not from founders whose startups failed. Founders\nwho fail quickly tend to blame themselves. Founders who succeed quickly don't\nusually realize how lucky they were. It's the ones in the middle who see how\nimportant luck is.  \n  \n**17\\. The Value of Community**  \n  \nA surprising number of founders said what surprised them most about starting a\nstartup was the value of community. Some meant the micro-community of YC\nfounders:\n\n> The immense value of the peer group of YC companies, and facing similar\n> obstacles at similar times.\n\nwhich shouldn't be that surprising, because that's why it's structured that\nway. Others were surprised at the value of the startup community in the larger\nsense:\n\n> How advantageous it is to live in Silicon Valley, where you can't help but\n> hear all the cutting-edge tech and startup news, and run into useful people\n> constantly.\n\nThe specific thing that surprised them most was the general spirit of\nbenevolence:\n\n> One of the most surprising things I saw was the willingness of people to\n> help us. Even people who had nothing to gain went out of their way to help\n> our startup succeed.\n\nand particularly how it extended all the way to the top:\n\n> The surprise for me was how accessible important and interesting people are.\n> It's amazing how easily you can reach out to people and get immediate\n> feedback.\n\nThis is one of the reasons I like being part of this world. Creating wealth is\nnot a zero-sum game, so you don't have to stab people in the back to win.  \n  \n**18\\. You Get No Respect**  \n  \nThere was one surprise founders mentioned that I'd forgotten about: that\noutside the startup world, startup founders get no respect.\n\n> In social settings, I found that I got a lot more respect when I said, \"I\n> worked on Microsoft Office\" instead of \"I work at a small startup you've\n> never heard of called x.\"\n\nPartly this is because the rest of the world just doesn't get startups, and\npartly it's yet another consequence of the fact that most good startup ideas\nseem bad:\n\n> If you pitch your idea to a random person, 95% of the time you'll find the\n> person instinctively thinks the idea will be a flop and you're wasting your\n> time (although they probably won't say this directly).\n\nUnfortunately this extends even to dating:\n\n> It surprised me that being a startup founder does not get you more\n> admiration from women.\n\nI did know about that, but I'd forgotten.  \n  \n**19\\. Things Change as You Grow**  \n  \nThe last big surprise founders mentioned is how much things changed as they\ngrew. The biggest change was that you got to program even less:\n\n> Your job description as technical founder/CEO is completely rewritten every\n> 6-12 months. Less coding, more managing/planning/company building, hiring,\n> cleaning up messes, and generally getting things in place for what needs to\n> happen a few months from now.\n\nIn particular, you now have to deal with employees, who often have different\nmotivations:\n\n> I knew the founder equation and had been focused on it since I knew I wanted\n> to start a startup as a 19 year old. The employee equation is quite\n> different so it took me a while to get it down.\n\nFortunately, it can become a lot less stressful once you reach cruising\naltitude:\n\n> I'd say 75% of the stress is gone now from when we first started. Running a\n> business is so much more enjoyable now. We're more confident. We're more\n> patient. We fight less. We sleep more.\n\nI wish I could say it was this way for every startup that succeeded, but 75%\nis probably on the high side.  \n  \n**The Super-Pattern**  \n  \nThere were a few other patterns, but these were the biggest. One's first\nthought when looking at them all is to ask if there's a super-pattern, a\npattern to the patterns.  \n  \nI saw it immediately, and so did a YC founder I read the list to. These are\nsupposed to be the surprises, the things I didn't tell people. What do they\nall have in common? They're all things I tell people. If I wrote a new essay\nwith the same outline as this that wasn't summarizing the founders' responses,\neveryone would say I'd run out of ideas and was just repeating myself.  \n  \nWhat is going on here?  \n  \nWhen I look at the responses, the common theme is that starting a startup was\nlike I said, but way more so. People just don't seem to get how different it\nis till they do it. Why? The key to that mystery is to ask, how different\n_from what?_ Once you phrase it that way, the answer is obvious: from a job.\nEveryone's model of work is a job. It's completely pervasive. Even if you've\nnever had a job, your parents probably did, along with practically every other\nadult you've met.  \n  \nUnconsciously, everyone expects a startup to be like a job, and that explains\nmost of the surprises. It explains why people are surprised how carefully you\nhave to choose cofounders and how hard you have to work to maintain your\nrelationship. You don't have to do that with coworkers. It explains why the\nups and downs are surprisingly extreme. In a job there is much more damping.\nBut it also explains why the good times are surprisingly good: most people\ncan't imagine such freedom. As you go down the list, almost all the surprises\nare surprising in how much a startup differs from a job.  \n  \nYou probably can't overcome anything so pervasive as the model of work you\ngrew up with. So the best solution is to be consciously aware of that. As you\ngo into a startup, you'll be thinking \"everyone says it's really extreme.\"\nYour next thought will probably be \"but I can't believe it will be that bad.\"\nIf you want to avoid being surprised, the next thought after that should be:\n\"and the reason I can't believe it will be that bad is that my model of work\nis a job.\"  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] Graduate students might understand it. In grad school you always feel you\nshould be working on your thesis. It doesn't end every semester like classes\ndo.  \n  \n[2] The best way for a startup to engage with slow-moving organizations is to\nfork off separate processes to deal with them. It's when they're on the\ncritical path that they kill you\u2014when you depend on closing a deal to move\nforward. It's worth taking extreme measures to avoid that.  \n  \n[3] This is a variant of Reid Hoffman's principle that if you aren't\nembarrassed by what you launch with, you waited too long to launch.  \n  \n[4] The question to ask about what you've built is not whether it's good, but\nwhether it's good enough to supply the activation energy required.  \n  \n[5] Some VCs seem to understand technology because they actually do, but\nthat's overkill; the defining test is whether you can talk about it well\nenough to convince limited partners.  \n  \n[6] This is the same phenomenon you see with defense contractors or fashion\nbrands. The dumber the customers, the more effort you expend on the process of\nselling things to them rather than making the things you sell.  \n  \n**Thanks:** to Jessica Livingston for reading drafts of this, and to all the\nfounders who responded to my email.  \n  \n  \n  \n**Related:**  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nMarch 2009  \n  \nA couple days ago I finally got being a good startup founder down to two\nwords: relentlessly resourceful.  \n  \nTill then the best I'd managed was to get the opposite quality down to one:\nhapless. Most dictionaries say hapless means unlucky. But the dictionaries are\nnot doing a very good job. A team that outplays its opponents but loses\nbecause of a bad decision by the referee could be called unlucky, but not\nhapless. Hapless implies passivity. To be hapless is to be battered by\ncircumstances \u2014 to let the world have its way with you, instead of having your\nway with the world.  [1]  \n  \nUnfortunately there's no antonym of hapless, which makes it difficult to tell\nfounders what to aim for. \"Don't be hapless\" is not much of a rallying cry.  \n  \nIt's not hard to express the quality we're looking for in metaphors. The best\nis probably a running back. A good running back is not merely determined, but\nflexible as well. They want to get downfield, but they adapt their plans on\nthe fly.  \n  \nUnfortunately this is just a metaphor, and not a useful one to most people\noutside the US. \"Be like a running back\" is no better than \"Don't be hapless.\"  \n  \nBut finally I've figured out how to express this quality directly. I was\nwriting a talk for [investors](angelinvesting.html), and I had to explain what\nto look for in founders. What would someone who was the opposite of hapless be\nlike? They'd be relentlessly resourceful. Not merely relentless. That's not\nenough to make things go your way except in a few mostly uninteresting\ndomains. In any interesting domain, the difficulties will be novel. Which\nmeans you can't simply plow through them, because you don't know initially how\nhard they are; you don't know whether you're about to plow through a block of\nfoam or granite. So you have to be resourceful. You have to keep trying new\nthings.  \n  \nBe relentlessly resourceful.  \n  \nThat sounds right, but is it simply a description of how to be successful in\ngeneral? I don't think so. This isn't the recipe for success in writing or\npainting, for example. In that kind of work the recipe is more to be actively\ncurious. Resourceful implies the obstacles are external, which they generally\nare in startups. But in writing and painting they're mostly internal; the\nobstacle is your own obtuseness. [2]  \n  \nThere probably are other fields where \"relentlessly resourceful\" is the recipe\nfor success. But though other fields may share it, I think this is the best\nshort description we'll find of what makes a good startup founder. I doubt it\ncould be made more precise.  \n  \nNow that we know what we're looking for, that leads to other questions. For\nexample, can this quality be taught? After four years of trying to teach it to\npeople, I'd say that yes, surprisingly often it can. Not to everyone, but to\nmany people. [3] Some people are just constitutionally passive, but others\nhave a latent ability to be relentlessly resourceful that only needs to be\nbrought out.  \n  \nThis is particularly true of young people who have till now always been under\nthe thumb of some kind of authority. Being relentlessly resourceful is\ndefinitely not the recipe for success in big companies, or in most schools. I\ndon't even want to think what the recipe is in big companies, but it is\ncertainly longer and messier, involving some combination of resourcefulness,\nobedience, and building alliances.  \n  \nIdentifying this quality also brings us closer to answering a question people\noften wonder about: how many startups there could be. There is not, as some\npeople seem to think, any economic upper bound on this number. There's no\nreason to believe there is any limit on the amount of newly created wealth\nconsumers can absorb, any more than there is a limit on the number of theorems\nthat can be proven. So probably the limiting factor on the number of startups\nis the pool of potential founders. Some people would make good founders, and\nothers wouldn't. And now that we can say what makes a good founder, we know\nhow to put an upper bound on the size of the pool.  \n  \nThis test is also useful to individuals. If you want to know whether you're\nthe right sort of person to start a startup, ask yourself whether you're\nrelentlessly resourceful. And if you want to know whether to recruit someone\nas a cofounder, ask if they are.  \n  \nYou can even use it tactically. If I were running a startup, this would be the\nphrase I'd tape to the mirror. \"Make something people want\" is the\ndestination, but \"Be relentlessly resourceful\" is how you get there.  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] I think the reason the dictionaries are wrong is that the meaning of the\nword has shifted. No one writing a dictionary from scratch today would say\nthat hapless meant unlucky. But a couple hundred years ago they might have.\nPeople were more at the mercy of circumstances in the past, and as a result a\nlot of the words we use for good and bad outcomes have origins in words about\nluck.  \n  \nWhen I was living in Italy, I was once trying to tell someone that I hadn't\nhad much success in doing something, but I couldn't think of the Italian word\nfor success. I spent some time trying to describe the word I meant. Finally\nshe said \"Ah! Fortuna!\"  \n  \n[2] There are aspects of startups where the recipe is to be actively curious.\nThere can be times when what you're doing is almost pure discovery.\nUnfortunately these times are a small proportion of the whole. On the other\nhand, they are in research too.  \n  \n[3] I'd almost say to most people, but I realize (a) I have no idea what most\npeople are like, and (b) I'm pathologically optimistic about people's ability\nto change.  \n  \n**Thanks** to Trevor Blackwell and Jessica Livingston for reading drafts of\nthis.  \n  \n\nApril 2009  \n  \nRecently I realized I'd been holding two ideas in my head that would explode\nif combined.  \n  \nThe first is that startups may represent a [new economic phase](highres.html),\non the scale of the Industrial Revolution. I'm not sure of this, but there\nseems a decent chance it's true. People are dramatically more productive as\nfounders or early employees of startups\u2014imagine how much less Larry and Sergey\nwould have achieved if they'd gone to work for a big company\u2014and that scale of\nimprovement can change social customs.  \n  \nThe second idea is that startups are a type of business that flourishes in\ncertain places that [specialize](startuphubs.html) in it\u2014that Silicon Valley\nspecializes in startups in the same way Los Angeles specializes in movies, or\nNew York in finance. [1]  \n  \nWhat if both are true? What if startups are both a new economic phase and also\na type of business that only flourishes in certain centers?  \n  \nIf so, this revolution is going to be particularly revolutionary. All previous\nrevolutions have spread. Agriculture, cities, and industrialization all spread\nwidely. If startups end up being like the movie business, with just a handful\nof centers and one dominant one, that's going to have novel consequences.  \n  \nThere are already signs that startups may not spread particularly well. The\nspread of startups seems to be proceeding slower than the spread of the\nIndustrial Revolution, despite the fact that communication is so much faster\nnow.  \n  \nWithin a few decades of the founding of Boulton & Watt there were steam\nengines scattered over northern Europe and North America. Industrialization\ndidn't spread much beyond those regions for a while. It only spread to places\nwhere there was a strong middle class\u2014countries where a private citizen could\nmake a fortune without having it confiscated. Otherwise it wasn't worth\ninvesting in factories. But in a country with a strong middle class it was\neasy for industrial techniques to take root. An individual mine or factory\nowner could decide to install a steam engine, and within a few years he could\nprobably find someone local to make him one. So steam engines spread fast. And\nthey spread widely, because the locations of mines and factories were\ndetermined by features like rivers, harbors, and sources of raw materials. [2]  \n  \nStartups don't seem to spread so well, partly because they're more a social\nthan a technical phenomenon, and partly because they're not tied to geography.\nAn individual European manufacturer could import industrial techniques and\nthey'd work fine. This doesn't seem to work so well with startups: you need a\ncommunity of expertise, as you do in the movie business. [3] Plus there aren't\nthe same forces driving startups to spread. Once railroads or electric power\ngrids were invented, every region had to have them. An area without railroads\nor power was a rich potential market. But this isn't true with startups.\nThere's no need for a Microsoft of France or Google of Germany.  \n  \nGovernments may decide they want to encourage startups locally, but government\npolicy can't call them into being the way a genuine need could.  \n  \nHow will this all play out? If I had to predict now, I'd say that startups\nwill spread, but very slowly, because their spread will be driven not by\ngovernment policies (which won't work) or by market need (which doesn't exist)\nbut, to the extent that it happens at all, by the same random factors that\nhave caused startup culture to spread thus far. And such random factors will\nincreasingly be outweighed by the pull of existing startup hubs.  \n  \nSilicon Valley is where it is because William Shockley wanted to move back to\nPalo Alto, where he grew up, and the experts he lured west to work with him\nliked it so much they stayed. Seattle owes much of its position as a tech\ncenter to the same cause: Gates and Allen wanted to move home. Otherwise\nAlbuquerque might have Seattle's place in the rankings. Boston is a tech\ncenter because it's the intellectual capital of the US and probably the world.\nAnd if Battery Ventures hadn't turned down Facebook, Boston would be\nsignificantly bigger now on the startup radar screen.  \n  \nBut of course it's not a coincidence that Facebook got funded in the Valley\nand not Boston. There are more and bolder investors in Silicon Valley than in\nBoston, and even undergrads know it.  \n  \nBoston's case illustrates the difficulty you'd have establishing a new startup\nhub this late in the game. If you wanted to create a startup hub by\nreproducing the way existing ones happened, the [way to do\nit](siliconvalley.html) would be to establish a first-rate research university\nin a place so nice that rich people wanted to live there. Then the town would\nbe hospitable to both groups you need: both founders and investors. That's the\ncombination that yielded Silicon Valley. But Silicon Valley didn't have\nSilicon Valley to compete with. If you tried now to create a startup hub by\nplanting a great university in a nice place, it would have a harder time\ngetting started, because many of the best startups it produced would be sucked\naway to existing startup hubs.  \n  \nRecently I suggested a potential shortcut: [pay startups to move](maybe.html).\nOnce you had enough good startups in one place, it would create a self-\nsustaining chain reaction. Founders would start to move there without being\npaid, because that was where their peers were, and investors would appear too,\nbecause that was where the deals were.  \n  \nIn practice I doubt any government would have the balls to try this, or the\nbrains to do it right. I didn't mean it as a practical suggestion, but more as\nan exploration of the lower bound of what it would take to create a startup\nhub deliberately.  \n  \nThe most likely scenario is (1) that no government will successfully establish\na startup hub, and (2) that the spread of startup culture will thus be driven\nby the random factors that have driven it so far, but (3) that these factors\nwill be increasingly outweighed by the pull of existing startup hubs. Result:\nthis revolution, if it is one, will be unusually localized.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] There are two very different types of startup: one kind that evolves\nnaturally, and one kind that's called into being to \"commercialize\" a\nscientific discovery. Most computer/software startups are now the first type,\nand most pharmaceutical startups the second. When I talk about startups in\nthis essay, I mean type I startups. There is no difficulty making type II\nstartups spread: all you have to do is fund medical research labs;\ncommercializing whatever new discoveries the boffins throw off is as\nstraightforward as building a new airport. Type II startups neither require\nnor produce startup culture. But that means having type II startups won't get\nyou type I startups. Philadelphia is a case in point: lots of type II\nstartups, but hardly any type I.  \n  \nIncidentally, Google may appear to be an instance of a type II startup, but it\nwasn't. Google is not pagerank commercialized. They could have used another\nalgorithm and everything would have turned out the same. What made Google\nGoogle is that they cared about doing search well at a critical point in the\nevolution of the web.  \n  \n[2] Watt didn't invent the steam engine. His critical invention was a\nrefinement that made steam engines dramatically more efficient: the separate\ncondenser. But that oversimplifies his role. He had such a different attitude\nto the problem and approached it with such energy that he transformed the\nfield. Perhaps the most accurate way to put it would be to say that Watt\nreinvented the steam engine.  \n  \n[3] The biggest counterexample here is Skype. If you're doing something that\nwould get shut down in the US, it becomes an advantage to be located\nelsewhere. That's why Kazaa took the place of Napster. And the expertise and\nconnections the founders gained from running Kazaa helped ensure the success\nof Skype.  \n  \n**Thanks** to Patrick Collison, Jessica Livingston, and Fred Wilson for\nreading drafts of this.  \n  \n\nApril 2021  \n  \nEvery year since 1982, _Forbes_ magazine has published a list of the richest\nAmericans. If we compare the 100 richest people in 1982 to the 100 richest in\n2020, we notice some big differences.  \n  \nIn 1982 the most common source of wealth was inheritance. Of the 100 richest\npeople, 60 inherited from an ancestor. There were 10 du Pont heirs alone. By\n2020 the number of heirs had been cut in half, accounting for only 27 of the\nbiggest 100 fortunes.  \n  \nWhy would the percentage of heirs decrease? Not because inheritance taxes\nincreased. In fact, they decreased significantly during this period. The\nreason the percentage of heirs has decreased is not that fewer people are\ninheriting great fortunes, but that more people are making them.  \n  \nHow are people making these new fortunes? Roughly 3/4 by starting companies\nand 1/4 by investing. Of the 73 new fortunes in 2020, 56 derive from founders'\nor early employees' equity (52 founders, 2 early employees, and 2 wives of\nfounders), and 17 from managing investment funds.  \n  \nThere were no fund managers among the 100 richest Americans in 1982. Hedge\nfunds and private equity firms existed in 1982, but none of their founders\nwere rich enough yet to make it into the top 100. Two things changed: fund\nmanagers discovered new ways to generate high returns, and more investors were\nwilling to trust them with their money. [1]  \n  \nBut the main source of new fortunes now is starting companies, and when you\nlook at the data, you see big changes there too. People get richer from\nstarting companies now than they did in 1982, because the companies do\ndifferent things.  \n  \nIn 1982, there were two dominant sources of new wealth: oil and real estate.\nOf the 40 new fortunes in 1982, at least 24 were due primarily to oil or real\nestate. Now only a small number are: of the 73 new fortunes in 2020, 4 were\ndue to real estate and only 2 to oil.  \n  \nBy 2020 the biggest source of new wealth was what are sometimes called \"tech\"\ncompanies. Of the 73 new fortunes, about 30 derive from such companies. These\nare particularly common among the richest of the rich: 8 of the top 10\nfortunes in 2020 were new fortunes of this type.  \n  \nArguably it's slightly misleading to treat tech as a category. Isn't Amazon\nreally a retailer, and Tesla a car maker? Yes and no. Maybe in 50 years, when\nwhat we call tech is taken for granted, it won't seem right to put these two\nbusinesses in the same category. But at the moment at least, there is\ndefinitely something they share in common that distinguishes them. What\nretailer starts AWS? What car maker is run by someone who also has a rocket\ncompany?  \n  \nThe tech companies behind the top 100 fortunes also form a well-differentiated\ngroup in the sense that they're all companies that venture capitalists would\nreadily invest in, and the others mostly not. And there's a reason why: these\nare mostly companies that win by having better technology, rather than just a\nCEO who's really driven and good at making deals.  \n  \nTo that extent, the rise of the tech companies represents a qualitative\nchange. The oil and real estate magnates of the 1982 Forbes 400 didn't win by\nmaking better technology. They won by being really driven and good at making\ndeals. [2] And indeed, that way of getting rich is so old that it predates the\nIndustrial Revolution. The courtiers who got rich in the (nominal) service of\nEuropean royal houses in the 16th and 17th centuries were also, as a rule,\nreally driven and good at making deals.  \n  \nPeople who don't look any deeper than the Gini coefficient look back on the\nworld of 1982 as the good old days, because those who got rich then didn't get\nas rich. But if you dig into _how_ they got rich, the old days don't look so\ngood. In 1982, 84% of the richest 100 people got rich by inheritance,\nextracting natural resources, or doing real estate deals. Is that really\nbetter than a world in which the richest people get rich by starting tech\ncompanies?  \n  \nWhy are people starting so many more new companies than they used to, and why\nare they getting so rich from it? The answer to the first question, curiously\nenough, is that it's misphrased. We shouldn't be asking why people are\nstarting companies, but why they're starting companies _again_. [3]  \n  \nIn 1892, the _New York Herald Tribune_ compiled a list of all the millionaires\nin America. They found 4047 of them. How many had inherited their wealth then?\nOnly about 20%, which is less than the proportion of heirs today. And when you\ninvestigate the sources of the new fortunes, 1892 looks even more like today.\nHugh Rockoff found that \"many of the richest ... gained their initial edge\nfrom the new technology of mass production.\" [4]  \n  \nSo it's not 2020 that's the anomaly here, but 1982. The real question is why\nso few people had gotten rich from starting companies in 1982\\. And the answer\nis that even as the _Herald Tribune_ 's list was being compiled, a wave of\n[_consolidation_](re.html) was sweeping through the American economy. In the\nlate 19th and early 20th centuries, financiers like J. P. Morgan combined\nthousands of smaller companies into a few hundred giant ones with commanding\neconomies of scale. By the end of World War II, as Michael Lind writes, \"the\nmajor sectors of the economy were either organized as government-backed\ncartels or dominated by a few oligopolistic corporations.\" [5]  \n  \nIn 1960, most of the people who start startups today would have gone to work\nfor one of them. You could get rich from starting your own company in 1890 and\nin 2020, but in 1960 it was not really a viable option. You couldn't break\nthrough the oligopolies to get at the markets. So the prestigious route in\n1960 was not to start your own company, but to work your way up the corporate\nladder at an existing one. [6]  \n  \nMaking everyone a corporate employee decreased economic inequality (and every\nother kind of variation), but if your model of normal is the mid 20th century,\nyou have a very misleading model in that respect. J. P. Morgan's economy\nturned out to be just a phase, and starting in the 1970s, it began to break\nup.  \n  \nWhy did it break up? Partly senescence. The big companies that seemed models\nof scale and efficiency in 1930 had by 1970 become slack and bloated. By 1970\nthe rigid structure of the economy was full of cosy nests that various groups\nhad built to insulate themselves from market forces. During the Carter\nadministration the federal government realized something was amiss and began,\nin a process they called \"deregulation,\" to roll back the policies that\npropped up the oligopolies.  \n  \nBut it wasn't just decay from within that broke up J. P. Morgan's economy.\nThere was also pressure from without, in the form of new technology, and\nparticularly microelectronics. The best way to envision what happened is to\nimagine a pond with a crust of ice on top. Initially the only way from the\nbottom to the surface is around the edges. But as the ice crust weakens, you\nstart to be able to punch right through the middle.  \n  \nThe edges of the pond were pure tech: companies that actually described\nthemselves as being in the electronics or software business. When you used the\nword \"startup\" in 1990, that was what you meant. But now startups are punching\nright through the middle of the ice crust and displacing incumbents like\nretailers and TV networks and car companies. [7]  \n  \nBut though the breakup of J. P. Morgan's economy created a new world in the\ntechnological sense, it was a reversion to the norm in the social sense. If\nyou only look back as far as the mid 20th century, it seems like people\ngetting rich by starting their own companies is a recent phenomenon. But if\nyou look back further, you realize it's actually the default. So what we\nshould expect in the future is more of the same. Indeed, we should expect both\nthe number and wealth of founders to grow, because every decade it gets easier\nto start a startup.  \n  \nPart of the reason it's getting easier to start a startup is social. Society\nis (re)assimilating the concept. If you start one now, your parents won't\nfreak out the way they would have a generation ago, and knowledge about how to\ndo it is much more widespread. But the main reason it's easier to start a\nstartup now is that it's cheaper. Technology has driven down the cost of both\nbuilding products and acquiring customers.  \n  \nThe decreasing cost of starting a startup has in turn changed the balance of\npower between founders and investors. Back when starting a startup meant\nbuilding a factory, you needed investors' permission to do it at all. But now\ninvestors need founders more than founders need investors, and that, combined\nwith the increasing amount of venture capital available, has driven up\nvaluations. [8]  \n  \nSo the decreasing cost of starting a startup increases the number of rich\npeople in two ways: it means that more people start them, and that those who\ndo can raise money on better terms.  \n  \nBut there's also a third factor at work: the companies themselves are more\nvaluable, because newly founded companies grow faster than they used to.\nTechnology hasn't just made it cheaper to build and distribute things, but\nfaster too.  \n  \nThis trend has been running for a long time. IBM, founded in 1896, took 45\nyears to reach a billion 2020 dollars in revenue. Hewlett-Packard, founded in\n1939, took 25 years. Microsoft, founded in 1975, took 13 years. Now the norm\nfor fast-growing companies is 7 or 8 years. [9]  \n  \nFast growth has a double effect on the value of founders' stock. The value of\na company is a function of its revenue and its growth rate. So if a company\ngrows faster, you not only get to a billion dollars in revenue sooner, but the\ncompany is more valuable when it reaches that point than it would be if it\nwere growing slower.  \n  \nThat's why founders sometimes get so rich so young now. The low initial cost\nof starting a startup means founders can start young, and the fast growth of\ncompanies today means that if they succeed they could be surprisingly rich\njust a few years later.  \n  \nIt's easier now to start and grow a company than it has ever been. That means\nmore people start them, that those who do get better terms from investors, and\nthat the resulting companies become more valuable. Once you understand how\nthese mechanisms work, and that startups were suppressed for most of the 20th\ncentury, you don't have to resort to some vague right turn the country took\nunder Reagan to explain why America's Gini coefficient is increasing. Of\ncourse the Gini coefficient is increasing. With more people starting more\nvaluable companies, how could it not be?  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] Investment firms grew rapidly after a regulatory change by the Labor\nDepartment in 1978 allowed pension funds to invest in them, but the effects of\nthis growth were not yet visible in the top 100 fortunes in 1982.  \n  \n[2] George Mitchell deserves mention as an exception. Though really driven and\ngood at making deals, he was also the first to figure out how to use fracking\nto get natural gas out of shale.  \n  \n[3] When I say people are starting more companies, I mean the type of company\nmeant to [_grow_](growth.html) very big. There has actually been a decrease in\nthe last couple decades in the overall number of new companies. But the vast\nmajority of companies are small retail and service businesses. So what the\nstatistics about the decreasing number of new businesses mean is that people\nare starting fewer shoe stores and barber shops.  \n  \nPeople sometimes get [_confused_](https://www.inc.com/magazine/201505/leigh-\nbuchanan/the-vanishing-startups-in-decline.html) when they see a graph\nlabelled \"startups\" that's going down, because there are two senses of the\nword \"startup\": (1) the founding of a company, and (2) a particular type of\ncompany designed to grow big fast. The statistics mean startup in sense (1),\nnot sense (2).  \n  \n[4] Rockoff, Hugh. \"Great Fortunes of the Gilded Age.\" NBER Working Paper\n14555, 2008.  \n  \n[5] Lind, Michael. _Land of Promise._ HarperCollins, 2012.  \n  \nIt's also likely that the high tax rates in the mid 20th century deterred\npeople from starting their own companies. Starting one's own company is risky,\nand when risk isn't rewarded, people opt for [_safety_](inequality.html)\ninstead.  \n  \nBut it wasn't simply cause and effect. The oligopolies and high tax rates of\nthe mid 20th century were all of a piece. Lower taxes are not just a cause of\nentrepreneurship, but an effect as well: the people getting rich in the mid\n20th century from real estate and oil exploration lobbied for and got huge tax\nloopholes that made their effective tax rate much lower, and presumably if it\nhad been more common to grow big companies by building new technology, the\npeople doing that would have lobbied for their own loopholes as well.  \n  \n[6] That's why the people who did get rich in the mid 20th century so often\ngot rich from oil exploration or real estate. Those were the two big areas of\nthe economy that weren't susceptible to consolidation.  \n  \n[7] The pure tech companies used to be called \"high technology\" startups. But\nnow that startups can punch through the middle of the ice crust, we don't need\na separate name for the edges, and the term \"high-tech\" has a decidedly\n[_retro_](https://books.google.com/ngrams/graph?content=high+tech&year_start=1900&year_end=2019&corpus=en-2019&smoothing=3)\nsound.  \n  \n[8] Higher valuations mean you either sell less stock to get a given amount of\nmoney, or get more money for a given amount of stock. The typical startup does\nsome of each. Obviously you end up richer if you keep more stock, but you\nshould also end up richer if you raise more money, because (a) it should make\nthe company more successful, and (b) you should be able to last longer before\nthe next round, or not even need one. Notice all those shoulds though. In\npractice a lot of money slips through them.  \n  \nIt might seem that the huge rounds raised by startups nowadays contradict the\nclaim that it has become cheaper to start one. But there's no contradiction\nhere; the startups that raise the most are the ones doing it by choice, in\norder to grow faster, not the ones doing it because they need the money to\nsurvive. There's nothing like not needing money to make people offer it to\nyou.  \n  \nYou would think, after having been on the side of labor in its fight with\ncapital for almost two centuries, that the far left would be happy that labor\nhas finally prevailed. But none of them seem to be. You can almost hear them\nsaying \"No, no, not _that_ way.\"  \n  \n[9] IBM was created in 1911 by merging three companies, the most important of\nwhich was Herman Hollerith's Tabulating Machine Company, founded in 1896. In\n1941 its revenues were $60 million.  \n  \nHewlett-Packard's revenues in 1964 were $125 million.  \n  \nMicrosoft's revenues in 1988 were $590 million.  \n  \n  \n  \n**Thanks** to Trevor Blackwell, Jessica Livingston, Bob Lesko, Robert Morris,\nRuss Roberts, and Alex Tabarrok for reading drafts of this, and to Jon\nErlichman for growth data.  \n  \n\nSeptember 2001  \n  \n _(This article explains why much of the next generation of software may be\nserver-based, what that will mean for programmers, and why this new kind of\nsoftware is a great opportunity for startups. It's derived from a talk at BBN\nLabs.)_  \n  \nIn the summer of 1995, my friend Robert Morris and I decided to start a\nstartup. The PR campaign leading up to Netscape's IPO was running full blast\nthen, and there was a lot of talk in the press about online commerce. At the\ntime there might have been thirty actual stores on the Web, all made by hand.\nIf there were going to be a lot of online stores, there would need to be\nsoftware for making them, so we decided to write some.  \n  \nFor the first week or so we intended to make this an ordinary desktop\napplication. Then one day we had the idea of making the software run on our\nWeb server, using the browser as an interface. We tried rewriting the software\nto work over the Web, and it was clear that this was the way to go. If we\nwrote our software to run on the server, it would be a lot easier for the\nusers and for us as well.  \n  \nThis turned out to be a good plan. Now, as [Yahoo\nStore](http://store.yahoo.com), this software is the most popular online store\nbuilder, with about 14,000 users.  \n  \nWhen we started Viaweb, hardly anyone understood what we meant when we said\nthat the software ran on the server. It was not until Hotmail was launched a\nyear later that people started to get it. Now everyone knows that this is a\nvalid approach. There is a name now for what we were: an Application Service\nProvider, or ASP.  \n  \nI think that a lot of the next generation of software will be written on this\nmodel. Even Microsoft, who have the most to lose, seem to see the inevitablity\nof moving some things off the desktop. If software moves off the desktop and\nonto servers, it will mean a very different world for developers. This article\ndescribes the surprising things we saw, as some of the first visitors to this\nnew world. To the extent software does move onto servers, what I'm describing\nhere is the future.  \n  \n**The Next Thing?**  \n  \nWhen we look back on the desktop software era, I think we'll marvel at the\ninconveniences people put up with, just as we marvel now at what early car\nowners put up with. For the first twenty or thirty years, you had to be a car\nexpert to own a car. But cars were such a big win that lots of people who\nweren't car experts wanted to have them as well.  \n  \nComputers are in this phase now. When you own a desktop computer, you end up\nlearning a lot more than you wanted to know about what's happening inside it.\nBut more than half the households in the US own one. My mother has a computer\nthat she uses for email and for keeping accounts. About a year ago she was\nalarmed to receive a letter from Apple, offering her a discount on a new\nversion of the operating system. There's something wrong when a sixty-five\nyear old woman who wants to use a computer for email and accounts has to think\nabout installing new operating systems. Ordinary users shouldn't even know the\nwords \"operating system,\" much less \"device driver\" or \"patch.\"  \n  \nThere is now another way to deliver software that will save users from\nbecoming system administrators. Web-based applications are programs that run\non Web servers and use Web pages as the user interface. For the average user\nthis new kind of software will be easier, cheaper, more mobile, more reliable,\nand often more powerful than desktop software.  \n  \nWith Web-based software, most users won't have to think about anything except\nthe applications they use. All the messy, changing stuff will be sitting on a\nserver somewhere, maintained by the kind of people who are good at that kind\nof thing. And so you won't ordinarily need a computer, per se, to use\nsoftware. All you'll need will be something with a keyboard, a screen, and a\nWeb browser. Maybe it will have wireless Internet access. Maybe it will also\nbe your cell phone. Whatever it is, it will be consumer electronics: something\nthat costs about $200, and that people choose mostly based on how the case\nlooks. You'll pay more for Internet services than you do for the hardware,\njust as you do now with telephones. [1]  \n  \nIt will take about a tenth of a second for a click to get to the server and\nback, so users of heavily interactive software, like Photoshop, will still\nwant to have the computations happening on the desktop. But if you look at the\nkind of things most people use computers for, a tenth of a second latency\nwould not be a problem. My mother doesn't really need a desktop computer, and\nthere are a lot of people like her.  \n  \n**The Win for Users**  \n  \nNear my house there is a car with a bumper sticker that reads \"death before\ninconvenience.\" Most people, most of the time, will take whatever choice\nrequires least work. If Web-based software wins, it will be because it's more\nconvenient. And it looks as if it will be, for users and developers both.  \n  \nTo use a purely Web-based application, all you need is a browser connected to\nthe Internet. So you can use a Web-based application anywhere. When you\ninstall software on your desktop computer, you can only use it on that\ncomputer. Worse still, your files are trapped on that computer. The\ninconvenience of this model becomes more and more evident as people get used\nto networks.  \n  \nThe thin end of the wedge here was Web-based email. Millions of people now\nrealize that you should have access to email messages no matter where you are.\nAnd if you can see your email, why not your calendar? If you can discuss a\ndocument with your colleagues, why can't you edit it? Why should any of your\ndata be trapped on some computer sitting on a faraway desk?  \n  \nThe whole idea of \"your computer\" is going away, and being replaced with \"your\ndata.\" You should be able to get at your data from any computer. Or rather,\nany client, and a client doesn't have to be a computer.  \n  \nClients shouldn't store data; they should be like telephones. In fact they may\nbecome telephones, or vice versa. And as clients get smaller, you have another\nreason not to keep your data on them: something you carry around with you can\nbe lost or stolen. Leaving your PDA in a taxi is like a disk crash, except\nthat your data is handed to [someone\nelse](http://news.zdnet.co.uk/business/0,39020645,2077931,00.htm) instead of\nbeing vaporized.  \n  \nWith purely Web-based software, neither your data nor the applications are\nkept on the client. So you don't have to install anything to use it. And when\nthere's no installation, you don't have to worry about installation going\nwrong. There can't be incompatibilities between the application and your\noperating system, because the software doesn't run on your operating system.  \n  \nBecause it needs no installation, it will be easy, and common, to try Web-\nbased software before you \"buy\" it. You should expect to be able to test-drive\nany Web-based application for free, just by going to the site where it's\noffered. At Viaweb our whole site was like a big arrow pointing users to the\ntest drive.  \n  \nAfter trying the demo, signing up for the service should require nothing more\nthan filling out a brief form (the briefer the better). And that should be the\nlast work the user has to do. With Web-based software, you should get new\nreleases without paying extra, or doing any work, or possibly even knowing\nabout it.  \n  \nUpgrades won't be the big shocks they are now. Over time applications will\nquietly grow more powerful. This will take some effort on the part of the\ndevelopers. They will have to design software so that it can be updated\nwithout confusing the users. That's a new problem, but there are ways to solve\nit.  \n  \nWith Web-based applications, everyone uses the same version, and bugs can be\nfixed as soon as they're discovered. So Web-based software should have far\nfewer bugs than desktop software. At Viaweb, I doubt we ever had ten known\nbugs at any one time. That's orders of magnitude better than desktop software.  \n  \nWeb-based applications can be used by several people at the same time. This is\nan obvious win for collaborative applications, but I bet users will start to\nwant this in most applications once they realize it's possible. It will often\nbe useful to let two people edit the same document, for example. Viaweb let\nmultiple users edit a site simultaneously, more because that was the right way\nto write the software than because we expected users to want to, but it turned\nout that many did.  \n  \nWhen you use a Web-based application, your data will be safer. Disk crashes\nwon't be a thing of the past, but users won't hear about them anymore. They'll\nhappen within server farms. And companies offering Web-based applications will\nactually do backups-- not only because they'll have real system administrators\nworrying about such things, but because an ASP that does lose people's data\nwill be in big, big trouble. When people lose their own data in a disk crash,\nthey can't get that mad, because they only have themselves to be mad at. When\na company loses their data for them, they'll get a lot madder.  \n  \nFinally, Web-based software should be less vulnerable to viruses. If the\nclient doesn't run anything except a browser, there's less chance of running\nviruses, and no data locally to damage. And a program that attacked the\nservers themselves should find them very well defended. [2]  \n  \nFor users, Web-based software will be _less stressful._ I think if you looked\ninside the average Windows user you'd find a huge and pretty much untapped\ndesire for software meeting that description. Unleashed, it could be a\npowerful force.  \n  \n**City of Code**  \n  \nTo developers, the most conspicuous difference between Web-based and desktop\nsoftware is that a Web-based application is not a single piece of code. It\nwill be a collection of programs of different types rather than a single big\nbinary. And so designing Web-based software is like desiging a city rather\nthan a building: as well as buildings you need roads, street signs, utilities,\npolice and fire departments, and plans for both growth and various kinds of\ndisasters.  \n  \nAt Viaweb, software included fairly big applications that users talked to\ndirectly, programs that those programs used, programs that ran constantly in\nthe background looking for problems, programs that tried to restart things if\nthey broke, programs that ran occasionally to compile statistics or build\nindexes for searches, programs we ran explicitly to garbage-collect resources\nor to move or restore data, programs that pretended to be users (to measure\nperformance or expose bugs), programs for diagnosing network troubles,\nprograms for doing backups, interfaces to outside services, software that\ndrove an impressive collection of dials displaying real-time server statistics\n(a hit with visitors, but indispensable for us too), modifications (including\nbug fixes) to open-source software, and a great many configuration files and\nsettings. Trevor Blackwell wrote a spectacular program for moving stores to\nnew servers across the country, without shutting them down, after we were\nbought by Yahoo. Programs paged us, sent faxes and email to users, conducted\ntransactions with credit card processors, and talked to one another through\nsockets, pipes, http requests, ssh, udp packets, shared memory, and files.\nSome of Viaweb even consisted of the absence of programs, since one of the\nkeys to Unix security is not to run unnecessary utilities that people might\nuse to break into your servers.  \n  \nIt did not end with software. We spent a lot of time thinking about server\nconfigurations. We built the servers ourselves, from components-- partly to\nsave money, and partly to get exactly what we wanted. We had to think about\nwhether our upstream ISP had fast enough connections to all the backbones. We\nserially\n[dated](http://groups.google.com/groups?selm=6hdipo%243o0%241%40FreeBSD.csie.NCTU.edu.tw)\nRAID suppliers.  \n  \nBut hardware is not just something to worry about. When you control it you can\ndo more for users. With a desktop application, you can specify certain minimum\nhardware, but you can't add more. If you administer the servers, you can in\none step enable all your users to page people, or send faxes, or send commands\nby phone, or process credit cards, etc, just by installing the relevant\nhardware. We always looked for new ways to add features with hardware, not\njust because it pleased users, but also as a way to distinguish ourselves from\ncompetitors who (either because they sold desktop software, or resold Web-\nbased applications through ISPs) didn't have direct control over the hardware.  \n  \nBecause the software in a Web-based application will be a collection of\nprograms rather than a single binary, it can be written in any number of\ndifferent languages. When you're writing desktop software, you're practically\nforced to write the application in the same language as the underlying\noperating system-- meaning C and C++. And so these languages (especially among\nnontechnical people like managers and VCs) got to be considered as the\nlanguages for \"serious\" software development. But that was just an artifact of\nthe way desktop software had to be delivered. For server-based software you\ncan use any language you want. [3] Today a lot of the top hackers are using\nlanguages far removed from C and C++: Perl, Python, and even Lisp.  \n  \nWith server-based software, no one can tell you what language to use, because\nyou control the whole system, right down to the hardware. Different languages\nare good for different tasks. You can use whichever is best for each. And when\nyou have competitors, \"you can\" means \"you must\" (we'll return to this later),\nbecause if you don't take advantage of this possibility, your competitors\nwill.  \n  \nMost of our competitors used C and C++, and this made their software visibly\ninferior because (among other things), they had no way around the\nstatelessness of CGI scripts. If you were going to change something, all the\nchanges had to happen on one page, with an Update button at the bottom. As\nI've written elsewhere, by using [Lisp](avg.html), which many people still\nconsider a research language, we could make the Viaweb editor behave more like\ndesktop software.  \n  \n**Releases**  \n  \nOne of the most important changes in this new world is the way you do\nreleases. In the desktop software business, doing a release is a huge trauma,\nin which the whole company sweats and strains to push out a single, giant\npiece of code. Obvious comparisons suggest themselves, both to the process and\nthe resulting product.  \n  \nWith server-based software, you can make changes almost as you would in a\nprogram you were writing for yourself. You release software as a series of\nincremental changes instead of an occasional big explosion. A typical desktop\nsoftware company might do one or two releases a year. At Viaweb we often did\nthree to five releases a day.  \n  \nWhen you switch to this new model, you realize how much software development\nis affected by the way it is released. Many of the nastiest problems you see\nin the desktop software business are due to catastrophic nature of releases.  \n  \nWhen you release only one new version a year, you tend to deal with bugs\nwholesale. Some time before the release date you assemble a new version in\nwhich half the code has been torn out and replaced, introducing countless\nbugs. Then a squad of QA people step in and start counting them, and the\nprogrammers work down the list, fixing them. They do not generally get to the\nend of the list, and indeed, no one is sure where the end is. It's like\nfishing rubble out of a pond. You never really know what's happening inside\nthe software. At best you end up with a statistical sort of correctness.  \n  \nWith server-based software, most of the change is small and incremental. That\nin itself is less likely to introduce bugs. It also means you know what to\ntest most carefully when you're about to release software: the last thing you\nchanged. You end up with a much firmer grip on the code. As a general rule,\nyou do know what's happening inside it. You don't have the source code\nmemorized, of course, but when you read the source you do it like a pilot\nscanning the instrument panel, not like a detective trying to unravel some\nmystery.  \n  \nDesktop software breeds a certain fatalism about bugs. You know that you're\nshipping something loaded with bugs, and you've even set up mechanisms to\ncompensate for it (e.g. patch releases). So why worry about a few more? Soon\nyou're releasing whole features you know are broken.\n[Apple](http://news.cnet.com/news/0-1006-200-5195914.html) did this earlier\nthis year. They felt under pressure to release their new OS, whose release\ndate had already slipped four times, but some of the software (support for CDs\nand DVDs) wasn't ready. The solution? They released the OS without the\nunfinished parts, and users will have to install them later.  \n  \nWith Web-based software, you never have to release software before it works,\nand you can release it as soon as it does work.  \n  \nThe industry veteran may be thinking, it's a fine-sounding idea to say that\nyou never have to release software before it works, but what happens when\nyou've promised to deliver a new version of your software by a certain date?\nWith Web-based software, you wouldn't make such a promise, because there are\nno versions. Your software changes gradually and continuously. Some changes\nmight be bigger than others, but the idea of versions just doesn't naturally\nfit onto Web-based software.  \n  \nIf anyone remembers Viaweb this might sound odd, because we were always\nannouncing new versions. This was done entirely for PR purposes. The trade\npress, we learned, thinks in version numbers. They will give you major\ncoverage for a major release, meaning a new first digit on the version number,\nand generally a paragraph at most for a point release, meaning a new digit\nafter the decimal point.  \n  \nSome of our competitors were offering desktop software and actually had\nversion numbers. And for these releases, the mere fact of which seemed to us\nevidence of their backwardness, they would get all kinds of publicity. We\ndidn't want to miss out, so we started giving version numbers to our software\ntoo. When we wanted some publicity, we'd make a list of all the features we'd\nadded since the last \"release,\" stick a new version number on the software,\nand issue a press release saying that the new version was available\nimmediately. Amazingly, no one ever called us on it.  \n  \nBy the time we were bought, we had done this three times, so we were on\nVersion 4. Version 4.1 if I remember correctly. After Viaweb became Yahoo\nStore, there was no longer such a desperate need for publicity, so although\nthe software continued to evolve, the whole idea of version numbers was\nquietly dropped.  \n  \n**Bugs**  \n  \nThe other major technical advantage of Web-based software is that you can\nreproduce most bugs. You have the users' data right there on your disk. If\nsomeone breaks your software, you don't have to try to guess what's going on,\nas you would with desktop software: you should be able to reproduce the error\nwhile they're on the phone with you. You might even know about it already, if\nyou have code for noticing errors built into your application.  \n  \nWeb-based software gets used round the clock, so everything you do is\nimmediately put through the wringer. Bugs turn up quickly.  \n  \nSoftware companies are sometimes accused of letting the users debug their\nsoftware. And that is just what I'm advocating. For Web-based software it's\nactually a good plan, because the bugs are fewer and transient. When you\nrelease software gradually you get far fewer bugs to start with. And when you\ncan reproduce errors and release changes instantly, you can find and fix most\nbugs as soon as they appear. We never had enough bugs at any one time to\nbother with a formal bug-tracking system.  \n  \nYou should test changes before you release them, of course, so no major bugs\nshould get released. Those few that inevitably slip through will involve\nborderline cases and will only affect the few users that encounter them before\nsomeone calls in to complain. As long as you fix bugs right away, the net\neffect, for the average user, is far fewer bugs. I doubt the average Viaweb\nuser ever saw a bug.  \n  \nFixing fresh bugs is easier than fixing old ones. It's usually fairly quick to\nfind a bug in code you just wrote. When it turns up you often know what's\nwrong before you even look at the source, because you were already worrying\nabout it subconsciously. Fixing a bug in something you wrote six months ago\n(the average case if you release once a year) is a lot more work. And since\nyou don't understand the code as well, you're more likely to fix it in an ugly\nway, or even introduce more bugs. [4]  \n  \nWhen you catch bugs early, you also get fewer compound bugs. Compound bugs are\ntwo separate bugs that interact: you trip going downstairs, and when you reach\nfor the handrail it comes off in your hand. In software this kind of bug is\nthe hardest to find, and also tends to have the worst consequences. [5] The\ntraditional \"break everything and then filter out the bugs\" approach\ninherently yields a lot of compound bugs. And software that's released in a\nseries of small changes inherently tends not to. The floors are constantly\nbeing swept clean of any loose objects that might later get stuck in\nsomething.  \n  \nIt helps if you use a technique called functional programming. Functional\nprogramming means avoiding side-effects. It's something you're more likely to\nsee in research papers than commercial software, but for Web-based\napplications it turns out to be really useful. It's hard to write entire\nprograms as purely functional code, but you can write substantial chunks this\nway. It makes those parts of your software easier to test, because they have\nno state, and that is very convenient in a situation where you are constantly\nmaking and testing small modifications. I wrote much of Viaweb's editor in\nthis style, and we made our scripting language,\n[RTML](http://store.yahoo.com/rtml.html), a purely functional language.  \n  \nPeople from the desktop software business will find this hard to credit, but\nat Viaweb bugs became almost a game. Since most released bugs involved\nborderline cases, the users who encountered them were likely to be advanced\nusers, pushing the envelope. Advanced users are more forgiving about bugs,\nespecially since you probably introduced them in the course of adding some\nfeature they were asking for. In fact, because bugs were rare and you had to\nbe doing sophisticated things to see them, advanced users were often proud to\ncatch one. They would call support in a spirit more of triumph than anger, as\nif they had scored points off us.  \n  \n**Support**  \n  \nWhen you can reproduce errors, it changes your approach to customer support.\nAt most software companies, support is offered as a way to make customers feel\nbetter. They're either calling you about a known bug, or they're just doing\nsomething wrong and you have to figure out what. In either case there's not\nmuch you can learn from them. And so you tend to view support calls as a pain\nin the ass that you want to isolate from your developers as much as possible.  \n  \nThis was not how things worked at Viaweb. At Viaweb, support was free, because\nwe wanted to hear from customers. If someone had a problem, we wanted to know\nabout it right away so that we could reproduce the error and release a fix.  \n  \nSo at Viaweb the developers were always in close contact with support. The\ncustomer support people were about thirty feet away from the programmers, and\nknew that they could always interrupt anything with a report of a genuine bug.\nWe would leave a board meeting to fix a serious bug.  \n  \nOur approach to support made everyone happier. The customers were delighted.\nJust imagine how it would feel to call a support line and be treated as\nsomeone bringing important news. The customer support people liked it because\nit meant they could help the users, instead of reading scripts to them. And\nthe programmers liked it because they could reproduce bugs instead of just\nhearing vague second-hand reports about them.  \n  \nOur policy of fixing bugs on the fly changed the relationship between customer\nsupport people and hackers. At most software companies, support people are\nunderpaid human shields, and hackers are little copies of God the Father,\ncreators of the world. Whatever the procedure for reporting bugs, it is likely\nto be one-directional: support people who hear about bugs fill out some form\nthat eventually gets passed on (possibly via QA) to programmers, who put it on\ntheir list of things to do. It was very different at Viaweb. Within a minute\nof hearing about a bug from a customer, the support people could be standing\nnext to a programmer hearing him say \"Shit, you're right, it's a bug.\" It\ndelighted the support people to hear that \"you're right\" from the hackers.\nThey used to bring us bugs with the same expectant air as a cat bringing you a\nmouse it has just killed. It also made them more careful in judging the\nseriousness of a bug, because now their honor was on the line.  \n  \nAfter we were bought by Yahoo, the customer support people were moved far away\nfrom the programmers. It was only then that we realized that they were\neffectively QA and to some extent marketing as well. In addition to catching\nbugs, they were the keepers of the knowledge of vaguer, buglike things, like\nfeatures that confused users. [6] They were also a kind of proxy focus group;\nwe could ask them which of two new features users wanted more, and they were\nalways right.  \n  \n**Morale**  \n  \nBeing able to release software immediately is a big motivator. Often as I was\nwalking to work I would think of some change I wanted to make to the software,\nand do it that day. This worked for bigger features as well. Even if something\nwas going to take two weeks to write (few projects took longer), I knew I\ncould see the effect in the software as soon as it was done.  \n  \nIf I'd had to wait a year for the next release, I would have shelved most of\nthese ideas, for a while at least. The thing about ideas, though, is that they\nlead to more ideas. Have you ever noticed that when you sit down to write\nsomething, half the ideas that end up in it are ones you thought of while\nwriting it? The same thing happens with software. Working to implement one\nidea gives you more ideas. So shelving an idea costs you not only that delay\nin implementing it, but also all the ideas that implementing it would have led\nto. In fact, shelving an idea probably even inhibits new ideas: as you start\nto think of some new feature, you catch sight of the shelf and think \"but I\nalready have a lot of new things I want to do for the next release.\"  \n  \nWhat big companies do instead of implementing features is plan them. At Viaweb\nwe sometimes ran into trouble on this account. Investors and analysts would\nask us what we had planned for the future. The truthful answer would have\nbeen, we didn't have any plans. We had general ideas about things we wanted to\nimprove, but if we knew how we would have done it already. What were we going\nto do in the next six months? Whatever looked like the biggest win. I don't\nknow if I ever dared give this answer, but that was the truth. Plans are just\nanother word for ideas on the shelf. When we thought of good ideas, we\nimplemented them.  \n  \nAt Viaweb, as at many software companies, most code had one definite owner.\nBut when you owned something you really owned it: no one except the owner of a\npiece of software had to approve (or even know about) a release. There was no\nprotection against breakage except the fear of looking like an idiot to one's\npeers, and that was more than enough. I may have given the impression that we\njust blithely plowed forward writing code. We did go fast, but we thought very\ncarefully before we released software onto those servers. And paying attention\nis more important to reliability than moving slowly. Because he pays close\nattention, a Navy pilot can land a 40,000 lb. aircraft at 140 miles per hour\non a pitching carrier deck, at night, more safely than the average teenager\ncan cut a bagel.  \n  \nThis way of writing software is a double-edged sword of course. It works a lot\nbetter for a small team of good, trusted programmers than it would for a big\ncompany of mediocre ones, where bad ideas are caught by committees instead of\nthe people that had them.  \n  \n**Brooks in Reverse**  \n  \nFortunately, Web-based software does require fewer programmers. I once worked\nfor a medium-sized desktop software company that had over 100 people working\nin engineering as a whole. Only 13 of these were in product development. All\nthe rest were working on releases, ports, and so on. With Web-based software,\nall you need (at most) are the 13 people, because there are no releases,\nports, and so on.  \n  \nViaweb was written by just three people. [7] I was always under pressure to\nhire more, because we wanted to get bought, and we knew that buyers would have\na hard time paying a high price for a company with only three programmers.\n(Solution: we hired more, but created new projects for them.)  \n  \nWhen you can write software with fewer programmers, it saves you more than\nmoney. As Fred Brooks pointed out in _The Mythical Man-Month,_ adding people\nto a project tends to slow it down. The number of possible connections between\ndevelopers grows exponentially with the size of the group. The larger the\ngroup, the more time they'll spend in meetings negotiating how their software\nwill work together, and the more bugs they'll get from unforeseen\ninteractions. Fortunately, this process also works in reverse: as groups get\nsmaller, software development gets exponentially more efficient. I can't\nremember the programmers at Viaweb ever having an actual meeting. We never had\nmore to say at any one time than we could say as we were walking to lunch.  \n  \nIf there is a downside here, it is that all the programmers have to be to some\ndegree system administrators as well. When you're hosting software, someone\nhas to be watching the servers, and in practice the only people who can do\nthis properly are the ones who wrote the software. At Viaweb our system had so\nmany components and changed so frequently that there was no definite border\nbetween software and infrastructure. Arbitrarily declaring such a border would\nhave constrained our design choices. And so although we were constantly hoping\nthat one day (\"in a couple months\") everything would be stable enough that we\ncould hire someone whose job was just to worry about the servers, it never\nhappened.  \n  \nI don't think it could be any other way, as long as you're still actively\ndeveloping the product. Web-based software is never going to be something you\nwrite, check in, and go home. It's a live thing, running on your servers right\nnow. A bad bug might not just crash one user's process; it could crash them\nall. If a bug in your code corrupts some data on disk, you have to fix it. And\nso on. We found that you don't have to watch the servers every minute (after\nthe first year or so), but you definitely want to keep an eye on things you've\nchanged recently. You don't release code late at night and then go home.  \n  \n**Watching Users**  \n  \nWith server-based software, you're in closer touch with your code. You can\nalso be in closer touch with your users. Intuit is famous for introducing\nthemselves to customers at retail stores and asking to follow them home. If\nyou've ever watched someone use your software for the first time, you know\nwhat surprises must have awaited them.  \n  \nSoftware should do what users think it will. But you can't have any idea what\nusers will be thinking, believe me, until you watch them. And server-based\nsoftware gives you unprecedented information about their behavior. You're not\nlimited to small, artificial focus groups. You can see every click made by\nevery user. You have to consider carefully what you're going to look at,\nbecause you don't want to violate users' privacy, but even the most general\nstatistical sampling can be very useful.  \n  \nWhen you have the users on your server, you don't have to rely on benchmarks,\nfor example. Benchmarks are simulated users. With server-based software, you\ncan watch actual users. To decide what to optimize, just log into a server and\nsee what's consuming all the CPU. And you know when to stop optimizing too: we\neventually got the Viaweb editor to the point where it was memory-bound rather\nthan CPU-bound, and since there was nothing we could do to decrease the size\nof users' data (well, nothing easy), we knew we might as well stop there.  \n  \nEfficiency matters for server-based software, because you're paying for the\nhardware. The number of users you can support per server is the divisor of\nyour capital cost, so if you can make your software very efficient you can\nundersell competitors and still make a profit. At Viaweb we got the capital\ncost per user down to about $5. It would be less now, probably less than the\ncost of sending them the first month's bill. Hardware is free now, if your\nsoftware is reasonably efficient.  \n  \nWatching users can guide you in design as well as optimization. Viaweb had a\nscripting language called RTML that let advanced users define their own page\nstyles. We found that RTML became a kind of suggestion box, because users only\nused it when the predefined page styles couldn't do what they wanted.\nOriginally the editor put button bars across the page, for example, but after\na number of users used RTML to put buttons down the left\n[side](https://sep.turbifycdn.com/ca/I/paulgraham_1656_3563), we made that an\noption (in fact the default) in the predefined page styles.  \n  \nFinally, by watching users you can often tell when they're in trouble. And\nsince the customer is always right, that's a sign of something you need to\nfix. At Viaweb the key to getting users was the online test drive. It was not\njust a series of slides built by marketing people. In our test drive, users\nactually used the software. It took about five minutes, and at the end of it\nthey had built a real, working store.  \n  \nThe test drive was the way we got nearly all our new users. I think it will be\nthe same for most Web-based applications. If users can get through a test\ndrive successfully, they'll like the product. If they get confused or bored,\nthey won't. So anything we could do to get more people through the test drive\nwould increase our growth rate.  \n  \nI studied click trails of people taking the test drive and found that at a\ncertain step they would get confused and click on the browser's Back button.\n(If you try writing Web-based applications, you'll find that the Back button\nbecomes one of your most interesting philosophical problems.) So I added a\nmessage at that point, telling users that they were nearly finished, and\nreminding them not to click on the Back button. Another great thing about Web-\nbased software is that you get instant feedback from changes: the number of\npeople completing the test drive rose immediately from 60% to 90%. And since\nthe number of new users was a function of the number of completed test drives,\nour revenue growth increased by 50%, just from that change.  \n  \n**Money**  \n  \nIn the early 1990s I read an article in which someone said that software was a\nsubscription business. At first this seemed a very cynical statement. But\nlater I realized that it reflects reality: software development is an ongoing\nprocess. I think it's cleaner if you openly charge subscription fees, instead\nof forcing people to keep buying and installing new versions so that they'll\nkeep paying you. And fortunately, subscriptions are the natural way to bill\nfor Web-based applications.  \n  \nHosting applications is an area where companies will play a role that is not\nlikely to be filled by freeware. Hosting applications is a lot of stress, and\nhas real expenses. No one is going to want to do it for free.  \n  \nFor companies, Web-based applications are an ideal source of revenue. Instead\nof starting each quarter with a blank slate, you have a recurring revenue\nstream. Because your software evolves gradually, you don't have to worry that\na new model will flop; there never need be a new model, per se, and if you do\nsomething to the software that users hate, you'll know right away. You have no\ntrouble with uncollectable bills; if someone won't pay you can just turn off\nthe service. And there is no possibility of piracy.  \n  \nThat last \"advantage\" may turn out to be a problem. Some amount of piracy is\nto the advantage of software companies. If some user really would not have\nbought your software at any price, you haven't lost anything if he uses a\npirated copy. In fact you gain, because he is one more user helping to make\nyour software the standard-- or who might buy a copy later, when he graduates\nfrom high school.  \n  \nWhen they can, companies like to do something called price discrimination,\nwhich means charging each customer as much as they can afford. [8] Software is\nparticularly suitable for price discrimination, because the marginal cost is\nclose to zero. This is why some software costs more to run on Suns than on\nIntel boxes: a company that uses Suns is not interested in saving money and\ncan safely be charged more. Piracy is effectively the lowest tier of price\ndiscrimination. I think that software companies understand this and\ndeliberately turn a blind eye to some kinds of piracy. [9] With server-based\nsoftware they are going to have to come up with some other solution.  \n  \nWeb-based software sells well, especially in comparison to desktop software,\nbecause it's easy to buy. You might think that people decide to buy something,\nand then buy it, as two separate steps. That's what I thought before Viaweb,\nto the extent I thought about the question at all. In fact the second step can\npropagate back into the first: if something is hard to buy, people will change\ntheir mind about whether they wanted it. And vice versa: you'll sell more of\nsomething when it's easy to buy. I buy more books because Amazon exists. Web-\nbased software is just about the easiest thing in the world to buy, especially\nif you have just done an online demo. Users should not have to do much more\nthan enter a credit card number. (Make them do more at your peril.)  \n  \nSometimes Web-based software is offered through ISPs acting as resellers. This\nis a bad idea. You have to be administering the servers, because you need to\nbe constantly improving both hardware and software. If you give up direct\ncontrol of the servers, you give up most of the advantages of developing Web-\nbased applications.  \n  \nSeveral of our competitors shot themselves in the foot this way-- usually, I\nthink, because they were overrun by suits who were excited about this huge\npotential channel, and didn't realize that it would ruin the product they\nhoped to sell through it. Selling Web-based software through ISPs is like\nselling sushi through vending machines.  \n  \n**Customers**  \n  \nWho will the customers be? At Viaweb they were initially individuals and\nsmaller companies, and I think this will be the rule with Web-based\napplications. These are the users who are ready to try new things, partly\nbecause they're more flexible, and partly because they want the lower costs of\nnew technology.  \n  \nWeb-based applications will often be the best thing for big companies too\n(though they'll be slow to realize it). The best intranet is the Internet. If\na company uses true Web-based applications, the software will work better, the\nservers will be better administered, and employees will have access to the\nsystem from anywhere.  \n  \nThe argument against this approach usually hinges on security: if access is\neasier for employees, it will be for bad guys too. Some larger merchants were\nreluctant to use Viaweb because they thought customers' credit card\ninformation would be safer on their own servers. It was not easy to make this\npoint diplomatically, but in fact the data was almost certainly safer in our\nhands than theirs. Who can hire better people to manage security, a technology\nstartup whose whole business is running servers, or a clothing retailer? Not\nonly did we have better people worrying about security, we worried more about\nit. If someone broke into the clothing retailer's servers, it would affect at\nmost one merchant, could probably be hushed up, and in the worst case might\nget one person fired. If someone broke into ours, it could affect thousands of\nmerchants, would probably end up as news on CNet, and could put us out of\nbusiness.  \n  \nIf you want to keep your money safe, do you keep it under your mattress at\nhome, or put it in a bank? This argument applies to every aspect of server\nadministration: not just security, but uptime, bandwidth, load management,\nbackups, etc. Our existence depended on doing these things right. Server\nproblems were the big no-no for us, like a dangerous toy would be for a toy\nmaker, or a salmonella outbreak for a food processor.  \n  \nA big company that uses Web-based applications is to that extent outsourcing\nIT. Drastic as it sounds, I think this is generally a good idea. Companies are\nlikely to get better service this way than they would from in-house system\nadministrators. System administrators can become cranky and unresponsive\nbecause they're not directly exposed to competitive pressure: a salesman has\nto deal with customers, and a developer has to deal with competitors'\nsoftware, but a system administrator, like an old bachelor, has few external\nforces to keep him in line. [10] At Viaweb we had external forces in plenty to\nkeep us in line. The people calling us were customers, not just co-workers. If\na server got wedged, we jumped; just thinking about it gives me a jolt of\nadrenaline, years later.  \n  \nSo Web-based applications will ordinarily be the right answer for big\ncompanies too. They will be the last to realize it, however, just as they were\nwith desktop computers. And partly for the same reason: it will be worth a lot\nof money to convince big companies that they need something more expensive.  \n  \nThere is always a tendency for rich customers to buy expensive solutions, even\nwhen cheap solutions are better, because the people offering expensive\nsolutions can spend more to sell them. At Viaweb we were always up against\nthis. We lost several high-end merchants to Web consulting firms who convinced\nthem they'd be better off if they paid half a million dollars for a custom-\nmade online store on their own server. They were, as a rule, not better off,\nas more than one discovered when Christmas shopping season came around and\nloads rose on their server. Viaweb was a lot more sophisticated than what most\nof these merchants got, but we couldn't afford to tell them. At $300 a month,\nwe couldn't afford to send a team of well-dressed and authoritative-sounding\npeople to make presentations to customers.  \n  \nA large part of what big companies pay extra for is the cost of selling\nexpensive things to them. (If the Defense Department pays a thousand dollars\nfor toilet seats, it's partly because it costs a lot to sell toilet seats for\na thousand dollars.) And this is one reason intranet software will continue to\nthrive, even though it is probably a bad idea. It's simply more expensive.\nThere is nothing you can do about this conundrum, so the best plan is to go\nfor the smaller customers first. The rest will come in time.  \n  \n**Son of Server**  \n  \nRunning software on the server is nothing new. In fact it's the old model:\nmainframe applications are all server-based. If server-based software is such\na good idea, why did it lose last time? Why did desktop computers eclipse\nmainframes?  \n  \nAt first desktop computers didn't look like much of a threat. The first users\nwere all hackers-- or hobbyists, as they were called then. They liked\nmicrocomputers because they were cheap. For the first time, you could have\nyour own computer. The phrase \"personal computer\" is part of the language now,\nbut when it was first used it had a deliberately audacious sound, like the\nphrase \"personal satellite\" would today.  \n  \nWhy did desktop computers take over? I think it was because they had better\nsoftware. And I think the reason microcomputer software was better was that it\ncould be written by small companies.  \n  \nI don't think many people realize how fragile and tentative startups are in\nthe earliest stage. Many startups begin almost by accident-- as a couple guys,\neither with day jobs or in school, writing a prototype of something that\nmight, if it looks promising, turn into a company. At this larval stage, any\nsignificant obstacle will stop the startup dead in its tracks. Writing\nmainframe software required too much commitment up front. Development machines\nwere expensive, and because the customers would be big companies, you'd need\nan impressive-looking sales force to sell it to them. Starting a startup to\nwrite mainframe software would be a much more serious undertaking than just\nhacking something together on your Apple II in the evenings. And so you didn't\nget a lot of startups writing mainframe applications.  \n  \nThe arrival of desktop computers inspired a lot of new software, because\nwriting applications for them seemed an attainable goal to larval startups.\nDevelopment was cheap, and the customers would be individual people that you\ncould reach through computer stores or even by mail-order.  \n  \nThe application that pushed desktop computers out into the mainstream was\n[VisiCalc](http://www.bricklin.com/visicalc.htm), the first spreadsheet. It\nwas written by two guys working in an attic, and yet did things no mainframe\nsoftware could do. [11] VisiCalc was such an advance, in its time, that people\nbought Apple IIs just to run it. And this was the beginning of a trend:\ndesktop computers won because startups wrote software for them.  \n  \nIt looks as if server-based software will be good this time around, because\nstartups will write it. Computers are so cheap now that you can get started,\nas we did, using a desktop computer as a server. Inexpensive processors have\neaten the workstation market (you rarely even hear the word now) and are most\nof the way through the server market; Yahoo's servers, which deal with loads\nas high as any on the Internet, all have the same inexpensive Intel processors\nthat you have in your desktop machine. And once you've written the software,\nall you need to sell it is a Web site. Nearly all our users came direct to our\nsite through word of mouth and references in the press. [12]  \n  \nViaweb was a typical larval startup. We were terrified of starting a company,\nand for the first few months comforted ourselves by treating the whole thing\nas an experiment that we might call off at any moment. Fortunately, there were\nfew obstacles except technical ones. While we were writing the software, our\nWeb server was the same desktop machine we used for development, connected to\nthe outside world by a dialup line. Our only expenses in that phase were food\nand rent.  \n  \nThere is all the more reason for startups to write Web-based software now,\nbecause writing desktop software has become a lot less fun. If you want to\nwrite desktop software now you do it on Microsoft's terms, calling their APIs\nand working around their buggy OS. And if you manage to write something that\ntakes off, you may find that you were merely doing market research for\nMicrosoft.  \n  \nIf a company wants to make a platform that startups will build on, they have\nto make it something that hackers themselves will want to use. That means it\nhas to be inexpensive and well-designed. The Mac was popular with hackers when\nit first came out, and a lot of them wrote software for it. [13] You see this\nless with Windows, because hackers don't use it. The kind of people who are\ngood at writing software tend to be running Linux or FreeBSD now.  \n  \nI don't think we would have started a startup to write desktop software,\nbecause desktop software has to run on Windows, and before we could write\nsoftware for Windows we'd have to use it. The Web let us do an end-run around\nWindows, and deliver software running on Unix direct to users through the\nbrowser. That is a liberating prospect, a lot like the arrival of PCs twenty-\nfive years ago.  \n  \n**Microsoft**  \n  \nBack when desktop computers arrived, IBM was the giant that everyone was\nafraid of. It's hard to imagine now, but I remember the feeling very well. Now\nthe frightening giant is Microsoft, and I don't think they are as blind to the\nthreat facing them as IBM was. After all, Microsoft deliberately built their\nbusiness in IBM's blind spot.  \n  \nI mentioned earlier that my mother doesn't really need a desktop computer.\nMost users probably don't. That's a problem for Microsoft, and they know it.\nIf applications run on remote servers, no one needs Windows. What will\nMicrosoft do? Will they be able to use their control of the desktop to\nprevent, or constrain, this new generation of software?  \n  \nMy guess is that Microsoft will develop some kind of server/desktop hybrid,\nwhere the operating system works together with servers they control. At a\nminimum, files will be centrally available for users who want that. I don't\nexpect Microsoft to go all the way to the extreme of doing the computations on\nthe server, with only a browser for a client, if they can avoid it. If you\nonly need a browser for a client, you don't need Microsoft on the client, and\nif Microsoft doesn't control the client, they can't push users towards their\nserver-based applications.  \n  \nI think Microsoft will have a hard time keeping the genie in the bottle. There\nwill be too many different types of clients for them to control them all. And\nif Microsoft's applications only work with some clients, competitors will be\nable to trump them by offering applications that work from any client. [14]  \n  \nIn a world of Web-based applications, there is no automatic place for\nMicrosoft. They may succeed in making themselves a place, but I don't think\nthey'll dominate this new world as they did the world of desktop applications.  \n  \nIt's not so much that a competitor will trip them up as that they will trip\nover themselves. With the rise of Web-based software, they will be facing not\njust technical problems but their own wishful thinking. What they need to do\nis cannibalize their existing business, and I can't see them facing that. The\nsame single-mindedness that has brought them this far will now be working\nagainst them. IBM was in exactly the same situation, and they could not master\nit. IBM made a late and half-hearted entry into the microcomputer business\nbecause they were ambivalent about threatening their cash cow, mainframe\ncomputing. Microsoft will likewise be hampered by wanting to save the desktop.\nA cash cow can be a damned heavy monkey on your back.  \n  \nI'm not saying that no one will dominate server-based applications. Someone\nprobably will eventually. But I think that there will be a good long period of\ncheerful chaos, just as there was in the early days of microcomputers. That\nwas a good time for startups. Lots of small companies flourished, and did it\nby making cool things.  \n  \n**Startups but More So**  \n  \nThe classic startup is fast and informal, with few people and little money.\nThose few people work very hard, and technology magnifies the effect of the\ndecisions they make. If they win, they win big.  \n  \nIn a startup writing Web-based applications, everything you associate with\nstartups is taken to an extreme. You can write and launch a product with even\nfewer people and even less money. You have to be even faster, and you can get\naway with being more informal. You can literally launch your product as three\nguys sitting in the living room of an apartment, and a server collocated at an\nISP. We did.  \n  \nOver time the teams have gotten smaller, faster, and more informal. In 1960,\nsoftware development meant a roomful of men with horn rimmed glasses and\nnarrow black neckties, industriously writing ten lines of code a day on IBM\ncoding forms. In 1980, it was a team of eight to ten people wearing jeans to\nthe office and typing into vt100s. Now it's a couple of guys sitting in a\nliving room with laptops. (And jeans turn out not to be the last word in\ninformality.)  \n  \nStartups are stressful, and this, unfortunately, is also taken to an extreme\nwith Web-based applications. Many software companies, especially at the\nbeginning, have periods where the developers slept under their desks and so\non. The alarming thing about Web-based software is that there is nothing to\nprevent this becoming the default. The stories about sleeping under desks\nusually end: then at last we shipped it and we all went home and slept for a\nweek. Web-based software never ships. You can work 16-hour days for as long as\nyou want to. And because you can, and your competitors can, you tend to be\nforced to. You can, so you must. It's Parkinson's Law running in reverse.  \n  \nThe worst thing is not the hours but the responsibility. Programmers and\nsystem administrators traditionally each have their own separate worries.\nProgrammers have to worry about bugs, and system administrators have to worry\nabout infrastructure. Programmers may spend a long day up to their elbows in\nsource code, but at some point they get to go home and forget about it. System\nadministrators never quite leave the job behind, but when they do get paged at\n4:00 AM, they don't usually have to do anything very complicated. With Web-\nbased applications, these two kinds of stress get combined. The programmers\nbecome system administrators, but without the sharply defined limits that\nordinarily make the job bearable.  \n  \nAt Viaweb we spent the first six months just writing software. We worked the\nusual long hours of an early startup. In a desktop software company, this\nwould have been the part where we were working hard, but it felt like a\nvacation compared to the next phase, when we took users onto our server. The\nsecond biggest benefit of selling Viaweb to Yahoo (after the money) was to be\nable to dump ultimate responsibility for the whole thing onto the shoulders of\na big company.  \n  \nDesktop software forces users to become system administrators. Web-based\nsoftware forces programmers to. There is less stress in total, but more for\nthe programmers. That's not necessarily bad news. If you're a startup\ncompeting with a big company, it's good news. [15] Web-based applications\noffer a straightforward way to outwork your competitors. No startup asks for\nmore.  \n  \n**Just Good Enough**  \n  \nOne thing that might deter you from writing Web-based applications is the\nlameness of Web pages as a UI. That is a problem, I admit. There were a few\nthings we would have _really_ liked to add to HTML and HTTP. What matters,\nthough, is that Web pages are just good enough.  \n  \nThere is a parallel here with the first microcomputers. The processors in\nthose machines weren't actually intended to be the CPUs of computers. They\nwere designed to be used in things like traffic lights. But guys like Ed\nRoberts, who designed the [Altair](http://en.wikipedia.org/wiki/Altair_8800),\nrealized that they were just good enough. You could combine one of these chips\nwith some memory (256 bytes in the first Altair), and front panel switches,\nand you'd have a working computer. Being able to have your own computer was so\nexciting that there were plenty of people who wanted to buy them, however\nlimited.  \n  \nWeb pages weren't designed to be a UI for applications, but they're just good\nenough. And for a significant number of users, software that you can use from\nany browser will be enough of a win in itself to outweigh any awkwardness in\nthe UI. Maybe you can't write the best-looking spreadsheet using HTML, but you\ncan write a spreadsheet that several people can use simultaneously from\ndifferent locations without special client software, or that can incorporate\nlive data feeds, or that can page you when certain conditions are triggered.\nMore importantly, you can write new kinds of applications that don't even have\nnames yet. VisiCalc was not merely a microcomputer version of a mainframe\napplication, after all-- it was a new type of application.  \n  \nOf course, server-based applications don't have to be Web-based. You could\nhave some other kind of client. But I'm pretty sure that's a bad idea. It\nwould be very convenient if you could assume that everyone would install your\nclient-- so convenient that you could easily convince yourself that they all\nwould-- but if they don't, you're hosed. Because Web-based software assumes\nnothing about the client, it will work anywhere the Web works. That's a big\nadvantage already, and the advantage will grow as new Web devices proliferate.\nUsers will like you because your software just works, and your life will be\neasier because you won't have to tweak it for every new client.  [16]  \n  \nI feel like I've watched the evolution of the Web as closely as anyone, and I\ncan't predict what's going to happen with clients. Convergence is probably\ncoming, but where? I can't pick a winner. One thing I can predict is conflict\nbetween AOL and Microsoft. Whatever Microsoft's .NET turns out to be, it will\nprobably involve connecting the desktop to servers. Unless AOL fights back,\nthey will either be pushed aside or turned into a pipe between Microsoft\nclient and server software. If Microsoft and AOL get into a client war, the\nonly thing sure to work on both will be browsing the Web, meaning Web-based\napplications will be the only kind that work everywhere.  \n  \nHow will it all play out? I don't know. And you don't have to know if you bet\non Web-based applications. No one can break that without breaking browsing.\nThe Web may not be the only way to deliver software, but it's one that works\nnow and will continue to work for a long time. Web-based applications are\ncheap to develop, and easy for even the smallest startup to deliver. They're a\nlot of work, and of a particularly stressful kind, but that only makes the\nodds better for startups.  \n  \n**Why Not?**  \n  \nE. B. White was amused to learn from a farmer friend that many electrified\nfences don't have any current running through them. The cows apparently learn\nto stay away from them, and after that you don't need the current. \"Rise up,\ncows!\" he wrote, \"Take your liberty while despots snore!\"  \n  \nIf you're a hacker who has thought of one day starting a startup, there are\nprobably two things keeping you from doing it. One is that you don't know\nanything about business. The other is that you're afraid of competition.\nNeither of these fences have any current in them.  \n  \nThere are only two things you have to know about business: build something\nusers love, and make more than you spend. If you get these two right, you'll\nbe ahead of most startups. You can figure out the rest as you go.  \n  \nYou may not at first make more than you spend, but as long as the gap is\nclosing fast enough you'll be ok. If you start out underfunded, it will at\nleast encourage a habit of frugality. The less you spend, the easier it is to\nmake more than you spend. Fortunately, it can be very cheap to launch a Web-\nbased application. We launched on under $10,000, and it would be even cheaper\ntoday. We had to spend thousands on a server, and thousands more to get SSL.\n(The only company selling SSL software at the time was Netscape.) Now you can\nrent a much more powerful server, with SSL included, for less than we paid for\nbandwidth alone. You could launch a Web-based application now for less than\nthe cost of a fancy office chair.  \n  \nAs for building something users love, here are some general tips. Start by\nmaking something clean and simple that you would want to use yourself. Get a\nversion 1.0 out fast, then continue to improve the software, listening closely\nto the users as you do. The customer is always right, but different customers\nare right about different things; the least sophisticated users show you what\nyou need to simplify and clarify, and the most sophisticated tell you what\nfeatures you need to add. The best thing software can be is easy, but the way\nto do this is to get the defaults right, not to limit users' choices. Don't\nget complacent if your competitors' software is lame; the standard to compare\nyour software to is what it could be, not what your current competitors happen\nto have. Use your software yourself, all the time. Viaweb was supposed to be\nan online store builder, but we used it to make our own site too. Don't listen\nto marketing people or designers or product managers just because of their job\ntitles. If they have good ideas, use them, but it's up to you to decide;\nsoftware has to be designed by hackers who understand design, not designers\nwho know a little about software. If you can't design software as well as\nimplement it, don't start a startup.  \n  \nNow let's talk about competition. What you're afraid of is not presumably\ngroups of hackers like you, but actual companies, with offices and business\nplans and salesmen and so on, right? Well, they are more afraid of you than\nyou are of them, and they're right. It's a lot easier for a couple of hackers\nto figure out how to rent office space or hire sales people than it is for a\ncompany of any size to get software written. I've been on both sides, and I\nknow. When Viaweb was bought by Yahoo, I suddenly found myself working for a\nbig company, and it was like trying to run through waist-deep water.  \n  \nI don't mean to disparage Yahoo. They had some good hackers, and the top\nmanagement were real butt-kickers. For a big company, they were exceptional.\nBut they were still only about a tenth as productive as a small startup. No\nbig company can do much better than that. What's scary about Microsoft is that\na company so big can develop software at all. They're like a mountain that can\nwalk.  \n  \nDon't be intimidated. You can do as much that Microsoft can't as they can do\nthat you can't. And no one can stop you. You don't have to ask anyone's\npermission to develop Web-based applications. You don't have to do licensing\ndeals, or get shelf space in retail stores, or grovel to have your application\nbundled with the OS. You can deliver software right to the browser, and no one\ncan get between you and potential users without preventing them from browsing\nthe Web.  \n  \nYou may not believe it, but I promise you, Microsoft is scared of you. The\ncomplacent middle managers may not be, but Bill is, because he was you once,\nback in 1975, the last time a new way of delivering software appeared.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] Realizing that much of the money is in the services, companies building\nlightweight clients have usually tried to combine the hardware with an [online\nservice](http://news.cnet.com/news/0-1006-200-3622600.html). This approach has\nnot worked well, partly because you need two different kinds of companies to\nbuild consumer electronics and to run an online service, and partly because\nusers hate the idea. Giving away the razor and making money on the blades may\nwork for Gillette, but a razor is much smaller commitment than a Web terminal.\nCell phone handset makers are satisfied to sell hardware without trying to\ncapture the service revenue as well. That should probably be the model for\nInternet clients too. If someone just sold a nice-looking little box with a\nWeb browser that you could use to connect through any ISP, every technophobe\nin the country would buy one.  \n  \n[2] Security always depends more on not screwing up than any design decision,\nbut the nature of server-based software will make developers pay more\nattention to not screwing up. Compromising a server could cause such damage\nthat ASPs (that want to stay in business) are likely to be careful about\nsecurity.  \n  \n[3] In 1995, when we started Viaweb, Java applets were supposed to be the\ntechnology everyone was going to use to develop server-based applications.\nApplets seemed to us an old-fashioned idea. Download programs to run on the\nclient? Simpler just to go all the way and run the programs on the server. We\nwasted little time on applets, but countless other startups must have been\nlured into this tar pit. Few can have escaped alive, or Microsoft could not\nhave gotten away with dropping Java in the most recent version of Explorer.  \n  \n[4] This point is due to Trevor Blackwell, who adds \"the cost of writing\nsoftware goes up more than linearly with its size. Perhaps this is mainly due\nto fixing old bugs, and the cost can be more linear if all bugs are found\nquickly.\"  \n  \n[5] The hardest kind of bug to find may be a variant of compound bug where one\nbug happens to compensate for another. When you fix one bug, the other becomes\nvisible. But it will seem as if the fix is at fault, since that was the last\nthing you changed.  \n  \n[6] Within Viaweb we once had a contest to describe the worst thing about our\nsoftware. Two customer support people tied for first prize with entries I\nstill shiver to recall. We fixed both problems immediately.  \n  \n[7] Robert Morris wrote the ordering system, which shoppers used to place\norders. Trevor Blackwell wrote the image generator and the manager, which\nmerchants used to retrieve orders, view statistics, and configure domain names\netc. I wrote the editor, which merchants used to build their sites. The\nordering system and image generator were written in C and C++, the manager\nmostly in Perl, and the editor in [Lisp](avg.html).  \n  \n[8] Price discrimination is so pervasive (how often have you heard a retailer\nclaim that their buying power meant lower prices for you?) that I was\nsurprised to find it was outlawed in the U.S. by the Robinson-Patman Act of\n1936. This law does not appear to be vigorously enforced.  \n  \n[9] In _No Logo,_ Naomi Klein says that clothing brands favored by \"urban\nyouth\" do not try too hard to prevent shoplifting because in their target\nmarket the shoplifters are also the fashion leaders.  \n  \n[10] Companies often wonder what to outsource and what not to. One possible\nanswer: outsource any job that's not directly exposed to competitive pressure,\nbecause outsourcing it will thereby expose it to competitive pressure.  \n  \n[11] The two guys were Dan Bricklin and Bob Frankston. Dan wrote a prototype\nin Basic in a couple days, then over the course of the next year they worked\ntogether (mostly at night) to make a more powerful version written in 6502\nmachine language. Dan was at Harvard Business School at the time and Bob\nnominally had a day job writing software. \"There was no great risk in doing a\nbusiness,\" Bob wrote, \"If it failed it failed. No big deal.\"  \n  \n[12] It's not quite as easy as I make it sound. It took a painfully long time\nfor word of mouth to get going, and we did not start to get a lot of press\ncoverage until we hired a [PR firm](http://www.schwartz-pr.com) (admittedly\nthe best in the business) for $16,000 per month. However, it was true that the\nonly significant channel was our own Web site.  \n  \n[13] If the Mac was so great, why did it lose? Cost, again. Microsoft\nconcentrated on the software business, and unleashed a swarm of cheap\ncomponent suppliers on Apple hardware. It did not help, either, that suits\ntook over during a critical period.  \n  \n[14] One thing that would help Web-based applications, and help keep the next\ngeneration of software from being overshadowed by Microsoft, would be a good\nopen-source browser. Mozilla is open-source but seems to have suffered from\nhaving been corporate software for so long. A small, fast browser that was\nactively maintained would be a great thing in itself, and would probably also\nencourage companies to build little Web appliances.  \n  \nAmong other things, a proper open-source browser would cause HTTP and HTML to\ncontinue to evolve (as e.g. Perl has). It would help Web-based applications\ngreatly to be able to distinguish between selecting a link and following it;\nall you'd need to do this would be a trivial enhancement of HTTP, to allow\nmultiple urls in a request. Cascading menus would also be good.  \n  \nIf you want to change the world, write a new Mosaic. Think it's too late? In\n1998 a lot of people thought it was too late to launch a new search engine,\nbut Google proved them wrong. There is always room for something new if the\ncurrent options suck enough. Make sure it works on all the free OSes first--\nnew things start with their users.  \n  \n[15] Trevor Blackwell, who probably knows more about this from personal\nexperience than anyone, writes:  \n  \n\"I would go farther in saying that because server-based software is so hard on\nthe programmers, it causes a fundamental economic shift away from large\ncompanies. It requires the kind of intensity and dedication from programmers\nthat they will only be willing to provide when it's their own company.\nSoftware companies can hire skilled people to work in a not-too-demanding\nenvironment, and can hire unskilled people to endure hardships, but they can't\nhire highly skilled people to bust their asses. Since capital is no longer\nneeded, big companies have little to bring to the table.\"  \n  \n[16] In the original version of this essay, I advised avoiding Javascript.\nThat was a good plan in 2001, but Javascript now works.  \n  \n**Thanks** to Sarah Harlin, Trevor Blackwell, Robert Morris, Eric Raymond, Ken\nAnderson, and Dan Giffin for reading drafts of this paper; to Dan Bricklin and\nBob Frankston for information about VisiCalc; and again to Ken Anderson for\ninviting me to speak at BBN.  \n  \nYou'll find this essay and 14 others in [**_Hackers &\nPainters_**](hackpaint.html).  \n  \n  \n\nJanuary 2015  \n  \nNo one, VC or angel, has invested in more of the top startups than Ron Conway.\nHe knows what happened in every deal in the Valley, half the time because he\narranged it.  \n  \nAnd yet he's a super nice guy. In fact, nice is not the word. Ronco is good. I\nknow of zero instances in which he has behaved badly. It's hard even to\nimagine.  \n  \nWhen I first came to Silicon Valley I thought \"How lucky that someone so\npowerful is so benevolent.\" But gradually I realized it wasn't luck. It was by\nbeing benevolent that Ronco became so powerful. All the deals he gets to\ninvest in come to him through referrals. Google did. Facebook did. Twitter was\na referral from Evan Williams himself. And the reason so many people refer\ndeals to him is that he's proven himself to be a good guy.  \n  \nGood does not mean being a pushover. I would not want to face an angry Ronco.\nBut if Ron's angry at you, it's because you did something wrong. Ron is so old\nschool he's Old Testament. He will smite you in his just wrath, but there's no\nmalice in it.  \n  \nIn almost every domain there are advantages to seeming good. It makes people\ntrust you. But actually being good is an expensive way to seem good. To an\namoral person it might seem to be overkill.  \n  \nIn some fields it might be, but apparently not in the startup world. Though\nplenty of investors are jerks, there is a clear trend among them: the most\nsuccessful investors are also the most upstanding. [1]  \n  \nIt was not always this way. I would not feel confident saying that about\ninvestors twenty years ago.  \n  \nWhat changed? The startup world became more transparent and more\nunpredictable. Both make it harder to seem good without actually being good.  \n  \nIt's obvious why transparency has that effect. When an investor maltreats a\nfounder now, it gets out. Maybe not all the way to the press, but other\nfounders hear about it, and that investor starts to lose deals. [2]  \n  \nThe effect of unpredictability is more subtle. It increases the work of being\ninconsistent. If you're going to be two-faced, you have to know who you should\nbe nice to and who you can get away with being nasty to. In the startup world,\nthings change so rapidly that you can't tell. The random college kid you talk\nto today might in a couple years be the CEO of the hottest startup in the\nValley. If you can't tell who to be nice to, you have to be nice to everyone.\nAnd probably the only people who can manage that are the people who are\ngenuinely good.  \n  \nIn a sufficiently connected and unpredictable world, you can't seem good\nwithout being good.  \n  \nAs often happens, Ron discovered how to be the investor of the future by\naccident. He didn't foresee the future of startup investing, realize it would\npay to be upstanding, and force himself to behave that way. It would feel\nunnatural to him to behave any other way. He was already [living in the\nfuture](startupideas.html).  \n  \nFortunately that future is not limited to the startup world. The startup world\nis more transparent and unpredictable than most, but almost everywhere the\ntrend is in that direction.  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] I'm not saying that if you sort investors by benevolence you've also\nsorted them by returns, but rather that if you do a scatterplot with\nbenevolence on the x axis and returns on the y, you'd see a clear upward\ntrend.  \n  \n[2] Y Combinator in particular, because it aggregates data from so many\nstartups, has a pretty comprehensive view of investor behavior.  \n  \n**Thanks** to Sam Altman and Jessica Livingston for reading drafts of this.  \n  \n\nAugust 2015  \n  \nI recently got an email from a founder that helped me understand something\nimportant: why it's safe for startup founders to be nice people.  \n  \nI grew up with a cartoon idea of a very successful businessman (in the cartoon\nit was always a man): a rapacious, cigar-smoking, table-thumping guy in his\nfifties who wins by exercising power, and isn't too fussy about how. As I've\nwritten before, one of the things that has surprised me most about startups is\n[how few](mean.html) of the most successful founders are like that. Maybe\nsuccessful people in other industries are; I don't know; but not startup\nfounders. [1]  \n  \nI knew this empirically, but I never saw the math of why till I got this\nfounder's email. In it he said he worried that he was fundamentally soft-\nhearted and tended to give away too much for free. He thought perhaps he\nneeded \"a little dose of sociopath-ness.\"  \n  \nI told him not to worry about it, because so long as he built something good\nenough to spread by word of mouth, he'd have a superlinear growth curve. If he\nwas bad at extracting money from people, at worst this curve would be some\nconstant multiple less than 1 of what it might have been. But a constant\nmultiple of any curve is exactly the same shape. The numbers on the Y axis are\nsmaller, but the curve is just as steep, and when anything grows at the rate\nof a successful startup, the Y axis will take care of itself.  \n  \nSome examples will make this clear. Suppose your company is making $1000 a\nmonth now, and you've made something so great that it's growing at 5% a week.\nTwo years from now, you'll be making about $160k a month.  \n  \nNow suppose you're so un-rapacious that you only extract half as much from\nyour users as you could. That means two years later you'll be making $80k a\nmonth instead of $160k. How far behind are you? How long will it take to catch\nup with where you'd have been if you were extracting every penny? A mere 15\nweeks. After two years, the un-rapacious founder is only 3.5 months behind the\nrapacious one. [2]  \n  \nIf you're going to optimize a number, the one to choose is your [growth\nrate](growth.html). Suppose as before that you only extract half as much from\nusers as you could, but that you're able to grow 6% a week instead of 5%. Now\nhow are you doing compared to the rapacious founder after two years? You're\nalready ahead\u2014$214k a month versus $160k\u2014and pulling away fast. In another\nyear you'll be making $4.4 million a month to the rapacious founder's $2\nmillion.  \n  \nObviously one case where it would help to be rapacious is when growth depends\non that. What makes startups different is that usually it doesn't. Startups\nusually win by making something so great that people recommend it to their\nfriends. And being rapacious not only doesn't help you do that, but probably\nhurts. [3]  \n  \nThe reason startup founders can safely be nice is that making great things is\ncompounded, and rapacity isn't.  \n  \nSo if you're a founder, here's a deal you can make with yourself that will\nboth make you happy and make your company successful. Tell yourself you can be\nas nice as you want, so long as you work hard on your growth rate to\ncompensate. Most successful startups make that tradeoff unconsciously. Maybe\nif you do it consciously you'll do it even better.  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] Many think successful startup founders are driven by money. In fact the\nsecret weapon of the most successful founders is that they aren't. If they\nwere, they'd have taken one of the acquisition offers that every fast-growing\nstartup gets on the way up. What drives the most successful founders is the\nsame thing that drives most people who make things: the company is their\nproject.  \n  \n[2] In fact since 2 \u2248 1.05 ^ 15, the un-rapacious founder is always 15 weeks\nbehind the rapacious one.  \n  \n[3] The other reason it might help to be good at squeezing money out of\ncustomers is that startups usually lose money at first, and making more per\ncustomer makes it easier to get to profitability before your initial funding\nruns out. But while it is very common for startups to [die](pinch.html) from\nrunning through their initial funding and then being unable to raise more, the\nunderlying cause is usually slow growth or excessive spending rather than\ninsufficient effort to extract money from existing customers.  \n  \n  \n  \n**Thanks** to Sam Altman, Harj Taggar, Jessica Livingston, and Geoff Ralston\nfor reading drafts of this, and to Randall Bennett for being such a nice guy.  \n  \n\nJanuary 2004  \n  \nHave you ever seen an old photo of yourself and been embarrassed at the way\nyou looked? _Did we actually dress like that?_ We did. And we had no idea how\nsilly we looked. It's the nature of fashion to be invisible, in the same way\nthe movement of the earth is invisible to all of us riding on it.  \n  \nWhat scares me is that there are moral fashions too. They're just as\narbitrary, and just as invisible to most people. But they're much more\ndangerous. Fashion is mistaken for good design; moral fashion is mistaken for\ngood. Dressing oddly gets you laughed at. Violating moral fashions can get you\nfired, ostracized, imprisoned, or even killed.  \n  \nIf you could travel back in a time machine, one thing would be true no matter\nwhere you went: you'd have to watch what you said. Opinions we consider\nharmless could have gotten you in big trouble. I've already said at least one\nthing that would have gotten me in big trouble in most of Europe in the\nseventeenth century, and did get Galileo in big trouble when he said it \u0097 that\nthe earth moves. [1]  \n  \nIt seems to be a constant throughout history: In every period, people believed\nthings that were just ridiculous, and believed them so strongly that you would\nhave gotten in terrible trouble for saying otherwise.  \n  \nIs our time any different? To anyone who has read any amount of history, the\nanswer is almost certainly no. It would be a remarkable coincidence if ours\nwere the first era to get everything just right.  \n  \nIt's tantalizing to think we believe things that people in the future will\nfind ridiculous. What _would_ someone coming back to visit us in a time\nmachine have to be careful not to say? That's what I want to study here. But I\nwant to do more than just shock everyone with the heresy du jour. I want to\nfind general recipes for discovering what you can't say, in any era.  \n  \n**The Conformist Test**  \n  \nLet's start with a test: Do you have any opinions that you would be reluctant\nto express in front of a group of your peers?  \n  \nIf the answer is no, you might want to stop and think about that. If\neverything you believe is something you're supposed to believe, could that\npossibly be a coincidence? Odds are it isn't. Odds are you just think what\nyou're told.  \n  \nThe other alternative would be that you independently considered every\nquestion and came up with the exact same answers that are now considered\nacceptable. That seems unlikely, because you'd also have to make the same\nmistakes. Mapmakers deliberately put slight mistakes in their maps so they can\ntell when someone copies them. If another map has the same mistake, that's\nvery convincing evidence.  \n  \nLike every other era in history, our moral map almost certainly contains a few\nmistakes. And anyone who makes the same mistakes probably didn't do it by\naccident. It would be like someone claiming they had independently decided in\n1972 that bell-bottom jeans were a good idea.  \n  \nIf you believe everything you're supposed to now, how can you be sure you\nwouldn't also have believed everything you were supposed to if you had grown\nup among the plantation owners of the pre-Civil War South, or in Germany in\nthe 1930s \u0097 or among the Mongols in 1200, for that matter? Odds are you would\nhave.  \n  \nBack in the era of terms like \"well-adjusted,\" the idea seemed to be that\nthere was something wrong with you if you thought things you didn't dare say\nout loud. This seems backward. Almost certainly, there is something wrong with\nyou if you _don't_ think things you don't dare say out loud.  \n  \n**Trouble**  \n  \nWhat can't we say? One way to find these ideas is simply to look at things\npeople do say, and get in trouble for. [2]  \n  \nOf course, we're not just looking for things we can't say. We're looking for\nthings we can't say that are true, or at least have enough chance of being\ntrue that the question should remain open. But many of the things people get\nin trouble for saying probably do make it over this second, lower threshold.\nNo one gets in trouble for saying that 2 + 2 is 5, or that people in\nPittsburgh are ten feet tall. Such obviously false statements might be treated\nas jokes, or at worst as evidence of insanity, but they are not likely to make\nanyone mad. The statements that make people mad are the ones they worry might\nbe believed. I suspect the statements that make people maddest are those they\nworry might be true.  \n  \nIf Galileo had said that people in Padua were ten feet tall, he would have\nbeen regarded as a harmless eccentric. Saying the earth orbited the sun was\nanother matter. The church knew this would set people thinking.  \n  \nCertainly, as we look back on the past, this rule of thumb works well. A lot\nof the statements people got in trouble for seem harmless now. So it's likely\nthat visitors from the future would agree with at least some of the statements\nthat get people in trouble today. Do we have no Galileos? Not likely.  \n  \nTo find them, keep track of opinions that get people in trouble, and start\nasking, could this be true? Ok, it may be heretical (or whatever modern\nequivalent), but might it also be true?  \n  \n**Heresy**  \n  \nThis won't get us all the answers, though. What if no one happens to have\ngotten in trouble for a particular idea yet? What if some idea would be so\nradioactively controversial that no one would dare express it in public? How\ncan we find these too?  \n  \nAnother approach is to follow that word, heresy. In every period of history,\nthere seem to have been labels that got applied to statements to shoot them\ndown before anyone had a chance to ask if they were true or not. \"Blasphemy\",\n\"sacrilege\", and \"heresy\" were such labels for a good part of western history,\nas in more recent times \"indecent\", \"improper\", and \"unamerican\" have been. By\nnow these labels have lost their sting. They always do. By now they're mostly\nused ironically. But in their time, they had real force.  \n  \nThe word \"defeatist\", for example, has no particular political connotations\nnow. But in Germany in 1917 it was a weapon, used by Ludendorff in a purge of\nthose who favored a negotiated peace. At the start of World War II it was used\nextensively by Churchill and his supporters to silence their opponents. In\n1940, any argument against Churchill's aggressive policy was \"defeatist\". Was\nit right or wrong? Ideally, no one got far enough to ask that.  \n  \nWe have such labels today, of course, quite a lot of them, from the all-\npurpose \"inappropriate\" to the dreaded \"divisive.\" In any period, it should be\neasy to figure out what such labels are, simply by looking at what people call\nideas they disagree with besides untrue. When a politician says his opponent\nis mistaken, that's a straightforward criticism, but when he attacks a\nstatement as \"divisive\" or \"racially insensitive\" instead of arguing that it's\nfalse, we should start paying attention.  \n  \nSo another way to figure out which of our taboos future generations will laugh\nat is to start with the labels. Take a label \u0097 \"sexist\", for example \u0097 and try\nto think of some ideas that would be called that. Then for each ask, might\nthis be true?  \n  \nJust start listing ideas at random? Yes, because they won't really be random.\nThe ideas that come to mind first will be the most plausible ones. They'll be\nthings you've already noticed but didn't let yourself think.  \n  \nIn 1989 some clever researchers tracked the eye movements of radiologists as\nthey scanned chest images for signs of lung cancer. [3] They found that even\nwhen the radiologists missed a cancerous lesion, their eyes had usually paused\nat the site of it. Part of their brain knew there was something there; it just\ndidn't percolate all the way up into conscious knowledge. I think many\ninteresting heretical thoughts are already mostly formed in our minds. If we\nturn off our self-censorship temporarily, those will be the first to emerge.  \n  \n**Time and Space**  \n  \nIf we could look into the future it would be obvious which of our taboos\nthey'd laugh at. We can't do that, but we can do something almost as good: we\ncan look into the past. Another way to figure out what we're getting wrong is\nto look at what used to be acceptable and is now unthinkable.  \n  \nChanges between the past and the present sometimes do represent progress. In a\nfield like physics, if we disagree with past generations it's because we're\nright and they're wrong. But this becomes rapidly less true as you move away\nfrom the certainty of the hard sciences. By the time you get to social\nquestions, many changes are just fashion. The age of consent fluctuates like\nhemlines.  \n  \nWe may imagine that we are a great deal smarter and more virtuous than past\ngenerations, but the more history you read, the less likely this seems. People\nin past times were much like us. Not heroes, not barbarians. Whatever their\nideas were, they were ideas reasonable people could believe.  \n  \nSo here is another source of interesting heresies. Diff present ideas against\nthose of various past cultures, and see what you get. [4] Some will be\nshocking by present standards. Ok, fine; but which might also be true?  \n  \nYou don't have to look into the past to find big differences. In our own time,\ndifferent societies have wildly varying ideas of what's ok and what isn't. So\nyou can try diffing other cultures' ideas against ours as well. (The best way\nto do that is to visit them.)  Any idea that's considered harmless in a\nsignificant percentage of times and places, and yet is taboo in ours, is a\ncandidate for something we're mistaken about.  \n  \nFor example, at the high water mark of political correctness in the early\n1990s, Harvard distributed to its faculty and staff a brochure saying, among\nother things, that it was inappropriate to compliment a colleague or student's\nclothes. No more \"nice shirt.\" I think this principle is rare among the\nworld's cultures, past or present. There are probably more where it's\nconsidered especially polite to compliment someone's clothing than where it's\nconsidered improper.  Odds are this is, in a mild form, an example of one of\nthe taboos a visitor from the future would have to be careful to avoid if he\nhappened to set his time machine for Cambridge, Massachusetts, 1992. [5]  \n  \n**Prigs**  \n  \nOf course, if they have time machines in the future they'll probably have a\nseparate reference manual just for Cambridge. This has always been a fussy\nplace, a town of i dotters and t crossers, where you're liable to get both\nyour grammar and your ideas corrected in the same conversation. And that\nsuggests another way to find taboos. Look for prigs, and see what's inside\ntheir heads.  \n  \nKids' heads are repositories of all our taboos. It seems fitting to us that\nkids' ideas should be bright and clean. The picture we give them of the world\nis not merely simplified, to suit their developing minds, but sanitized as\nwell, to suit our ideas of what kids ought to think. [6]  \n  \nYou can see this on a small scale in the matter of dirty words. A lot of my\nfriends are starting to have children now, and they're all trying not to use\nwords like \"fuck\" and \"shit\" within baby's hearing, lest baby start using\nthese words too. But these words are part of the language, and adults use them\nall the time. So parents are giving their kids an inaccurate idea of the\nlanguage by not using them. Why do they do this? Because they don't think it's\nfitting that kids should use the whole language. We like children to seem\ninnocent. [7]  \n  \nMost adults, likewise, deliberately give kids a misleading view of the world.\nOne of the most obvious examples is Santa Claus. We think it's cute for little\nkids to believe in Santa Claus. I myself think it's cute for little kids to\nbelieve in Santa Claus. But one wonders, do we tell them this stuff for their\nsake, or for ours?  \n  \nI'm not arguing for or against this idea here. It is probably inevitable that\nparents should want to dress up their kids' minds in cute little baby outfits.\nI'll probably do it myself. The important thing for our purposes is that, as a\nresult, a well brought-up teenage kid's brain is a more or less complete\ncollection of all our taboos \u0097 and in mint condition, because they're\nuntainted by experience. Whatever we think that will later turn out to be\nridiculous, it's almost certainly inside that head.  \n  \nHow do we get at these ideas? By the following thought experiment. Imagine a\nkind of latter-day Conrad character who has worked for a time as a mercenary\nin Africa, for a time as a doctor in Nepal, for a time as the manager of a\nnightclub in Miami. The specifics don't matter \u0097 just someone who has seen a\nlot. Now imagine comparing what's inside this guy's head with what's inside\nthe head of a well-behaved sixteen year old girl from the suburbs. What does\nhe think that would shock her? He knows the world; she knows, or at least\nembodies, present taboos. Subtract one from the other, and the result is what\nwe can't say.  \n  \n**Mechanism**  \n  \nI can think of one more way to figure out what we can't say: to look at how\ntaboos are created. How do moral fashions arise, and why are they adopted? If\nwe can understand this mechanism, we may be able to see it at work in our own\ntime.  \n  \nMoral fashions don't seem to be created the way ordinary fashions are.\nOrdinary fashions seem to arise by accident when everyone imitates the whim of\nsome influential person. The fashion for broad-toed shoes in late fifteenth\ncentury Europe began because Charles VIII of France had six toes on one foot.\nThe fashion for the name Gary began when the actor Frank Cooper adopted the\nname of a tough mill town in Indiana. Moral fashions more often seem to be\ncreated deliberately. When there's something we can't say, it's often because\nsome group doesn't want us to.  \n  \nThe prohibition will be strongest when the group is nervous. The irony of\nGalileo's situation was that he got in trouble for repeating Copernicus's\nideas. Copernicus himself didn't. In fact, Copernicus was a canon of a\ncathedral, and dedicated his book to the pope. But by Galileo's time the\nchurch was in the throes of the Counter-Reformation and was much more worried\nabout unorthodox ideas.  \n  \nTo launch a taboo, a group has to be poised halfway between weakness and\npower. A confident group doesn't need taboos to protect it. It's not\nconsidered improper to make disparaging remarks about Americans, or the\nEnglish. And yet a group has to be powerful enough to enforce a taboo.\nCoprophiles, as of this writing, don't seem to be numerous or energetic enough\nto have had their interests promoted to a lifestyle.  \n  \nI suspect the biggest source of moral taboos will turn out to be power\nstruggles in which one side only barely has the upper hand. That's where\nyou'll find a group powerful enough to enforce taboos, but weak enough to need\nthem.  \n  \nMost struggles, whatever they're really about, will be cast as struggles\nbetween competing ideas. The English Reformation was at bottom a struggle for\nwealth and power, but it ended up being cast as a struggle to preserve the\nsouls of Englishmen from the corrupting influence of Rome. It's easier to get\npeople to fight for an idea. And whichever side wins, their ideas will also be\nconsidered to have triumphed, as if God wanted to signal his agreement by\nselecting that side as the victor.  \n  \nWe often like to think of World War II as a triumph of freedom over\ntotalitarianism. We conveniently forget that the Soviet Union was also one of\nthe winners.  \n  \nI'm not saying that struggles are never about ideas, just that they will\nalways be made to seem to be about ideas, whether they are or not. And just as\nthere is nothing so unfashionable as the last, discarded fashion, there is\nnothing so wrong as the principles of the most recently defeated opponent.\nRepresentational art is only now recovering from the approval of both Hitler\nand Stalin. [8]  \n  \nAlthough moral fashions tend to arise from different sources than fashions in\nclothing, the mechanism of their adoption seems much the same. The early\nadopters will be driven by ambition: self-consciously cool people who want to\ndistinguish themselves from the common herd. As the fashion becomes\nestablished they'll be joined by a second, much larger group, driven by fear.\n[9] This second group adopt the fashion not because they want to stand out but\nbecause they are afraid of standing out.  \n  \nSo if you want to figure out what we can't say, look at the machinery of\nfashion and try to predict what it would make unsayable. What groups are\npowerful but nervous, and what ideas would they like to suppress? What ideas\nwere tarnished by association when they ended up on the losing side of a\nrecent struggle? If a self-consciously cool person wanted to differentiate\nhimself from preceding fashions (e.g. from his parents), which of their ideas\nwould he tend to reject? What are conventional-minded people afraid of saying?  \n  \nThis technique won't find us all the things we can't say. I can think of some\nthat aren't the result of any recent struggle. Many of our taboos are rooted\ndeep in the past. But this approach, combined with the preceding four, will\nturn up a good number of unthinkable ideas.  \n  \n**Why**  \n  \nSome would ask, why would one want to do this? Why deliberately go poking\naround among nasty, disreputable ideas? Why look under rocks?  \n  \nI do it, first of all, for the same reason I did look under rocks as a kid:\nplain curiosity. And I'm especially curious about anything that's forbidden.\nLet me see and decide for myself.  \n  \nSecond, I do it because I don't like the idea of being mistaken. If, like\nother eras, we believe things that will later seem ridiculous, I want to know\nwhat they are so that I, at least, can avoid believing them.  \n  \nThird, I do it because it's good for the brain. To do good work you need a\nbrain that can go anywhere. And you especially need a brain that's in the\nhabit of going where it's not supposed to.  \n  \nGreat work tends to grow out of ideas that others have overlooked, and no idea\nis so overlooked as one that's unthinkable. Natural selection, for example.\nIt's so simple. Why didn't anyone think of it before? Well, that is all too\nobvious. Darwin himself was careful to tiptoe around the implications of his\ntheory. He wanted to spend his time thinking about biology, not arguing with\npeople who accused him of being an atheist.  \n  \nIn the sciences, especially, it's a great advantage to be able to question\nassumptions. The m.o. of scientists, or at least of the good ones, is\nprecisely that: look for places where conventional wisdom is broken, and then\ntry to pry apart the cracks and see what's underneath. That's where new\ntheories come from.  \n  \nA good scientist, in other words, does not merely ignore conventional wisdom,\nbut makes a special effort to break it. Scientists go looking for trouble.\nThis should be the m.o. of any scholar, but scientists seem much more willing\nto look under rocks. [10]  \n  \nWhy? It could be that the scientists are simply smarter; most physicists\ncould, if necessary, make it through a PhD program in French literature, but\nfew professors of French literature could make it through a PhD program in\nphysics. Or it could be because it's clearer in the sciences whether theories\nare true or false, and this makes scientists bolder. (Or it could be that,\nbecause it's clearer in the sciences whether theories are true or false, you\nhave to be smart to get jobs as a scientist, rather than just a good\npolitician.)  \n  \nWhatever the reason, there seems a clear correlation between intelligence and\nwillingness to consider shocking ideas. This isn't just because smart people\nactively work to find holes in conventional thinking. I think conventions also\nhave less hold over them to start with. You can see that in the way they\ndress.  \n  \nIt's not only in the sciences that heresy pays off. In any competitive field,\nyou can [win big](avg.html) by seeing things that others daren't. And in every\nfield there are probably heresies few dare utter. Within the US car industry\nthere is a lot of hand-wringing now about declining market share. Yet the\ncause is so obvious that any observant outsider could explain it in a second:\nthey make bad cars. And they have for so long that by now the US car brands\nare antibrands \u0097 something you'd buy a car despite, not because of. Cadillac\nstopped being the Cadillac of cars in about 1970. And yet I suspect no one\ndares say this. [11] Otherwise these companies would have tried to fix the\nproblem.  \n  \nTraining yourself to think unthinkable thoughts has advantages beyond the\nthoughts themselves. It's like stretching. When you stretch before running,\nyou put your body into positions much more extreme than any it will assume\nduring the run. If you can think things so outside the box that they'd make\npeople's hair stand on end, you'll have no trouble with the small trips\noutside the box that people call innovative.  \n  \n**_Pensieri Stretti_**  \n  \nWhen you find something you can't say, what do you do with it? My advice is,\ndon't say it. Or at least, pick your battles.  \n  \nSuppose in the future there is a movement to ban the color yellow. Proposals\nto paint anything yellow are denounced as \"yellowist\", as is anyone suspected\nof liking the color. People who like orange are tolerated but viewed with\nsuspicion. Suppose you realize there is nothing wrong with yellow. If you go\naround saying this, you'll be denounced as a yellowist too, and you'll find\nyourself having a lot of arguments with anti-yellowists. If your aim in life\nis to rehabilitate the color yellow, that may be what you want. But if you're\nmostly interested in other questions, being labelled as a yellowist will just\nbe a distraction. Argue with idiots, and you become an idiot.  \n  \nThe most important thing is to be able to think what you want, not to say what\nyou want. And if you feel you have to say everything you think, it may inhibit\nyou from thinking improper thoughts. I think it's better to follow the\nopposite policy. Draw a sharp line between your thoughts and your speech.\nInside your head, anything is allowed. Within my head I make a point of\nencouraging the most outrageous thoughts I can imagine. But, as in a secret\nsociety, nothing that happens within the building should be told to outsiders.\nThe first rule of Fight Club is, you do not talk about Fight Club.  \n  \nWhen Milton was going to visit Italy in the 1630s, Sir Henry Wootton, who had\nbeen ambassador to Venice, told him his motto should be _\"i pensieri stretti &\nil viso sciolto.\"_ Closed thoughts and an open face. Smile at everyone, and\ndon't tell them what you're thinking. This was wise advice. Milton was an\nargumentative fellow, and the Inquisition was a bit restive at that time. But\nI think the difference between Milton's situation and ours is only a matter of\ndegree. Every era has its heresies, and if you don't get imprisoned for them\nyou will at least get in enough trouble that it becomes a complete\ndistraction.  \n  \nI admit it seems cowardly to keep quiet. When I read about the harassment to\nwhich the Scientologists subject their critics [12], or that pro-Israel groups\nare \"compiling dossiers\" on those who speak out against Israeli human rights\nabuses [13], or about people being sued for violating the DMCA [14], part of\nme wants to say, \"All right, you bastards, bring it on.\" The problem is, there\nare so many things you can't say. If you said them all you'd have no time left\nfor your real work. You'd have to turn into Noam Chomsky. [15]  \n  \nThe trouble with keeping your thoughts secret, though, is that you lose the\nadvantages of discussion. Talking about an idea leads to more ideas. So the\noptimal plan, if you can manage it, is to have a few trusted friends you can\nspeak openly to. This is not just a way to develop ideas; it's also a good\nrule of thumb for choosing friends. The people you can say heretical things to\nwithout getting jumped on are also the most interesting to know.  \n  \n**_Viso Sciolto?_**  \n  \nI don't think we need the _viso sciolto_ so much as the _pensieri stretti._\nPerhaps the best policy is to make it plain that you don't agree with whatever\nzealotry is current in your time, but not to be too specific about what you\ndisagree with. Zealots will try to draw you out, but you don't have to answer\nthem. If they try to force you to treat a question on their terms by asking\n\"are you with us or against us?\" you can always just answer \"neither\".  \n  \nBetter still, answer \"I haven't decided.\" That's what Larry Summers did when a\ngroup tried to put him in this position. Explaining himself later, he said \"I\ndon't do litmus tests.\" [16] A lot of the questions people get hot about are\nactually quite complicated. There is no prize for getting the answer quickly.  \n  \nIf the anti-yellowists seem to be getting out of hand and you want to fight\nback, there are ways to do it without getting yourself accused of being a\nyellowist. Like skirmishers in an ancient army, you want to avoid directly\nengaging the main body of the enemy's troops. Better to harass them with\narrows from a distance.  \n  \nOne way to do this is to ratchet the debate up one level of abstraction. If\nyou argue against censorship in general, you can avoid being accused of\nwhatever heresy is contained in the book or film that someone is trying to\ncensor. You can attack labels with meta-labels: labels that refer to the use\nof labels to prevent discussion. The spread of the term \"political\ncorrectness\" meant the beginning of the end of political correctness, because\nit enabled one to attack the phenomenon as a whole without being accused of\nany of the specific heresies it sought to suppress.  \n  \nAnother way to counterattack is with metaphor. Arthur Miller undermined the\nHouse Un-American Activities Committee by writing a play, \"The Crucible,\"\nabout the Salem witch trials. He never referred directly to the committee and\nso gave them no way to reply. What could HUAC do, defend the Salem witch\ntrials? And yet Miller's metaphor stuck so well that to this day the\nactivities of the committee are often described as a \"witch-hunt.\"  \n  \nBest of all, probably, is humor. Zealots, whatever their cause, invariably\nlack a sense of humor. They can't reply in kind to jokes. They're as unhappy\non the territory of humor as a mounted knight on a skating rink. Victorian\nprudishness, for example, seems to have been defeated mainly by treating it as\na joke. Likewise its reincarnation as political correctness. \"I am glad that I\nmanaged to write 'The Crucible,'\" Arthur Miller wrote, \"but looking back I\nhave often wished I'd had the temperament to do an absurd comedy, which is\nwhat the situation deserved.\" [17]  \n  \n**ABQ**  \n  \nA Dutch friend says I should use Holland as an example of a tolerant society.\nIt's true they have a long tradition of comparative open-mindedness. For\ncenturies the low countries were the place to go to say things you couldn't\nsay anywhere else, and this helped to make the region a center of scholarship\nand industry (which have been closely tied for longer than most people\nrealize). Descartes, though claimed by the French, did much of his thinking in\nHolland.  \n  \nAnd yet, I wonder. The Dutch seem to live their lives up to their necks in\nrules and regulations. There's so much you can't do there; is there really\nnothing you can't say?  \n  \nCertainly the fact that they value open-mindedness is no guarantee. Who thinks\nthey're not open-minded? Our hypothetical prim miss from the suburbs thinks\nshe's open-minded. Hasn't she been taught to be? Ask anyone, and they'll say\nthe same thing: they're pretty open-minded, though they draw the line at\nthings that are really wrong. (Some tribes may avoid \"wrong\" as judgemental,\nand may instead use a more neutral sounding euphemism like \"negative\" or\n\"destructive\".)  \n  \nWhen people are bad at math, they know it, because they get the wrong answers\non tests. But when people are bad at open-mindedness they don't know it. In\nfact they tend to think the opposite. Remember, it's the nature of fashion to\nbe invisible. It wouldn't work otherwise. Fashion doesn't seem like fashion to\nsomeone in the grip of it. It just seems like the right thing to do. It's only\nby looking from a distance that we see oscillations in people's idea of the\nright thing to do, and can identify them as fashions.  \n  \nTime gives us such distance for free. Indeed, the arrival of new fashions\nmakes old fashions easy to see, because they seem so ridiculous by contrast.\nFrom one end of a pendulum's swing, the other end seems especially far away.  \n  \nTo see fashion in your own time, though, requires a conscious effort. Without\ntime to give you distance, you have to create distance yourself. Instead of\nbeing part of the mob, stand as far away from it as you can and watch what\nit's doing. And pay especially close attention whenever an idea is being\nsuppressed. Web filters for children and employees often ban sites containing\npornography, violence, and hate speech. What counts as pornography and\nviolence? And what, exactly, is \"hate speech?\" This sounds like a phrase out\nof _1984._  \n  \nLabels like that are probably the biggest external clue. If a statement is\nfalse, that's the worst thing you can say about it. You don't need to say that\nit's heretical. And if it isn't false, it shouldn't be suppressed. So when you\nsee statements being attacked as x-ist or y-ic (substitute your current values\nof x and y), whether in 1630 or 2030, that's a sure sign that something is\nwrong. When you hear such labels being used, ask why.  \n  \nEspecially if you hear yourself using them. It's not just the mob you need to\nlearn to watch from a distance. You need to be able to watch your own thoughts\nfrom a distance. That's not a radical idea, by the way; it's the main\ndifference between children and adults. When a child gets angry because he's\ntired, he doesn't know what's happening. An adult can distance himself enough\nfrom the situation to say \"never mind, I'm just tired.\" I don't see why one\ncouldn't, by a similar process, learn to recognize and discount the effects of\nmoral fashions.  \n  \nYou have to take that extra step if you want to think clearly. But it's\nharder, because now you're working against social customs instead of with\nthem. Everyone encourages you to grow up to the point where you can discount\nyour own bad moods. Few encourage you to continue to the point where you can\ndiscount society's bad moods.  \n  \nHow can you see the wave, when you're the water? Always be questioning. That's\nthe only defence. What can't you say? And why?  \n  \n  \n  \n[_**Notes**_](http://www.paulgraham.com/saynotes.html)  \n  \n**Thanks** to Sarah Harlin, Trevor Blackwell, Jessica Livingston, Robert\nMorris, Eric Raymond and Bob van der Zwaan for reading drafts of this essay,\nand to Lisa Randall, Jackie McDonough, Ryan Stanley and Joel Rainey for\nconversations about heresy. Needless to say they bear no blame for opinions\nexpressed in it, and especially for opinions _not_ expressed in it.  \n  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nJanuary 2012  \n  \nThere are great startup ideas lying around unexploited right under our noses.\nOne reason we don't see them is a phenomenon I call _schlep blindness_. Schlep\nwas originally a Yiddish word but has passed into general use in the US. It\nmeans a tedious, unpleasant task.  \n  \nNo one likes schleps, but hackers especially dislike them. Most hackers who\nstart startups wish they could do it by just writing some clever software,\nputting it on a server somewhere, and watching the money roll in\u2014without ever\nhaving to talk to users, or negotiate with other companies, or deal with other\npeople's broken code. Maybe that's possible, but I haven't seen it.  \n  \nOne of the many things we do at Y Combinator is teach hackers about the\ninevitability of schleps. No, you can't start a startup by just writing code.\nI remember going through this realization myself. There was a point in 1995\nwhen I was still trying to convince myself I could start a company by just\nwriting code. But I soon learned from experience that schleps are not merely\ninevitable, but pretty much what business consists of. A company is defined by\nthe schleps it will undertake. And schleps should be dealt with the same way\nyou'd deal with a cold swimming pool: just jump in. Which is not to say you\nshould seek out unpleasant work per se, but that you should never shrink from\nit if it's on the path to something great.  \n  \nThe most dangerous thing about our dislike of schleps is that much of it is\nunconscious. Your unconscious won't even let you see ideas that involve\npainful schleps. That's schlep blindness.  \n  \nThe phenomenon isn't limited to startups. Most people don't consciously decide\nnot to be in as good physical shape as Olympic athletes, for example. Their\nunconscious mind decides for them, shrinking from the work involved.  \n  \nThe most striking example I know of schlep blindness is\n[Stripe](http://stripe.com), or rather Stripe's idea. For over a decade, every\nhacker who'd ever had to process payments online knew how painful the\nexperience was. Thousands of people must have known about this problem. And\nyet when they started startups, they decided to build recipe sites, or\naggregators for local events. Why? Why work on problems few care much about\nand no one will pay for, when you could fix one of the most important\ncomponents of the world's infrastructure? Because schlep blindness prevented\npeople from even considering the idea of fixing payments.  \n  \nProbably no one who applied to Y Combinator to work on a recipe site began by\nasking \"should we fix payments, or build a recipe site?\" and chose the recipe\nsite. Though the idea of fixing payments was right there in plain sight, they\nnever saw it, because their unconscious mind shrank from the complications\ninvolved. You'd have to make deals with banks. How do you do that? Plus you're\nmoving money, so you're going to have to deal with fraud, and people trying to\nbreak into your servers. Plus there are probably all sorts of regulations to\ncomply with. It's a lot more intimidating to start a startup like this than a\nrecipe site.  \n  \nThat scariness makes ambitious ideas doubly valuable. In addition to their\nintrinsic value, they're like undervalued stocks in the sense that there's\nless demand for them among founders. If you pick an ambitious idea, you'll\nhave less competition, because everyone else will have been frightened off by\nthe challenges involved. (This is also true of starting a startup generally.)  \n  \nHow do you overcome schlep blindness? Frankly, the most valuable antidote to\nschlep blindness is probably ignorance. Most successful founders would\nprobably say that if they'd known when they were starting their company about\nthe obstacles they'd have to overcome, they might never have started it. Maybe\nthat's one reason the most successful startups of all so often have young\nfounders.  \n  \nIn practice the founders grow with the problems. But no one seems able to\nforesee that, not even older, more experienced founders. So the reason younger\nfounders have an advantage is that they make two mistakes that cancel each\nother out. They don't know how much they can grow, but they also don't know\nhow much they'll need to. Older founders only make the first mistake.  \n  \nIgnorance can't solve everything though. Some ideas so obviously entail\nalarming schleps that anyone can see them. How do you see ideas like that? The\ntrick I recommend is to take yourself out of the picture. Instead of asking\n\"what problem should I solve?\" ask \"what problem do I wish someone else would\nsolve for me?\" If someone who had to process payments before Stripe had tried\nasking that, Stripe would have been one of the first things they wished for.  \n  \nIt's too late now to be Stripe, but there's plenty still broken in the world,\nif you know how to see it.  \n  \n  \n  \n  \n  \n**Thanks** to Sam Altman, Paul Buchheit, Patrick Collison, Aaron Iba, Jessica\nLivingston, Emmett Shear, and Harj Taggar for reading drafts of this.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nOctober 2010  \n  \nSilicon Valley proper is mostly suburban sprawl. At first glance it doesn't\nseem there's anything to see. It's not the sort of place that has conspicuous\nmonuments. But if you look, there are subtle signs you're in a place that's\ndifferent from other places.  \n  \n**1.[Stanford University](http://maps.google.com/maps?q=stanford+university)**  \n  \nStanford is a strange place. Structurally it is to an ordinary university what\nsuburbia is to a city. It's enormously spread out, and feels surprisingly\nempty much of the time. But notice the weather. It's probably perfect. And\nnotice the beautiful mountains to the west. And though you can't see it,\ncosmopolitan San Francisco is 40 minutes to the north. That combination is\nmuch of the reason Silicon Valley grew up around this university and not some\nother one.  \n  \n**2.[University\nAve](http://maps.google.com/maps?q=university+and+ramona+palo+alto)**  \n  \nA surprising amount of the work of the Valley is done in the cafes on or just\noff University Ave in Palo Alto. If you visit on a weekday between 10 and 5,\nyou'll often see founders pitching investors. In case you can't tell, the\nfounders are the ones leaning forward eagerly, and the investors are the ones\nsitting back with slightly pained expressions.  \n  \n**3.[The Lucky\nOffice](http://maps.google.com/maps?q=165+university+ave+palo+alto)**  \n  \nThe office at 165 University Ave was Google's first. Then it was Paypal's.\n(Now it's [Wepay](http://wepay.com)'s.) The interesting thing about it is the\nlocation. It's a smart move to put a startup in a place with restaurants and\npeople walking around instead of in an office park, because then the people\nwho work there want to stay there, instead of fleeing as soon as conventional\nworking hours end. They go out for dinner together, talk about ideas, and then\ncome back and implement them.  \n  \nIt's important to realize that Google's current location in an office park is\nnot where they started; it's just where they were forced to move when they\nneeded more space. Facebook was till recently across the street, till they too\nhad to move because they needed more space.  \n  \n**4.[Old Palo Alto](http://maps.google.com/maps?q=old+palo+alto)**  \n  \nPalo Alto was not originally a suburb. For the first 100 years or so of its\nexistence, it was a college town out in the countryside. Then in the mid 1950s\nit was engulfed in a wave of suburbia that raced down the peninsula. But Palo\nAlto north of Oregon expressway still feels noticeably different from the area\naround it. It's one of the nicest places in the Valley. The buildings are old\n(though increasingly they are being torn down and replaced with generic\nMcMansions) and the trees are tall. But houses are very expensive\u2014around $1000\nper square foot. This is post-exit Silicon Valley.  \n  \n**5.[Sand Hill\nRoad](http://maps.google.com/maps?q=2900+sand+hill+road+menlo+park)**  \n  \nIt's interesting to see the VCs' offices on the north side of Sand Hill Road\nprecisely because they're so boringly uniform. The buildings are all more or\nless the same, their exteriors express very little, and they are arranged in a\nconfusing maze. (I've been visiting them for years and I still occasionally\nget lost.) It's not a coincidence. These buildings are a pretty accurate\nreflection of the VC business.  \n  \nIf you go on a weekday you may see groups of founders there to meet VCs. But\nmostly you won't see anyone; bustling is the last word you'd use to describe\nthe atmos. Visiting Sand Hill Road reminds you that the opposite of \"down and\ndirty\" would be \"up and clean.\"  \n  \n**6.[Castro\nStreet](http://maps.google.com/maps?q=castro+and+villa+mountain+view)**  \n  \nIt's a tossup whether Castro Street or University Ave should be considered the\nheart of the Valley now. University Ave would have been 10 years ago. But Palo\nAlto is getting expensive. Increasingly startups are located in Mountain View,\nand Palo Alto is a place they come to meet investors. Palo Alto has a lot of\ndifferent cafes, but there is one that clearly dominates in Mountain View:\n[Red Rock](http://maps.google.com/places/us/ca/mountain-view/castro-\nst/201/-red-rock-coffee).  \n  \n**7.[Google](http://maps.google.com/maps?q=charleston+road+mountain+view)**  \n  \nGoogle spread out from its first building in Mountain View to a lot of the\nsurrounding ones. But because the buildings were built at different times by\ndifferent people, the place doesn't have the sterile, walled-off feel that a\ntypical large company's headquarters have. It definitely has a flavor of its\nown though. You sense there is something afoot. The general atmos is vaguely\nutopian; there are lots of Priuses, and people who look like they drive them.  \n  \nYou can't get into Google unless you know someone there. It's very much worth\nseeing inside if you can, though. Ditto for Facebook, at the end of California\nAve in Palo Alto, though there is nothing to see outside.  \n  \n**8.[Skyline Drive](http://maps.google.com/maps?q=skylonda)**  \n  \nSkyline Drive runs along the crest of the Santa Cruz mountains. On one side is\nthe Valley, and on the other is the sea\u2014which because it's cold and foggy and\nhas few harbors, plays surprisingly little role in the lives of people in the\nValley, considering how close it is. Along some parts of Skyline the dominant\ntrees are huge redwoods, and in others they're live oaks. Redwoods mean those\nare the parts where the fog off the coast comes in at night; redwoods condense\nrain out of fog. The MROSD manages a collection of [great walking\ntrails](http://www.openspace.org/) off Skyline.  \n  \n**9.[280](http://maps.google.com/maps?q=interstate+280+san+mateo)**  \n  \nSilicon Valley has two highways running the length of it: 101, which is pretty\nugly, and 280, which is one of the more beautiful highways in the world. I\nalways take 280 when I have a choice. Notice the long narrow lake to the west?\nThat's the San Andreas Fault. It runs along the base of the hills, then heads\nuphill through Portola Valley. One of the MROSD trails runs [right along the\nfault](http://www.openspace.org/preserves/pr_los_trancos.asp). A string of\nrich neighborhoods runs along the foothills to the west of 280: Woodside,\nPortola Valley, Los Altos Hills, Saratoga, Los Gatos.  \n  \n[SLAC](http://www.flickr.com/photos/38037974@N00/3890299362/) goes right under\n280 a little bit south of Sand Hill Road. And a couple miles south of that is\nthe Valley's equivalent of the \"Welcome to Las Vegas\" sign: [The\nDish](http://www.flickr.com/photos/paulbarroga/3443486941/).  \n  \n  \n  \n**Notes**  \n  \nI skipped the [Computer History Museum](http://www.computerhistory.org/)\nbecause this is a list of where to see the Valley itself, not where to see\nartifacts from it. I also skipped San Jose. San Jose calls itself the capital\nof Silicon Valley, but when people in the Valley use the phrase \"the city,\"\nthey mean San Francisco. San Jose is a dotted line on a map.  \n  \n**Thanks** to Sam Altman, Paul Buchheit, Patrick Collison, and Jessica\nLivingston for reading drafts of this.  \n  \n\nJuly 2009  \n  \nThe Segway hasn't delivered on its initial promise, to put it mildly. There\nare several reasons why, but one is that people don't want to be seen riding\nthem. Someone riding a Segway looks like a dork.  \n  \nMy friend Trevor Blackwell built [his own Segway](http://tlb.org/#scooter),\nwhich we called the Segwell. He also built a one-wheeled version, [the\nEunicycle](http://tlb.org/#eunicycle), which looks exactly like a regular\nunicycle till you realize the rider isn't pedaling. He has ridden them both to\ndowntown Mountain View to get coffee. When he rides the Eunicycle, people\nsmile at him. But when he rides the Segwell, they shout abuse from their cars:\n\"Too lazy to walk, ya fuckin homo?\"  \n  \nWhy do Segways provoke this reaction? The reason you look like a dork riding a\nSegway is that you look _smug_. You don't seem to be working hard enough.  \n  \nSomeone riding a motorcycle isn't working any harder. But because he's sitting\nastride it, he seems to be making an effort. When you're riding a Segway\nyou're just standing there. And someone who's being whisked along while\nseeming to do no work \u2014 someone in a sedan chair, for example \u2014 can't help but\nlook smug.  \n  \nTry this thought experiment and it becomes clear: imagine something that\nworked like the Segway, but that you rode with one foot in front of the other,\nlike a skateboard. That wouldn't seem nearly as uncool.  \n  \nSo there may be a way to capture more of the market Segway hoped to reach:\nmake a version that doesn't look so easy for the rider. It would also be\nhelpful if the styling was in the tradition of skateboards or bicycles rather\nthan medical devices.  \n  \nCuriously enough, what got Segway into this problem was that the company was\nitself a kind of Segway. It was too easy for them; they were too successful\nraising money. If they'd had to grow the company gradually, by iterating\nthrough several versions they sold to real users, they'd have learned pretty\nquickly that people looked stupid riding them. Instead they had enough to work\nin secret. They had focus groups aplenty, I'm sure, but they didn't have the\npeople yelling insults out of cars. So they never realized they were zooming\nconfidently down a blind alley.  \n  \n\nJuly 2010  \n  \nWhen we sold our startup in 1998 I suddenly got a lot of money. I now had to\nthink about something I hadn't had to think about before: how not to lose it.\nI knew it was possible to go from rich to poor, just as it was possible to go\nfrom poor to rich. But while I'd spent a lot of the past several years\nstudying the paths from [poor to rich](wealth.html), I knew practically\nnothing about the paths from rich to poor. Now, in order to avoid them, I had\nto learn where they were.  \n  \nSo I started to pay attention to how fortunes are lost. If you'd asked me as a\nkid how rich people became poor, I'd have said by spending all their money.\nThat's how it happens in books and movies, because that's the colorful way to\ndo it. But in fact the way most fortunes are lost is not through excessive\nexpenditure, but through bad investments.  \n  \nIt's hard to spend a fortune without noticing. Someone with ordinary tastes\nwould find it hard to blow through more than a few tens of thousands of\ndollars without thinking \"wow, I'm spending a lot of money.\" Whereas if you\nstart trading derivatives, you can lose a million dollars (as much as you\nwant, really) in the blink of an eye.  \n  \nIn most people's minds, spending money on luxuries sets off alarms that making\ninvestments doesn't. Luxuries seem self-indulgent. And unless you got the\nmoney by inheriting it or winning a lottery, you've already been thoroughly\ntrained that self-indulgence leads to trouble. Investing bypasses those\nalarms. You're not spending the money; you're just moving it from one asset to\nanother. Which is why people trying to sell you expensive things say \"it's an\ninvestment.\"  \n  \nThe solution is to develop new alarms. This can be a tricky business, because\nwhile the alarms that prevent you from overspending are so basic that they may\neven be in our DNA, the ones that prevent you from making bad investments have\nto be learned, and are sometimes fairly counterintuitive.  \n  \nA few days ago I realized something surprising: the situation with time is\nmuch the same as with money. The most dangerous way to lose time is not to\nspend it having fun, but to spend it doing fake work. When you spend time\nhaving fun, you know you're being self-indulgent. Alarms start to go off\nfairly quickly. If I woke up one morning and sat down on the sofa and watched\nTV all day, I'd feel like something was terribly wrong. Just thinking about it\nmakes me wince. I'd start to feel uncomfortable after sitting on a sofa\nwatching TV for 2 hours, let alone a whole day.  \n  \nAnd yet I've definitely had days when I might as well have sat in front of a\nTV all day \u2014 days at the end of which, if I asked myself what I got done that\nday, the answer would have been: basically, nothing. I feel bad after these\ndays too, but nothing like as bad as I'd feel if I spent the whole day on the\nsofa watching TV. If I spent a whole day watching TV I'd feel like I was\ndescending into perdition. But the same alarms don't go off on the days when I\nget nothing done, because I'm doing stuff that seems, superficially, like real\nwork. Dealing with email, for example. You do it sitting at a desk. It's not\nfun. So it must be work.  \n  \nWith time, as with money, avoiding pleasure is no longer enough to protect\nyou. It probably was enough to protect hunter-gatherers, and perhaps all pre-\nindustrial societies. So nature and nurture combine to make us avoid self-\nindulgence. But the world has gotten more complicated: the most dangerous\ntraps now are new behaviors that bypass our alarms about self-indulgence by\nmimicking more virtuous types. And the worst thing is, they're not even fun.  \n  \n  \n  \n  \n  \n**Thanks** to Sam Altman, Trevor Blackwell, Patrick Collison, Jessica\nLivingston, and Robert Morris for reading drafts of this.  \n  \n\nOctober 2005  \n  \nThe first Summer Founders Program has just finished. We were surprised how\nwell it went. Overall only about 10% of startups succeed, but if I had to\nguess now, I'd predict three or four of the eight startups we funded will make\nit.  \n  \nOf the startups that needed further funding, I believe all have either closed\na round or are likely to soon. Two have already turned down (lowball)\nacquisition offers.  \n  \nWe would have been happy if just one of the eight seemed promising by the end\nof the summer. What's going on? Did some kind of anomaly make this summer's\napplicants especially good? We worry about that, but we can't think of one.\nWe'll find out this winter.  \n  \nThe whole summer was full of surprises. The best was that the\n[hypothesis](hiring.html) we were testing seems to be correct. Young hackers\ncan start viable companies. This is good news for two reasons: (a) it's an\nencouraging thought, and (b) it means that Y Combinator, which is predicated\non the idea, is not hosed.  \n  \n**Age**  \n  \nMore precisely, the hypothesis was that success in a startup depends mainly on\nhow smart and energetic you are, and much less on how old you are or how much\nbusiness experience you have. The results so far bear this out. The 2005\nsummer founders ranged in age from 18 to 28 (average 23), and there is no\ncorrelation between their ages and how well they're doing.  \n  \nThis should not really be surprising. Bill Gates and Michael Dell were both 19\nwhen they started the companies that made them famous. Young founders are not\na new phenomenon: the trend began as soon as computers got cheap enough for\ncollege kids to afford them.  \n  \nAnother of our hypotheses was that you can start a startup on less money than\nmost people think. Other investors were surprised to hear the most we gave any\ngroup was $20,000. But we knew it was possible to start on that little because\nwe started Viaweb on $10,000.  \n  \nAnd so it proved this summer. Three months' funding is enough to get into\nsecond gear. We had a demo day for potential investors ten weeks in, and seven\nof the eight groups had a prototype ready by that time. One,\n[Reddit](http://reddit.com), had already launched, and were able to give a\ndemo of their live site.  \n  \nA researcher who studied the SFP startups said the one thing they had in\ncommon was that they all worked ridiculously hard. People this age are\ncommonly seen as lazy. I think in some cases it's not so much that they lack\nthe appetite for work, but that the work they're offered is unappetizing.  \n  \nThe experience of the SFP suggests that if you let motivated people do real\nwork, they work hard, whatever their age. As one of the founders said \"I'd\nread that starting a startup consumed your life, but I had no idea what that\nmeant until I did it.\"  \n  \nI'd feel guilty if I were a boss making people work this hard. But we're not\nthese people's bosses. They're working on their own projects. And what makes\nthem work is not us but their competitors. Like good athletes, they don't work\nhard because the coach yells at them, but because they want to win.  \n  \nWe have less power than bosses, and yet the founders work harder than\nemployees. It seems like a win for everyone. The only catch is that we get on\naverage only about 5-7% of the upside, while an employer gets nearly all of\nit. (We're counting on it being 5-7% of a much larger number.)  \n  \nAs well as working hard, the groups all turned out to be extraordinarily\nresponsible. I can't think of a time when one failed to do something they'd\npromised to, even by being late for an appointment. This is another lesson the\nworld has yet to learn. One of the founders discovered that the hardest part\nof arranging a meeting with executives at a big cell phone carrier was getting\na rental company to rent him a car, because he was too young.  \n  \nI think the problem here is much the same as with the apparent laziness of\npeople this age. They seem lazy because the work they're given is pointless,\nand they act irresponsible because they're not given any power. Some of them,\nanyway. We only have a sample size of about twenty, but it seems so far that\nif you let people in their early twenties be their own bosses, they rise to\nthe occasion.  \n  \n**Morale**  \n  \nThe summer founders were as a rule very idealistic. They also wanted very much\nto get rich. These qualities might seem incompatible, but they're not. These\nguys want to get rich, but they want to do it by changing the world. They\nwouldn't (well, seven of the eight groups wouldn't) be interested in making\nmoney by speculating in stocks. They want to make something people use.  \n  \nI think this makes them more effective as founders. As hard as people will\nwork for money, they'll work harder for a cause. And since success in a\nstartup depends so much on motivation, the paradoxical result is that the\npeople likely to make the most money are those who aren't in it just for the\nmoney.  \n  \nThe founders of [Kiko](http://kiko.com), for example, are working on an Ajax\ncalendar. They want to get rich, but they pay more attention to design than\nthey would if that were their only motivation. You can tell just by looking at\nit.  \n  \nI never considered it till this summer, but this might be another reason\nstartups run by hackers tend to do better than those run by MBAs. Perhaps it's\nnot just that hackers understand technology better, but that they're driven by\nmore powerful motivations. Microsoft, as I've said before, is a dangerously\nmisleading example. Their mean corporate culture only works for monopolies.\nGoogle is a better model.  \n  \nConsidering that the summer founders are the sharks in this ocean, we were\nsurprised how frightened most of them were of competitors. But now that I\nthink of it, we were just as frightened when we started Viaweb. For the first\nyear, our initial reaction to news of a competitor was always: we're doomed.\nJust as a hypochondriac magnifies his symptoms till he's convinced he has some\nterrible disease, when you're not used to competitors you magnify them into\nmonsters.  \n  \nHere's a handy rule for startups: competitors are rarely as dangerous as they\nseem. Most will self-destruct before you can destroy them. And it certainly\ndoesn't matter how many of them there are, any more than it matters to the\nwinner of a marathon how many runners are behind him.  \n  \n\"It's a crowded market,\" I remember one founder saying worriedly.  \n  \n\"Are you the current leader?\" I asked.  \n  \n\"Yes.\"  \n  \n\"Is anyone able to develop software faster than you?\"  \n  \n\"Probably not.\"  \n  \n\"Well, if you're ahead now, and you're the fastest, then you'll stay ahead.\nWhat difference does it make how many others there are?\"  \n  \nAnother group was worried when they realized they had to rewrite their\nsoftware from scratch. I told them it would be a bad sign if they didn't. The\nmain function of your initial version is to be rewritten.  \n  \nThat's why we advise groups to ignore issues like scalability,\ninternationalization, and heavy-duty security at first. [1] I can imagine an\nadvocate of \"best practices\" saying these ought to be considered from the\nstart. And he'd be right, except that they interfere with the primary function\nof software in a startup: to be a vehicle for experimenting with its own\ndesign. Having to retrofit internationalization or scalability is a pain,\ncertainly. The only bigger pain is not needing to, because your initial\nversion was too big and rigid to evolve into something users wanted.  \n  \nI suspect this is another reason startups beat big companies. Startups can be\nirresponsible and release version 1s that are light enough to evolve. In big\ncompanies, all the pressure is in the direction of over-engineering.  \n  \n**What Got Learned**  \n  \nOne thing we were curious about this summer was where these groups would need\nhelp. That turned out to vary a lot. Some we helped with technical advice--\nfor example, about how to set up an application to run on multiple servers.\nMost we helped with strategy questions, like what to patent, and what to\ncharge for and what to give away. Nearly all wanted advice about dealing with\nfuture investors: how much money should they take and what kind of terms\nshould they expect?  \n  \nHowever, all the groups quickly learned how to deal with stuff like patents\nand investors. These problems aren't intrinsically difficult, just unfamiliar.  \n  \nIt was surprising-- slightly frightening even-- how fast they learned. The\nweekend before the demo day for investors, we had a practice session where all\nthe groups gave their presentations. They were all terrible. We tried to\nexplain how to make them better, but we didn't have much hope. So on demo day\nI told the assembled angels and VCs that these guys were hackers, not MBAs,\nand so while their software was good, we should not expect slick presentations\nfrom them.  \n  \nThe groups then proceeded to give fabulously slick presentations. Gone were\nthe mumbling recitations of lists of features. It was as if they'd spent the\npast week at acting school. I still don't know how they did it.  \n  \nPerhaps watching each others' presentations helped them see what they'd been\ndoing wrong. Just as happens in college, the summer founders learned a lot\nfrom one another-- maybe more than they learned from us. A lot of the problems\nthey face are the same, from dealing with investors to hacking Javascript.  \n  \nI don't want to give the impression there were no problems this summer. A lot\nwent wrong, as usually happens with startups. One group got an \"[exploding\nterm-sheet](http://www.ventureblog.com/articles/indiv/2003/000024.html)\" from\nsome VCs. Pretty much all the groups who had dealings with big companies found\nthat big companies do everything infinitely slowly. (This is to be expected.\nIf big companies weren't incapable, there would be no room for startups to\nexist.) And of course there were the usual nightmares associated with servers.  \n  \nIn short, the disasters this summer were just the usual childhood diseases.\nSome of this summer's eight startups will probably die eventually; it would be\nextraordinary if all eight succeeded. But what kills them will not be\ndramatic, external threats, but a mundane, internal one: not getting enough\ndone.  \n  \nSo far, though, the news is all good. In fact, we were surprised how much fun\nthe summer was for us. The main reason was how much we liked the founders.\nThey're so earnest and hard-working. They seem to like us too. And this\nillustrates another advantage of investing over hiring: our relationship with\nthem is way better than it would be between a boss and an employee. Y\nCombinator ends up being more like an older brother than a parent.  \n  \nI was surprised how much time I spent making introductions. Fortunately I\ndiscovered that when a startup needed to talk to someone, I could usually get\nto the right person by at most one hop. I remember wondering, how did my\nfriends get to be so eminent? and a second later realizing: shit, I'm forty.  \n  \nAnother surprise was that the three-month batch format, which we were forced\ninto by the constraints of the summer, turned out to be an advantage. When we\nstarted Y Combinator, we planned to invest the way other venture firms do: as\nproposals came in, we'd evaluate them and decide yes or no. The SFP was just\nan experiment to get things started. But it worked so well that we plan to do\n[all](http://ycombinator.com/funding.html) our investing this way, one cycle\nin the summer and one in winter. It's more efficient for us, and better for\nthe startups too.  \n  \nSeveral groups said our weekly dinners saved them from a common problem\nafflicting startups: working so hard that one has no social life. (I remember\nthat part all too well.) This way, they were guaranteed a social event at\nleast once a week.  \n  \n**Independence**  \n  \nI've heard Y Combinator described as an \"incubator.\" Actually we're the\nopposite: incubators exert more control than ordinary VCs, and we make a point\nof exerting less. Among other things, incubators usually make you work in\ntheir office-- that's where the word \"incubator\" comes from. That seems the\nwrong model. If investors get too involved, they smother one of the most\npowerful forces in a startup: the feeling that it's your own company.  \n  \nIncubators were conspicuous failures during the Bubble. There's still debate\nabout whether this was because of the Bubble, or because they're a bad idea.\nMy vote is they're a bad idea. I think they fail because they select for the\nwrong people. When we were starting a startup, we would never have taken\nfunding from an \"incubator.\" We can find office space, thanks; just give us\nthe money. And people with that attitude are the ones likely to succeed in\nstartups.  \n  \nIndeed, one quality all the founders shared this summer was a spirit of\nindependence. I've been wondering about that. Are some people just a lot more\nindependent than others, or would everyone be this way if they were allowed\nto?  \n  \nAs with most nature/nurture questions, the answer is probably: some of each.\nBut my main conclusion from the summer is that there's more environment in the\nmix than most people realize. I could see that from how the founders'\nattitudes _changed_ during the summer. Most were emerging from twenty or so\nyears of being told what to do. They seemed a little surprised at having total\nfreedom. But they grew into it really quickly; some of these guys now seem\nabout four inches taller (metaphorically) than they did at the beginning of\nthe summer.  \n  \nWhen we asked the summer founders what surprised them most about starting a\ncompany, one said \"the most shocking thing is that it worked.\"  \n  \nIt will take more experience to know for sure, but my guess is that a lot of\nhackers could do this-- that if you put people in a position of independence,\nthey develop the qualities they need. Throw them off a cliff, and most will\nfind on the way down that they have wings.  \n  \nThe reason this is news to anyone is that the same forces work in the other\ndirection too. Most hackers are employees, and this\n[molds](http://software.ericsink.com/entries/No_Great_Hackers.html) you into\nsomeone to whom starting a startup seems impossible as surely as starting a\nstartup molds you into someone who can handle it.  \n  \nIf I'm right, \"hacker\" will mean something different in twenty years than it\ndoes now. Increasingly it will mean the people who run the company. Y\nCombinator is just accelerating a process that would have happened anyway.\nPower is shifting from the people who deal with money to the people who create\ntechnology, and if our experience this summer is any guide, this will be a\ngood thing.  \n  \n  \n  \n**Notes**  \n  \n[1] By heavy-duty security I mean efforts to protect against truly determined\nattackers.  \n  \nThe\n[image](https://sep.turbifycdn.com/ty/cdn/paulgraham/sfptable.jpg?t=1688221954&)\nshows us, the 2005 summer founders, and Smartleaf co-founders Mark Nitzberg\nand Olin Shivers at the 30-foot table Kate Courteau designed for us. Photo by\nAlex Lewin.  \n  \n**Thanks** to Sarah Harlin, Steve Huffman, Jessica Livingston, Zak Stone, and\nAaron Swartz for reading drafts of this.  \n  \n  \n\nMarch 2021  \n  \nI try to write using ordinary words and simple sentences.  \n  \nThat kind of writing is easier to read, and the easier something is to read,\nthe more deeply readers will engage with it. The less energy they expend on\nyour prose, the more they'll have left for your ideas.  \n  \nAnd the further they'll read. Most readers' energy tends to flag part way\nthrough an article or essay. If the friction of reading is low enough, more\nkeep going till the end.  \n  \nThere's an Italian dish called _saltimbocca_ , which means \"leap into the\nmouth.\" My goal when writing might be called _saltintesta_ : the ideas leap\ninto your head and you barely notice the words that got them there.  \n  \nIt's too much to hope that writing could ever be pure ideas. You might not\neven want it to be. But for most writers, most of the time, that's the goal to\naim for. The gap between most writing and pure ideas is not filled with\npoetry.  \n  \nPlus it's more considerate to write simply. When you write in a fancy way to\nimpress people, you're making them do extra work just so you can seem cool.\nIt's like trailing a long train behind you that readers have to carry.  \n  \nAnd remember, if you're writing in English, that a lot of your readers won't\nbe native English speakers. Their understanding of ideas may be way ahead of\ntheir understanding of English. So you can't assume that writing about a\ndifficult topic means you can use difficult words.  \n  \nOf course, fancy writing doesn't just conceal ideas. It can also conceal the\nlack of them. That's why some people write that way, to conceal the fact that\nthey have\n[__](https://scholar.google.com/scholar?hl=en&as_sdt=0%2C5&q=hermeneutic+dialectics+hegemonic+modalities)nothing\nto say. Whereas writing simply keeps you honest. If you say nothing simply, it\nwill be obvious to everyone, including you.  \n  \nSimple writing also lasts better. People reading your stuff in the future will\nbe in much the same position as people from other countries reading it today.\nThe culture and the language will have changed. It's not vain to care about\nthat, any more than it's vain for a woodworker to build a chair to last.  \n  \nIndeed, lasting is not merely an accidental quality of chairs, or writing.\nIt's a sign you did a good job.  \n  \nBut although these are all real advantages of writing simply, none of them are\nwhy I do it. The main reason I write simply is that it offends me not to. When\nI write a sentence that seems too complicated, or that uses unnecessarily\nintellectual words, it doesn't seem fancy to me. It seems clumsy.  \n  \nThere are of course times when you want to use a complicated sentence or fancy\nword for effect. But you should never do it by accident.  \n  \nThe other reason my writing ends up being simple is the way I do it. I write\nthe first draft fast, then spend days editing it, trying to get everything\njust right. Much of this editing is cutting, and that makes simple writing\neven simpler.  \n  \n\nOctober 2021  \n  \nIf you asked people what was special about Einstein, most would say that he\nwas really smart. Even the ones who tried to give you a more sophisticated-\nsounding answer would probably think this first. Till a few years ago I would\nhave given the same answer myself. But that wasn't what was special about\nEinstein. What was special about him was that he had important new ideas.\nBeing very smart was a necessary precondition for having those ideas, but the\ntwo are not identical.  \n  \nIt may seem a hair-splitting distinction to point out that intelligence and\nits consequences are not identical, but it isn't. There's a big gap between\nthem. Anyone who's spent time around universities and research labs knows how\nbig. There are a lot of genuinely smart people who don't achieve very much.  \n  \nI grew up thinking that being smart was the thing most to be desired. Perhaps\nyou did too. But I bet it's not what you really want. Imagine you had a choice\nbetween being really smart but discovering nothing new, and being less smart\nbut discovering lots of new ideas. Surely you'd take the latter. I would. The\nchoice makes me uncomfortable, but when you see the two options laid out\nexplicitly like that, it's obvious which is better.  \n  \nThe reason the choice makes me uncomfortable is that being smart still feels\nlike the thing that matters, even though I know intellectually that it isn't.\nI spent so many years thinking it was. The circumstances of childhood are a\nperfect storm for fostering this illusion. Intelligence is much easier to\nmeasure than the value of new ideas, and you're constantly being judged by it.\nWhereas even the kids who will ultimately discover new things aren't usually\ndiscovering them yet. For kids that way inclined, intelligence is the only\ngame in town.  \n  \nThere are more subtle reasons too, which persist long into adulthood.\nIntelligence wins in conversation, and thus becomes the basis of the dominance\nhierarchy. [1] Plus having new ideas is such a new thing historically, and\neven now done by so few people, that society hasn't yet assimilated the fact\nthat this is the actual destination, and intelligence merely a means to an\nend. [2]  \n  \nWhy do so many smart people fail to discover anything new? Viewed from that\ndirection, the question seems a rather depressing one. But there's another way\nto look at it that's not just more optimistic, but more interesting as well.\nClearly intelligence is not the only ingredient in having new ideas. What are\nthe other ingredients? Are they things we could cultivate?  \n  \nBecause the trouble with intelligence, they say, is that it's mostly inborn.\nThe evidence for this seems fairly convincing, especially considering that\nmost of us don't want it to be true, and the evidence thus has to face a stiff\nheadwind. But I'm not going to get into that question here, because it's the\nother ingredients in new ideas that I care about, and it's clear that many of\nthem can be cultivated.  \n  \nThat means the truth is excitingly different from the story I got as a kid. If\nintelligence is what matters, and also mostly inborn, the natural consequence\nis a sort of _Brave New World_ fatalism. The best you can do is figure out\nwhat sort of work you have an \"aptitude\" for, so that whatever intelligence\nyou were born with will at least be put to the best use, and then work as hard\nas you can at it. Whereas if intelligence isn't what matters, but only one of\nseveral ingredients in what does, and many of those aren't inborn, things get\nmore interesting. You have a lot more control, but the problem of how to\narrange your life becomes that much more complicated.  \n  \nSo what are the other ingredients in having new ideas? The fact that I can\neven ask this question proves the point I raised earlier \u2014 that society hasn't\nassimilated the fact that it's this and not intelligence that matters.\nOtherwise we'd all know the answers to such a fundamental question. [3]  \n  \nI'm not going to try to provide a complete catalogue of the other ingredients\nhere. This is the first time I've posed the question to myself this way, and I\nthink it may take a while to answer. But I wrote recently about one of the\nmost important: an obsessive [_interest_](genius.html) in a particular topic.\nAnd this can definitely be cultivated.  \n  \nAnother quality you need in order to discover new ideas is [_independent-\nmindedness_](think.html). I wouldn't want to claim that this is distinct from\nintelligence \u2014 I'd be reluctant to call someone smart who wasn't independent-\nminded \u2014 but though largely inborn, this quality seems to be something that\ncan be cultivated to some extent.  \n  \nThere are general techniques for having new ideas \u2014 for example, for working\non your own [_projects_](own.html) and for overcoming the obstacles you face\nwith [_early_](early.html) work \u2014 and these can all be learned. Some of them\ncan be learned by societies. And there are also collections of techniques for\ngenerating specific types of new ideas, like [startup\nideas](startupideas.html) and [essay topics](essay.html).  \n  \nAnd of course there are a lot of fairly mundane ingredients in discovering new\nideas, like [_working hard_](hwh.html), getting enough sleep, avoiding certain\nkinds of stress, having the right colleagues, and finding tricks for working\non what you want even when it's not what you're supposed to be working on.\nAnything that prevents people from doing great work has an inverse that helps\nthem to. And this class of ingredients is not as boring as it might seem at\nfirst. For example, having new ideas is generally associated with youth. But\nperhaps it's not youth per se that yields new ideas, but specific things that\ncome with youth, like good health and lack of responsibilities. Investigating\nthis might lead to strategies that will help people of any age to have better\nideas.  \n  \nOne of the most surprising ingredients in having new ideas is writing ability.\nThere's a class of new ideas that are best discovered by writing essays and\nbooks. And that \"by\" is deliberate: you don't think of the ideas first, and\nthen merely write them down. There is a kind of thinking that one does by\nwriting, and if you're clumsy at writing, or don't enjoy doing it, that will\nget in your way if you try to do this kind of thinking. [4]  \n  \nI predict the gap between intelligence and new ideas will turn out to be an\ninteresting place. If we think of this gap merely as a measure of unrealized\npotential, it becomes a sort of wasteland that we try to hurry through with\nour eyes averted. But if we flip the question, and start inquiring into the\nother ingredients in new ideas that it implies must exist, we can mine this\ngap for discoveries about discovery.  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] What wins in conversation depends on who with. It ranges from mere\naggressiveness at the bottom, through quick-wittedness in the middle, to\nsomething closer to actual intelligence at the top, though probably always\nwith some component of quick-wittedness.  \n  \n[2] Just as intelligence isn't the only ingredient in having new ideas, having\nnew ideas isn't the only thing intelligence is useful for. It's also useful,\nfor example, in diagnosing problems and figuring out how to fix them. Both\noverlap with having new ideas, but both have an end that doesn't.  \n  \nThose ways of using intelligence are much more common than having new ideas.\nAnd in such cases intelligence is even harder to distinguish from its\nconsequences.  \n  \n[3] Some would attribute the difference between intelligence and having new\nideas to \"creativity,\" but this doesn't seem a very useful term. As well as\nbeing pretty vague, it's shifted half a frame sideways from what we care\nabout: it's neither separable from intelligence, nor responsible for all the\ndifference between intelligence and having new ideas.  \n  \n[4] Curiously enough, this essay is an example. It started out as an essay\nabout writing ability. But when I came to the distinction between intelligence\nand having new ideas, that seemed so much more important that I turned the\noriginal essay inside out, making that the topic and my original topic one of\nthe points in it. As in many other fields, that level of reworking is easier\nto contemplate once you've had a lot of practice.  \n  \n  \n  \n**Thanks** to Trevor Blackwell, Patrick Collison, Jessica Livingston, Robert\nMorris, Michael Nielsen, and Lisa Randall for reading drafts of this.  \n  \n\nMarch 2006  \n  \n _(This essay is derived from a talk at Google.)_  \n  \nA few weeks ago I found to my surprise that I'd been granted four\n[patents](http://paulgraham.infogami.com/blog/morepatents). This was all the\nmore surprising because I'd only applied for three. The patents aren't mine,\nof course. They were assigned to Viaweb, and became Yahoo's when they bought\nus. But the news set me thinking about the question of software patents\ngenerally.  \n  \nPatents are a hard problem. I've had to advise most of the startups we've\nfunded about them, and despite years of experience I'm still not always sure\nI'm giving the right advice.  \n  \nOne thing I do feel pretty certain of is that if you're against software\npatents, you're against patents in general. Gradually our machines consist\nmore and more of software. Things that used to be done with levers and cams\nand gears are now done with loops and trees and closures. There's nothing\nspecial about physical embodiments of control systems that should make them\npatentable, and the software equivalent not.  \n  \nUnfortunately, patent law is inconsistent on this point. Patent law in most\ncountries says that algorithms aren't patentable. This rule is left over from\na time when \"algorithm\" meant something like the Sieve of Eratosthenes. In\n1800, people could not see as readily as we can that a great many patents on\nmechanical objects were really patents on the algorithms they embodied.  \n  \nPatent lawyers still have to pretend that's what they're doing when they\npatent algorithms. You must not use the word \"algorithm\" in the title of a\npatent application, just as you must not use the word \"essays\" in the title of\na book. If you want to patent an algorithm, you have to frame it as a computer\nsystem executing that algorithm. Then it's mechanical; phew. The default\neuphemism for algorithm is \"system and method.\" Try a patent search for that\nphrase and see how many results you get.  \n  \nSince software patents are no different from hardware patents, people who say\n\"software patents are evil\" are saying simply \"patents are evil.\" So why do so\nmany people complain about software patents specifically?  \n  \nI think the problem is more with the patent office than the concept of\nsoftware patents. Whenever software meets government, bad things happen,\nbecause software changes fast and government changes slow. The patent office\nhas been overwhelmed by both the volume and the novelty of applications for\nsoftware patents, and as a result they've made a lot of mistakes.  \n  \nThe most common is to grant patents that shouldn't be granted. To be\npatentable, an invention has to be more than new. It also has to be non-\nobvious. And this, especially, is where the USPTO has been dropping the ball.\nSlashdot has an icon that expresses the problem vividly: a knife and fork with\nthe words \"patent pending\" superimposed.  \n  \nThe scary thing is, this is the _only_ icon they have for patent stories.\nSlashdot readers now take it for granted that a story about a patent will be\nabout a bogus patent. That's how bad the problem has become.  \n  \nThe problem with Amazon's notorious one-click patent, for example, is not that\nit's a software patent, but that it's obvious. Any online store that kept\npeople's shipping addresses would have implemented this. The reason Amazon did\nit first was not that they were especially smart, but because they were one of\nthe earliest sites with enough clout to force customers to log in before they\ncould buy something. [1]  \n  \nWe, as hackers, know the USPTO is letting people patent the knives and forks\nof our world. The problem is, the USPTO are not hackers. They're probably good\nat judging new inventions for casting steel or grinding lenses, but they don't\nunderstand software yet.  \n  \nAt this point an optimist would be tempted to add \"but they will eventually.\"\nUnfortunately that might not be true. The problem with software patents is an\ninstance of a more general one: the patent office takes a while to understand\nnew technology. If so, this problem will only get worse, because the rate of\ntechnological change seems to be increasing. In thirty years, the patent\noffice may understand the sort of things we now patent as software, but there\nwill be other new types of inventions they understand even less.  \n  \nApplying for a patent is a negotiation. You generally apply for a broader\npatent than you think you'll be granted, and the examiners reply by throwing\nout some of your claims and granting others. So I don't really blame Amazon\nfor applying for the one-click patent. The big mistake was the patent\noffice's, for not insisting on something narrower, with real technical\ncontent. By granting such an over-broad patent, the USPTO in effect slept with\nAmazon on the first date. Was Amazon supposed to say no?  \n  \nWhere Amazon went over to the dark side was not in applying for the patent,\nbut in enforcing it. A lot of companies (Microsoft, for example) have been\ngranted large numbers of preposterously over-broad patents, but they keep them\nmainly for defensive purposes. Like nuclear weapons, the main role of big\ncompanies' patent portfolios is to threaten anyone who attacks them with a\ncounter-suit. Amazon's suit against Barnes & Noble was thus the equivalent of\na nuclear first strike.  \n  \nThat suit probably hurt Amazon more than it helped them. Barnes & Noble was a\nlame site; Amazon would have crushed them anyway. To attack a rival they could\nhave ignored, Amazon put a lasting black mark on their own reputation. Even\nnow I think if you asked hackers to free-associate about Amazon, the one-click\npatent would turn up in the first ten topics.  \n  \nGoogle clearly doesn't feel that merely holding patents is evil. They've\napplied for a lot of them. Are they hypocrites? Are patents evil?  \n  \nThere are really two variants of that question, and people answering it often\naren't clear in their own minds which they're answering. There's a narrow\nvariant: is it bad, given the current legal system, to apply for patents? and\nalso a broader one: is it bad that the current legal system allows patents?  \n  \nThese are separate questions. For example, in preindustrial societies like\nmedieval Europe, when someone attacked you, you didn't call the police. There\nwere no police. When attacked, you were supposed to fight back, and there were\nconventions about how to do it. Was this wrong? That's two questions: was it\nwrong to take justice into your own hands, and was it wrong that you had to?\nWe tend to say yes to the second, but no to the first. If no one else will\ndefend you, you have to defend yourself. [2]  \n  \nThe situation with patents is similar. Business is a kind of ritualized\nwarfare. Indeed, it evolved from actual warfare: most early traders switched\non the fly from merchants to pirates depending on how strong you seemed. In\nbusiness there are certain rules describing how companies may and may not\ncompete with one another, and someone deciding that they're going to play by\ntheir own rules is missing the point. Saying \"I'm not going to apply for\npatents just because everyone else does\" is not like saying \"I'm not going to\nlie just because everyone else does.\" It's more like saying \"I'm not going to\nuse TCP/IP just because everyone else does.\" Oh yes you are.  \n  \nA closer comparison might be someone seeing a hockey game for the first time,\nrealizing with shock that the players were _deliberately_ bumping into one\nanother, and deciding that one would on no account be so rude when playing\nhockey oneself.  \n  \nHockey allows checking. It's part of the game. If your team refuses to do it,\nyou simply lose. So it is in business. Under the present rules, patents are\npart of the game.  \n  \nWhat does that mean in practice? We tell the startups we fund not to worry\nabout infringing patents, because startups rarely get sued for patent\ninfringement. There are only two reasons someone might sue you: for money, or\nto prevent you from competing with them. Startups are too poor to be worth\nsuing for money. And in practice they don't seem to get sued much by\ncompetitors, either. They don't get sued by other startups because (a) patent\nsuits are an expensive distraction, and (b) since the other startups are as\nyoung as they are, their patents probably haven't issued yet. [3] Nor do\nstartups, at least in the software business, seem to get sued much by\nestablished competitors. Despite all the patents Microsoft holds, I don't know\nof an instance where they sued a startup for patent infringement. Companies\nlike Microsoft and Oracle don't win by winning lawsuits. That's too uncertain.\nThey win by locking competitors out of their sales channels. If you do manage\nto threaten them, they're more likely to buy you than sue you.  \n  \nWhen you read of big companies filing patent suits against smaller ones, it's\nusually a big company on the way down, grasping at straws. For example,\nUnisys's attempts to enforce their patent on LZW compression. When you see a\nbig company threatening patent suits, sell. When a company starts fighting\nover IP, it's a sign they've lost the real battle, for users.  \n  \nA company that sues competitors for patent infringement is like a defender who\nhas been beaten so thoroughly that he turns to plead with the referee. You\ndon't do that if you can still reach the ball, even if you genuinely believe\nyou've been fouled. So a company threatening patent suits is a company in\n[trouble](http://www.theregister.co.uk/2006/03/15/azul_sues_sun/).  \n  \nWhen we were working on Viaweb, a bigger company in the e-commerce business\nwas granted a patent on online ordering, or something like that. I got a call\nfrom a VP there asking if we'd like to license it. I replied that I thought\nthe patent was completely bogus, and would never hold up in court. \"Ok,\" he\nreplied. \"So, are you guys hiring?\"  \n  \nIf your startup grows big enough, however, you'll start to get sued, no matter\nwhat you do. If you go public, for example, you'll be sued by multiple patent\ntrolls who hope you'll pay them off to go away. More on them later.  \n  \nIn other words, no one will sue you for patent infringement till you have\nmoney, and once you have money, people will sue you whether they have grounds\nto or not. So I advise fatalism. Don't waste your time worrying about patent\ninfringement. You're probably violating a patent every time you tie your\nshoelaces. At the start, at least, just worry about making something great and\ngetting lots of users. If you grow to the point where anyone considers you\nworth attacking, you're doing well.  \n  \nWe do advise the companies we fund to apply for patents, but not so they can\nsue competitors. Successful startups either get bought or grow into big\ncompanies. If a startup wants to grow into a big company, they should apply\nfor patents to build up the patent portfolio they'll need to maintain an armed\ntruce with other big companies. If they want to get bought, they should apply\nfor patents because patents are part of the mating dance with acquirers.  \n  \nMost startups that succeed do it by getting bought, and most acquirers care\nabout patents. Startup acquisitions are usually a build-vs-buy decision for\nthe acquirer. Should we buy this little startup or build our own? And two\nthings, especially, make them decide not to build their own: if you already\nhave a large and rapidly growing user base, and if you have a fairly solid\npatent application on critical parts of your software.  \n  \nThere's a third reason big companies should prefer buying to building: that if\nthey built their own, they'd screw it up. But few big companies are smart\nenough yet to admit this to themselves. It's usually the acquirer's engineers\nwho are asked how hard it would be for the company to build their own, and\nthey overestimate their abilities. [4] A patent seems to change the balance.\nIt gives the acquirer an excuse to admit they couldn't copy what you're doing.\nIt may also help them to grasp what's special about your technology.  \n  \nFrankly, it surprises me how small a role patents play in the software\nbusiness. It's kind of ironic, considering all the dire things experts say\nabout software patents stifling innovation, but when one looks closely at the\nsoftware business, the most striking thing is how little patents seem to\nmatter.  \n  \nIn other fields, companies regularly sue competitors for patent infringement.\nFor example, the airport baggage scanning business was for many years a cozy\nduopoly shared between two companies, InVision and L-3. In 2002 a startup\ncalled Reveal appeared, with new technology that let them build scanners a\nthird the size. They were sued for patent infringement before they'd even\nreleased a product.  \n  \nYou rarely hear that kind of story in our world. The one example I've found\nis, embarrassingly enough, Yahoo, which filed a patent suit against a gaming\nstartup called Xfire in 2005. Xfire doesn't seem to be a very big deal, and\nit's hard to say why Yahoo felt threatened. Xfire's VP of engineering had\nworked at Yahoo on similar stuff-- in fact, he was listed as an inventor on\nthe patent Yahoo sued over-- so perhaps there was something personal about it.\nMy guess is that someone at Yahoo goofed. At any rate they didn't pursue the\nsuit very vigorously.  \n  \nWhy do patents play so small a role in software? I can think of three possible\nreasons.  \n  \nOne is that software is so complicated that patents by themselves are not\nworth very much. I may be maligning other fields here, but it seems that in\nmost types of engineering you can hand the details of some new technique to a\ngroup of medium-high quality people and get the desired result. For example,\nif someone develops a new process for smelting ore that gets a better yield,\nand you assemble a team of qualified experts and tell them about it, they'll\nbe able to get the same yield. This doesn't seem to work in software. Software\nis so subtle and unpredictable that \"qualified experts\" don't get you very\nfar.  \n  \nThat's why we rarely hear phrases like \"qualified expert\" in the software\nbusiness. What that level of ability can get you is, say, to make your\nsoftware compatible with some other piece of software-- in eight months, at\nenormous cost. To do anything harder you need individual brilliance. If you\nassemble a team of qualified experts and tell them to make a new web-based\nemail program, they'll get their asses kicked by a team of inspired nineteen\nyear olds.  \n  \nExperts can implement, but they can't [design](taste.html). Or rather,\nexpertise in implementation is the only kind most people, including the\nexperts themselves, can measure. [5]  \n  \nBut design is a definite skill. It's not just an airy intangible. Things\nalways seem intangible when you don't understand them. Electricity seemed an\nairy intangible to most people in 1800. Who knew there was so much to know\nabout it? So it is with design. Some people are good at it and some people are\nbad at it, and there's something very tangible they're good or bad at.  \n  \nThe reason design counts so much in software is probably that there are fewer\nconstraints than on physical things. Building physical things is expensive and\ndangerous. The space of possible choices is smaller; you tend to have to work\nas part of a larger group; and you're subject to a lot of regulations. You\ndon't have any of that if you and a couple friends decide to create a new web-\nbased application.  \n  \nBecause there's so much scope for design in software, a successful application\ntends to be way more than the sum of its patents. What protects little\ncompanies from being copied by bigger competitors is not just their patents,\nbut the thousand little things the big company will get wrong if they try.  \n  \nThe second reason patents don't count for much in our world is that startups\nrarely attack big companies head-on, the way Reveal did. In the software\nbusiness, startups beat established companies by transcending them. Startups\ndon't build desktop word processing programs to compete with Microsoft Word.\n[6] They build Writely. If this paradigm is crowded, just wait for the next\none; they run pretty frequently on this route.  \n  \nFortunately for startups, big companies are extremely good at denial. If you\ntake the trouble to attack them from an oblique angle, they'll meet you half-\nway and maneuver to keep you in their blind spot. To sue a startup would mean\nadmitting it was dangerous, and that often means seeing something the big\ncompany doesn't want to see. IBM used to sue its mainframe competitors\nregularly, but they didn't bother much about the microcomputer industry\nbecause they didn't want to see the threat it posed. Companies building web\nbased apps are similarly protected from Microsoft, which even now doesn't want\nto imagine a world in which Windows is irrelevant.  \n  \nThe third reason patents don't seem to matter very much in software is public\nopinion-- or rather, hacker opinion. In a recent\n[interview](http://www.computing.co.uk/forbes/news/2152720/interview-steve-\nballmer-linux), Steve Ballmer coyly left open the possibility of attacking\nLinux on patent grounds. But I doubt Microsoft would ever be so stupid. They'd\nface the mother of all boycotts. And not just from the technical community in\ngeneral; a lot of their own people would rebel.  \n  \nGood hackers care a lot about matters of principle, and they are highly\nmobile. If a company starts misbehaving, smart people won't work there. For\nsome reason this seems to be more true in software than other businesses. I\ndon't think it's because hackers have intrinsically higher principles so much\nas that their skills are easily transferrable. Perhaps we can split the\ndifference and say that mobility gives hackers the luxury of being principled.  \n  \nGoogle's \"don't be evil\" policy may for this reason be the most valuable thing\nthey've discovered. It's very constraining in some ways. If Google does do\nsomething evil, they get doubly whacked for it: once for whatever they did,\nand again for hypocrisy. But I think it's worth it. It helps them to hire the\nbest people, and it's better, even from a purely selfish point of view, to be\nconstrained by principles than by stupidity.  \n  \n(I wish someone would get this point across to the present administration.)  \n  \nI'm not sure what the proportions are of the preceding three ingredients, but\nthe custom among the big companies seems to be not to sue the small ones, and\nthe startups are mostly too busy and too poor to sue one another. So despite\nthe huge number of software patents there's not a lot of suing going on. With\none exception: patent trolls.  \n  \nPatent trolls are companies consisting mainly of lawyers whose whole business\nis to accumulate patents and threaten to sue companies who actually make\nthings. Patent trolls, it seems safe to say, are evil. I feel a bit stupid\nsaying that, because when you're saying something that Richard Stallman and\nBill Gates would both agree with, you must be perilously close to tautologies.  \n  \nThe CEO of Forgent, one of the most notorious patent trolls, says that what\nhis company does is \"the American way.\" Actually that's not true. The American\nway is to make money by [creating wealth](wealth.html), not by suing people.\n[7] What companies like Forgent do is actually the proto-industrial way. In\nthe period just before the industrial revolution, some of the greatest\nfortunes in countries like England and France were made by courtiers who\nextracted some lucrative right from the crown-- like the right to collect\ntaxes on the import of silk-- and then used this to squeeze money from the\nmerchants in that business. So when people compare patent trolls to the mafia,\nthey're more right than they know, because the mafia too are not merely bad,\nbut bad specifically in the sense of being an obsolete business model.  \n  \nPatent trolls seem to have caught big companies by surprise. In the last\ncouple years they've extracted hundreds of millions of dollars from them.\nPatent trolls are hard to fight precisely because they create nothing. Big\ncompanies are safe from being sued by other big companies because they can\nthreaten a counter-suit. But because patent trolls don't make anything,\nthere's nothing they can be sued for. I predict this loophole will get closed\nfairly quickly, at least by legal standards. It's clearly an abuse of the\nsystem, and the victims are powerful. [8]  \n  \nBut evil as patent trolls are, I don't think they hamper innovation much. They\ndon't sue till a startup has made money, and by that point the innovation that\ngenerated it has already happened. I can't think of a startup that avoided\nworking on some problem because of patent trolls.  \n  \nSo much for hockey as the game is played now. What about the more theoretical\nquestion of whether hockey would be a better game without checking? Do patents\nencourage or discourage innovation?  \n  \nThis is a very hard question to answer in the general case. People write whole\nbooks on the topic. One of my main hobbies is the history of technology, and\neven though I've studied the subject for years, it would take me several weeks\nof research to be able to say whether patents have in general been a net win.  \n  \nOne thing I can say is that 99.9% of the people who express opinions on the\nsubject do it not based on such research, but out of a kind of religious\nconviction. At least, that's the polite way of putting it; the colloquial\nversion involves speech coming out of organs not designed for that purpose.  \n  \nWhether they encourage innovation or not, patents were at least intended to.\nYou don't get a patent for nothing. In return for the exclusive right to use\nan idea, you have to _publish_ it, and it was largely to encourage such\nopenness that patents were established.  \n  \nBefore patents, people protected ideas by keeping them secret. With patents,\ncentral governments said, in effect, if you tell everyone your idea, we'll\nprotect it for you. There is a parallel here to the rise of civil order, which\nhappened at roughly the same time. Before central governments were powerful\nenough to enforce order, rich people had private armies. As governments got\nmore powerful, they gradually compelled magnates to cede most responsibility\nfor protecting them. (Magnates still have bodyguards, but no longer to protect\nthem from other magnates.)  \n  \nPatents, like police, are involved in many abuses. But in both cases the\ndefault is something worse. The choice is not \"patents or freedom?\" any more\nthan it is \"police or freedom?\" The actual questions are respectively \"patents\nor secrecy?\" and \"police or gangs?\"  \n  \nAs with gangs, we have some idea what secrecy would be like, because that's\nhow things used to be. The economy of medieval Europe was divided up into\nlittle tribes, each jealously guarding their privileges and secrets. In\nShakespeare's time, \"mystery\" was synonymous with \"craft.\" Even today we can\nsee an echo of the secrecy of medieval guilds, in the now pointless secrecy of\nthe Masons.  \n  \nThe most memorable example of medieval industrial secrecy is probably Venice,\nwhich forbade glassblowers to leave the city, and sent assassins after those\nwho tried. We might like to think we wouldn't go so far, but the movie\nindustry has already tried to pass\n[laws](http://news.com.com/2100-1026_3-5106684.html) prescribing three year\nprison terms just for putting movies on public networks. Want to try a\nfrightening thought experiment? If the movie industry could have any law they\nwanted, where would they stop? Short of the death penalty, one assumes, but\nhow close would they get?  \n  \nEven worse than the spectacular abuses might be the overall decrease in\nefficiency that would accompany increased secrecy. As anyone who has dealt\nwith organizations that operate on a \"need to know\" basis can attest, dividing\ninformation up into little cells is terribly inefficient. The flaw in the\n\"need to know\" principle is that you don't _know_ who needs to know something.\nAn idea from one area might spark a great discovery in another. But the\ndiscoverer doesn't know he needs to know it.  \n  \nIf secrecy were the only protection for ideas, companies wouldn't just have to\nbe secretive with other companies; they'd have to be secretive internally.\nThis would encourage what is already the worst trait of big companies.  \n  \nI'm not saying secrecy would be worse than patents, just that we couldn't\ndiscard patents for free. Businesses would become more secretive to\ncompensate, and in some fields this might get ugly. Nor am I defending the\ncurrent patent system. There is clearly a lot that's broken about it. But the\nbreakage seems to affect software less than most other fields.  \n  \nIn the software business I know from experience whether patents encourage or\ndiscourage innovation, and the answer is the type that people who like to\nargue about public policy least like to hear: they don't affect innovation\nmuch, one way or the other. Most innovation in the software business happens\nin startups, and startups should simply ignore other companies' patents. At\nleast, that's what we advise, and we bet money on that advice.  \n  \nThe only real role of patents, for most startups, is as an element of the\nmating dance with acquirers. There patents do help a little. And so they do\nencourage innovation indirectly, in that they give more power to startups,\nwhich is where, pound for pound, the most innovation happens. But even in the\nmating dance, patents are of secondary importance. It matters more to make\nsomething great and get a lot of users.  \n  \n  \n  \n**Notes**  \n  \n[1] You have to be careful here, because a great discovery often seems obvious\nin retrospect. One-click ordering, however, is not such a discovery.  \n  \n[2] \"Turn the other cheek\" skirts the issue; the critical question is not how\nto deal with slaps, but sword thrusts.  \n  \n[3] Applying for a patent is now very slow, but it might actually be bad if\nthat got fixed. At the moment the time it takes to get a patent is\nconveniently just longer than the time it takes a startup to succeed or fail.  \n  \n[4] Instead of the canonical \"could you build this?\" maybe the corp dev guys\nshould be asking \"will you build this?\" or even \"why haven't you already built\nthis?\"  \n  \n[5] Design ability is so hard to measure that you can't even trust the design\nworld's internal standards. You can't assume that someone with a degree in\ndesign is any good at design, or that an eminent designer is any better than\nhis peers. If that worked, any company could build products as good as Apple's\njust by hiring sufficiently qualified designers.  \n  \n[6] If anyone wanted to try, we'd be interested to hear from them. I suspect\nit's one of those things that's not as hard as everyone assumes.  \n  \n[7] Patent trolls can't even claim, like speculators, that they \"create\"\nliquidity.  \n  \n[8] If big companies don't want to wait for the government to take action,\nthere is a way to fight back themselves. For a long time I thought there\nwasn't, because there was nothing to grab onto. But there is one resource\npatent trolls need: lawyers. Big technology companies between them generate a\nlot of legal business. If they agreed among themselves never to do business\nwith any firm employing anyone who had worked for a patent troll, either as an\nemployee or as outside counsel, they could probably starve the trolls of the\nlawyers they need.  \n  \n**Thanks** to Dan Bloomberg, Paul Buchheit, Sarah Harlin, Jessica Livingston,\nand Peter Norvig for reading drafts of this, to Joel Lehrer and Peter Eng for\nanswering my questions about patents, and to Ankur Pansari for inviting me to\nspeak.  \n  \n\n**Like to build things?** Try [Hacker News](http://news.ycombinator.com).  \n  \n  \nAugust 2002  \n  \n _(This article describes the spam-filtering techniques used in the spamproof\nweb-based mail reader we built to exercise[Arc](arc.html). An improved\nalgorithm is described in [Better Bayesian Filtering](better.html).)_  \n  \nI think it's possible to stop spam, and that content-based filters are the way\nto do it. The Achilles heel of the spammers is their message. They can\ncircumvent any other barrier you set up. They have so far, at least. But they\nhave to deliver their message, whatever it is. If we can write software that\nrecognizes their messages, there is no way they can get around that.  \n  \n_ _ _  \n  \nTo the recipient, spam is easily recognizable. If you hired someone to read\nyour mail and discard the spam, they would have little trouble doing it. How\nmuch do we have to do, short of AI, to automate this process?  \n  \nI think we will be able to solve the problem with fairly simple algorithms. In\nfact, I've found that you can filter present-day spam acceptably well using\nnothing more than a Bayesian combination of the spam probabilities of\nindividual words. Using a slightly tweaked (as described below) Bayesian\nfilter, we now miss less than 5 per 1000 spams, with 0 false positives.  \n  \nThe statistical approach is not usually the first one people try when they\nwrite spam filters. Most hackers' first instinct is to try to write software\nthat recognizes individual properties of spam. You look at spams and you\nthink, the gall of these guys to try sending me mail that begins \"Dear Friend\"\nor has a subject line that's all uppercase and ends in eight exclamation\npoints. I can filter out that stuff with about one line of code.  \n  \nAnd so you do, and in the beginning it works. A few simple rules will take a\nbig bite out of your incoming spam. Merely looking for the word \"click\" will\ncatch 79.7% of the emails in my spam corpus, with only 1.2% false positives.  \n  \nI spent about six months writing software that looked for individual spam\nfeatures before I tried the statistical approach. What I found was that\nrecognizing that last few percent of spams got very hard, and that as I made\nthe filters stricter I got more false positives.  \n  \nFalse positives are innocent emails that get mistakenly identified as spams.\nFor most users, missing legitimate email is an order of magnitude worse than\nreceiving spam, so a filter that yields false positives is like an acne cure\nthat carries a risk of death to the patient.  \n  \nThe more spam a user gets, the less likely he'll be to notice one innocent\nmail sitting in his spam folder. And strangely enough, the better your spam\nfilters get, the more dangerous false positives become, because when the\nfilters are really good, users will be more likely to ignore everything they\ncatch.  \n  \nI don't know why I avoided trying the statistical approach for so long. I\nthink it was because I got addicted to trying to identify spam features\nmyself, as if I were playing some kind of competitive game with the spammers.\n(Nonhackers don't often realize this, but most hackers are very competitive.)\nWhen I did try statistical analysis, I found immediately that it was much\ncleverer than I had been. It discovered, of course, that terms like\n\"virtumundo\" and \"teens\" were good indicators of spam. But it also discovered\nthat \"per\" and \"FL\" and \"ff0000\" are good indicators of spam. In fact,\n\"ff0000\" (html for bright red) turns out to be as good an indicator of spam as\nany pornographic term.  \n  \n_ _ _  \n  \nHere's a sketch of how I do statistical filtering. I start with one corpus of\nspam and one of nonspam mail. At the moment each one has about 4000 messages\nin it. I scan the entire text, including headers and embedded html and\njavascript, of each message in each corpus. I currently consider alphanumeric\ncharacters, dashes, apostrophes, and dollar signs to be part of tokens, and\neverything else to be a token separator. (There is probably room for\nimprovement here.) I ignore tokens that are all digits, and I also ignore html\ncomments, not even considering them as token separators.  \n  \nI count the number of times each token (ignoring case, currently) occurs in\neach corpus. At this stage I end up with two large hash tables, one for each\ncorpus, mapping tokens to number of occurrences.  \n  \nNext I create a third hash table, this time mapping each token to the\nprobability that an email containing it is a spam, which I calculate as\nfollows [1]:  (let ((g (* 2 (or (gethash word good) 0))) (b (or (gethash word\nbad) 0))) (unless (< (+ g b) 5) (max .01 (min .99 (float (/ (min 1 (/ b nbad))\n(+ (min 1 (/ g ngood)) (min 1 (/ b nbad)))))))))  where word is the token\nwhose probability we're calculating, good and bad are the hash tables I\ncreated in the first step, and ngood and nbad are the number of nonspam and\nspam messages respectively.  \n  \nI explained this as code to show a couple of important details. I want to bias\nthe probabilities slightly to avoid false positives, and by trial and error\nI've found that a good way to do it is to double all the numbers in good. This\nhelps to distinguish between words that occasionally do occur in legitimate\nemail and words that almost never do. I only consider words that occur more\nthan five times in total (actually, because of the doubling, occurring three\ntimes in nonspam mail would be enough). And then there is the question of what\nprobability to assign to words that occur in one corpus but not the other.\nAgain by trial and error I chose .01 and .99. There may be room for tuning\nhere, but as the corpus grows such tuning will happen automatically anyway.  \n  \nThe especially observant will notice that while I consider each corpus to be a\nsingle long stream of text for purposes of counting occurrences, I use the\nnumber of emails in each, rather than their combined length, as the divisor in\ncalculating spam probabilities. This adds another slight bias to protect\nagainst false positives.  \n  \nWhen new mail arrives, it is scanned into tokens, and the most interesting\nfifteen tokens, where interesting is measured by how far their spam\nprobability is from a neutral .5, are used to calculate the probability that\nthe mail is spam. If probs is a list of the fifteen individual probabilities,\nyou calculate the [combined](naivebayes.html) probability thus:  (let ((prod\n(apply #'* probs))) (/ prod (+ prod (apply #'* (mapcar #'(lambda (x) (- 1 x))\nprobs)))))  One question that arises in practice is what probability to assign\nto a word you've never seen, i.e. one that doesn't occur in the hash table of\nword probabilities. I've found, again by trial and error, that .4 is a good\nnumber to use. If you've never seen a word before, it is probably fairly\ninnocent; spam words tend to be all too familiar.  \n  \nThere are examples of this algorithm being applied to actual emails in an\nappendix at the end.  \n  \nI treat mail as spam if the algorithm above gives it a probability of more\nthan .9 of being spam. But in practice it would not matter much where I put\nthis threshold, because few probabilities end up in the middle of the range.  \n  \n_ _ _  \n  \nOne great advantage of the statistical approach is that you don't have to read\nso many spams. Over the past six months, I've read literally thousands of\nspams, and it is really kind of demoralizing. Norbert Wiener said if you\ncompete with slaves you become a slave, and there is something similarly\ndegrading about competing with spammers. To recognize individual spam features\nyou have to try to get into the mind of the spammer, and frankly I want to\nspend as little time inside the minds of spammers as possible.  \n  \nBut the real advantage of the Bayesian approach, of course, is that you know\nwhat you're measuring. Feature-recognizing filters like SpamAssassin assign a\nspam \"score\" to email. The Bayesian approach assigns an actual probability.\nThe problem with a \"score\" is that no one knows what it means. The user\ndoesn't know what it means, but worse still, neither does the developer of the\nfilter. How many _points_ should an email get for having the word \"sex\" in it?\nA probability can of course be mistaken, but there is little ambiguity about\nwhat it means, or how evidence should be combined to calculate it. Based on my\ncorpus, \"sex\" indicates a .97 probability of the containing email being a\nspam, whereas \"sexy\" indicates .99 probability. And Bayes' Rule, equally\nunambiguous, says that an email containing both words would, in the (unlikely)\nabsence of any other evidence, have a 99.97% chance of being a spam.  \n  \nBecause it is measuring probabilities, the Bayesian approach considers all the\nevidence in the email, both good and bad. Words that occur disproportionately\n_rarely_ in spam (like \"though\" or \"tonight\" or \"apparently\") contribute as\nmuch to decreasing the probability as bad words like \"unsubscribe\" and \"opt-\nin\" do to increasing it. So an otherwise innocent email that happens to\ninclude the word \"sex\" is not going to get tagged as spam.  \n  \nIdeally, of course, the probabilities should be calculated individually for\neach user. I get a lot of email containing the word \"Lisp\", and (so far) no\nspam that does. So a word like that is effectively a kind of password for\nsending mail to me. In my earlier spam-filtering software, the user could set\nup a list of such words and mail containing them would automatically get past\nthe filters. On my list I put words like \"Lisp\" and also my zipcode, so that\n(otherwise rather spammy-sounding) receipts from online orders would get\nthrough. I thought I was being very clever, but I found that the Bayesian\nfilter did the same thing for me, and moreover discovered of a lot of words I\nhadn't thought of.  \n  \nWhen I said at the start that our filters let through less than 5 spams per\n1000 with 0 false positives, I'm talking about filtering my mail based on a\ncorpus of my mail. But these numbers are not misleading, because that is the\napproach I'm advocating: filter each user's mail based on the spam and nonspam\nmail he receives. Essentially, each user should have two delete buttons,\nordinary delete and delete-as-spam. Anything deleted as spam goes into the\nspam corpus, and everything else goes into the nonspam corpus.  \n  \nYou could start users with a seed filter, but ultimately each user should have\nhis own per-word probabilities based on the actual mail he receives. This (a)\nmakes the filters more effective, (b) lets each user decide their own precise\ndefinition of spam, and (c) perhaps best of all makes it hard for spammers to\ntune mails to get through the filters. If a lot of the brain of the filter is\nin the individual databases, then merely tuning spams to get through the seed\nfilters won't guarantee anything about how well they'll get through individual\nusers' varying and much more trained filters.  \n  \nContent-based spam filtering is often combined with a whitelist, a list of\nsenders whose mail can be accepted with no filtering. One easy way to build\nsuch a whitelist is to keep a list of every address the user has ever sent\nmail to. If a mail reader has a delete-as-spam button then you could also add\nthe from address of every email the user has deleted as ordinary trash.  \n  \nI'm an advocate of whitelists, but more as a way to save computation than as a\nway to improve filtering. I used to think that whitelists would make filtering\neasier, because you'd only have to filter email from people you'd never heard\nfrom, and someone sending you mail for the first time is constrained by\nconvention in what they can say to you. Someone you already know might send\nyou an email talking about sex, but someone sending you mail for the first\ntime would not be likely to. The problem is, people can have more than one\nemail address, so a new from-address doesn't guarantee that the sender is\nwriting to you for the first time. It is not unusual for an old friend\n(especially if he is a hacker) to suddenly send you an email with a new from-\naddress, so you can't risk false positives by filtering mail from unknown\naddresses especially stringently.  \n  \nIn a sense, though, my filters do themselves embody a kind of whitelist (and\nblacklist) because they are based on entire messages, including the headers.\nSo to that extent they \"know\" the email addresses of trusted senders and even\nthe routes by which mail gets from them to me. And they know the same about\nspam, including the server names, mailer versions, and protocols.  \n  \n_ _ _  \n  \nIf I thought that I could keep up current rates of spam filtering, I would\nconsider this problem solved. But it doesn't mean much to be able to filter\nout most present-day spam, because spam evolves. Indeed, most [antispam\ntechniques](falsepositives.html) so far have been like pesticides that do\nnothing more than create a new, resistant strain of bugs.  \n  \nI'm more hopeful about Bayesian filters, because they evolve with the spam. So\nas spammers start using \"c0ck\" instead of \"cock\" to evade simple-minded spam\nfilters based on individual words, Bayesian filters automatically notice.\nIndeed, \"c0ck\" is far more damning evidence than \"cock\", and Bayesian filters\nknow precisely how much more.  \n  \nStill, anyone who proposes a plan for spam filtering has to be able to answer\nthe question: if the spammers knew exactly what you were doing, how well could\nthey get past you? For example, I think that if checksum-based spam filtering\nbecomes a serious obstacle, the spammers will just switch to mad-lib\ntechniques for generating message bodies.  \n  \nTo beat Bayesian filters, it would not be enough for spammers to make their\nemails unique or to stop using individual naughty words. They'd have to make\ntheir mails indistinguishable from your ordinary mail. And this I think would\nseverely constrain them. Spam is mostly sales pitches, so unless your regular\nmail is all sales pitches, spams will inevitably have a different character.\nAnd the spammers would also, of course, have to change (and keep changing)\ntheir whole infrastructure, because otherwise the headers would look as bad to\nthe Bayesian filters as ever, no matter what they did to the message body. I\ndon't know enough about the infrastructure that spammers use to know how hard\nit would be to make the headers look innocent, but my guess is that it would\nbe even harder than making the message look innocent.  \n  \nAssuming they could solve the problem of the headers, the spam of the future\nwill probably look something like this:  Hey there. Thought you should check\nout the following: http://www.27meg.com/foo  because that is about as much\nsales pitch as content-based filtering will leave the spammer room to make.\n(Indeed, it will be hard even to get this past filters, because if everything\nelse in the email is neutral, the spam probability will hinge on the url, and\nit will take some effort to make that look neutral.)  \n  \nSpammers range from businesses running so-called opt-in lists who don't even\ntry to conceal their identities, to guys who hijack mail servers to send out\nspams promoting porn sites. If we use filtering to whittle their options down\nto mails like the one above, that should pretty much put the spammers on the\n\"legitimate\" end of the spectrum out of business; they feel obliged by various\nstate laws to include boilerplate about why their spam is not spam, and how to\ncancel your \"subscription,\" and that kind of text is easy to recognize.  \n  \n(I used to think it was naive to believe that stricter laws would decrease\nspam. Now I think that while stricter laws may not decrease the amount of spam\nthat spammers _send,_ they can certainly help filters to decrease the amount\nof spam that recipients actually see.)  \n  \nAll along the spectrum, if you restrict the sales pitches spammers can make,\nyou will inevitably tend to put them out of business. That word _business_ is\nan important one to remember. The spammers are businessmen. They send spam\nbecause it works. It works because although the response rate is abominably\nlow (at best 15 per million, vs 3000 per million for a catalog mailing), the\ncost, to them, is practically nothing. The cost is enormous for the\nrecipients, about 5 man-weeks for each million recipients who spend a second\nto delete the spam, but the spammer doesn't have to pay that.  \n  \nSending spam does cost the spammer something, though. [2] So the lower we can\nget the response rate-- whether by filtering, or by using filters to force\nspammers to dilute their pitches-- the fewer businesses will find it worth\ntheir while to send spam.  \n  \nThe reason the spammers use the kinds of [sales\npitches](http://www.milliondollaremails.com) that they do is to increase\nresponse rates. This is possibly even more disgusting than getting inside the\nmind of a spammer, but let's take a quick look inside the mind of someone who\n_responds_ to a spam. This person is either astonishingly credulous or deeply\nin denial about their sexual interests. In either case, repulsive or idiotic\nas the spam seems to us, it is exciting to them. The spammers wouldn't say\nthese things if they didn't sound exciting. And \"thought you should check out\nthe following\" is just not going to have nearly the pull with the spam\nrecipient as the kinds of things that spammers say now. Result: if it can't\ncontain exciting sales pitches, spam becomes less effective as a marketing\nvehicle, and fewer businesses want to use it.  \n  \nThat is the big win in the end. I started writing spam filtering software\nbecause I didn't want have to look at the stuff anymore. But if we get good\nenough at filtering out spam, it will stop working, and the spammers will\nactually stop sending it.  \n  \n_ _ _  \n  \nOf all the approaches to fighting spam, from software to laws, I believe\nBayesian filtering will be the single most effective. But I also think that\nthe more different kinds of antispam efforts we undertake, the better, because\nany measure that constrains spammers will tend to make filtering easier. And\neven within the world of content-based filtering, I think it will be a good\nthing if there are many different kinds of software being used simultaneously.\nThe more different filters there are, the harder it will be for spammers to\ntune spams to get through them.  \n  \n  \n  \n**Appendix: Examples of Filtering**  \n  \n[Here](https://sep.turbifycdn.com/ty/cdn/paulgraham/spam1.txt?t=1688221954&)\nis an example of a spam that arrived while I was writing this article. The\nfifteen most interesting words in this spam are:  qvp0045 indira mx-05\nintimail $7500 freeyankeedom cdo bluefoxmedia jpg unsecured platinum 3d0 qves\n7c5 7c266675  The words are a mix of stuff from the headers and from the\nmessage body, which is typical of spam. Also typical of spam is that every one\nof these words has a spam probability, in my database, of .99. In fact there\nare more than fifteen words with probabilities of .99, and these are just the\nfirst fifteen seen.  \n  \nUnfortunately that makes this email a boring example of the use of Bayes'\nRule. To see an interesting variety of probabilities we have to look at\n[this](https://sep.turbifycdn.com/ty/cdn/paulgraham/spam2.txt?t=1688221954&)\nactually quite atypical spam.  \n  \nThe fifteen most interesting words in this spam, with their probabilities,\nare:  madam 0.99 promotion 0.99 republic 0.99 shortest 0.047225013 mandatory\n0.047225013 standardization 0.07347802 sorry 0.08221981 supported 0.09019077\npeople's 0.09019077 enter 0.9075001 quality 0.8921298 organization 0.12454646\ninvestment 0.8568143 very 0.14758544 valuable 0.82347786  This time the\nevidence is a mix of good and bad. A word like \"shortest\" is almost as much\nevidence for innocence as a word like \"madam\" or \"promotion\" is for guilt. But\nstill the case for guilt is stronger. If you combine these numbers according\nto Bayes' Rule, the resulting probability is .9027.  \n  \n\"Madam\" is obviously from spams beginning \"Dear Sir or Madam.\" They're not\nvery common, but the word \"madam\" _never_ occurs in my legitimate email, and\nit's all about the ratio.  \n  \n\"Republic\" scores high because it often shows up in Nigerian scam emails, and\nalso occurs once or twice in spams referring to Korea and South Africa. You\nmight say that it's an accident that it thus helps identify this spam. But\nI've found when examining spam probabilities that there are a lot of these\naccidents, and they have an uncanny tendency to push things in the right\ndirection rather than the wrong one. In this case, it is not entirely a\ncoincidence that the word \"Republic\" occurs in Nigerian scam emails and this\nspam. There is a whole class of dubious business propositions involving less\ndeveloped countries, and these in turn are more likely to have names that\nspecify explicitly (because they aren't) that they are republics.[3]  \n  \nOn the other hand, \"enter\" is a genuine miss. It occurs mostly in unsubscribe\ninstructions, but here is used in a completely innocent way. Fortunately the\nstatistical approach is fairly robust, and can tolerate quite a lot of misses\nbefore the results start to be thrown off.  \n  \nFor comparison,\n[here](https://sep.turbifycdn.com/ty/cdn/paulgraham/hostexspam.txt?t=1688221954&)\nis an example of that rare bird, a spam that gets through the filters. Why?\nBecause by sheer chance it happens to be loaded with words that occur in my\nactual email:  perl 0.01 python 0.01 tcl 0.01 scripting 0.01 morris 0.01\ngraham 0.01491078 guarantee 0.9762507 cgi 0.9734398 paul 0.027040077 quite\n0.030676773 pop3 0.042199217 various 0.06080265 prices 0.9359873 managed\n0.06451222 difficult 0.071706355  There are a couple pieces of good news here.\nFirst, this mail probably wouldn't get through the filters of someone who\ndidn't happen to specialize in programming languages and have a good friend\ncalled Morris. For the average user, all the top five words here would be\nneutral and would not contribute to the spam probability.  \n  \nSecond, I think filtering based on word pairs (see below) might well catch\nthis one: \"cost effective\", \"setup fee\", \"money back\" -- pretty incriminating\nstuff. And of course if they continued to spam me (or a network I was part\nof), \"Hostex\" itself would be recognized as a spam term.  \n  \nFinally,\n[here](https://sep.turbifycdn.com/ty/cdn/paulgraham/legit.txt?t=1688221954&)\nis an innocent email. Its fifteen most interesting words are as follows:\ncontinuation 0.01 describe 0.01 continuations 0.01 example 0.033600237\nprogramming 0.05214485 i'm 0.055427782 examples 0.07972858 color 0.9189189\nlocalhost 0.09883721 hi 0.116539136 california 0.84421706 same 0.15981844 spot\n0.1654587 us-ascii 0.16804294 what 0.19212411  Most of the words here indicate\nthe mail is an innocent one. There are two bad smelling words, \"color\"\n(spammers love colored fonts) and \"California\" (which occurs in testimonials\nand also in menus in forms), but they are not enough to outweigh obviously\ninnocent words like \"continuation\" and \"example\".  \n  \nIt's interesting that \"describe\" rates as so thoroughly innocent. It hasn't\noccurred in a single one of my 4000 spams. The data turns out to be full of\nsuch surprises. One of the things you learn when you analyze spam texts is how\nnarrow a subset of the language spammers operate in. It's that fact, together\nwith the equally characteristic vocabulary of any individual user's mail, that\nmakes Bayesian filtering a good bet.  \n  \n**Appendix: More Ideas**  \n  \nOne idea that I haven't tried yet is to filter based on word pairs, or even\ntriples, rather than individual words. This should yield a much sharper\nestimate of the probability. For example, in my current database, the word\n\"offers\" has a probability of .96. If you based the probabilities on word\npairs, you'd end up with \"special offers\" and \"valuable offers\" having\nprobabilities of .99 and, say, \"approach offers\" (as in \"this approach\noffers\") having a probability of .1 or less.  \n  \nThe reason I haven't done this is that filtering based on individual words\nalready works so well. But it does mean that there is room to tighten the\nfilters if spam gets harder to detect. (Curiously, a filter based on word\npairs would be in effect a Markov-chaining text generator running in reverse.)  \n  \nSpecific spam features (e.g. not seeing the recipient's address in the to:\nfield) do of course have value in recognizing spam. They can be considered in\nthis algorithm by treating them as virtual words. I'll probably do this in\nfuture versions, at least for a handful of the most egregious spam indicators.\nFeature-recognizing spam filters are right in many details; what they lack is\nan overall discipline for combining evidence.  \n  \nRecognizing nonspam features may be more important than recognizing spam\nfeatures. False positives are such a worry that they demand extraordinary\nmeasures. I will probably in future versions add a second level of testing\ndesigned specifically to avoid false positives. If a mail triggers this second\nlevel of filters it will be accepted even if its spam probability is above the\nthreshold.  \n  \nI don't expect this second level of filtering to be Bayesian. It will\ninevitably be not only ad hoc, but based on guesses, because the number of\nfalse positives will not tend to be large enough to notice patterns. (It is\njust as well, anyway, if a backup system doesn't rely on the same technology\nas the primary system.)  \n  \nAnother thing I may try in the future is to focus extra attention on specific\nparts of the email. For example, about 95% of current spam includes the url of\na site they want you to visit. (The remaining 5% want you to call a phone\nnumber, reply by email or to a US mail address, or in a few cases to buy a\ncertain stock.) The url is in such cases practically enough by itself to\ndetermine whether the email is spam.  \n  \nDomain names differ from the rest of the text in a (non-German) email in that\nthey often consist of several words stuck together. Though computationally\nexpensive in the general case, it might be worth trying to decompose them. If\na filter has never seen the token \"xxxporn\" before it will have an individual\nspam probability of .4, whereas \"xxx\" and \"porn\" individually have\nprobabilities (in my corpus) of .9889 and .99 respectively, and a combined\nprobability of .9998.  \n  \nI expect decomposing domain names to become more important as spammers are\ngradually forced to stop using incriminating words in the text of their\nmessages. (A url with an ip address is of course an extremely incriminating\nsign, except in the mail of a few sysadmins.)  \n  \nIt might be a good idea to have a cooperatively maintained list of urls\npromoted by spammers. We'd need a trust metric of the type studied by Raph\nLevien to prevent malicious or incompetent submissions, but if we had such a\nthing it would provide a boost to any filtering software. It would also be a\nconvenient basis for boycotts.  \n  \nAnother way to test dubious urls would be to send out a crawler to look at the\nsite before the user looked at the email mentioning it. You could use a\nBayesian filter to rate the site just as you would an email, and whatever was\nfound on the site could be included in calculating the probability of the\nemail being a spam. A url that led to a redirect would of course be especially\nsuspicious.  \n  \nOne cooperative project that I think really would be a good idea would be to\naccumulate a giant corpus of spam. A large, clean corpus is the key to making\nBayesian filtering work well. Bayesian filters could actually use the corpus\nas input. But such a corpus would be useful for other kinds of filters too,\nbecause it could be used to test them.  \n  \nCreating such a corpus poses some technical problems. We'd need trust metrics\nto prevent malicious or incompetent submissions, of course. We'd also need\nways of erasing personal information (not just to-addresses and ccs, but also\ne.g. the arguments to unsubscribe urls, which often encode the to-address)\nfrom mails in the corpus. If anyone wants to take on this project, it would be\na good thing for the world.  \n  \n**Appendix: Defining Spam**  \n  \nI think there is a rough consensus on what spam is, but it would be useful to\nhave an explicit definition. We'll need to do this if we want to establish a\ncentral corpus of spam, or even to compare spam filtering rates meaningfully.  \n  \nTo start with, spam is not unsolicited commercial email. If someone in my\nneighborhood heard that I was looking for an old Raleigh three-speed in good\ncondition, and sent me an email offering to sell me one, I'd be delighted, and\nyet this email would be both commercial and unsolicited. The defining feature\nof spam (in fact, its _raison d'etre_) is not that it is unsolicited, but that\nit is automated.  \n  \nIt is merely incidental, too, that spam is usually commercial. If someone\nstarted sending mass email to support some political cause, for example, it\nwould be just as much spam as email promoting a porn site.  \n  \nI propose we define spam as **unsolicited automated email**. This definition\nthus includes some email that many legal definitions of spam don't. Legal\ndefinitions of spam, influenced presumably by lobbyists, tend to exclude mail\nsent by companies that have an \"existing relationship\" with the recipient. But\nbuying something from a company, for example, does not imply that you have\nsolicited ongoing email from them. If I order something from an online store,\nand they then send me a stream of spam, it's still spam.  \n  \nCompanies sending spam often give you a way to \"unsubscribe,\" or ask you to go\nto their site and change your \"account preferences\" if you want to stop\ngetting spam. This is not enough to stop the mail from being spam. Not opting\nout is not the same as opting in. Unless the recipient explicitly checked a\nclearly labelled box (whose default was no) asking to receive the email, then\nit is spam.  \n  \nIn some business relationships, you do implicitly solicit certain kinds of\nmail. When you order online, I think you implicitly solicit a receipt, and\nnotification when the order ships. I don't mind when Verisign sends me mail\nwarning that a domain name is about to expire (at least, if they are the\n[actual registrar](http://siliconvalley.internet.com/news/article.php/1441651)\nfor it). But when Verisign sends me email offering a FREE Guide to Building My\nE-Commerce Web Site, that's spam.  \n  \n**Notes:**  \n  \n[1] The examples in this article are translated into Common Lisp for, believe\nit or not, greater accessibility. The application described here is one that\nwe wrote in order to test a new Lisp dialect called [Arc](arc.html) that is\nnot yet released.  \n  \n[2] Currently the lowest rate seems to be about $200 to send a million spams.\nThat's very cheap, 1/50th of a cent per spam. But filtering out 95% of spam,\nfor example, would increase the spammers' cost to reach a given audience by a\nfactor of 20. Few can have margins big enough to absorb that.  \n  \n[3] As a rule of thumb, the more qualifiers there are before the name of a\ncountry, the more corrupt the rulers. A country called The Socialist People's\nDemocratic Republic of X is probably the last place in the world you'd want to\nlive.  \n  \n**Thanks** to Sarah Harlin for reading drafts of this; Daniel Giffin (who is\nalso writing the production Arc interpreter) for several good ideas about\nfiltering and for creating our mail infrastructure; Robert Morris, Trevor\nBlackwell and Erann Gat for many discussions about spam; Raph Levien for\nadvice about trust metrics; and Chip Coldwell and Sam Steingold for advice\nabout statistics.  \n  \nYou'll find this essay and 14 others in [**_Hackers &\nPainters_**](http://www.amazon.com/gp/product/0596006624).  \n  \n  \n  \n**More Info:**  \n  \n\nMarch 2012  \n  \nI'm not a very good speaker. I say \"um\" a lot. Sometimes I have to pause when\nI lose my train of thought. I wish I were a better speaker. But I don't wish I\nwere a better speaker like I wish I were a better writer. What I really want\nis to have good ideas, and that's a much bigger part of being a good writer\nthan being a good speaker.  \n  \nHaving good ideas is most of writing well. If you know what you're talking\nabout, you can say it in the plainest words and you'll be perceived as having\na good style. With speaking it's the opposite: having good ideas is an\nalarmingly small component of being a good speaker.  \n  \nI first noticed this at a conference several years ago. There was another\nspeaker who was much better than me. He had all of us roaring with laughter. I\nseemed awkward and halting by comparison. Afterward I put my talk online like\nI usually do. As I was doing it I tried to imagine what a transcript of the\nother guy's talk would be like, and it was only then I realized he hadn't said\nvery much.  \n  \nMaybe this would have been obvious to someone who knew more about speaking,\nbut it was a revelation to me how much less ideas mattered in speaking than\nwriting. [1]  \n  \nA few years later I heard a talk by someone who was not merely a better\nspeaker than me, but a famous speaker. Boy was he good. So I decided I'd pay\nclose attention to what he said, to learn how he did it. After about ten\nsentences I found myself thinking \"I don't want to be a good speaker.\"  \n  \nBeing a really good speaker is not merely orthogonal to having good ideas, but\nin many ways pushes you in the opposite direction. For example, when I give a\ntalk, I usually write it out beforehand. I know that's a mistake; I know\ndelivering a prewritten talk makes it harder to engage with an audience. The\nway to get the attention of an audience is to give them _your_ full attention,\nand when you're delivering a prewritten talk, your attention is always divided\nbetween the audience and the talk \u2014 even if you've memorized it. If you want\nto engage an audience, it's better to start with no more than an outline of\nwhat you want to say and ad lib the individual sentences. But if you do that,\nyou might spend no more time thinking about each sentence than it takes to say\nit. [2] Occasionally the stimulation of talking to a live audience makes you\nthink of new things, but in general this is not going to generate ideas as\nwell as writing does, where you can spend as long on each sentence as you\nwant.  \n  \nIf you rehearse a prewritten speech enough, you can get asymptotically close\nto the sort of engagement you get when speaking ad lib. Actors do. But here\nagain there's a tradeoff between smoothness and ideas. All the time you spend\npracticing a talk, you could instead spend making it better. Actors don't face\nthat temptation, except in the rare cases where they've written the script,\nbut any speaker does. Before I give a talk I can usually be found sitting in a\ncorner somewhere with a copy printed out on paper, trying to rehearse it in my\nhead. But I always end up spending most of the time rewriting it instead.\nEvery talk I give ends up being given from a manuscript full of things crossed\nout and rewritten. Which of course makes me um even more, because I haven't\nhad any time to practice the new bits. [3]  \n  \nDepending on your audience, there are even worse tradeoffs than these.\nAudiences like to be flattered; they like jokes; they like to be swept off\ntheir feet by a vigorous stream of words. As you decrease the intelligence of\nthe audience, being a good speaker is increasingly a matter of being a good\nbullshitter. That's true in writing too of course, but the descent is steeper\nwith talks. Any given person is dumber as a member of an audience than as a\nreader. Just as a speaker ad libbing can only spend as long thinking about\neach sentence as it takes to say it, a person hearing a talk can only spend as\nlong thinking about each sentence as it takes to hear it. Plus people in an\naudience are always affected by the reactions of those around them, and the\nreactions that spread from person to person in an audience are\ndisproportionately the more brutish sort, just as low notes travel through\nwalls better than high ones. Every audience is an incipient mob, and a good\nspeaker uses that. Part of the reason I laughed so much at the talk by the\ngood speaker at that conference was that everyone else did. [4]  \n  \nSo are talks useless? They're certainly inferior to the written word as a\nsource of ideas. But that's not all talks are good for. When I go to a talk,\nit's usually because I'm interested in the speaker. Listening to a talk is the\nclosest most of us can get to having a conversation with someone like the\npresident, who doesn't have time to meet individually with all the people who\nwant to meet him.  \n  \nTalks are also good at motivating me to do things. It's probably no\ncoincidence that so many famous speakers are described as motivational\nspeakers. That may be what public speaking is really for. It's probably what\nit was originally for. The emotional reactions you can elicit with a talk can\nbe a powerful force. I wish I could say that this force was more often used\nfor good than ill, but I'm not sure.  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] I'm not talking here about academic talks, which are a different type of\nthing. While the audience at an academic talk might appreciate a joke, they\nwill (or at least should) make a conscious effort to see what new ideas you're\npresenting.  \n  \n[2] That's the lower bound. In practice you can often do better, because talks\nare usually about things you've written or talked about before, and when you\nad lib, you end up reproducing some of those sentences. Like early medieval\narchitecture, impromptu talks are made of spolia. Which feels a bit dishonest,\nincidentally, because you have to deliver these sentences as if you'd just\nthought of them.  \n  \n[3] Robert Morris points out that there is a way in which practicing talks\nmakes them better: reading a talk out loud can expose awkward parts. I agree\nand in fact I read most things I write out loud at least once for that reason.  \n  \n[4] For sufficiently small audiences, it may not be true that being part of an\naudience makes people dumber. The real decline seems to set in when the\naudience gets too big for the talk to feel like a conversation \u2014 maybe around\n10 people.  \n  \n**Thanks** to Sam Altman and Robert Morris for reading drafts of this.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nMarch 2005  \n  \n _(This essay is derived from a talk at the Harvard Computer Society.)_  \n  \nYou need three things to create a successful startup: to start with good\npeople, to make something customers actually want, and to spend as little\nmoney as possible. Most startups that fail do it because they fail at one of\nthese. A startup that does all three will probably succeed.  \n  \nAnd that's kind of exciting, when you think about it, because all three are\ndoable. Hard, but doable. And since a startup that succeeds ordinarily makes\nits founders rich, that implies getting rich is doable too. Hard, but doable.  \n  \nIf there is one message I'd like to get across about startups, that's it.\nThere is no magically difficult step that requires brilliance to solve.  \n  \n**The Idea**  \n  \nIn particular, you don't need a brilliant [idea](ideas.html) to start a\nstartup around. The way a startup makes money is to offer people better\ntechnology than they have now. But what people have now is often so bad that\nit doesn't take brilliance to do better.  \n  \nGoogle's plan, for example, was simply to create a search site that didn't\nsuck. They had three new ideas: index more of the Web, use links to rank\nsearch results, and have clean, simple web pages with unintrusive keyword-\nbased ads. Above all, they were determined to make a site that was good to\nuse. No doubt there are great technical tricks within Google, but the overall\nplan was straightforward. And while they probably have bigger ambitions now,\nthis alone brings them a billion dollars a year. [1]  \n  \nThere are plenty of other areas that are just as backward as search was before\nGoogle. I can think of several heuristics for generating ideas for startups,\nbut most reduce to this: look at something people are trying to do, and figure\nout how to do it in a way that doesn't suck.  \n  \nFor example, dating sites currently suck far worse than search did before\nGoogle. They all use the same simple-minded model. They seem to have\napproached the problem by thinking about how to do database matches instead of\nhow dating works in the real world. An undergrad could build something better\nas a class project. And yet there's a lot of money at stake. Online dating is\na valuable business now, and it might be worth a hundred times as much if it\nworked.  \n  \nAn idea for a startup, however, is only a beginning. A lot of would-be startup\nfounders think the key to the whole process is the initial idea, and from that\npoint all you have to do is execute. Venture capitalists know better. If you\ngo to VC firms with a brilliant idea that you'll tell them about if they sign\na nondisclosure agreement, most will tell you to get lost. That shows how much\na mere idea is worth. The market price is less than the inconvenience of\nsigning an NDA.  \n  \nAnother sign of how little the initial idea is worth is the number of startups\nthat change their plan en route. Microsoft's original plan was to make money\nselling programming languages, of all things. Their current business model\ndidn't occur to them until IBM dropped it in their lap five years later.  \n  \nIdeas for startups are worth something, certainly, but the trouble is, they're\nnot transferrable. They're not something you could hand to someone else to\nexecute. Their value is mainly as starting points: as questions for the people\nwho had them to continue thinking about.  \n  \nWhat matters is not ideas, but the people who have them. Good people can fix\nbad ideas, but good ideas can't save bad people.  \n  \n**People**  \n  \nWhat do I mean by good people? One of the best tricks I learned during\n[our](road.html) startup was a rule for deciding who to hire. Could you\ndescribe the person as an animal? It might be hard to translate that into\nanother language, but I think everyone in the US knows what it means. It means\nsomeone who takes their work a little too seriously; someone who does what\nthey do so well that they pass right through professional and cross over into\nobsessive.  \n  \nWhat it means specifically depends on the job: a salesperson who just won't\ntake no for an answer; a hacker who will stay up till 4:00 AM rather than go\nto bed leaving code with a bug in it; a PR person who will cold-call _New York\nTimes_ reporters on their cell phones; a graphic designer who feels physical\npain when something is two millimeters out of place.  \n  \nAlmost everyone who worked for us was an animal at what they did. The woman in\ncharge of sales was so tenacious that I used to feel sorry for potential\ncustomers on the phone with her. You could sense them squirming on the hook,\nbut you knew there would be no rest for them till they'd signed up.  \n  \nIf you think about people you know, you'll find the animal test is easy to\napply. Call the person's image to mind and imagine the sentence \"so-and-so is\nan animal.\" If you laugh, they're not. You don't need or perhaps even want\nthis quality in big companies, but you need it in a startup.  \n  \nFor programmers we had three additional tests. Was the person genuinely smart?\nIf so, could they actually get things done? And finally, since a few good\nhackers have unbearable personalities, could we stand to have them around?  \n  \nThat last test filters out surprisingly few people. We could bear any amount\nof nerdiness if someone was truly smart. What we couldn't stand were people\nwith a lot of attitude. But most of those weren't truly smart, so our third\ntest was largely a restatement of the first.  \n  \nWhen nerds are unbearable it's usually because they're trying too hard to seem\nsmart. But the smarter they are, the less pressure they feel to act smart. So\nas a rule you can recognize genuinely smart people by their ability to say\nthings like \"I don't know,\" \"Maybe you're right,\" and \"I don't understand x\nwell enough.\"  \n  \nThis technique doesn't always work, because people can be influenced by their\nenvironment. In the MIT CS department, there seems to be a tradition of acting\nlike a brusque know-it-all. I'm told it derives ultimately from Marvin Minsky,\nin the same way the classic airline pilot manner is said to derive from Chuck\nYeager. Even genuinely smart people start to act this way there, so you have\nto make allowances.  \n  \nIt helped us to have Robert Morris, who is one of the readiest to say \"I don't\nknow\" of anyone I've met. (At least, he was before he became a professor at\nMIT.) No one dared put on attitude around Robert, because he was obviously\nsmarter than they were and yet had zero attitude himself.  \n  \nLike most startups, ours began with a group of friends, and it was through\npersonal contacts that we got most of the people we hired. This is a crucial\ndifference between startups and big companies. Being friends with someone for\neven a couple days will tell you more than companies could ever learn in\ninterviews. [2]  \n  \nIt's no coincidence that startups start around universities, because that's\nwhere smart people meet. It's not what people learn in classes at MIT and\nStanford that has made technology companies spring up around them. They could\nsing campfire songs in the classes so long as admissions worked the same.  \n  \nIf you start a startup, there's a good chance it will be with people you know\nfrom college or grad school. So in theory you ought to try to make friends\nwith as many smart people as you can in school, right? Well, no. Don't make a\nconscious effort to schmooze; that doesn't work well with hackers.  \n  \nWhat you should do in college is work on your own projects. Hackers should do\nthis even if they don't plan to start startups, because it's the only real way\nto learn how to program. In some cases you may collaborate with other\nstudents, and this is the best way to get to know good hackers. The project\nmay even grow into a startup. But once again, I wouldn't aim too directly at\neither target. Don't force things; just work on stuff you like with people you\nlike.  \n  \nIdeally you want between two and four founders. It would be hard to start with\njust one. One person would find the moral weight of starting a company hard to\nbear. Even Bill Gates, who seems to be able to bear a good deal of moral\nweight, had to have a co-founder. But you don't want so many founders that the\ncompany starts to look like a group photo. Partly because you don't need a lot\nof people at first, but mainly because the more founders you have, the worse\ndisagreements you'll have. When there are just two or three founders, you know\nyou have to resolve disputes immediately or perish. If there are seven or\neight, disagreements can linger and harden into factions. You don't want mere\nvoting; you need unanimity.  \n  \nIn a technology startup, which most startups are, the founders should include\ntechnical people. During the Internet Bubble there were a number of startups\nfounded by business people who then went looking for hackers to create their\nproduct for them. This doesn't work well. Business people are bad at deciding\nwhat to do with technology, because they don't know what the options are, or\nwhich kinds of problems are hard and which are easy. And when business people\ntry to hire hackers, they can't tell which ones are [good](gh.html). Even\nother hackers have a hard time doing that. For business people it's roulette.  \n  \nDo the founders of a startup have to include business people? That depends. We\nthought so when we started ours, and we asked several people who were said to\nknow about this mysterious thing called \"business\" if they would be the\npresident. But they all said no, so I had to do it myself. And what I\ndiscovered was that business was no great mystery. It's not something like\nphysics or medicine that requires extensive study. You just try to get people\nto pay you for stuff.  \n  \nI think the reason I made such a mystery of business was that I was disgusted\nby the idea of doing it. I wanted to work in the pure, intellectual world of\nsoftware, not deal with customers' mundane problems. People who don't want to\nget dragged into some kind of work often develop a protective incompetence at\nit. Paul Erdos was particularly good at this. By seeming unable even to cut a\ngrapefruit in half (let alone go to the store and buy one), he forced other\npeople to do such things for him, leaving all his time free for math. Erdos\nwas an extreme case, but most husbands use the same trick to some degree.  \n  \nOnce I was forced to discard my protective incompetence, I found that business\nwas neither so hard nor so boring as I feared. There are esoteric areas of\nbusiness that are quite hard, like tax law or the pricing of derivatives, but\nyou don't need to know about those in a startup. All you need to know about\nbusiness to run a startup are commonsense things people knew before there were\nbusiness schools, or even universities.  \n  \nIf you work your way down the Forbes 400 making an x next to the name of each\nperson with an MBA, you'll learn something important about business school.\nAfter Warren Buffett, you don't hit another MBA till number 22, Phil Knight,\nthe CEO of Nike. There are only 5 MBAs in the top 50\\. What you notice in the\nForbes 400 are a lot of people with technical backgrounds. Bill Gates, Steve\nJobs, Larry Ellison, Michael Dell, Jeff Bezos, Gordon Moore. The rulers of the\ntechnology business tend to come from technology, not business. So if you want\nto invest two years in something that will help you succeed in business, the\nevidence suggests you'd do better to learn how to hack than get an MBA. [3]  \n  \nThere is one reason you might want to include business people in a startup,\nthough: because you have to have at least one person willing and able to focus\non what customers want. Some believe only business people can do this-- that\nhackers can implement software, but not design it. That's nonsense. There's\nnothing about knowing how to program that prevents hackers from understanding\nusers, or about not knowing how to program that magically enables business\npeople to understand them.  \n  \nIf you can't understand users, however, you should either learn how or find a\nco-founder who can. That is the single most important issue for technology\nstartups, and the rock that sinks more of them than anything else.  \n  \n**What Customers Want**  \n  \nIt's not just startups that have to worry about this. I think most businesses\nthat fail do it because they don't give customers what they want. Look at\nrestaurants. A large percentage fail, about a quarter in the first year. But\ncan you think of one restaurant that had really good food and went out of\nbusiness?  \n  \nRestaurants with great food seem to prosper no matter what. A restaurant with\ngreat food can be expensive, crowded, noisy, dingy, out of the way, and even\nhave bad service, and people will keep coming. It's true that a restaurant\nwith mediocre food can sometimes attract customers through gimmicks. But that\napproach is very risky. It's more straightforward just to make the food good.  \n  \nIt's the same with technology. You hear all kinds of reasons why startups\nfail. But can you think of one that had a massively popular product and still\nfailed?  \n  \nIn nearly every failed startup, the real problem was that customers didn't\nwant the product. For most, the cause of death is listed as \"ran out of\nfunding,\" but that's only the immediate cause. Why couldn't they get more\nfunding? Probably because the product was a dog, or never seemed likely to be\ndone, or both.  \n  \nWhen I was trying to think of the things every startup needed to do, I almost\nincluded a fourth: get a version 1 out as soon as you can. But I decided not\nto, because that's implicit in making something customers want. The only way\nto make something customers want is to get a prototype in front of them and\nrefine it based on their reactions.  \n  \nThe other approach is what I call the \"Hail Mary\" strategy. You make elaborate\nplans for a product, hire a team of engineers to develop it (people who do\nthis tend to use the term \"engineer\" for hackers), and then find after a year\nthat you've spent two million dollars to develop something no one wants. This\nwas not uncommon during the Bubble, especially in companies run by business\ntypes, who thought of software development as something terrifying that\ntherefore had to be carefully planned.  \n  \nWe never even considered that approach. As a Lisp hacker, I come from the\ntradition of rapid prototyping. I would not claim (at least, not here) that\nthis is the right way to write every program, but it's certainly the right way\nto write software for a startup. In a startup, your initial plans are almost\ncertain to be wrong in some way, and your first priority should be to figure\nout where. The only way to do that is to try implementing them.  \n  \nLike most startups, we changed our plan on the fly. At first we expected our\ncustomers to be Web consultants. But it turned out they didn't like us,\nbecause our software was easy to use and we hosted the site. It would be too\neasy for clients to fire them. We also thought we'd be able to sign up a lot\nof catalog companies, because selling online was a natural extension of their\nexisting business. But in 1996 that was a hard sell. The middle managers we\ntalked to at catalog companies saw the Web not as an opportunity, but as\nsomething that meant more work for them.  \n  \nWe did get a few of the more adventurous catalog companies. Among them was\nFrederick's of Hollywood, which gave us valuable experience dealing with heavy\nloads on our servers. But most of our users were small, individual merchants\nwho saw the Web as an opportunity to build a business. Some had retail stores,\nbut many only existed online. And so we changed direction to focus on these\nusers. Instead of concentrating on the features Web consultants and catalog\ncompanies would want, we worked to make the software easy to use.  \n  \nI learned something valuable from that. It's worth trying very, very hard to\nmake technology easy to use. Hackers are so used to computers that they have\nno idea how horrifying software seems to normal people. Stephen Hawking's\neditor told him that every equation he included in his book would cut sales in\nhalf. When you work on making technology easier to use, you're riding that\ncurve up instead of down. A 10% improvement in ease of use doesn't just\nincrease your sales 10%. It's more likely to double your sales.  \n  \nHow do you figure out what customers want? Watch them. One of the best places\nto do this was at trade shows. Trade shows didn't pay as a way of getting new\ncustomers, but they were worth it as market research. We didn't just give\ncanned presentations at trade shows. We used to show people how to build real,\nworking stores. Which meant we got to watch as they used our software, and\ntalk to them about what they needed.  \n  \nNo matter what kind of startup you start, it will probably be a stretch for\nyou, the founders, to understand what users want. The only kind of software\nyou can build without studying users is the sort for which you are the typical\nuser. But this is just the kind that tends to be open source: operating\nsystems, programming languages, editors, and so on. So if you're developing\ntechnology for money, you're probably not going to be developing it for people\nlike you. Indeed, you can use this as a way to generate ideas for startups:\nwhat do people who are not like you want from technology?  \n  \nWhen most people think of startups, they think of companies like Apple or\nGoogle. Everyone knows these, because they're big consumer brands. But for\nevery startup like that, there are twenty more that operate in niche markets\nor live quietly down in the infrastructure. So if you start a successful\nstartup, odds are you'll start one of those.  \n  \nAnother way to say that is, if you try to start the kind of startup that has\nto be a big consumer brand, the odds against succeeding are steeper. The best\nodds are in niche markets. Since startups make money by offering people\nsomething better than they had before, the best opportunities are where things\nsuck most. And it would be hard to find a place where things suck more than in\ncorporate IT departments. You would not believe the amount of money companies\nspend on software, and the crap they get in return. This imbalance equals\nopportunity.  \n  \nIf you want ideas for startups, one of the most valuable things you could do\nis find a middle-sized non-technology company and spend a couple weeks just\nwatching what they do with computers. Most good hackers have no more idea of\nthe horrors perpetrated in these places than rich Americans do of what goes on\nin Brazilian slums.  \n  \nStart by writing software for smaller companies, because it's easier to sell\nto them. It's worth so much to sell stuff to big companies that the people\nselling them the crap they currently use spend a lot of time and money to do\nit. And while you can outhack Oracle with one frontal lobe tied behind your\nback, you can't outsell an Oracle salesman. So if you want to win through\nbetter technology, aim at smaller customers. [4]  \n  \nThey're the more strategically valuable part of the market anyway. In\ntechnology, the low end always eats the high end. It's easier to make an\ninexpensive product more powerful than to make a powerful product cheaper. So\nthe products that start as cheap, simple options tend to gradually grow more\npowerful till, like water rising in a room, they squash the \"high-end\"\nproducts against the ceiling. Sun did this to mainframes, and Intel is doing\nit to Sun. Microsoft Word did it to desktop publishing software like Interleaf\nand Framemaker. Mass-market digital cameras are doing it to the expensive\nmodels made for professionals. Avid did it to the manufacturers of specialized\nvideo editing systems, and now Apple is doing it to Avid. _Henry Ford_ did it\nto the car makers that preceded him. If you build the simple, inexpensive\noption, you'll not only find it easier to sell at first, but you'll also be in\nthe best position to conquer the rest of the market.  \n  \nIt's very dangerous to let anyone fly under you. If you have the cheapest,\neasiest product, you'll own the low end. And if you don't, you're in the\ncrosshairs of whoever does.  \n  \n**Raising Money**  \n  \nTo make all this happen, you're going to need money. Some startups have been\nself-funding-- Microsoft for example-- but most aren't. I think it's wise to\ntake money from investors. To be self-funding, you have to start as a\nconsulting company, and it's hard to switch from that to a product company.  \n  \nFinancially, a startup is like a pass/fail course. The way to get rich from a\nstartup is to maximize the company's chances of succeeding, not to maximize\nthe amount of stock you retain. So if you can trade stock for something that\nimproves your odds, it's probably a smart move.  \n  \nTo most hackers, getting investors seems like a terrifying and mysterious\nprocess. Actually it's merely tedious. I'll try to give an outline of how it\nworks.  \n  \nThe first thing you'll need is a few tens of thousands of dollars to pay your\nexpenses while you develop a prototype. This is called seed capital. Because\nso little money is involved, raising seed capital is comparatively easy-- at\nleast in the sense of getting a quick yes or no.  \n  \nUsually you get seed money from individual rich people called \"angels.\" Often\nthey're people who themselves got rich from technology. At the seed stage,\ninvestors don't expect you to have an elaborate business plan. Most know that\nthey're supposed to decide quickly. It's not unusual to get a check within a\nweek based on a half-page agreement.  \n  \nWe started Viaweb with $10,000 of seed money from our friend Julian. But he\ngave us a lot more than money. He's a former CEO and also a corporate lawyer,\nso he gave us a lot of valuable advice about business, and also did all the\nlegal work of getting us set up as a company. Plus he introduced us to one of\nthe two angel investors who supplied our next round of funding.  \n  \nSome angels, especially those with technology backgrounds, may be satisfied\nwith a demo and a verbal description of what you plan to do. But many will\nwant a copy of your business plan, if only to remind themselves what they\ninvested in.  \n  \nOur angels asked for one, and looking back, I'm amazed how much worry it\ncaused me. \"Business plan\" has that word \"business\" in it, so I figured it had\nto be something I'd have to read a book about business plans to write. Well,\nit doesn't. At this stage, all most investors expect is a brief description of\nwhat you plan to do and how you're going to make money from it, and the\nresumes of the founders. If you just sit down and write out what you've been\nsaying to one another, that should be fine. It shouldn't take more than a\ncouple hours, and you'll probably find that writing it all down gives you more\nideas about what to do.  \n  \nFor the angel to have someone to make the check out to, you're going to have\nto have some kind of company. Merely incorporating yourselves isn't hard. The\nproblem is, for the company to exist, you have to decide who the founders are,\nand how much stock they each have. If there are two founders with the same\nqualifications who are both equally committed to the business, that's easy.\nBut if you have a number of people who are expected to contribute in varying\ndegrees, arranging the proportions of stock can be hard. And once you've done\nit, it tends to be set in stone.  \n  \nI have no tricks for dealing with this problem. All I can say is, try hard to\ndo it right. I do have a rule of thumb for recognizing when you have, though.\nWhen everyone feels they're getting a slightly bad deal, that they're doing\nmore than they should for the amount of stock they have, the stock is\noptimally apportioned.  \n  \nThere is more to setting up a company than incorporating it, of course:\ninsurance, business license, unemployment compensation, various things with\nthe IRS. I'm not even sure what the list is, because we, ah, skipped all that.\nWhen we got real funding near the end of 1996, we hired a great CFO, who fixed\neverything retroactively. It turns out that no one comes and arrests you if\nyou don't do everything you're supposed to when starting a company. And a good\nthing too, or a lot of startups would never get started. [5]  \n  \nIt can be dangerous to delay turning yourself into a company, because one or\nmore of the founders might decide to split off and start another company doing\nthe same thing. This does happen. So when you set up the company, as well as\nas apportioning the stock, you should get all the founders to sign something\nagreeing that everyone's ideas belong to this company, and that this company\nis going to be everyone's only job.  \n  \n[If this were a movie, ominous music would begin here.]  \n  \nWhile you're at it, you should ask what else they've signed. One of the worst\nthings that can happen to a startup is to run into intellectual property\nproblems. We did, and it came closer to killing us than any competitor ever\ndid.  \n  \nAs we were in the middle of getting bought, we discovered that one of our\npeople had, early on, been bound by an agreement that said all his ideas\nbelonged to the giant company that was paying for him to go to grad school. In\ntheory, that could have meant someone else owned big chunks of our software.\nSo the acquisition came to a screeching halt while we tried to sort this out.\nThe problem was, since we'd been about to be acquired, we'd allowed ourselves\nto run low on cash. Now we needed to raise more to keep going. But it's hard\nto raise money with an IP cloud over your head, because investors can't judge\nhow serious it is.  \n  \nOur existing investors, knowing that we needed money and had nowhere else to\nget it, at this point attempted certain gambits which I will not describe in\ndetail, except to remind readers that the word \"angel\" is a metaphor. The\nfounders thereupon proposed to walk away from the company, after giving the\ninvestors a brief tutorial on how to administer the servers themselves. And\nwhile this was happening, the acquirers used the delay as an excuse to welch\non the deal.  \n  \nMiraculously it all turned out ok. The investors backed down; we did another\nround of funding at a reasonable valuation; the giant company finally gave us\na piece of paper saying they didn't own our software; and six months later we\nwere bought by Yahoo for much more than the earlier acquirer had agreed to\npay. So we were happy in the end, though the experience probably took several\nyears off my life.  \n  \nDon't do what we did. Before you consummate a startup, ask everyone about\ntheir previous IP history.  \n  \nOnce you've got a company set up, it may seem presumptuous to go knocking on\nthe doors of rich people and asking them to invest tens of thousands of\ndollars in something that is really just a bunch of guys with some ideas. But\nwhen you look at it from the rich people's point of view, the picture is more\nencouraging. Most rich people are looking for good investments. If you really\nthink you have a chance of succeeding, you're doing them a favor by letting\nthem invest. Mixed with any annoyance they might feel about being approached\nwill be the thought: are these guys the next Google?  \n  \nUsually angels are financially equivalent to founders. They get the same kind\nof stock and get diluted the same amount in future rounds. How much stock\nshould they get? That depends on how ambitious you feel. When you offer x\npercent of your company for y dollars, you're implicitly claiming a certain\nvalue for the whole company. Venture investments are usually described in\nterms of that number. If you give an investor new shares equal to 5% of those\nalready outstanding in return for $100,000, then you've done the deal at a\npre-money valuation of $2 million.  \n  \nHow do you decide what the value of the company should be? There is no\nrational way. At this stage the company is just a bet. I didn't realize that\nwhen we were raising money. Julian thought we ought to value the company at\nseveral million dollars. I thought it was preposterous to claim that a couple\nthousand lines of code, which was all we had at the time, were worth several\nmillion dollars. Eventually we settled on one million, because Julian said no\none would invest in a company with a valuation any lower. [6]  \n  \nWhat I didn't grasp at the time was that the valuation wasn't just the value\nof the code we'd written so far. It was also the value of our ideas, which\nturned out to be right, and of all the future work we'd do, which turned out\nto be a lot.  \n  \nThe next round of funding is the one in which you might deal with actual\n[venture capital firms](venturecapital.html). But don't wait till you've\nburned through your last round of funding to start approaching them. VCs are\nslow to make up their minds. They can take months. You don't want to be\nrunning out of money while you're trying to negotiate with them.  \n  \nGetting money from an actual VC firm is a bigger deal than getting money from\nangels. The amounts of money involved are larger, millions usually. So the\ndeals take longer, dilute you more, and impose more onerous conditions.  \n  \nSometimes the VCs want to install a new CEO of their own choosing. Usually the\nclaim is that you need someone mature and experienced, with a business\nbackground. Maybe in some cases this is true. And yet Bill Gates was young and\ninexperienced and had no business background, and he seems to have done ok.\nSteve Jobs got booted out of his own company by someone mature and\nexperienced, with a business background, who then proceeded to ruin the\ncompany. So I think people who are mature and experienced, with a business\nbackground, may be overrated. We used to call these guys \"newscasters,\"\nbecause they had neat hair and spoke in deep, confident voices, and generally\ndidn't know much more than they read on the teleprompter.  \n  \nWe talked to a number of VCs, but eventually we ended up financing our startup\nentirely with angel money. The main reason was that we feared a brand-name VC\nfirm would stick us with a newscaster as part of the deal. That might have\nbeen ok if he was content to limit himself to talking to the press, but what\nif he wanted to have a say in running the company? That would have led to\ndisaster, because our software was so complex. We were a company whose whole\nm.o. was to win through better technology. The strategic decisions were mostly\ndecisions about technology, and we didn't need any help with those.  \n  \nThis was also one reason we didn't go public. Back in 1998 our CFO tried to\ntalk me into it. In those days you could go public as a dogfood portal, so as\na company with a real product and real revenues, we might have done well. But\nI feared it would have meant taking on a newscaster-- someone who, as they\nsay, \"can talk Wall Street's language.\"  \n  \nI'm happy to see Google is bucking that trend. They didn't talk Wall Street's\nlanguage when they did their IPO, and Wall Street didn't buy. And now Wall\nStreet is collectively kicking itself. They'll pay attention next time. Wall\nStreet learns new languages fast when money is involved.  \n  \nYou have more leverage negotiating with VCs than you realize. The reason is\nother VCs. I know a number of VCs now, and when you talk to them you realize\nthat it's a seller's market. Even now there is too much money chasing too few\ngood deals.  \n  \nVCs form a pyramid. At the top are famous ones like Sequoia and Kleiner\nPerkins, but beneath those are a huge number you've never heard of. What they\nall have in common is that a dollar from them is worth one dollar. Most VCs\nwill tell you that they don't just provide money, but connections and advice.\nIf you're talking to Vinod Khosla or John Doerr or Mike Moritz, this is true.\nBut such advice and connections can come very expensive. And as you go down\nthe food chain the VCs get rapidly  dumber. A few steps down from the top\nyou're basically talking to bankers who've picked up a few new vocabulary\nwords from reading _Wired_. (Does your product use _XML?_) So I'd advise you\nto be skeptical about claims of experience and connections. Basically, a VC is\na source of money. I'd be inclined to go with whoever offered the most money\nthe soonest with the least strings attached.  \n  \nYou may wonder how much to tell VCs. And you should, because some of them may\none day be funding your competitors. I think the best plan is not to be\novertly secretive, but not to tell them everything either. After all, as most\nVCs say, they're more interested in the people than the ideas. The main reason\nthey want to talk about your idea is to judge you, not the idea. So as long as\nyou seem like you know what you're doing, you can probably keep a few things\nback from them. [7]  \n  \nTalk to as many VCs as you can, even if you don't want their money, because a)\nthey may be on the board of someone who will buy you, and b) if you seem\nimpressive, they'll be discouraged from investing in your competitors. The\nmost efficient way to reach VCs, especially if you only want them to know\nabout you and don't want their money, is at the conferences that are\noccasionally organized for startups to present to them.  \n  \n**Not Spending It**  \n  \nWhen and if you get an infusion of real money from investors, what should you\ndo with it? Not spend it, that's what. In nearly every startup that fails, the\nproximate cause is running out of money. Usually there is something deeper\nwrong. But even a proximate cause of death is worth trying hard to avoid.  \n  \nDuring the Bubble many startups tried to \"get big fast.\" Ideally this meant\ngetting a lot of customers fast. But it was easy for the meaning to slide over\ninto hiring a lot of people fast.  \n  \nOf the two versions, the one where you get a lot of customers fast is of\ncourse preferable. But even that may be overrated. The idea is to get there\nfirst and get all the users, leaving none for competitors. But I think in most\nbusinesses the advantages of being first to market are not so overwhelmingly\ngreat. Google is again a case in point. When they appeared it seemed as if\nsearch was a mature market, dominated by big players who'd spent millions to\nbuild their brands: Yahoo, Lycos, Excite, Infoseek, Altavista, Inktomi. Surely\n1998 was a little late to arrive at the party.  \n  \nBut as the founders of Google knew, brand is worth next to nothing in the\nsearch business. You can come along at any point and make something better,\nand users will gradually seep over to you. As if to emphasize the point,\nGoogle never did any advertising. They're like dealers; they sell the stuff,\nbut they know better than to use it themselves.  \n  \nThe competitors Google buried would have done better to spend those millions\nimproving their software. Future startups should learn from that mistake.\nUnless you're in a market where products are as undifferentiated as cigarettes\nor vodka or laundry detergent, spending a lot on brand advertising is a sign\nof breakage. And few if any Web businesses are so undifferentiated. The dating\nsites are running big ad campaigns right now, which is all the more evidence\nthey're ripe for the picking. (Fee, fie, fo, fum, I smell a company run by\nmarketing guys.)  \n  \nWe were compelled by circumstances to grow slowly, and in retrospect it was a\ngood thing. The founders all learned to do every job in the company. As well\nas writing software, I had to do sales and customer support. At sales I was\nnot very good. I was persistent, but I didn't have the smoothness of a good\nsalesman. My message to potential customers was: you'd be stupid not to sell\nonline, and if you sell online you'd be stupid to use anyone else's software.\nBoth statements were true, but that's not the way to convince people.  \n  \nI was great at customer support though. Imagine talking to a customer support\nperson who not only knew everything about the product, but would apologize\nabjectly if there was a bug, and then fix it immediately, while you were on\nthe phone with them. Customers loved us. And we loved them, because when\nyou're growing slow by word of mouth, your first batch of users are the ones\nwho were smart enough to find you by themselves. There is nothing more\nvaluable, in the early stages of a startup, than smart users. If you listen to\nthem, they'll tell you exactly how to make a winning product. And not only\nwill they give you this advice for free, they'll pay you.  \n  \nWe officially launched in early 1996. By the end of that year we had about 70\nusers. Since this was the era of \"get big fast,\" I worried about how small and\nobscure we were. But in fact we were doing exactly the right thing. Once you\nget big (in users or employees) it gets hard to change your product. That year\nwas effectively a laboratory for improving our software. By the end of it, we\nwere so far ahead of our competitors that they never had a hope of catching\nup. And since all the hackers had spent many hours talking to users, we\nunderstood online commerce way better than anyone else.  \n  \nThat's the key to success as a startup. There is nothing more important than\nunderstanding your business. You might think that anyone in a business must,\nex officio, understand it. Far from it. Google's secret weapon was simply that\nthey understood search. I was working for Yahoo when Google appeared, and\nYahoo didn't understand search. I know because I once tried to convince the\npowers that be that we had to make search better, and I got in reply what was\nthen the party line about it: that Yahoo was no longer a mere \"search engine.\"\nSearch was now only a small percentage of our page views, less than one\nmonth's growth, and now that we were established as a \"media company,\" or\n\"portal,\" or whatever we were, search could safely be allowed to wither and\ndrop off, like an umbilical cord.  \n  \nWell, a small fraction of page views they may be, but they are an important\nfraction, because they are the page views that Web sessions start with. I\nthink Yahoo gets that now.  \n  \nGoogle understands a few other things most Web companies still don't. The most\nimportant is that you should put users before advertisers, even though the\nadvertisers are paying and users aren't. One of my favorite bumper stickers\nreads \"if the people lead, the leaders will follow.\" Paraphrased for the Web,\nthis becomes \"get all the users, and the advertisers will follow.\" More\ngenerally, design your product to please users first, and then think about how\nto make money from it. If you don't put users first, you leave a gap for\ncompetitors who do.  \n  \nTo make something users love, you have to understand them. And the bigger you\nare, the harder that is. So I say \"get big slow.\" The slower you burn through\nyour funding, the more time you have to learn.  \n  \nThe other reason to spend money slowly is to encourage a culture of cheapness.\nThat's something Yahoo did understand. David Filo's title was \"Chief Yahoo,\"\nbut he was proud that his unofficial title was \"Cheap Yahoo.\" Soon after we\narrived at Yahoo, we got an email from Filo, who had been crawling around our\ndirectory hierarchy, asking if it was really necessary to store so much of our\ndata on expensive RAID drives. I was impressed by that. Yahoo's market cap\nthen was already in the billions, and they were still worrying about wasting a\nfew gigs of disk space.  \n  \nWhen you get a couple million dollars from a VC firm, you tend to feel rich.\nIt's important to realize you're not. A rich company is one with large\nrevenues. This money isn't revenue. It's money investors have given you in the\nhope you'll be able to generate revenues. So despite those millions in the\nbank, you're still poor.  \n  \nFor most startups the model should be grad student, not law firm. Aim for cool\nand cheap, not expensive and impressive. For us the test of whether a startup\nunderstood this was whether they had Aeron chairs. The Aeron came out during\nthe Bubble and was very popular with startups. Especially the type, all too\ncommon then, that was like a bunch of kids playing house with money supplied\nby VCs. We had office chairs so cheap that the arms all fell off. This was\nslightly embarrassing at the time, but in retrospect the grad-studenty\natmosphere of our office was another of those things we did right without\nknowing it.  \n  \nOur offices were in a wooden triple-decker in Harvard Square. It had been an\napartment until about the 1970s, and there was still a claw-footed bathtub in\nthe bathroom. It must once have been inhabited by someone fairly eccentric,\nbecause a lot of the chinks in the walls were stuffed with aluminum foil, as\nif to protect against cosmic rays. When eminent visitors came to see us, we\nwere a bit sheepish about the low production values. But in fact that place\nwas the perfect space for a startup. We felt like our role was to be impudent\nunderdogs instead of corporate stuffed shirts, and that is exactly the spirit\nyou want.  \n  \nAn apartment is also the right kind of place for developing software. Cube\nfarms suck for that, as you've probably discovered if you've tried it. Ever\nnotice how much easier it is to hack at home than at work? So why not make\nwork more like home?  \n  \nWhen you're looking for space for a startup, don't feel that it has to look\nprofessional. Professional means doing good work, not elevators and glass\nwalls. I'd advise most startups to avoid corporate space at first and just\nrent an apartment. You want to live at the office in a startup, so why not\nhave a place designed to be lived in as your office?  \n  \nBesides being cheaper and better to work in, apartments tend to be in better\nlocations than office buildings. And for a startup location is very important.\nThe key to productivity is for people to come back to work after dinner. Those\nhours after the phone stops ringing are by far the best for getting work done.\nGreat things happen when a group of employees go out to dinner together, talk\nover ideas, and then come back to their offices to implement them. So you want\nto be in a place where there are a lot of restaurants around, not some dreary\noffice park that's a wasteland after 6:00 PM. Once a company shifts over into\nthe model where everyone drives home to the suburbs for dinner, however late,\nyou've lost something extraordinarily valuable. God help you if you actually\nstart in that mode.  \n  \nIf I were going to start a startup today, there are only three places I'd\nconsider doing it: on the Red Line near Central, Harvard, or Davis Squares\n(Kendall is too sterile); in Palo Alto on University or California Aves; and\nin Berkeley immediately north or south of campus. These are the only places I\nknow that have the right kind of vibe.  \n  \nThe most important way to not spend money is by not hiring people. I may be an\nextremist, but I think hiring people is the worst thing a company can do. To\nstart with, people are a recurring expense, which is the worst kind. They also\ntend to cause you to grow out of your space, and perhaps even move to the sort\nof uncool office building that will make your software worse. But worst of\nall, they slow you down: instead of sticking your head in someone's office and\nchecking out an idea with them, eight people have to have a meeting about it.\nSo the fewer people you can hire, the better.  \n  \nDuring the Bubble a lot of startups had the opposite policy. They wanted to\nget \"staffed up\" as soon as possible, as if you couldn't get anything done\nunless there was someone with the corresponding job title. That's big company\nthinking. Don't hire people to fill the gaps in some a priori org chart. The\nonly reason to hire someone is to do something you'd like to do but can't.  \n  \nIf hiring unnecessary people is expensive and slows you down, why do nearly\nall companies do it? I think the main reason is that people like the idea of\nhaving a lot of people working for them. This weakness often extends right up\nto the CEO. If you ever end up running a company, you'll find the most common\nquestion people ask is how many employees you have. This is their way of\nweighing you. It's not just random people who ask this; even reporters do. And\nthey're going to be a lot more impressed if the answer is a thousand than if\nit's ten.  \n  \nThis is ridiculous, really. If two companies have the same revenues, it's the\none with fewer employees that's more impressive. When people used to ask me\nhow many people our startup had, and I answered \"twenty,\" I could see them\nthinking that we didn't count for much. I used to want to add \"but our main\ncompetitor, whose ass we regularly kick, has a hundred and forty, so can we\nhave credit for the larger of the two numbers?\"  \n  \nAs with office space, the number of your employees is a choice between seeming\nimpressive, and being impressive. Any of you who were [nerds](nerds.html) in\nhigh school know about this choice. Keep doing it when you start a company.  \n  \n**Should You?**  \n  \nBut should you start a company? Are you the right sort of person to do it? If\nyou are, is it worth it?  \n  \nMore people are the right sort of person to start a startup than realize it.\nThat's the main reason I wrote this. There could be ten times more startups\nthan there are, and that would probably be a good thing.  \n  \nI was, I now realize, exactly the right sort of person to start a startup. But\nthe idea terrified me at first. I was forced into it because I was a\n[Lisp](icad.html) hacker. The company I'd been consulting for seemed to be\nrunning into trouble, and there were not a lot of other companies using Lisp.\nSince I couldn't bear the thought of programming in another language (this was\n1995, remember, when \"another language\" meant C++) the only option seemed to\nbe to start a new company using Lisp.  \n  \nI realize this sounds far-fetched, but if you're a Lisp hacker you'll know\nwhat I mean. And if the idea of starting a startup frightened me so much that\nI only did it out of necessity, there must be a lot of people who would be\ngood at it but who are too intimidated to try.  \n  \nSo who should start a startup? Someone who is a good hacker, between about 23\nand 38, and who wants to solve the money problem in one shot instead of\ngetting paid gradually over a conventional working life.  \n  \nI can't say precisely what a good hacker is. At a first rate university this\nmight include the top half of computer science majors. Though of course you\ndon't have to be a CS major to be a hacker; I was a philosophy major in\ncollege.  \n  \nIt's hard to tell whether you're a good hacker, especially when you're young.\nFortunately the process of starting startups tends to select them\nautomatically. What drives people to start startups is (or should be) looking\nat existing technology and thinking, don't these guys realize they should be\ndoing x, y, and z? And that's also a sign that one is a good hacker.  \n  \nI put the lower bound at 23 not because there's something that doesn't happen\nto your brain till then, but because you need to see what it's like in an\nexisting business before you try running your own. The business doesn't have\nto be a startup. I spent a year working for a software company to pay off my\ncollege loans. It was the worst year of my adult life, but I learned, without\nrealizing it at the time, a lot of valuable lessons about the software\nbusiness. In this case they were mostly negative lessons: don't have a lot of\nmeetings; don't have chunks of code that multiple people own; don't have a\nsales guy running the company; don't make a high-end product; don't let your\ncode get too big; don't leave finding bugs to QA people; don't go too long\nbetween releases; don't isolate developers from users; don't move from\nCambridge to Route 128; and so on. [8] But negative lessons are just as\nvaluable as positive ones. Perhaps even more valuable: it's hard to repeat a\nbrilliant performance, but it's straightforward to avoid errors. [9]  \n  \nThe other reason it's hard to start a company before 23 is that people won't\ntake you seriously. VCs won't trust you, and will try to reduce you to a\nmascot as a condition of funding. Customers will worry you're going to flake\nout and leave them stranded. Even you yourself, unless you're very unusual,\nwill feel your age to some degree; you'll find it awkward to be the boss of\nsomeone much older than you, and if you're 21, hiring only people younger\nrather limits your options.  \n  \nSome people could probably start a company at 18 if they wanted to. Bill Gates\nwas 19 when he and Paul Allen started Microsoft. (Paul Allen was 22, though,\nand that probably made a difference.) So if you're thinking, I don't care what\nhe says, I'm going to start a company now, you may be the sort of person who\ncould get away with it.  \n  \nThe other cutoff, 38, has a lot more play in it. One reason I put it there is\nthat I don't think many people have the physical stamina much past that age. I\nused to work till 2:00 or 3:00 AM every night, seven days a week. I don't know\nif I could do that now.  \n  \nAlso, startups are a big risk financially. If you try something that blows up\nand leaves you broke at 26, big deal; a lot of 26 year olds are broke. By 38\nyou can't take so many risks-- especially if you have kids.  \n  \nMy final test may be the most restrictive. Do you actually want to start a\nstartup? What it amounts to, economically, is compressing your working life\ninto the smallest possible space. Instead of working at an ordinary rate for\n40 years, you work like hell for four. And maybe end up with nothing-- though\nin that case it probably won't take four years.  \n  \nDuring this time you'll do little but work, because when you're not working,\nyour competitors will be. My only leisure activities were running, which I\nneeded to do to keep working anyway, and about fifteen minutes of reading a\nnight. I had a girlfriend for a total of two months during that three year\nperiod. Every couple weeks I would take a few hours off to visit a used\nbookshop or go to a friend's house for dinner. I went to visit my family\ntwice. Otherwise I just worked.  \n  \nWorking was often fun, because the people I worked with were some of my best\nfriends. Sometimes it was even technically interesting. But only about 10% of\nthe time. The best I can say for the other 90% is that some of it is funnier\nin hindsight than it seemed then. Like the time the power went off in\nCambridge for about six hours, and we made the mistake of trying to start a\ngasoline powered generator inside our offices. I won't try that again.  \n  \nI don't think the amount of bullshit you have to deal with in a startup is\nmore than you'd endure in an ordinary working life. It's probably less, in\nfact; it just seems like a lot because it's compressed into a short period. So\nmainly what a startup buys you is time. That's the way to think about it if\nyou're trying to decide whether to start one. If you're the sort of person who\nwould like to solve the money problem once and for all instead of working for\na salary for 40 years, then a startup makes sense.  \n  \nFor a lot of people the conflict is between startups and graduate school. Grad\nstudents are just the age, and just the sort of people, to start software\nstartups. You may worry that if you do you'll blow your chances of an academic\ncareer. But it's possible to be part of a startup and stay in grad school,\nespecially at first. Two of our three original hackers were in grad school the\nwhole time, and both got their [degrees](tlbphd.html). There are few sources\nof energy so powerful as a procrastinating grad student.  \n  \nIf you do have to leave grad school, in the worst case it won't be for too\nlong. If a startup fails, it will probably fail quickly enough that you can\nreturn to academic life. And if it succeeds, you may find you no longer have\nsuch a burning desire to be an assistant professor.  \n  \nIf you want to do it, do it. Starting a startup is not the great mystery it\nseems from outside. It's not something you have to know about \"business\" to\ndo. Build something users love, and spend less than you make. How hard is\nthat?  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] Google's revenues are about two billion a year, but half comes from ads on\nother sites.  \n  \n[2] One advantage startups have over established companies is that there are\nno discrimination laws about starting businesses. For example, I would be\nreluctant to start a startup with a woman who had small children, or was\nlikely to have them soon. But you're not allowed to ask prospective employees\nif they plan to have kids soon. Believe it or not, under current US law,\nyou're not even allowed to discriminate on the basis of intelligence. Whereas\nwhen you're starting a company, you can discriminate on any basis you want\nabout who you start it with.  \n  \n[3] Learning to hack is a lot cheaper than business school, because you can do\nit mostly on your own. For the price of a Linux box, a copy of K&R, and a few\nhours of advice from your neighbor's fifteen year old son, you'll be well on\nyour way.  \n  \n[4] Corollary: Avoid starting a startup to sell things to the biggest company\nof all, the government. Yes, there are lots of opportunities to sell them\ntechnology. But let someone else start those startups.  \n  \n[5] A friend who started a company in Germany told me they do care about the\npaperwork there, and that there's more of it. Which helps explain why there\nare not more startups in Germany.  \n  \n[6] At the seed stage our valuation was in principle $100,000, because Julian\ngot 10% of the company. But this is a very misleading number, because the\nmoney was the least important of the things Julian gave us.  \n  \n[7] The same goes for companies that seem to want to acquire you. There will\nbe a few that are only pretending to in order to pick your brains. But you can\nnever tell for sure which these are, so the best approach is to seem entirely\nopen, but to fail to mention a few critical technical secrets.  \n  \n[8] I was as bad an employee as this place was a company. I apologize to\nanyone who had to work with me there.  \n  \n[9] You could probably write a book about how to succeed in business by doing\neverything in exactly the opposite way from the DMV.  \n  \n**Thanks** to Trevor Blackwell, Sarah Harlin, Jessica Livingston, and Robert\nMorris for reading drafts of this essay, and to Steve Melendez and Gregory\nPrice for inviting me to speak.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nNovember 2005  \n  \nVenture funding works like gears. A typical startup goes through several\nrounds of funding, and at each round you want to take just enough money to\nreach the speed where you can shift into the next gear.  \n  \nFew startups get it quite right. Many are underfunded. A few are overfunded,\nwhich is like trying to start driving in third gear.  \n  \nI think it would help founders to understand funding better\u2014not just the\nmechanics of it, but what investors are thinking. I was surprised recently\nwhen I realized that all the worst problems we faced in our startup were due\nnot to competitors, but investors. Dealing with competitors was easy by\ncomparison.  \n  \nI don't mean to suggest that our investors were nothing but a drag on us. They\nwere helpful in negotiating deals, for example. I mean more that conflicts\nwith investors are particularly nasty. Competitors punch you in the jaw, but\ninvestors have you by the balls.  \n  \nApparently our situation was not unusual. And if trouble with investors is one\nof the biggest threats to a startup, managing them is one of the most\nimportant skills founders need to learn.  \n  \nLet's start by talking about the five sources of startup funding. Then we'll\ntrace the life of a hypothetical (very fortunate) startup as it shifts gears\nthrough successive rounds.  \n  \n**Friends and Family**  \n  \nA lot of startups get their first funding from friends and family. Excite did,\nfor example: after the founders graduated from college, they borrowed $15,000\nfrom their parents to start a company. With the help of some part-time jobs\nthey made it last 18 months.  \n  \nIf your friends or family happen to be rich, the line blurs between them and\nangel investors. At Viaweb we got our first $10,000 of seed money from our\nfriend Julian, but he was sufficiently rich that it's hard to say whether he\nshould be classified as a friend or angel. He was also a lawyer, which was\ngreat, because it meant we didn't have to pay legal bills out of that initial\nsmall sum.  \n  \nThe advantage of raising money from friends and family is that they're easy to\nfind. You already know them. There are three main disadvantages: you mix\ntogether your business and personal life; they will probably not be as well\nconnected as angels or venture firms; and they may not be accredited\ninvestors, which could complicate your life later.  \n  \nThe SEC defines an \"accredited investor\" as someone with over a million\ndollars in liquid assets or an income of over $200,000 a year. The regulatory\nburden is much lower if a company's shareholders are all accredited investors.\nOnce you take money from the general public you're more restricted in what you\ncan do. [1]  \n  \nA startup's life will be more complicated, legally, if any of the investors\naren't accredited. In an IPO, it might not merely add expense, but change the\noutcome. A lawyer I asked about it said:\n\n> When the company goes public, the SEC will carefully study all prior\n> issuances of stock by the company and demand that it take immediate action\n> to cure any past violations of securities laws. Those remedial actions can\n> delay, stall or even kill the IPO.\n\nOf course the odds of any given startup doing an IPO are small. But not as\nsmall as they might seem. A lot of startups that end up going public didn't\nseem likely to at first. (Who could have guessed that the company Wozniak and\nJobs started in their spare time selling plans for microcomputers would yield\none of the biggest IPOs of the decade?) Much of the value of a startup\nconsists of that tiny probability multiplied by the huge outcome.  \n  \nIt wasn't because they weren't accredited investors that I didn't ask my\nparents for seed money, though. When we were starting Viaweb, I didn't know\nabout the concept of an accredited investor, and didn't stop to think about\nthe value of investors' connections. The reason I didn't take money from my\nparents was that I didn't want them to lose it.  \n  \n**Consulting**  \n  \nAnother way to fund a startup is to get a job. The best sort of job is a\nconsulting project in which you can build whatever software you wanted to sell\nas a startup. Then you can gradually transform yourself from a consulting\ncompany into a product company, and have your clients pay your development\nexpenses.  \n  \nThis is a good plan for someone with kids, because it takes most of the risk\nout of starting a startup. There never has to be a time when you have no\nrevenues. Risk and reward are usually proportionate, however: you should\nexpect a plan that cuts the risk of starting a startup also to cut the average\nreturn. In this case, you trade decreased financial risk for increased risk\nthat your company won't succeed as a startup.  \n  \nBut isn't the consulting company itself a startup? No, not generally. A\ncompany has to be more than small and newly founded to be a startup. There are\nmillions of small businesses in America, but only a few thousand are startups.\nTo be a startup, a company has to be a product business, not a service\nbusiness. By which I mean not that it has to make something physical, but that\nit has to have one thing it sells to many people, rather than doing custom\nwork for individual clients. Custom work doesn't scale. To be a startup you\nneed to be the band that sells a million copies of a song, not the band that\nmakes money by playing at individual weddings and bar mitzvahs.  \n  \nThe trouble with consulting is that clients have an awkward habit of calling\nyou on the phone. Most startups operate close to the margin of failure, and\nthe distraction of having to deal with clients could be enough to put you over\nthe edge. Especially if you have competitors who get to work full time on just\nbeing a startup.  \n  \nSo you have to be very disciplined if you take the consulting route. You have\nto work actively to prevent your company growing into a \"weed tree,\" dependent\non this source of easy but low-margin money. [2]  \n  \nIndeed, the biggest danger of consulting may be that it gives you an excuse\nfor failure. In a startup, as in grad school, a lot of what ends up driving\nyou are the expectations of your family and friends. Once you start a startup\nand tell everyone that's what you're doing, you're now on a path labelled \"get\nrich or bust.\" You now have to get rich, or you've failed.  \n  \nFear of failure is an extraordinarily powerful force. Usually it prevents\npeople from starting things, but once you publish some definite ambition, it\nswitches directions and starts working in your favor. I think it's a pretty\nclever piece of jiujitsu to set this irresistible force against the slightly\nless immovable object of becoming rich. You won't have it driving you if your\nstated ambition is merely to start a consulting company that you will one day\nmorph into a startup.  \n  \nAn advantage of consulting, as a way to develop a product, is that you know\nyou're making something at least one customer wants. But if you have what it\ntakes to start a startup you should have sufficient vision not to need this\ncrutch.  \n  \n**Angel Investors**  \n  \n _Angels_ are individual rich people. The word was first used for backers of\nBroadway plays, but now applies to individual investors generally. Angels\nwho've made money in technology are preferable, for two reasons: they\nunderstand your situation, and they're a source of contacts and advice.  \n  \nThe contacts and advice can be more important than the money. When del.icio.us\ntook money from investors, they took money from, among others, Tim O'Reilly.\nThe amount he put in was small compared to the VCs who led the round, but Tim\nis a smart and influential guy and it's good to have him on your side.  \n  \nYou can do whatever you want with money from consulting or friends and family.\nWith angels we're now talking about venture funding proper, so it's time to\nintroduce the concept of _exit strategy_. Younger would-be founders are often\nsurprised that investors expect them either to sell the company or go public.\nThe reason is that investors need to get their capital back. They'll only\nconsider companies that have an exit strategy\u2014meaning companies that could get\nbought or go public.  \n  \nThis is not as selfish as it sounds. There are few large, private technology\ncompanies. Those that don't fail all seem to get bought or go public. The\nreason is that employees are investors too\u2014of their time\u2014and they want just as\nmuch to be able to cash out. If your competitors offer employees stock options\nthat might make them rich, while you make it clear you plan to stay private,\nyour competitors will get the best people. So the principle of an \"exit\" is\nnot just something forced on startups by investors, but part of what it means\nto be a startup.  \n  \nAnother concept we need to introduce now is valuation. When someone buys\nshares in a company, that implicitly establishes a value for it. If someone\npays $20,000 for 10% of a company, the company is in theory worth $200,000. I\nsay \"in theory\" because in early stage investing, valuations are voodoo. As a\ncompany gets more established, its valuation gets closer to an actual market\nvalue. But in a newly founded startup, the valuation number is just an\nartifact of the respective contributions of everyone involved.  \n  \nStartups often \"pay\" investors who will help the company in some way by\nletting them invest at low valuations. If I had a startup and Steve Jobs\nwanted to invest in it, I'd give him the stock for $10, just to be able to\nbrag that he was an investor. Unfortunately, it's impractical (if not illegal)\nto adjust the valuation of the company up and down for each investor.\nStartups' valuations are supposed to rise over time. So if you're going to\nsell cheap stock to eminent angels, do it early, when it's natural for the\ncompany to have a low valuation.  \n  \nSome angel investors join together in syndicates. Any city where people start\nstartups will have one or more of them. In Boston the biggest is the [Common\nAngels](http://commonangels.com/home.html). In the Bay Area it's the [Band of\nAngels](http://bandangels.com/). You can find groups near you through the\n[Angel Capital Association](http://angelcapitalassociation.org/). [3] However,\nmost angel investors don't belong to these groups. In fact, the more prominent\nthe angel, the less likely they are to belong to a group.  \n  \nSome angel groups charge you money to pitch your idea to them. Needless to\nsay, you should never do this.  \n  \nOne of the dangers of taking investment from individual angels, rather than\nthrough an angel group or investment firm, is that they have less reputation\nto protect. A big-name VC firm will not screw you too outrageously, because\nother founders would avoid them if word got out. With individual angels you\ndon't have this protection, as we found to our dismay in our own startup. In\nmany startups' lives there comes a point when you're at the investors'\nmercy\u2014when you're out of money and the only place to get more is your existing\ninvestors. When we got into such a scrape, our investors took advantage of it\nin a way that a name-brand VC probably wouldn't have.  \n  \nAngels have a corresponding advantage, however: they're also not bound by all\nthe rules that VC firms are. And so they can, for example, allow founders to\ncash out partially in a funding round, by selling some of their stock directly\nto the investors. I think this will become more common; the average founder is\neager to do it, and selling, say, half a million dollars worth of stock will\nnot, as VCs fear, cause most founders to be any less committed to the\nbusiness.  \n  \nThe same angels who tried to screw us also let us do this, and so on balance\nI'm grateful rather than angry. (As in families, relations between founders\nand investors can be complicated.)  \n  \nThe best way to find angel investors is through personal introductions. You\ncould try to cold-call angel groups near you, but angels, like VCs, will pay\nmore attention to deals recommended by someone they respect.  \n  \nDeal terms with angels vary a lot. There are no generally accepted standards.\nSometimes angels' deal terms are as fearsome as VCs'. Other angels,\nparticularly in the earliest stages, will invest based on a two-page\nagreement.  \n  \nAngels who only invest occasionally may not themselves know what terms they\nwant. They just want to invest in this startup. What kind of anti-dilution\nprotection do they want? Hell if they know. In these situations, the deal\nterms tend to be random: the angel asks his lawyer to create a vanilla\nagreement, and the terms end up being whatever the lawyer considers vanilla.\nWhich in practice usually means, whatever existing agreement he finds lying\naround his firm. (Few legal documents are created from scratch.)  \n  \nThese heaps o' boilerplate are a problem for small startups, because they tend\nto grow into the union of all preceding documents. I know of one startup that\ngot from an angel investor what amounted to a five hundred pound handshake:\nafter deciding to invest, the angel presented them with a 70-page agreement.\nThe startup didn't have enough money to pay a lawyer even to read it, let\nalone negotiate the terms, so the deal fell through.  \n  \nOne solution to this problem would be to have the startup's lawyer produce the\nagreement, instead of the angel's. Some angels might balk at this, but others\nwould probably welcome it.  \n  \nInexperienced angels often get cold feet when the time comes to write that big\ncheck. In our startup, one of the two angels in the initial round took months\nto pay us, and only did after repeated nagging from our lawyer, who was also,\nfortunately, his lawyer.  \n  \nIt's obvious why investors delay. Investing in startups is risky! When a\ncompany is only two months old, every _day_ you wait gives you 1.7% more data\nabout their trajectory. But the investor is already being compensated for that\nrisk in the low price of the stock, so it is unfair to delay.  \n  \nFair or not, investors do it if you let them. Even VCs do it. And funding\ndelays are a big distraction for founders, who ought to be working on their\ncompany, not worrying about investors. What's a startup to do? With both\ninvestors and acquirers, the only leverage you have is competition. If an\ninvestor knows you have other investors lined up, he'll be a lot more eager to\nclose-- and not just because he'll worry about losing the deal, but because if\nother investors are interested, you must be worth investing in. It's the same\nwith acquisitions. No one wants to buy you till someone else wants to buy you,\nand then everyone wants to buy you.  \n  \nThe key to closing deals is never to stop pursuing alternatives. When an\ninvestor says he wants to invest in you, or an acquirer says they want to buy\nyou, _don't believe it till you get the check._ Your natural tendency when an\ninvestor says yes will be to relax and go back to writing code. Alas, you\ncan't; you have to keep looking for more investors, if only to get this one to\nact. [4]  \n  \n**Seed Funding Firms**  \n  \nSeed firms are like angels in that they invest relatively small amounts at\nearly stages, but like VCs in that they're companies that do it as a business,\nrather than individuals making occasional investments on the side.  \n  \nTill now, nearly all seed firms have been so-called \"incubators,\" so [Y\nCombinator](http://ycombinator.com) gets called one too, though the only thing\nwe have in common is that we invest in the earliest phase.  \n  \nAccording to the National Association of Business Incubators, there are about\n800 incubators in the US. This is an astounding number, because I know the\nfounders of a lot of startups, and I can't think of one that began in an\nincubator.  \n  \nWhat is an incubator? I'm not sure myself. The defining quality seems to be\nthat you work in their space. That's where the name \"incubator\" comes from.\nThey seem to vary a great deal in other respects. At one extreme is the sort\nof pork-barrel project where a town gets money from the state government to\nrenovate a vacant building as a \"high-tech incubator,\" as if it were merely\nlack of the right sort of office space that had till now prevented the town\nfrom becoming a [startup hub](siliconvalley.html). At the other extreme are\nplaces like Idealab, which generates ideas for new startups internally and\nhires people to work for them.  \n  \nThe classic Bubble incubators, most of which now seem to be dead, were like VC\nfirms except that they took a much bigger role in the startups they funded. In\naddition to working in their space, you were supposed to use their office\nstaff, lawyers, accountants, and so on.  \n  \nWhereas incubators tend (or tended) to exert more control than VCs, Y\nCombinator exerts less.  And we think it's better if startups operate out of\ntheir own premises, however crappy, than the offices of their investors. So\nit's annoying that we keep getting called an \"incubator,\" but perhaps\ninevitable, because there's only one of us so far and no word yet for what we\nare. If we have to be called something, the obvious name would be \"excubator.\"\n(The name is more excusable if one considers it as meaning that we enable\npeople to escape cubicles.)  \n  \nBecause seed firms are companies rather than individual people, reaching them\nis easier than reaching angels. Just go to their web site and send them an\nemail. The importance of personal introductions varies, but is less than with\nangels or VCs.  \n  \nThe fact that seed firms are companies also means the investment process is\nmore standardized. (This is generally true with angel groups too.) Seed firms\nwill probably have set deal terms they use for every startup they fund. The\nfact that the deal terms are standard doesn't mean they're favorable to you,\nbut if other startups have signed the same agreements and things went well for\nthem, it's a sign the terms are reasonable.  \n  \nSeed firms differ from angels and VCs in that they invest exclusively in the\nearliest phases\u2014often when the company is still just an idea. Angels and even\nVC firms occasionally do this, but they also invest at later stages.  \n  \nThe problems are different in the early stages. For example, in the first\ncouple months a startup may completely redefine their [idea](ideas.html). So\nseed investors usually care less about the idea than the people. This is true\nof all venture funding, but especially so in the seed stage.  \n  \nLike VCs, one of the advantages of seed firms is the advice they offer. But\nbecause seed firms operate in an earlier phase, they need to offer different\nkinds of advice. For example, a seed firm should be able to give advice about\nhow to approach VCs, which VCs obviously don't need to do; whereas VCs should\nbe able to give advice about how to hire an \"executive team,\" which is not an\nissue in the seed stage.  \n  \nIn the earliest phases, a lot of the problems are technical, so seed firms\nshould be able to help with technical as well as business problems.  \n  \nSeed firms and angel investors generally want to invest in the initial phases\nof a startup, then hand them off to VC firms for the next round. Occasionally\nstartups go from seed funding direct to acquisition, however, and I expect\nthis to become increasingly common.  \n  \nGoogle has been aggressively pursuing this route, and now\n[Yahoo](http://ycombinator.com/buckman.html) is too. Both now compete directly\nwith VCs. And this is a smart move. Why wait for further funding rounds to\njack up a startup's price? When a startup reaches the point where VCs have\nenough information to invest in it, the acquirer should have enough\ninformation to buy it. More information, in fact; with their technical depth,\nthe acquirers should be better at picking winners than VCs.  \n  \n**Venture Capital Funds**  \n  \nVC firms are like seed firms in that they're actual companies, but they invest\nother people's money, and much larger amounts of it. VC investments average\nseveral million dollars. So they tend to come later in the life of a startup,\nare harder to get, and come with tougher terms.  \n  \nThe word \"venture capitalist\" is sometimes used loosely for any venture\ninvestor, but there is a sharp difference between VCs and other investors: VC\nfirms are organized as _funds_ , much like hedge funds or mutual funds. The\nfund managers, who are called \"general partners,\" get about 2% of the fund\nannually as a management fee, plus about 20% of the fund's gains.  \n  \nThere is a very sharp dropoff in performance among VC firms, because in the VC\nbusiness both success and failure are self-perpetuating. When an investment\nscores spectacularly, as Google did for Kleiner and Sequoia, it generates a\nlot of good publicity for the VCs. And many founders prefer to take money from\nsuccessful VC firms, because of the legitimacy it confers. Hence a vicious\n(for the losers) cycle: VC firms that have been doing badly will only get the\ndeals the bigger fish have rejected, causing them to continue to do badly.  \n  \nAs a result, of the thousand or so VC funds in the US now, only about 50 are\nlikely to make money, and it is very hard for a new fund to break into this\ngroup.  \n  \nIn a sense, the lower-tier VC firms are a bargain for founders. They may not\nbe quite as smart or as well connected as the big-name firms, but they are\nmuch hungrier for deals. This means you should be able to get better terms\nfrom them.  \n  \nBetter how? The most obvious is valuation: they'll take less of your company.\nBut as well as money, there's power. I think founders will increasingly be\nable to stay on as CEO, and on terms that will make it fairly hard to fire\nthem later.  \n  \nThe most dramatic change, I predict, is that VCs will allow founders to cash\nout partially by [selling](vcsqueeze.html) some of their stock direct to the\nVC firm. VCs have traditionally resisted letting founders get anything before\nthe ultimate \"liquidity event.\" But they're also desperate for deals. And\nsince I know from my own experience that the rule against buying stock from\nfounders is a stupid one, this is a natural place for things to give as\nventure funding becomes more and more a seller's market.  \n  \nThe disadvantage of taking money from less known firms is that people will\nassume, correctly or not, that you were turned down by the more exalted ones.\nBut, like where you went to college, the name of your VC stops mattering once\nyou have some performance to measure. So the more confident you are, the less\nyou need a brand-name VC. We funded Viaweb entirely with angel money; it never\noccurred to us that the backing of a well known VC firm would make us seem\nmore impressive. [5]  \n  \nAnother danger of less known firms is that, like angels, they have less\nreputation to protect. I suspect it's the lower-tier firms that are\nresponsible for most of the tricks that have given VCs such a bad reputation\namong hackers. They are doubly hosed: the general partners themselves are less\nable, and yet they have harder problems to solve, because the top VCs skim off\nall the best deals, leaving the lower-tier firms exactly the startups that are\nlikely to blow up.  \n  \nFor example, lower-tier firms are much more likely to pretend to want to do a\ndeal with you just to lock you up while they decide if they really want to.\nOne experienced CFO said:\n\n> The better ones usually will not give a term sheet unless they really want\n> to do a deal. The second or third tier firms have a much higher break\n> rate\u2014it could be as high as 50%.\n\nIt's obvious why: the lower-tier firms' biggest fear, when chance throws them\na bone, is that one of the big dogs will notice and take it away. The big dogs\ndon't have to worry about that.  \n  \nFalling victim to this trick could really hurt you. As one VC told me:\n\n> If you were talking to four VCs, told three of them that you accepted a term\n> sheet, and then have to call them back to tell them you were just kidding,\n> you are absolutely damaged goods.\n\nHere's a partial solution: when a VC offers you a term sheet, ask how many of\ntheir last 10 term sheets turned into deals. This will at least force them to\nlie outright if they want to mislead you.  \n  \nNot all the people who work at VC firms are partners. Most firms also have a\nhandful of junior employees called something like associates or analysts. If\nyou get a call from a VC firm, go to their web site and check whether the\nperson you talked to is a partner. Odds are it will be a junior person; they\nscour the web looking for startups their bosses could invest in. The junior\npeople will tend to seem very positive about your company. They're not\npretending; they _want_ to believe you're a hot prospect, because it would be\na huge coup for them if their firm invested in a company they discovered.\nDon't be misled by this optimism. It's the partners who decide, and they view\nthings with a colder eye.  \n  \nBecause VCs invest large amounts, the money comes with more restrictions. Most\nonly come into effect if the company gets into trouble. For example, VCs\ngenerally write it into the deal that in any sale, they get their investment\nback first. So if the company gets sold at a low price, the founders could get\nnothing. Some VCs now require that in any sale they get 4x their investment\nback before the common stock holders (that is, you) get anything, but this is\nan abuse that should be resisted.  \n  \nAnother difference with large investments is that the founders are usually\nrequired to accept \"vesting\"\u2014to surrender their stock and earn it back over\nthe next 4-5 years. VCs don't want to invest millions in a company the\nfounders could just walk away from. Financially, vesting has little effect,\nbut in some situations it could mean founders will have less power. If VCs got\nde facto control of the company and fired one of the founders, he'd lose any\nunvested stock unless there was specific protection against this. So vesting\nwould in that situation force founders to toe the line.  \n  \nThe most noticeable change when a startup takes serious funding is that the\nfounders will no longer have complete control. Ten years ago VCs used to\ninsist that founders step down as CEO and hand the job over to a business guy\nthey supplied. This is less the rule now, partly because the disasters of the\nBubble showed that generic business guys don't make such great CEOs.  \n  \nBut while founders will increasingly be able to stay on as CEO, they'll have\nto cede some power, because the board of directors will become more powerful.\nIn the seed stage, the board is generally a formality; if you want to talk to\nthe other board members, you just yell into the next room. This stops with VC-\nscale money. In a typical VC funding deal, the board of directors might be\ncomposed of two VCs, two founders, and one outside person acceptable to both.\nThe board will have ultimate power, which means the founders now have to\nconvince instead of commanding.  \n  \nThis is not as bad as it sounds, however. Bill Gates is in the same position;\nhe doesn't have majority control of Microsoft; in principle he also has to\nconvince instead of commanding. And yet he seems pretty commanding, doesn't\nhe? As long as things are going smoothly, boards don't interfere much. The\ndanger comes when there's a bump in the road, as happened to Steve Jobs at\nApple.  \n  \nLike angels, VCs prefer to invest in deals that come to them through people\nthey know. So while nearly all VC funds have some address you can send your\nbusiness plan to, VCs privately admit the chance of getting funding by this\nroute is near zero. One recently told me that he did not know a single startup\nthat got funded this way.  \n  \nI suspect VCs accept business plans \"over the transom\" more as a way to keep\ntabs on industry trends than as a source of deals. In fact, I would strongly\nadvise against mailing your business plan randomly to VCs, because they treat\nthis as evidence of laziness. Do the extra work of getting personal\nintroductions. As one VC put it:\n\n> I'm not hard to find. I know a lot of people. If you can't find some way to\n> reach me, how are you going to create a successful company?\n\nOne of the most difficult problems for startup founders is deciding when to\napproach VCs. You really only get one chance, because they rely heavily on\nfirst impressions. And you can't approach some and save others for later,\nbecause (a) they ask who else you've talked to and when and (b) they talk\namong themselves. If you're talking to one VC and he finds out that you were\nrejected by another several months ago, you'll definitely seem shopworn.  \n  \nSo when do you approach VCs? When you can convince them. If the founders have\nimpressive resumes and the idea isn't hard to understand, you could approach\nVCs quite early. Whereas if the founders are unknown and the idea is very\nnovel, you might have to launch the thing and show that users loved it before\nVCs would be convinced.  \n  \nIf several VCs are interested in you, they will sometimes be willing to split\nthe deal between them. They're more likely to do this if they're close in the\nVC pecking order. Such deals may be a net win for founders, because you get\nmultiple VCs interested in your success, and you can ask each for advice about\nthe other. One founder I know wrote:\n\n> Two-firm deals are great. It costs you a little more equity, but being able\n> to play the two firms off each other (as well as ask one if the other is\n> being out of line) is invaluable.\n\nWhen you do negotiate with VCs, remember that they've done this a lot more\nthan you have. They've invested in dozens of startups, whereas this is\nprobably the first you've founded. But don't let them or the situation\nintimidate you. The average founder is smarter than the average VC. So just do\nwhat you'd do in any complex, unfamiliar situation: proceed deliberately, and\nquestion anything that seems odd.  \n  \nIt is, unfortunately, common for VCs to put terms in an agreement whose\nconsequences surprise founders later, and also common for VCs to defend things\nthey do by saying that they're standard in the industry. Standard, schmandard;\nthe whole industry is only a few decades old, and rapidly evolving. The\nconcept of \"standard\" is a useful one when you're operating on a small scale\n(Y Combinator uses identical terms for every deal because for tiny seed-stage\ninvestments it's not worth the overhead of negotiating individual deals), but\nit doesn't apply at the VC level. On that scale, every negotiation is unique.  \n  \nMost successful startups get money from more than one of the preceding five\nsources. [6] And, confusingly, the names of funding sources also tend to be\nused as the names of different rounds. The best way to explain how it all\nworks is to follow the case of a hypothetical startup.  \n  \n**Stage 1: Seed Round**  \n  \nOur startup begins when a group of three friends have an idea-- either an idea\nfor something they might build, or simply the idea \"let's start a company.\"\nPresumably they already have some source of food and shelter. But if you have\nfood and shelter, you probably also have something you're supposed to be\nworking on: either classwork, or a job. So if you want to work full-time on a\nstartup, your money situation will probably change too.  \n  \nA lot of startup founders say they started the company without any idea of\nwhat they planned to do. This is actually less common than it seems: many have\nto claim they thought of the idea after quitting because otherwise their\nformer employer would own it.  \n  \nThe three friends decide to take the leap. Since most startups are in\ncompetitive businesses, you not only want to work full-time on them, but more\nthan full-time. So some or all of the friends quit their jobs or leave school.\n(Some of the founders in a startup can stay in grad school, but at least one\nhas to make the company his full-time job.)  \n  \nThey're going to run the company out of one of their apartments at first, and\nsince they don't have any users they don't have to pay much for\ninfrastructure. Their main expenses are setting up the company, which costs a\ncouple thousand dollars in legal work and registration fees, and the living\nexpenses of the founders.  \n  \nThe phrase \"seed investment\" covers a broad range. To some VC firms it means\n$500,000, but to most startups it means several months' living expenses. We'll\nsuppose our group of friends start with $15,000 from their friend's rich\nuncle, who they give 5% of the company in return. There's only common stock at\nthis stage. They leave 20% as an options pool for later employees (but they\nset things up so that they can issue this stock to themselves if they get\nbought early and most is still unissued), and the three founders each get 25%.  \n  \nBy living really cheaply they think they can make the remaining money last\nfive months. When you have five months' runway left, how soon do you need to\nstart looking for your next round? Answer: immediately. It takes time to find\ninvestors, and time (always more than you expect) for the deal to close even\nafter they say yes. So if our group of founders know what they're doing\nthey'll start sniffing around for angel investors right away. But of course\ntheir main job is to build version 1 of their software.  \n  \nThe friends might have liked to have more money in this first phase, but being\nslightly underfunded teaches them an important lesson. For a startup,\ncheapness is power. The lower your costs, the more options you have\u2014not just\nat this stage, but at every point till you're profitable. When you have a high\n\"burn rate,\" you're always under time pressure, which means (a) you don't have\ntime for your ideas to evolve, and (b) you're often forced to take deals you\ndon't like.  \n  \nEvery startup's rule should be: spend little, and work fast.  \n  \nAfter ten weeks' work the three friends have built a prototype that gives one\na taste of what their product will do. It's not what they originally set out\nto do\u2014in the process of writing it, they had some new ideas. And it only does\na fraction of what the finished product will do, but that fraction includes\nstuff that no one else has done before.  \n  \nThey've also written at least a skeleton business plan, addressing the five\nfundamental questions: what they're going to do, why users need it, how large\nthe market is, how they'll make money, and who the competitors are and why\nthis company is going to beat them. (That last has to be more specific than\n\"they suck\" or \"we'll work really hard.\")  \n  \nIf you have to choose between spending time on the demo or the business plan,\nspend most on the demo. Software is not only more convincing, but a better way\nto explore ideas.  \n  \n**Stage 2: Angel Round**  \n  \nWhile writing the prototype, the group has been traversing their network of\nfriends in search of angel investors. They find some just as the prototype is\ndemoable. When they demo it, one of the angels is willing to invest. Now the\ngroup is looking for more money: they want enough to last for a year, and\nmaybe to hire a couple friends. So they're going to raise $200,000.  \n  \nThe angel agrees to invest at a pre-money valuation of $1 million. The company\nissues $200,000 worth of new shares to the angel; if there were 1000 shares\nbefore the deal, this means 200 additional shares. The angel now owns 200/1200\nshares, or a sixth of the company, and all the previous shareholders'\npercentage ownership is diluted by a sixth. After the deal, the capitalization\ntable looks like this:  shareholder shares percent\n\\------------------------------- angel 200 16.7 uncle 50 4.2 each founder 250\n20.8 option pool 200 16.7 \\---- ----- total 1200 100  To keep things simple, I\nhad the angel do a straight cash for stock deal. In reality the angel might be\nmore likely to make the investment in the form of a convertible loan. A\nconvertible loan is a loan that can be converted into stock later; it works\nout the same as a stock purchase in the end, but gives the angel more\nprotection against being squashed by VCs in future rounds.  \n  \nWho pays the legal bills for this deal? The startup, remember, only has a\ncouple thousand left. In practice this turns out to be a sticky problem that\nusually gets solved in some improvised way. Maybe the startup can find lawyers\nwho will do it cheaply in the hope of future work if the startup succeeds.\nMaybe someone has a lawyer friend. Maybe the angel pays for his lawyer to\nrepresent both sides. (Make sure if you take the latter route that the lawyer\nis _representing_ you rather than merely advising you, or his only duty is to\nthe investor.)  \n  \nAn angel investing $200k would probably expect a seat on the board of\ndirectors. He might also want preferred stock, meaning a special class of\nstock that has some additional rights over the common stock everyone else has.\nTypically these rights include vetoes over major strategic decisions,\nprotection against being diluted in future rounds, and the right to get one's\ninvestment back first if the company is sold.  \n  \nSome investors might expect the founders to accept vesting for a sum this\nsize, and others wouldn't. VCs are more likely to require vesting than angels.\nAt Viaweb we managed to raise $2.5 million from angels without ever accepting\nvesting, largely because we were so inexperienced that we were appalled at the\nidea. In practice this turned out to be good, because it made us harder to\npush around.  \n  \nOur experience was unusual; vesting is the norm for amounts that size. Y\nCombinator doesn't require vesting, because (a) we invest such small amounts,\nand (b) we think it's unnecessary, and that the hope of getting rich is enough\nmotivation to keep founders at work. But maybe if we were investing millions\nwe would think differently.  \n  \nI should add that vesting is also a way for founders to protect themselves\nagainst one another. It solves the problem of what to do if one of the\nfounders quits. So some founders impose it on themselves when they start the\ncompany.  \n  \nThe angel deal takes two weeks to close, so we are now three months into the\nlife of the company.  \n  \nThe point after you get the first big chunk of angel money will usually be the\nhappiest phase in a startup's life. It's a lot like being a postdoc: you have\nno immediate financial worries, and few responsibilities. You get to work on\njuicy kinds of work, like designing software. You don't have to spend time on\nbureaucratic stuff, because you haven't hired any bureaucrats yet. Enjoy it\nwhile it lasts, and get as much done as you can, because you will never again\nbe so productive.  \n  \nWith an apparently inexhaustible sum of money sitting safely in the bank, the\nfounders happily set to work turning their prototype into something they can\nrelease. They hire one of their friends\u2014at first just as a consultant, so they\ncan try him out\u2014and then a month later as employee #1. They pay him the\nsmallest salary he can live on, plus 3% of the company in restricted stock,\nvesting over four years. (So after this the option pool is down to 13.7%). [7]\nThey also spend a little money on a freelance graphic designer.  \n  \nHow much stock do you give early employees? That varies so much that there's\nno conventional number. If you get someone really good, really early, it might\nbe wise to give him as much stock as the founders. The one universal rule is\nthat the amount of stock an employee gets decreases polynomially with the age\nof the company. In other words, you get rich as a power of how early you were.\nSo if some friends want you to come work for their startup, don't wait several\nmonths before deciding.  \n  \nA month later, at the end of month four, our group of founders have something\nthey can launch. Gradually through word of mouth they start to get users.\nSeeing the system in use by real users\u2014people they don't know\u2014gives them lots\nof new ideas. Also they find they now worry obsessively about the status of\ntheir server. (How relaxing founders' lives must have been when startups wrote\nVisiCalc.)  \n  \nBy the end of month six, the system is starting to have a solid core of\nfeatures, and a small but devoted following. People start to write about it,\nand the founders are starting to feel like experts in their field.  \n  \nWe'll assume that their startup is one that could put millions more to use.\nPerhaps they need to spend a lot on marketing, or build some kind of expensive\ninfrastructure, or hire highly paid salesmen. So they decide to start talking\nto VCs. They get introductions to VCs from various sources: their angel\ninvestor connects them with a couple; they meet a few at conferences; a couple\nVCs call them after reading about them.  \n  \n**Step 3: Series A Round**  \n  \nArmed with their now somewhat fleshed-out business plan and able to demo a\nreal, working system, the founders visit the VCs they have introductions to.\nThey find the VCs intimidating and inscrutable. They all ask the same\nquestion: who else have you pitched to? (VCs are like high school girls:\nthey're acutely aware of their position in the VC pecking order, and their\ninterest in a company is a function of the interest other VCs show in it.)  \n  \nOne of the VC firms says they want to invest and offers the founders a term\nsheet. A term sheet is a summary of what the deal terms will be when and if\nthey do a deal; lawyers will fill in the details later. By accepting the term\nsheet, the startup agrees to turn away other VCs for some set amount of time\nwhile this firm does the \"due diligence\" required for the deal. Due diligence\nis the corporate equivalent of a background check: the purpose is to uncover\nany hidden bombs that might sink the company later, like serious design flaws\nin the product, pending lawsuits against the company, intellectual property\nissues, and so on. VCs' legal and financial due diligence is pretty thorough,\nbut the technical due diligence is generally a joke. [8]  \n  \nThe due diligence discloses no ticking bombs, and six weeks later they go\nahead with the deal. Here are the terms: a $2 million investment at a pre-\nmoney valuation of $4 million, meaning that after the deal closes the VCs will\nown a third of the company (2 / (4 + 2)). The VCs also insist that prior to\nthe deal the option pool be enlarged by an additional hundred shares. So the\ntotal number of new shares issued is 750, and the cap table becomes:\nshareholder shares percent \\------------------------------- VCs 650 33.3 angel\n200 10.3 uncle 50 2.6 each founder 250 12.8 employee 36* 1.8 *unvested option\npool 264 13.5 \\---- ----- total 1950 100  This picture is unrealistic in\nseveral respects. For example, while the percentages might end up looking like\nthis, it's unlikely that the VCs would keep the existing numbers of shares. In\nfact, every bit of the startup's paperwork would probably be replaced, as if\nthe company were being founded anew. Also, the money might come in several\ntranches, the later ones subject to various conditions\u2014though this is\napparently more common in deals with lower-tier VCs (whose lot in life is to\nfund more dubious startups) than with the top firms.  \n  \nAnd of course any VCs reading this are probably rolling on the floor laughing\nat how my hypothetical VCs let the angel keep his 10.3 of the company. I\nadmit, this is the Bambi version; in simplifying the picture, I've also made\neveryone nicer. In the real world, VCs regard angels the way a jealous husband\nfeels about his wife's previous boyfriends. To them the company didn't exist\nbefore they invested in it. [9]  \n  \nI don't want to give the impression you have to do an angel round before going\nto VCs. In this example I stretched things out to show multiple sources of\nfunding in action. Some startups could go directly from seed funding to a VC\nround; several of the companies we've funded have.  \n  \nThe founders are required to vest their shares over four years, and the board\nis now reconstituted to consist of two VCs, two founders, and a fifth person\nacceptable to both. The angel investor cheerfully surrenders his board seat.  \n  \nAt this point there is nothing new our startup can teach us about funding\u2014or\nat least, nothing good. [10] The startup will almost certainly hire more\npeople at this point; those millions must be put to work, after all. The\ncompany may do additional funding rounds, presumably at higher valuations.\nThey may if they are extraordinarily fortunate do an IPO, which we should\nremember is also in principle a round of funding, regardless of its de facto\npurpose. But that, if not beyond the bounds of possibility, is beyond the\nscope of this article.  \n  \n**Deals Fall Through**  \n  \nAnyone who's been through a startup will find the preceding portrait to be\nmissing something: disasters. If there's one thing all startups have in\ncommon, it's that something is always going wrong. And nowhere more than in\nmatters of funding.  \n  \nFor example, our hypothetical startup never spent more than half of one round\nbefore securing the next. That's more ideal than typical. Many startups\u2014even\nsuccessful ones\u2014come close to running out of money at some point. Terrible\nthings happen to startups when they run out of money, because they're designed\nfor growth, not adversity.  \n  \nBut the most unrealistic thing about the series of deals I've described is\nthat they all closed. In the startup world, closing is not what deals do. What\ndeals do is fall through. If you're starting a startup you would do well to\nremember that. Birds fly; fish swim; deals fall through.  \n  \nWhy? Partly the reason deals seem to fall through so often is that you lie to\nyourself. You want the deal to close, so you start to believe it will. But\neven correcting for this, startup deals fall through alarmingly often\u2014far more\noften than, say, deals to buy real estate. The reason is that it's such a\nrisky environment. People about to fund or acquire a startup are prone to\nwicked cases of buyer's remorse. They don't really grasp the risk they're\ntaking till the deal's about to close. And then they panic. And not just\ninexperienced angel investors, but big companies too.  \n  \nSo if you're a startup founder wondering why some angel investor isn't\nreturning your phone calls, you can at least take comfort in the thought that\nthe same thing is happening to other deals a hundred times the size.  \n  \nThe example of a startup's history that I've presented is like a\nskeleton\u2014accurate so far as it goes, but needing to be fleshed out to be a\ncomplete picture. To get a complete picture, just add in every possible\ndisaster.  \n  \nA frightening prospect? In a way. And yet also in a way encouraging. The very\nuncertainty of startups frightens away almost everyone. People overvalue\nstability\u2014especially [young](hiring.html) people, who ironically need it\nleast. And so in starting a startup, as in any really bold undertaking, merely\ndeciding to do it gets you halfway there. On the day of the race, most of the\nother runners won't show up.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] The aim of such regulations is to protect widows and orphans from crooked\ninvestment schemes; people with a million dollars in liquid assets are assumed\nto be able to protect themselves. The unintended consequence is that the\ninvestments that generate the highest returns, like hedge funds, are available\nonly to the rich.  \n  \n[2] Consulting is where product companies go to die. IBM is the most famous\nexample. So starting as a consulting company is like starting out in the grave\nand trying to work your way up into the world of the living.  \n  \n[3] If \"near you\" doesn't mean the Bay Area, Boston, or Seattle, consider\nmoving. It's not a coincidence you haven't heard of many startups from\nPhiladelphia.  \n  \n[4] Investors are often compared to sheep. And they are like sheep, but that's\na rational response to their situation. Sheep act the way they do for a\nreason. If all the other sheep head for a certain field, it's probably good\ngrazing. And when a wolf appears, is he going to eat a sheep in the middle of\nthe flock, or one near the edge?  \n  \n[5] This was partly confidence, and partly simple ignorance. We didn't know\nourselves which VC firms were the impressive ones. We thought software was all\nthat mattered. But that turned out to be the right direction to be naive in:\nit's much better to overestimate than underestimate the importance of making a\ngood product.  \n  \n[6] I've omitted one source: government grants. I don't think these are even\nworth thinking about for the average startup. Governments may mean well when\nthey set up grant programs to encourage startups, but what they give with one\nhand they take away with the other: the process of applying is inevitably so\narduous, and the restrictions on what you can do with the money so burdensome,\nthat it would be easier to take a job to get the money.  \n  \nYou should be especially suspicious of grants whose purpose is some kind of\nsocial engineering-- e.g. to encourage more startups to be started in\nMississippi. Free money to start a startup in a place where few succeed is\nhardly free.  \n  \nSome government agencies run venture funding groups, which make investments\nrather than giving grants. For example, the CIA runs a venture fund called In-\nQ-Tel that is modelled on private sector funds and apparently generates good\nreturns. They would probably be worth approaching\u2014if you don't mind taking\nmoney from the CIA.  \n  \n[7] Options have largely been replaced with restricted stock, which amounts to\nthe same thing. Instead of earning the right to buy stock, the employee gets\nthe stock up front, and earns the right not to have to give it back. The\nshares set aside for this purpose are still called the \"option pool.\"  \n  \n[8] First-rate technical people do not generally hire themselves out to do due\ndiligence for VCs. So the most difficult part for startup founders is often\nresponding politely to the inane questions of the \"expert\" they send to look\nyou over.  \n  \n[9] VCs regularly wipe out angels by issuing arbitrary amounts of new stock.\nThey seem to have a standard piece of casuistry for this situation: that the\nangels are no longer working to help the company, and so don't deserve to keep\ntheir stock. This of course reflects a willful misunderstanding of what\ninvestment means; like any investor, the angel is being compensated for risks\nhe took earlier. By a similar logic, one could argue that the VCs should be\ndeprived of their shares when the company goes public.  \n  \n[10] One new thing the company might encounter is a _down round_ , or a\nfunding round at valuation lower than the previous round. Down rounds are bad\nnews; it is generally the common stock holders who take the hit. Some of the\nmost fearsome provisions in VC deal terms have to do with down rounds\u2014like\n\"full ratchet anti-dilution,\" which is as frightening as it sounds.  \n  \nFounders are tempted to ignore these clauses, because they think the company\nwill either be a big success or a complete bust. VCs know otherwise: it's not\nuncommon for startups to have moments of adversity before they ultimately\nsucceed. So it's worth negotiating anti-dilution provisions, even though you\ndon't think you need to, and VCs will try to make you feel that you're being\ngratuitously troublesome.  \n  \n**Thanks** to Sam Altman, Hutch Fishman, Steve Huffman, Jessica Livingston,\nSesha Pratap, Stan Reiss, Andy Singleton, Zak Stone, and Aaron Swartz for\nreading drafts of this.  \n  \n\nOctober 2007  \n  \nAfter the last [talk](webstartups.html) I gave, one of the organizers got up\non the stage to deliver an impromptu rebuttal. That never happened before. I\nonly heard the first few sentences, but that was enough to tell what I said\nthat upset him: that startups would do better if they moved to Silicon Valley.  \n  \nThis conference was in London, and most of the audience seemed to be from the\nUK. So saying startups should move to Silicon Valley seemed like a\nnationalistic remark: an obnoxious American telling them that if they wanted\nto do things right they should all just move to America.  \n  \nActually I'm less American than I seem. I didn't say so, but I'm British by\nbirth. And just as Jews are ex officio allowed to tell Jewish jokes, I don't\nfeel like I have to bother being diplomatic with a British audience.  \n  \nThe idea that startups would do better to move to Silicon Valley is not even a\nnationalistic one. [1] It's the same thing I say to startups in the US. Y\nCombinator alternates between coasts every 6 months. Every other funding cycle\nis in Boston. And even though Boston is the second biggest startup hub in the\nUS (and the world), we tell the startups from those cycles that their best bet\nis to move to Silicon Valley. If that's true of Boston, it's even more true of\nevery other city.  \n  \nThis is about cities, not countries.  \n  \nAnd I think I can prove I'm right. You can easily reduce the opposing argument\nad what most people would agree was absurdum. Few would be willing to claim\nthat it doesn't matter at all where a startup is\u2014that a startup operating out\nof a small agricultural town wouldn't benefit from moving to a startup hub.\nMost people could see how it might be helpful to be in a place where there was\ninfrastructure for startups, accumulated knowledge about how to make them\nwork, and other people trying to do it. And yet whatever argument you use to\nprove that startups don't need to move from London to Silicon Valley could\nequally well be used to prove startups don't need to move from smaller towns\nto London.  \n  \nThe difference between cities is a matter of degree. And if, as nearly\neveryone who knows agrees, startups are better off in Silicon Valley than\nBoston, then they're better off in Silicon Valley than everywhere else too.  \n  \nI realize I might seem to have a vested interest in this conclusion, because\nstartups that move to the US might do it through Y Combinator. But the\nAmerican startups we've funded will attest that I say the same thing to them.  \n  \nI'm not claiming of course that every startup has to go to Silicon Valley to\nsucceed. Just that all other things being equal, the more of a startup hub a\nplace is, the better startups will do there. But other considerations can\noutweigh the advantages of moving. I'm not saying founders with families\nshould uproot them to move halfway around the world; that might be too much of\na distraction.  \n  \nImmigration difficulties might be another reason to stay put. Dealing with\nimmigration problems is like raising money: for some reason it seems to\nconsume all your attention. A startup can't afford much of that. One Canadian\nstartup we funded spent about 6 months working on moving to the US. Eventually\nthey just gave up, because they couldn't afford to take so much time away from\nworking on their software.  \n  \n(If another country wanted to establish a rival to Silicon Valley, the single\nbest thing they could do might be to create a special visa for startup\nfounders. US immigration policy is one of Silicon Valley's biggest\nweaknesses.)  \n  \nIf your startup is connected to a specific industry, you may be better off in\none of its centers. A startup doing something related to entertainment might\nwant to be in New York or LA.  \n  \nAnd finally, if a good investor has committed to fund you if you stay where\nyou are, you should probably stay. Finding investors is hard. You generally\nshouldn't pass up a definite funding offer to move. [2]  \n  \nIn fact, the quality of the investors may be the main advantage of startup\nhubs. Silicon Valley investors are noticeably more aggressive than Boston\nones. Over and over, I've seen startups we've funded snatched by west coast\ninvestors out from under the noses of Boston investors who saw them first but\nacted too slowly. At this year's Boston Demo Day, I told the audience that\nthis happened every year, so if they saw a startup they liked, they should\nmake them an offer. And yet within a month it had happened again: an\naggressive west coast VC who had met the founder of a YC-funded startup a week\nbefore beat out a Boston VC who had known him for years. By the time the\nBoston VC grasped what was happening, the deal was already gone.  \n  \nBoston investors will admit they're more conservative. Some want to believe\nthis comes from the city's prudent Yankee character. But Occam's razor\nsuggests the truth is less flattering. Boston investors are probably more\nconservative than Silicon Valley investors for the same reason Chicago\ninvestors are more conservative than Boston ones. They don't understand\nstartups as well.  \n  \nWest coast investors aren't bolder because they're irresponsible cowboys, or\nbecause the good weather makes them optimistic. They're bolder because they\nknow what they're doing. They're the skiers who ski on the diamond slopes.\nBoldness is the essence of venture investing. The way you get big returns is\nnot by trying to avoid losses, but by trying to ensure you get some of the big\nhits. And the big hits often look risky at first.  \n  \nLike Facebook. Facebook was started in Boston. Boston VCs had the first shot\nat them. But they said no, so Facebook moved to Silicon Valley and raised\nmoney there. The partner who turned them down now says that \"may turn out to\nhave been a mistake.\"  \n  \nEmpirically, boldness wins. If the aggressive ways of west coast investors are\ngoing to come back to bite them, it has been a long time coming. Silicon\nValley has been pulling ahead of Boston since the 1970s. If there was going to\nbe a comeuppance for the west coast investors, the bursting of the Bubble\nwould have been it. But since then the west coast has just pulled further\nahead.  \n  \nWest coast investors are confident enough of their judgement to act boldly;\neast coast investors, not so much; but anyone who thinks east coast investors\nact that way out of prudence should see the frantic reactions of an east coast\nVC in the process of losing a deal to a west coast one.  \n  \nIn addition to the concentration that comes from specialization, startup hubs\nare also markets. And markets are usually centralized. Even now, when traders\ncould be anywhere, they cluster in a few cities. It's hard to say exactly what\nit is about face to face contact that makes deals happen, but whatever it is,\nit hasn't yet been duplicated by technology.  \n  \nWalk down University Ave at the right time, and you might overhear five\ndifferent people talking on the phone about deals. In fact, this is part of\nthe reason Y Combinator is in Boston half the time: it's hard to stand that\nyear round. But though it can sometimes be annoying to be surrounded by people\nwho only think about one thing, it's the place to be if that one thing is what\nyou're trying to do.  \n  \nI was talking recently to someone who works on search at Google. He knew a lot\nof people at Yahoo, so he was in a good position to compare the two companies.\nI asked him why Google was better at search. He said it wasn't anything\nspecific Google did, but simply that they understood search so much better.  \n  \nAnd that's why startups thrive in startup hubs like Silicon Valley. Startups\nare a very specialized business, as specialized as diamond cutting. And in\nstartup hubs they understand it.  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] The nationalistic idea is the converse: that startups should stay in a\ncertain city because of the country it's in. If you really have a \"one world\"\nviewpoint, deciding to move from London to Silicon Valley is no different from\ndeciding to move from Chicago to Silicon Valley.  \n  \n[2] An investor who merely seems like he will fund you, however, you can\nignore. Seeming like they will fund you one day is the way investors say No.  \n  \n**Thanks** to Sam Altman, Jessica Livingston, Harjeet Taggar, and Kulveer\nTaggar for reading drafts of this.  \n  \n[Comment](http://news.ycombinator.com/item?id=65815) on this essay.  \n  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nNovember 2012  \n  \nThe way to get startup ideas is not to try to think of startup ideas. It's to\nlook for problems, preferably problems you have yourself.  \n  \nThe very best startup ideas tend to have three things in common: they're\nsomething the founders themselves want, that they themselves can build, and\nthat few others realize are worth doing. Microsoft, Apple, Yahoo, Google, and\nFacebook all began this way.  \n  \n**Problems**  \n  \nWhy is it so important to work on a problem you have? Among other things, it\nensures the problem really exists. It sounds obvious to say you should only\nwork on problems that exist. And yet by far the most common mistake startups\nmake is to solve problems no one has.  \n  \nI made it myself. In 1995 I started a company to put art galleries online. But\ngalleries didn't want to be online. It's not how the art business works. So\nwhy did I spend 6 months working on this stupid idea? Because I didn't pay\nattention to users. I invented a model of the world that didn't correspond to\nreality, and worked from that. I didn't notice my model was wrong until I\ntried to convince users to pay for what we'd built. Even then I took\nembarrassingly long to catch on. I was attached to my model of the world, and\nI'd spent a lot of time on the software. They had to want it!  \n  \nWhy do so many founders build things no one wants? Because they begin by\ntrying to think of startup ideas. That m.o. is doubly dangerous: it doesn't\nmerely yield few good ideas; it yields bad ideas that sound plausible enough\nto fool you into working on them.  \n  \nAt YC we call these \"made-up\" or \"sitcom\" startup ideas. Imagine one of the\ncharacters on a TV show was starting a startup. The writers would have to\ninvent something for it to do. But coming up with good startup ideas is hard.\nIt's not something you can do for the asking. So (unless they got amazingly\nlucky) the writers would come up with an idea that sounded plausible, but was\nactually bad.  \n  \nFor example, a social network for pet owners. It doesn't sound obviously\nmistaken. Millions of people have pets. Often they care a lot about their pets\nand spend a lot of money on them. Surely many of these people would like a\nsite where they could talk to other pet owners. Not all of them perhaps, but\nif just 2 or 3 percent were regular visitors, you could have millions of\nusers. You could serve them targeted offers, and maybe charge for premium\nfeatures. [1]  \n  \nThe danger of an idea like this is that when you run it by your friends with\npets, they don't say \"I would _never_ use this.\" They say \"Yeah, maybe I could\nsee using something like that.\" Even when the startup launches, it will sound\nplausible to a lot of people. They don't want to use it themselves, at least\nnot right now, but they could imagine other people wanting it. Sum that\nreaction across the entire population, and you have zero users. [2]  \n  \n**Well**  \n  \nWhen a startup launches, there have to be at least some users who really need\nwhat they're making \u2014 not just people who could see themselves using it one\nday, but who want it urgently. Usually this initial group of users is small,\nfor the simple reason that if there were something that large numbers of\npeople urgently needed and that could be built with the amount of effort a\nstartup usually puts into a version one, it would probably already exist.\nWhich means you have to compromise on one dimension: you can either build\nsomething a large number of people want a small amount, or something a small\nnumber of people want a large amount. Choose the latter. Not all ideas of that\ntype are good startup ideas, but nearly all good startup ideas are of that\ntype.  \n  \nImagine a graph whose x axis represents all the people who might want what\nyou're making and whose y axis represents how much they want it. If you invert\nthe scale on the y axis, you can envision companies as holes. Google is an\nimmense crater: hundreds of millions of people use it, and they need it a lot.\nA startup just starting out can't expect to excavate that much volume. So you\nhave two choices about the shape of hole you start with. You can either dig a\nhole that's broad but shallow, or one that's narrow and deep, like a well.  \n  \nMade-up startup ideas are usually of the first type. Lots of people are mildly\ninterested in a social network for pet owners.  \n  \nNearly all good startup ideas are of the second type. Microsoft was a well\nwhen they made Altair Basic. There were only a couple thousand Altair owners,\nbut without this software they were programming in machine language. Thirty\nyears later Facebook had the same shape. Their first site was exclusively for\nHarvard students, of which there are only a few thousand, but those few\nthousand users wanted it a lot.  \n  \nWhen you have an idea for a startup, ask yourself: who wants this right now?\nWho wants this so much that they'll use it even when it's a crappy version one\nmade by a two-person startup they've never heard of? If you can't answer that,\nthe idea is probably bad. [3]  \n  \nYou don't need the narrowness of the well per se. It's depth you need; you get\nnarrowness as a byproduct of optimizing for depth (and speed). But you almost\nalways do get it. In practice the link between depth and narrowness is so\nstrong that it's a good sign when you know that an idea will appeal strongly\nto a specific group or type of user.  \n  \nBut while demand shaped like a well is almost a necessary condition for a good\nstartup idea, it's not a sufficient one. If Mark Zuckerberg had built\nsomething that could only ever have appealed to Harvard students, it would not\nhave been a good startup idea. Facebook was a good idea because it started\nwith a small market there was a fast path out of. Colleges are similar enough\nthat if you build a facebook that works at Harvard, it will work at any\ncollege. So you spread rapidly through all the colleges. Once you have all the\ncollege students, you get everyone else simply by letting them in.  \n  \nSimilarly for Microsoft: Basic for the Altair; Basic for other machines; other\nlanguages besides Basic; operating systems; applications; IPO.  \n  \n**Self**  \n  \nHow do you tell whether there's a path out of an idea? How do you tell whether\nsomething is the germ of a giant company, or just a niche product? Often you\ncan't. The founders of Airbnb didn't realize at first how big a market they\nwere tapping. Initially they had a much narrower idea. They were going to let\nhosts rent out space on their floors during conventions. They didn't foresee\nthe expansion of this idea; it forced itself upon them gradually. All they\nknew at first is that they were onto something. That's probably as much as\nBill Gates or Mark Zuckerberg knew at first.  \n  \nOccasionally it's obvious from the beginning when there's a path out of the\ninitial niche. And sometimes I can see a path that's not immediately obvious;\nthat's one of our specialties at YC. But there are limits to how well this can\nbe done, no matter how much experience you have. The most important thing to\nunderstand about paths out of the initial idea is the meta-fact that these are\nhard to see.  \n  \nSo if you can't predict whether there's a path out of an idea, how do you\nchoose between ideas? The truth is disappointing but interesting: if you're\nthe right sort of person, you have the right sort of hunches. If you're at the\nleading edge of a field that's changing fast, when you have a hunch that\nsomething is worth doing, you're more likely to be right.  \n  \nIn _Zen and the Art of Motorcycle Maintenance_ , Robert Pirsig says:\n\n> You want to know how to paint a perfect painting? It's easy. Make yourself\n> perfect and then just paint naturally.\n\nI've wondered about that passage since I read it in high school. I'm not sure\nhow useful his advice is for painting specifically, but it fits this situation\nwell. Empirically, the way to have good startup ideas is to become the sort of\nperson who has them.  \n  \nBeing at the leading edge of a field doesn't mean you have to be one of the\npeople pushing it forward. You can also be at the leading edge as a user. It\nwas not so much because he was a programmer that Facebook seemed a good idea\nto Mark Zuckerberg as because he used computers so much. If you'd asked most\n40 year olds in 2004 whether they'd like to publish their lives semi-publicly\non the Internet, they'd have been horrified at the idea. But Mark already\nlived online; to him it seemed natural.  \n  \nPaul Buchheit says that people at the leading edge of a rapidly changing field\n\"live in the future.\" Combine that with Pirsig and you get:\n\n> Live in the future, then build what's missing.\n\nThat describes the way many if not most of the biggest startups got started.\nNeither Apple nor Yahoo nor Google nor Facebook were even supposed to be\ncompanies at first. They grew out of things their founders built because there\nseemed a gap in the world.  \n  \nIf you look at the way successful founders have had their ideas, it's\ngenerally the result of some external stimulus hitting a prepared mind. Bill\nGates and Paul Allen hear about the Altair and think \"I bet we could write a\nBasic interpreter for it.\" Drew Houston realizes he's forgotten his USB stick\nand thinks \"I really need to make my files live online.\" Lots of people heard\nabout the Altair. Lots forgot USB sticks. The reason those stimuli caused\nthose founders to start companies was that their experiences had prepared them\nto notice the opportunities they represented.  \n  \nThe verb you want to be using with respect to startup ideas is not \"think up\"\nbut \"notice.\" At YC we call ideas that grow naturally out of the founders' own\nexperiences \"organic\" startup ideas. The most successful startups almost all\nbegin this way.  \n  \nThat may not have been what you wanted to hear. You may have expected recipes\nfor coming up with startup ideas, and instead I'm telling you that the key is\nto have a mind that's prepared in the right way. But disappointing though it\nmay be, this is the truth. And it is a recipe of a sort, just one that in the\nworst case takes a year rather than a weekend.  \n  \nIf you're not at the leading edge of some rapidly changing field, you can get\nto one. For example, anyone reasonably smart can probably get to an edge of\nprogramming (e.g. building mobile apps) in a year. Since a successful startup\nwill consume at least 3-5 years of your life, a year's preparation would be a\nreasonable investment. Especially if you're also looking for a cofounder. [4]  \n  \nYou don't have to learn programming to be at the leading edge of a domain\nthat's changing fast. Other domains change fast. But while learning to hack is\nnot necessary, it is for the forseeable future sufficient. As Marc Andreessen\nput it, software is eating the world, and this trend has decades left to run.  \n  \nKnowing how to hack also means that when you have ideas, you'll be able to\nimplement them. That's not absolutely necessary (Jeff Bezos couldn't) but it's\nan advantage. It's a big advantage, when you're considering an idea like\nputting a college facebook online, if instead of merely thinking \"That's an\ninteresting idea,\" you can think instead \"That's an interesting idea. I'll try\nbuilding an initial version tonight.\" It's even better when you're both a\nprogrammer and the target user, because then the cycle of generating new\nversions and testing them on users can happen inside one head.  \n  \n**Noticing**  \n  \nOnce you're living in the future in some respect, the way to notice startup\nideas is to look for things that seem to be missing. If you're really at the\nleading edge of a rapidly changing field, there will be things that are\nobviously missing. What won't be obvious is that they're startup ideas. So if\nyou want to find startup ideas, don't merely turn on the filter \"What's\nmissing?\" Also turn off every other filter, particularly \"Could this be a big\ncompany?\" There's plenty of time to apply that test later. But if you're\nthinking about that initially, it may not only filter out lots of good ideas,\nbut also cause you to focus on bad ones.  \n  \nMost things that are missing will take some time to see. You almost have to\ntrick yourself into seeing the ideas around you.  \n  \nBut you _know_ the ideas are out there. This is not one of those problems\nwhere there might not be an answer. It's impossibly unlikely that this is the\nexact moment when technological progress stops. You can be sure people are\ngoing to build things in the next few years that will make you think \"What did\nI do before x?\"  \n  \nAnd when these problems get solved, they will probably seem flamingly obvious\nin retrospect. What you need to do is turn off the filters that usually\nprevent you from seeing them. The most powerful is simply taking the current\nstate of the world for granted. Even the most radically open-minded of us\nmostly do that. You couldn't get from your bed to the front door if you\nstopped to question everything.  \n  \nBut if you're looking for startup ideas you can sacrifice some of the\nefficiency of taking the status quo for granted and start to question things.\nWhy is your inbox overflowing? Because you get a lot of email, or because it's\nhard to get email out of your inbox? Why do you get so much email? What\nproblems are people trying to solve by sending you email? Are there better\nways to solve them? And why is it hard to get emails out of your inbox? Why do\nyou keep emails around after you've read them? Is an inbox the optimal tool\nfor that?  \n  \nPay particular attention to things that chafe you. The advantage of taking the\nstatus quo for granted is not just that it makes life (locally) more\nefficient, but also that it makes life more tolerable. If you knew about all\nthe things we'll get in the next 50 years but don't have yet, you'd find\npresent day life pretty constraining, just as someone from the present would\nif they were sent back 50 years in a time machine. When something annoys you,\nit could be because you're living in the future.  \n  \nWhen you find the right sort of problem, you should probably be able to\ndescribe it as _obvious_ , at least to you. When we started Viaweb, all the\nonline stores were built by hand, by web designers making individual HTML\npages. It was obvious to us as programmers that these sites would have to be\ngenerated by software. [5]  \n  \nWhich means, strangely enough, that coming up with startup ideas is a question\nof seeing the obvious. That suggests how weird this process is: you're trying\nto see things that are obvious, and yet that you hadn't seen.  \n  \nSince what you need to do here is loosen up your own mind, it may be best not\nto make too much of a direct frontal attack on the problem \u2014 i.e. to sit down\nand try to think of ideas. The best plan may be just to keep a background\nprocess running, looking for things that seem to be missing. Work on hard\nproblems, driven mainly by curiosity, but have a second self watching over\nyour shoulder, taking note of gaps and anomalies. [6]  \n  \nGive yourself some time. You have a lot of control over the rate at which you\nturn yours into a prepared mind, but you have less control over the stimuli\nthat spark ideas when they hit it. If Bill Gates and Paul Allen had\nconstrained themselves to come up with a startup idea in one month, what if\nthey'd chosen a month before the Altair appeared? They probably would have\nworked on a less promising idea. Drew Houston did work on a less promising\nidea before Dropbox: an SAT prep startup. But Dropbox was a much better idea,\nboth in the absolute sense and also as a match for his skills. [7]  \n  \nA good way to trick yourself into noticing ideas is to work on projects that\nseem like they'd be cool. If you do that, you'll naturally tend to build\nthings that are missing. It wouldn't seem as interesting to build something\nthat already existed.  \n  \nJust as trying to think up startup ideas tends to produce bad ones, working on\nthings that could be dismissed as \"toys\" often produces good ones. When\nsomething is described as a toy, that means it has everything an idea needs\nexcept being important. It's cool; users love it; it just doesn't matter. But\nif you're living in the future and you build something cool that users love,\nit may matter more than outsiders think. Microcomputers seemed like toys when\nApple and Microsoft started working on them. I'm old enough to remember that\nera; the usual term for people with their own microcomputers was \"hobbyists.\"\nBackRub seemed like an inconsequential science project. The Facebook was just\na way for undergrads to stalk one another.  \n  \nAt YC we're excited when we meet startups working on things that we could\nimagine know-it-alls on forums dismissing as toys. To us that's positive\nevidence an idea is good.  \n  \nIf you can afford to take a long view (and arguably you can't afford not to),\nyou can turn \"Live in the future and build what's missing\" into something even\nbetter:\n\n> Live in the future and build what seems interesting.\n\n  \n  \n**School**  \n  \nThat's what I'd advise college students to do, rather than trying to learn\nabout \"entrepreneurship.\" \"Entrepreneurship\" is something you learn best by\ndoing it. The examples of the most successful founders make that clear. What\nyou should be spending your time on in college is ratcheting yourself into the\nfuture. College is an incomparable opportunity to do that. What a waste to\nsacrifice an opportunity to solve the hard part of starting a startup \u2014\nbecoming the sort of person who can have organic startup ideas \u2014 by spending\ntime learning about the easy part. Especially since you won't even really\nlearn about it, any more than you'd learn about sex in a class. All you'll\nlearn is the words for things.  \n  \nThe clash of domains is a particularly fruitful source of ideas. If you know a\nlot about programming and you start learning about some other field, you'll\nprobably see problems that software could solve. In fact, you're doubly likely\nto find good problems in another domain: (a) the inhabitants of that domain\nare not as likely as software people to have already solved their problems\nwith software, and (b) since you come into the new domain totally ignorant,\nyou don't even know what the status quo is to take it for granted.  \n  \nSo if you're a CS major and you want to start a startup, instead of taking a\nclass on entrepreneurship you're better off taking a class on, say, genetics.\nOr better still, go work for a biotech company. CS majors normally get summer\njobs at computer hardware or software companies. But if you want to find\nstartup ideas, you might do better to get a summer job in some unrelated\nfield. [8]  \n  \nOr don't take any extra classes, and just build things. It's no coincidence\nthat Microsoft and Facebook both got started in January. At Harvard that is\n(or was) Reading Period, when students have no classes to attend because\nthey're supposed to be studying for finals. [9]  \n  \nBut don't feel like you have to build things that will become startups. That's\npremature optimization. Just build things. Preferably with other students.\nIt's not just the classes that make a university such a good place to crank\noneself into the future. You're also surrounded by other people trying to do\nthe same thing. If you work together with them on projects, you'll end up\nproducing not just organic ideas, but organic ideas with organic founding\nteams \u2014 and that, empirically, is the best combination.  \n  \nBeware of research. If an undergrad writes something all his friends start\nusing, it's quite likely to represent a good startup idea. Whereas a PhD\ndissertation is extremely unlikely to. For some reason, the more a project has\nto count as research, the less likely it is to be something that could be\nturned into a startup. [10] I think the reason is that the subset of ideas\nthat count as research is so narrow that it's unlikely that a project that\nsatisfied that constraint would also satisfy the orthogonal constraint of\nsolving users' problems. Whereas when students (or professors) build something\nas a side-project, they automatically gravitate toward solving users' problems\n\u2014 perhaps even with an additional energy that comes from being freed from the\nconstraints of research.  \n  \n**Competition**  \n  \nBecause a good idea should seem obvious, when you have one you'll tend to feel\nthat you're late. Don't let that deter you. Worrying that you're late is one\nof the signs of a good idea. Ten minutes of searching the web will usually\nsettle the question. Even if you find someone else working on the same thing,\nyou're probably not too late. It's exceptionally rare for startups to be\nkilled by competitors \u2014 so rare that you can almost discount the possibility.\nSo unless you discover a competitor with the sort of lock-in that would\nprevent users from choosing you, don't discard the idea.  \n  \nIf you're uncertain, ask users. The question of whether you're too late is\nsubsumed by the question of whether anyone urgently needs what you plan to\nmake. If you have something that no competitor does and that some subset of\nusers urgently need, you have a beachhead. [11]  \n  \nThe question then is whether that beachhead is big enough. Or more\nimportantly, who's in it: if the beachhead consists of people doing something\nlots more people will be doing in the future, then it's probably big enough no\nmatter how small it is. For example, if you're building something\ndifferentiated from competitors by the fact that it works on phones, but it\nonly works on the newest phones, that's probably a big enough beachhead.  \n  \nErr on the side of doing things where you'll face competitors. Inexperienced\nfounders usually give competitors more credit than they deserve. Whether you\nsucceed depends far more on you than on your competitors. So better a good\nidea with competitors than a bad one without.  \n  \nYou don't need to worry about entering a \"crowded market\" so long as you have\na thesis about what everyone else in it is overlooking. In fact that's a very\npromising starting point. Google was that type of idea. Your thesis has to be\nmore precise than \"we're going to make an x that doesn't suck\" though. You\nhave to be able to phrase it in terms of something the incumbents are\noverlooking. Best of all is when you can say that they didn't have the courage\nof their convictions, and that your plan is what they'd have done if they'd\nfollowed through on their own insights. Google was that type of idea too. The\nsearch engines that preceded them shied away from the most radical\nimplications of what they were doing \u2014 particularly that the better a job they\ndid, the faster users would leave.  \n  \nA crowded market is actually a good sign, because it means both that there's\ndemand and that none of the existing solutions are good enough. A startup\ncan't hope to enter a market that's obviously big and yet in which they have\nno competitors. So any startup that succeeds is either going to be entering a\nmarket with existing competitors, but armed with some secret weapon that will\nget them all the users (like Google), or entering a market that looks small\nbut which will turn out to be big (like Microsoft). [12]  \n  \n**Filters**  \n  \nThere are two more filters you'll need to turn off if you want to notice\nstartup ideas: the unsexy filter and the schlep filter.  \n  \nMost programmers wish they could start a startup by just writing some\nbrilliant code, pushing it to a server, and having users pay them lots of\nmoney. They'd prefer not to deal with tedious problems or get involved in\nmessy ways with the real world. Which is a reasonable preference, because such\nthings slow you down. But this preference is so widespread that the space of\nconvenient startup ideas has been stripped pretty clean. If you let your mind\nwander a few blocks down the street to the messy, tedious ideas, you'll find\nvaluable ones just sitting there waiting to be implemented.  \n  \nThe schlep filter is so dangerous that I wrote a separate essay about the\ncondition it induces, which I called [schlep blindness](schlep.html). I gave\nStripe as an example of a startup that benefited from turning off this filter,\nand a pretty striking example it is. Thousands of programmers were in a\nposition to see this idea; thousands of programmers knew how painful it was to\nprocess payments before Stripe. But when they looked for startup ideas they\ndidn't see this one, because unconsciously they shrank from having to deal\nwith payments. And dealing with payments is a schlep for Stripe, but not an\nintolerable one. In fact they might have had net less pain; because the fear\nof dealing with payments kept most people away from this idea, Stripe has had\ncomparatively smooth sailing in other areas that are sometimes painful, like\nuser acquisition. They didn't have to try very hard to make themselves heard\nby users, because users were desperately waiting for what they were building.  \n  \nThe unsexy filter is similar to the schlep filter, except it keeps you from\nworking on problems you despise rather than ones you fear. We overcame this\none to work on Viaweb. There were interesting things about the architecture of\nour software, but we weren't interested in ecommerce per se. We could see the\nproblem was one that needed to be solved though.  \n  \nTurning off the schlep filter is more important than turning off the unsexy\nfilter, because the schlep filter is more likely to be an illusion. And even\nto the degree it isn't, it's a worse form of self-indulgence. Starting a\nsuccessful startup is going to be fairly laborious no matter what. Even if the\nproduct doesn't entail a lot of schleps, you'll still have plenty dealing with\ninvestors, hiring and firing people, and so on. So if there's some idea you\nthink would be cool but you're kept away from by fear of the schleps involved,\ndon't worry: any sufficiently good idea will have as many.  \n  \nThe unsexy filter, while still a source of error, is not as entirely useless\nas the schlep filter. If you're at the leading edge of a field that's changing\nrapidly, your ideas about what's sexy will be somewhat correlated with what's\nvaluable in practice. Particularly as you get older and more experienced. Plus\nif you find an idea sexy, you'll work on it more enthusiastically. [13]  \n  \n**Recipes**  \n  \nWhile the best way to discover startup ideas is to become the sort of person\nwho has them and then build whatever interests you, sometimes you don't have\nthat luxury. Sometimes you need an idea now. For example, if you're working on\na startup and your initial idea turns out to be bad.  \n  \nFor the rest of this essay I'll talk about tricks for coming up with startup\nideas on demand. Although empirically you're better off using the organic\nstrategy, you could succeed this way. You just have to be more disciplined.\nWhen you use the organic method, you don't even notice an idea unless it's\nevidence that something is truly missing. But when you make a conscious effort\nto think of startup ideas, you have to replace this natural constraint with\nself-discipline. You'll see a lot more ideas, most of them bad, so you need to\nbe able to filter them.  \n  \nOne of the biggest dangers of not using the organic method is the example of\nthe organic method. Organic ideas feel like inspirations. There are a lot of\nstories about successful startups that began when the founders had what seemed\na crazy idea but \"just knew\" it was promising. When you feel that about an\nidea you've had while trying to come up with startup ideas, you're probably\nmistaken.  \n  \nWhen searching for ideas, look in areas where you have some expertise. If\nyou're a database expert, don't build a chat app for teenagers (unless you're\nalso a teenager). Maybe it's a good idea, but you can't trust your judgment\nabout that, so ignore it. There have to be other ideas that involve databases,\nand whose quality you can judge. Do you find it hard to come up with good\nideas involving databases? That's because your expertise raises your\nstandards. Your ideas about chat apps are just as bad, but you're giving\nyourself a Dunning-Kruger pass in that domain.  \n  \nThe place to start looking for ideas is things you need. There _must_ be\nthings you need. [14]  \n  \nOne good trick is to ask yourself whether in your previous job you ever found\nyourself saying \"Why doesn't someone make x? If someone made x we'd buy it in\na second.\" If you can think of any x people said that about, you probably have\nan idea. You know there's demand, and people don't say that about things that\nare impossible to build.  \n  \nMore generally, try asking yourself whether there's something unusual about\nyou that makes your needs different from most other people's. You're probably\nnot the only one. It's especially good if you're different in a way people\nwill increasingly be.  \n  \nIf you're changing ideas, one unusual thing about you is the idea you'd\npreviously been working on. Did you discover any needs while working on it?\nSeveral well-known startups began this way. Hotmail began as something its\nfounders wrote to talk about their previous startup idea while they were\nworking at their day jobs. [15]  \n  \nA particularly promising way to be unusual is to be young. Some of the most\nvaluable new ideas take root first among people in their teens and early\ntwenties. And while young founders are at a disadvantage in some respects,\nthey're the only ones who really understand their peers. It would have been\nvery hard for someone who wasn't a college student to start Facebook. So if\nyou're a young founder (under 23 say), are there things you and your friends\nwould like to do that current technology won't let you?  \n  \nThe next best thing to an unmet need of your own is an unmet need of someone\nelse. Try talking to everyone you can about the gaps they find in the world.\nWhat's missing? What would they like to do that they can't? What's tedious or\nannoying, particularly in their work? Let the conversation get general; don't\nbe trying too hard to find startup ideas. You're just looking for something to\nspark a thought. Maybe you'll notice a problem they didn't consciously realize\nthey had, because you know how to solve it.  \n  \nWhen you find an unmet need that isn't your own, it may be somewhat blurry at\nfirst. The person who needs something may not know exactly what they need. In\nthat case I often recommend that founders act like consultants \u2014 that they do\nwhat they'd do if they'd been retained to solve the problems of this one user.\nPeople's problems are similar enough that nearly all the code you write this\nway will be reusable, and whatever isn't will be a small price to start out\ncertain that you've reached the bottom of the well. [16]  \n  \nOne way to ensure you do a good job solving other people's problems is to make\nthem your own. When Rajat Suri of E la Carte decided to write software for\nrestaurants, he got a job as a waiter to learn how restaurants worked. That\nmay seem like taking things to extremes, but startups are extreme. We love it\nwhen founders do such things.  \n  \nIn fact, one strategy I recommend to people who need a new idea is not merely\nto turn off their schlep and unsexy filters, but to seek out ideas that are\nunsexy or involve schleps. Don't try to start Twitter. Those ideas are so rare\nthat you can't find them by looking for them. Make something unsexy that\npeople will pay you for.  \n  \nA good trick for bypassing the schlep and to some extent the unsexy filter is\nto ask what you wish someone else would build, so that you could use it. What\nwould you pay for right now?  \n  \nSince startups often garbage-collect broken companies and industries, it can\nbe a good trick to look for those that are dying, or deserve to, and try to\nimagine what kind of company would profit from their demise. For example,\njournalism is in free fall at the moment. But there may still be money to be\nmade from something like journalism. What sort of company might cause people\nin the future to say \"this replaced journalism\" on some axis?  \n  \nBut imagine asking that in the future, not now. When one company or industry\nreplaces another, it usually comes in from the side. So don't look for a\nreplacement for x; look for something that people will later say turned out to\nbe a replacement for x. And be imaginative about the axis along which the\nreplacement occurs. Traditional journalism, for example, is a way for readers\nto get information and to kill time, a way for writers to make money and to\nget attention, and a vehicle for several different types of advertising. It\ncould be replaced on any of these axes (it has already started to be on most).  \n  \nWhen startups consume incumbents, they usually start by serving some small but\nimportant market that the big players ignore. It's particularly good if\nthere's an admixture of disdain in the big players' attitude, because that\noften misleads them. For example, after Steve Wozniak built the computer that\nbecame the Apple I, he felt obliged to give his then-employer Hewlett-Packard\nthe option to produce it. Fortunately for him, they turned it down, and one of\nthe reasons they did was that it used a TV for a monitor, which seemed\nintolerably d\u00e9class\u00e9 to a high-end hardware company like HP was at the time.\n[17]  \n  \nAre there groups of [scruffy](marginal.html) but sophisticated users like the\nearly microcomputer \"hobbyists\" that are currently being ignored by the big\nplayers? A startup with its sights set on bigger things can often capture a\nsmall market easily by expending an effort that wouldn't be justified by that\nmarket alone.  \n  \nSimilarly, since the most successful startups generally ride some wave bigger\nthan themselves, it could be a good trick to look for waves and ask how one\ncould benefit from them. The prices of gene sequencing and 3D printing are\nboth experiencing Moore's Law-like declines. What new things will we be able\nto do in the new world we'll have in a few years? What are we unconsciously\nruling out as impossible that will soon be possible?  \n  \n**Organic**  \n  \nBut talking about looking explicitly for waves makes it clear that such\nrecipes are plan B for getting startup ideas. Looking for waves is essentially\na way to simulate the organic method. If you're at the leading edge of some\nrapidly changing field, you don't have to look for waves; you are the wave.  \n  \nFinding startup ideas is a subtle business, and that's why most people who try\nfail so miserably. It doesn't work well simply to try to think of startup\nideas. If you do that, you get bad ones that sound dangerously plausible. The\nbest approach is more indirect: if you have the right sort of background, good\nstartup ideas will seem obvious to you. But even then, not immediately. It\ntakes time to come across situations where you notice something missing. And\noften these gaps won't seem to be ideas for companies, just things that would\nbe interesting to build. Which is why it's good to have the time and the\ninclination to build things just because they're interesting.  \n  \nLive in the future and build what seems interesting. Strange as it sounds,\nthat's the real recipe.  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] This form of bad idea has been around as long as the web. It was common in\nthe 1990s, except then people who had it used to say they were going to create\na portal for x instead of a social network for x. Structurally the idea is\nstone soup: you post a sign saying \"this is the place for people interested in\nx,\" and all those people show up and you make money from them. What lures\nfounders into this sort of idea are statistics about the millions of people\nwho might be interested in each type of x. What they forget is that any given\nperson might have 20 affinities by this standard, and no one is going to visit\n20 different communities regularly.  \n  \n[2] I'm not saying, incidentally, that I know for sure a social network for\npet owners is a bad idea. I know it's a bad idea the way I know randomly\ngenerated DNA would not produce a viable organism. The set of plausible\nsounding startup ideas is many times larger than the set of good ones, and\nmany of the good ones don't even sound that plausible. So if all you know\nabout a startup idea is that it sounds plausible, you have to assume it's bad.  \n  \n[3] More precisely, the users' need has to give them sufficient activation\nenergy to start using whatever you make, which can vary a lot. For example,\nthe activation energy for enterprise software sold through traditional\nchannels is very high, so you'd have to be a _lot_ better to get users to\nswitch. Whereas the activation energy required to switch to a new search\nengine is low. Which in turn is why search engines are so much better than\nenterprise software.  \n  \n[4] This gets harder as you get older. While the space of ideas doesn't have\ndangerous local maxima, the space of careers does. There are fairly high walls\nbetween most of the paths people take through life, and the older you get, the\nhigher the walls become.  \n  \n[5] It was also obvious to us that the web was going to be a big deal. Few\nnon-programmers grasped that in 1995, but the programmers had seen what GUIs\nhad done for desktop computers.  \n  \n[6] Maybe it would work to have this second self keep a journal, and each\nnight to make a brief entry listing the gaps and anomalies you'd noticed that\nday. Not startup ideas, just the raw gaps and anomalies.  \n  \n[7] Sam Altman points out that taking time to come up with an idea is not\nmerely a better strategy in an absolute sense, but also like an undervalued\nstock in that so few founders do it.  \n  \nThere's comparatively little competition for the best ideas, because few\nfounders are willing to put in the time required to notice them. Whereas there\nis a great deal of competition for mediocre ideas, because when people make up\nstartup ideas, they tend to make up the same ones.  \n  \n[8] For the computer hardware and software companies, summer jobs are the\nfirst phase of the recruiting funnel. But if you're good you can skip the\nfirst phase. If you're good you'll have no trouble getting hired by these\ncompanies when you graduate, regardless of how you spent your summers.  \n  \n[9] The empirical evidence suggests that if colleges want to help their\nstudents start startups, the best thing they can do is leave them alone in the\nright way.  \n  \n[10] I'm speaking here of IT startups; in biotech things are different.  \n  \n[11] This is an instance of a more general rule: focus on users, not\ncompetitors. The most important information about competitors is what you\nlearn via users anyway.  \n  \n[12] In practice most successful startups have elements of both. And you can\ndescribe each strategy in terms of the other by adjusting the boundaries of\nwhat you call the market. But it's useful to consider these two ideas\nseparately.  \n  \n[13] I almost hesitate to raise that point though. Startups are businesses;\nthe point of a business is to make money; and with that additional constraint,\nyou can't expect you'll be able to spend all your time working on what\ninterests you most.  \n  \n[14] The need has to be a strong one. You can retroactively describe any made-\nup idea as something you need. But do you really need that recipe site or\nlocal event aggregator as much as Drew Houston needed Dropbox, or Brian Chesky\nand Joe Gebbia needed Airbnb?  \n  \nQuite often at YC I find myself asking founders \"Would you use this thing\nyourself, if you hadn't written it?\" and you'd be surprised how often the\nanswer is no.  \n  \n[15] Paul Buchheit points out that trying to sell something bad can be a\nsource of better ideas:  \n  \n\"The best technique I've found for dealing with YC companies that have bad\nideas is to tell them to go sell the product ASAP (before wasting time\nbuilding it). Not only do they learn that nobody wants what they are building,\nthey very often come back with a real idea that they discovered in the process\nof trying to sell the bad idea.\"  \n  \n[16] Here's a recipe that might produce the next Facebook, if you're college\nstudents. If you have a connection to one of the more powerful sororities at\nyour school, approach the queen bees thereof and offer to be their personal IT\nconsultants, building anything they could imagine needing in their social\nlives that didn't already exist. Anything that got built this way would be\nvery promising, because such users are not just the most demanding but also\nthe perfect point to spread from.  \n  \nI have no idea whether this would work.  \n  \n[17] And the reason it used a TV for a monitor is that Steve Wozniak started\nout by solving his own problems. He, like most of his peers, couldn't afford a\nmonitor.  \n  \n  \n  \n**Thanks** to Sam Altman, Mike Arrington, Paul Buchheit, John Collison,\nPatrick Collison, Garry Tan, and Harj Taggar for reading drafts of this, and\nMarc Andreessen, Joe Gebbia, Reid Hoffman, Shel Kaphan, Mike Moritz and Kevin\nSystrom for answering my questions about startup history.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nOctober 2006  \n  \nIn the Q & A period after a recent talk, someone asked what made startups\nfail. After standing there gaping for a few seconds I realized this was kind\nof a trick question. It's equivalent to asking how to make a startup succeed \u2014\nif you avoid every cause of failure, you succeed \u2014 and that's too big a\nquestion to answer on the fly.  \n  \nAfterwards I realized it could be helpful to look at the problem from this\ndirection. If you have a list of all the things you shouldn't do, you can turn\nthat into a recipe for succeeding just by negating. And this form of list may\nbe more useful in practice. It's easier to catch yourself doing something you\nshouldn't than always to remember to do something you should. [1]  \n  \nIn a sense there's just one mistake that kills startups: not making something\nusers want. If you make something users want, you'll probably be fine,\nwhatever else you do or don't do. And if you don't make something users want,\nthen you're dead, whatever else you do or don't do. So really this is a list\nof 18 things that cause startups not to make something users want. Nearly all\nfailure funnels through that.  \n  \n**1\\. Single Founder**  \n  \nHave you ever noticed how few successful startups were founded by just one\nperson? Even companies you think of as having one founder, like Oracle,\nusually turn out to have more. It seems unlikely this is a coincidence.  \n  \nWhat's wrong with having one founder? To start with, it's a vote of no\nconfidence. It probably means the founder couldn't talk any of his friends\ninto starting the company with him. That's pretty alarming, because his\nfriends are the ones who know him best.  \n  \nBut even if the founder's friends were all wrong and the company is a good\nbet, he's still at a disadvantage. Starting a startup is too hard for one\nperson. Even if you could do all the work yourself, you need colleagues to\nbrainstorm with, to talk you out of stupid decisions, and to cheer you up when\nthings go wrong.  \n  \nThe last one might be the most important. The low points in a startup are so\nlow that few could bear them alone. When you have multiple founders, esprit de\ncorps binds them together in a way that seems to violate conservation laws.\nEach thinks \"I can't let my friends down.\" This is one of the most powerful\nforces in human nature, and it's missing when there's just one founder.  \n  \n**2\\. Bad Location**  \n  \nStartups prosper in some places and not others. Silicon Valley dominates, then\nBoston, then Seattle, Austin, Denver, and New York. After that there's not\nmuch. Even in New York the number of startups per capita is probably a 20th of\nwhat it is in Silicon Valley. In towns like Houston and Chicago and Detroit\nit's too small to measure.  \n  \nWhy is the falloff so sharp? Probably for the same reason it is in other\nindustries. What's the sixth largest fashion center in the US? The sixth\nlargest center for oil, or finance, or publishing? Whatever they are they're\nprobably so far from the top that it would be misleading even to call them\ncenters.  \n  \nIt's an interesting question why cities [become](siliconvalley.html) startup\nhubs, but the reason startups prosper in them is probably the same as it is\nfor any industry: that's where the experts are. Standards are higher; people\nare more sympathetic to what you're doing; the kind of people you want to hire\nwant to live there; supporting industries are there; the people you run into\nin chance meetings are in the same business. Who knows exactly how these\nfactors combine to boost startups in Silicon Valley and squish them in\nDetroit, but it's clear they do from the number of startups per capita in\neach.  \n  \n**3\\. Marginal Niche**  \n  \nMost of the groups that apply to Y Combinator suffer from a common problem:\nchoosing a small, obscure niche in the hope of avoiding competition.  \n  \nIf you watch little kids playing sports, you notice that below a certain age\nthey're afraid of the ball. When the ball comes near them their instinct is to\navoid it. I didn't make a lot of catches as an eight year old outfielder,\nbecause whenever a fly ball came my way, I used to close my eyes and hold my\nglove up more for protection than in the hope of catching it.  \n  \nChoosing a marginal project is the startup equivalent of my eight year old\nstrategy for dealing with fly balls. If you make anything good, you're going\nto have competitors, so you may as well face that. You can only avoid\ncompetition by avoiding good ideas.  \n  \nI think this shrinking from big problems is mostly unconscious. It's not that\npeople think of grand ideas but decide to pursue smaller ones because they\nseem safer. Your unconscious won't even let you think of grand ideas. So the\nsolution may be to think about ideas without involving yourself. What would be\na great idea for _someone else_ to do as a startup?  \n  \n**4\\. Derivative Idea**  \n  \nMany of the applications we get are imitations of some existing company.\nThat's one source of ideas, but not the best. If you look at the origins of\nsuccessful startups, few were started in imitation of some other startup.\nWhere did they get their ideas? Usually from some specific, unsolved problem\nthe founders identified.  \n  \nOur startup made software for making online stores. When we started it, there\nwasn't any; the few sites you could order from were hand-made at great expense\nby web consultants. We knew that if online shopping ever took off, these sites\nwould have to be generated by software, so we wrote some. Pretty\nstraightforward.  \n  \nIt seems like the best problems to solve are ones that affect you personally.\nApple happened because Steve Wozniak wanted a computer, Google because Larry\nand Sergey couldn't find stuff online, Hotmail because Sabeer Bhatia and Jack\nSmith couldn't exchange email at work.  \n  \nSo instead of copying the Facebook, with some variation that the Facebook\nrightly ignored, look for ideas from the other direction. Instead of starting\nfrom companies and working back to the problems they solved, look for problems\nand imagine the company that might solve them. [2] What do people complain\nabout? What do you wish there was?  \n  \n**5\\. Obstinacy**  \n  \nIn some fields the way to succeed is to have a vision of what you want to\nachieve, and to hold true to it no matter what setbacks you encounter.\nStarting startups is not one of them. The stick-to-your-vision approach works\nfor something like winning an Olympic gold medal, where the problem is well-\ndefined. Startups are more like science, where you need to follow the trail\nwherever it leads.  \n  \nSo don't get too attached to your original plan, because it's probably wrong.\nMost successful startups end up doing something different than they originally\nintended \u2014 often so different that it doesn't even seem like the same company.\nYou have to be prepared to see the better idea when it arrives. And the\nhardest part of that is often discarding your old idea.  \n  \nBut openness to new ideas has to be tuned just right. Switching to a new idea\nevery week will be equally fatal. Is there some kind of external test you can\nuse? One is to ask whether the ideas represent some kind of progression. If in\neach new idea you're able to re-use most of what you built for the previous\nones, then you're probably in a process that converges. Whereas if you keep\nrestarting from scratch, that's a bad sign.  \n  \nFortunately there's someone you can ask for advice: your users. If you're\nthinking about turning in some new direction and your users seem excited about\nit, it's probably a good bet.  \n  \n**6\\. Hiring Bad Programmers**  \n  \nI forgot to include this in the early versions of the list, because nearly all\nthe founders I know are programmers. This is not a serious problem for them.\nThey might accidentally hire someone bad, but it's not going to kill the\ncompany. In a pinch they can do whatever's required themselves.  \n  \nBut when I think about what killed most of the startups in the e-commerce\nbusiness back in the 90s, it was bad programmers. A lot of those companies\nwere started by business guys who thought the way startups worked was that you\nhad some clever idea and then hired programmers to implement it. That's\nactually much harder than it sounds \u2014 almost impossibly hard in fact \u2014 because\nbusiness guys can't tell which are the good programmers. They don't even get a\nshot at the best ones, because no one really good wants a job implementing the\nvision of a business guy.  \n  \nIn practice what happens is that the business guys choose people they think\nare good programmers (it says here on his resume that he's a Microsoft\nCertified Developer) but who aren't. Then they're mystified to find that their\nstartup lumbers along like a World War II bomber while their competitors\nscream past like jet fighters. This kind of startup is in the same position as\na big company, but without the advantages.  \n  \nSo how do you pick good programmers if you're not a programmer? I don't think\nthere's an answer. I was about to say you'd have to find a good programmer to\nhelp you hire people. But if you can't recognize good programmers, how would\nyou even do that?  \n  \n**7\\. Choosing the Wrong Platform**  \n  \nA related problem (since it tends to be done by bad programmers) is choosing\nthe wrong platform. For example, I think a lot of startups during the Bubble\nkilled themselves by deciding to build server-based applications on Windows.\nHotmail was still running on FreeBSD for years after Microsoft bought it,\npresumably because Windows couldn't handle the load. If Hotmail's founders had\nchosen to use Windows, they would have been swamped.  \n  \nPayPal only just dodged this bullet. After they merged with X.com, the new CEO\nwanted to switch to Windows \u2014 even after PayPal cofounder Max Levchin showed\nthat their software scaled only 1% as well on Windows as Unix. Fortunately for\nPayPal they switched CEOs instead.  \n  \nPlatform is a vague word. It could mean an operating system, or a programming\nlanguage, or a \"framework\" built on top of a programming language. It implies\nsomething that both supports and limits, like the foundation of a house.  \n  \nThe scary thing about platforms is that there are always some that seem to\noutsiders to be fine, responsible choices and yet, like Windows in the 90s,\nwill destroy you if you choose them. Java applets were probably the most\nspectacular example. This was supposed to be the new way of delivering\napplications. Presumably it killed just about 100% of the startups who\nbelieved that.  \n  \nHow do you pick the right platforms? The usual way is to hire good programmers\nand let them choose. But there is a trick you could use if you're not a\nprogrammer: visit a top computer science department and see what they use in\nresearch projects.  \n  \n**8\\. Slowness in Launching**  \n  \nCompanies of all sizes have a hard time getting software done. It's intrinsic\nto the medium; software is always 85% done. It takes an effort of will to push\nthrough this and get something released to users. [3]  \n  \nStartups make all kinds of excuses for delaying their launch. Most are\nequivalent to the ones people use for procrastinating in everyday life.\nThere's something that needs to happen first. Maybe. But if the software were\n100% finished and ready to launch at the push of a button, would they still be\nwaiting?  \n  \nOne reason to launch quickly is that it forces you to actually _finish_ some\nquantum of work. Nothing is truly finished till it's released; you can see\nthat from the rush of work that's always involved in releasing anything, no\nmatter how finished you thought it was. The other reason you need to launch is\nthat it's only by bouncing your idea off users that you fully understand it.  \n  \nSeveral distinct problems manifest themselves as delays in launching: working\ntoo slowly; not truly understanding the problem; fear of having to deal with\nusers; fear of being judged; working on too many different things; excessive\nperfectionism. Fortunately you can combat all of them by the simple expedient\nof forcing yourself to launch _something_ fairly quickly.  \n  \n**9\\. Launching Too Early**  \n  \nLaunching too slowly has probably killed a hundred times more startups than\nlaunching too fast, but it is possible to launch too fast. The danger here is\nthat you ruin your reputation. You launch something, the early adopters try it\nout, and if it's no good they may never come back.  \n  \nSo what's the minimum you need to launch? We suggest startups think about what\nthey plan to do, identify a core that's both (a) useful on its own and (b)\nsomething that can be incrementally expanded into the whole project, and then\nget that done as soon as possible.  \n  \nThis is the same approach I (and many other programmers) use for writing\nsoftware. Think about the overall goal, then start by writing the smallest\nsubset of it that does anything useful. If it's a subset, you'll have to write\nit anyway, so in the worst case you won't be wasting your time. But more\nlikely you'll find that implementing a working subset is both good for morale\nand helps you see more clearly what the rest should do.  \n  \nThe early adopters you need to impress are fairly tolerant. They don't expect\na newly launched product to do everything; it just has to do _something_.  \n  \n**10\\. Having No Specific User in Mind**  \n  \nYou can't build things users like without understanding them. I mentioned\nearlier that the most successful startups seem to have begun by trying to\nsolve a problem their founders had. Perhaps there's a rule here: perhaps you\ncreate wealth in proportion to how well you understand the problem you're\nsolving, and the problems you understand best are your own. [4]  \n  \nThat's just a theory. What's not a theory is the converse: if you're trying to\nsolve problems you don't understand, you're hosed.  \n  \nAnd yet a surprising number of founders seem willing to assume that someone,\nthey're not sure exactly who, will want what they're building. Do the founders\nwant it? No, they're not the target market. Who is? Teenagers. People\ninterested in local events (that one is a perennial tarpit). Or \"business\"\nusers. What business users? Gas stations? Movie studios? Defense contractors?  \n  \nYou can of course build something for users other than yourself. We did. But\nyou should realize you're stepping into dangerous territory. You're flying on\ninstruments, in effect, so you should (a) consciously shift gears, instead of\nassuming you can rely on your intuitions as you ordinarily would, and (b) look\nat the instruments.  \n  \nIn this case the instruments are the users. When designing for other people\nyou have to be empirical. You can no longer guess what will work; you have to\nfind users and measure their responses. So if you're going to make something\nfor teenagers or \"business\" users or some other group that doesn't include\nyou, you have to be able to talk some specific ones into using what you're\nmaking. If you can't, you're on the wrong track.  \n  \n**11\\. Raising Too Little Money**  \n  \nMost successful startups take funding at some point. Like having more than one\nfounder, it seems a good bet statistically. How much should you take, though?  \n  \nStartup funding is measured in time. Every startup that isn't profitable\n(meaning nearly all of them, initially) has a certain amount of time left\nbefore the money runs out and they have to stop. This is sometimes referred to\nas runway, as in \"How much runway do you have left?\" It's a good metaphor\nbecause it reminds you that when the money runs out you're going to be\nairborne or dead.  \n  \nToo little money means not enough to get airborne. What airborne means depends\non the situation. Usually you have to advance to a visibly higher level: if\nall you have is an idea, a working prototype; if you have a prototype,\nlaunching; if you're launched, significant growth. It depends on investors,\nbecause until you're profitable that's who you have to convince.  \n  \nSo if you take money from investors, you have to take enough to get to the\nnext step, whatever that is. [5] Fortunately you have some control over both\nhow much you spend and what the next step is. We advise startups to set both\nlow, initially: spend practically nothing, and make your initial goal simply\nto build a solid prototype. This gives you maximum flexibility.  \n  \n**12\\. Spending Too Much**  \n  \nIt's hard to distinguish spending too much from raising too little. If you run\nout of money, you could say either was the cause. The only way to decide which\nto call it is by comparison with other startups. If you raised five million\nand ran out of money, you probably spent too much.  \n  \nBurning through too much money is not as common as it used to be. Founders\nseem to have learned that lesson. Plus it keeps getting cheaper to start a\nstartup. So as of this writing few startups spend too much. None of the ones\nwe've funded have. (And not just because we make small investments; many have\ngone on to raise further rounds.)  \n  \nThe classic way to burn through cash is by hiring a lot of people. This bites\nyou twice: in addition to increasing your costs, it slows you down\u2014so money\nthat's getting consumed faster has to last longer. Most hackers understand why\nthat happens; Fred Brooks explained it in The Mythical Man-Month.  \n  \nWe have three general suggestions about hiring: (a) don't do it if you can\navoid it, (b) pay people with equity rather than salary, not just to save\nmoney, but because you want the kind of people who are committed enough to\nprefer that, and (c) only hire people who are either going to write code or go\nout and get users, because those are the only things you need at first.  \n  \n**13\\. Raising Too Much Money**  \n  \nIt's obvious how too little money could kill you, but is there such a thing as\nhaving too much?  \n  \nYes and no. The problem is not so much the money itself as what comes with it.\nAs one VC who spoke at Y Combinator said, \"Once you take several million\ndollars of my money, the clock is ticking.\" If VCs fund you, they're not going\nto let you just put the money in the bank and keep operating as two guys\nliving on ramen. They want that money to go to work. [6] At the very least\nyou'll move into proper office space and hire more people. That will change\nthe atmosphere, and not entirely for the better. Now most of your people will\nbe employees rather than founders. They won't be as committed; they'll need to\nbe told what to do; they'll start to engage in office politics.  \n  \nWhen you raise a lot of money, your company moves to the suburbs and has kids.  \n  \nPerhaps more dangerously, once you take a lot of money it gets harder to\nchange direction. Suppose your initial plan was to sell something to\ncompanies. After taking VC money you hire a sales force to do that. What\nhappens now if you realize you should be making this for consumers instead of\nbusinesses? That's a completely different kind of selling. What happens, in\npractice, is that you don't realize that. The more people you have, the more\nyou stay pointed in the same direction.  \n  \nAnother drawback of large investments is the time they take. The time required\nto raise money grows with the amount. [7] When the amount rises into the\nmillions, investors get very cautious. VCs never quite say yes or no; they\njust engage you in an apparently endless conversation. Raising VC scale\ninvestments is thus a huge time sink \u2014 more work, probably, than the startup\nitself. And you don't want to be spending all your time talking to investors\nwhile your competitors are spending theirs building things.  \n  \nWe advise founders who go on to seek VC money to take the first reasonable\ndeal they get. If you get an offer from a reputable firm at a reasonable\nvaluation with no unusually onerous terms, just take it and get on with\nbuilding the company. [8] Who cares if you could get a 30% better deal\nelsewhere? Economically, startups are an all-or-nothing game. Bargain-hunting\namong investors is a waste of time.  \n  \n**14\\. Poor Investor Management**  \n  \nAs a founder, you have to manage your investors. You shouldn't ignore them,\nbecause they may have useful insights. But neither should you let them run the\ncompany. That's supposed to be your job. If investors had sufficient vision to\nrun the companies they fund, why didn't they start them?  \n  \nPissing off investors by ignoring them is probably less dangerous than caving\nin to them. In our startup, we erred on the ignoring side. A lot of our energy\ngot drained away in disputes with investors instead of going into the product.\nBut this was less costly than giving in, which would probably have destroyed\nthe company. If the founders know what they're doing, it's better to have half\ntheir attention focused on the product than the full attention of investors\nwho don't.  \n  \nHow hard you have to work on managing investors usually depends on how much\nmoney you've taken. When you raise VC-scale money, the investors get a great\ndeal of control. If they have a board majority, they're literally your bosses.\nIn the more common case, where founders and investors are equally represented\nand the deciding vote is cast by neutral outside directors, all the investors\nhave to do is convince the outside directors and they control the company.  \n  \nIf things go well, this shouldn't matter. So long as you seem to be advancing\nrapidly, most investors will leave you alone. But things don't always go\nsmoothly in startups. Investors have made trouble even for the most successful\ncompanies. One of the most famous examples is Apple, whose board made a nearly\nfatal blunder in firing Steve Jobs. Apparently even Google got a lot of grief\nfrom their investors early on.  \n  \n**15\\. Sacrificing Users to (Supposed) Profit**  \n  \nWhen I said at the beginning that if you make something users want, you'll be\nfine, you may have noticed I didn't mention anything about having the right\nbusiness model. That's not because making money is unimportant. I'm not\nsuggesting that founders start companies with no chance of making money in the\nhope of unloading them before they tank. The reason we tell founders not to\nworry about the business model initially is that making something people want\nis so much harder.  \n  \nI don't know why it's so hard to make something people want. It seems like it\nshould be straightforward. But you can tell it must be hard by how few\nstartups do it.  \n  \nBecause making something people want is so much harder than making money from\nit, you should leave business models for later, just as you'd leave some\ntrivial but messy feature for version 2. In version 1, solve the core problem.\nAnd the core problem in a startup is how to [create wealth](wealth.html) (=\nhow much people want something x the number who want it), not how to convert\nthat wealth into money.  \n  \nThe companies that win are the ones that put users first. Google, for example.\nThey made search work, then worried about how to make money from it. And yet\nsome startup founders still think it's irresponsible not to focus on the\nbusiness model from the beginning. They're often encouraged in this by\ninvestors whose experience comes from less malleable industries.  \n  \nIt _is_ irresponsible not to think about business models. It's just ten times\nmore irresponsible not to think about the product.  \n  \n**16\\. Not Wanting to Get Your Hands Dirty**  \n  \nNearly all programmers would rather spend their time writing code and have\nsomeone else handle the messy business of extracting money from it. And not\njust the lazy ones. Larry and Sergey apparently felt this way too at first.\nAfter developing their new search algorithm, the first thing they tried was to\nget some other company to buy it.  \n  \nStart a company? Yech. Most hackers would rather just have ideas. But as Larry\nand Sergey found, there's not much of a market for ideas. No one trusts an\nidea till you embody it in a product and use that to grow a user base. Then\nthey'll pay big time.  \n  \nMaybe this will change, but I doubt it will change much. There's nothing like\nusers for convincing acquirers. It's not just that the risk is decreased. The\nacquirers are human, and they have a hard time paying a bunch of young guys\nmillions of dollars just for being clever. When the idea is embodied in a\ncompany with a lot of users, they can tell themselves they're buying the users\nrather than the cleverness, and this is easier for them to swallow. [9]  \n  \nIf you're going to attract users, you'll probably have to get up from your\ncomputer and go find some. It's unpleasant work, but if you can make yourself\ndo it you have a much greater chance of succeeding. In the first batch of\nstartups we funded, in the summer of 2005, most of the founders spent all\ntheir time building their applications. But there was one who was away half\nthe time talking to executives at cell phone companies, trying to arrange\ndeals. Can you imagine anything more painful for a hacker? [10] But it paid\noff, because this startup seems the most successful of that group by an order\nof magnitude.  \n  \nIf you want to start a startup, you have to face the fact that you can't just\nhack. At least one hacker will have to spend some of the time doing business\nstuff.  \n  \n**17\\. Fights Between Founders**  \n  \nFights between founders are surprisingly common. About 20% of the startups\nwe've funded have had a founder leave. It happens so often that we've reversed\nour attitude to vesting. We still don't require it, but now we advise founders\nto vest so there will be an orderly way for people to quit.  \n  \nA founder leaving doesn't necessarily kill a startup, though. Plenty of\nsuccessful startups have had that happen. [11] Fortunately it's usually the\nleast committed founder who leaves. If there are three founders and one who\nwas lukewarm leaves, big deal. If you have two and one leaves, or a guy with\ncritical technical skills leaves, that's more of a problem. But even that is\nsurvivable. Blogger got down to one person, and they bounced back.  \n  \nMost of the disputes I've seen between founders could have been avoided if\nthey'd been more careful about who they started a company with. Most disputes\nare not due to the situation but the people. Which means they're inevitable.\nAnd most founders who've been burned by such disputes probably had misgivings,\nwhich they suppressed, when they started the company. Don't suppress\nmisgivings. It's much easier to fix problems before the company is started\nthan after. So don't include your housemate in your startup because he'd feel\nleft out otherwise. Don't start a company with someone you dislike because\nthey have some skill you need and you worry you won't find anyone else. The\npeople are the most important ingredient in a startup, so don't compromise\nthere.  \n  \n**18\\. A Half-Hearted Effort**  \n  \nThe failed startups you hear most about are the spectacular flameouts. Those\nare actually the elite of failures. The most common type is not the one that\nmakes spectacular mistakes, but the one that doesn't do much of anything \u2014 the\none we never even hear about, because it was some project a couple guys\nstarted on the side while working on their day jobs, but which never got\nanywhere and was gradually abandoned.  \n  \nStatistically, if you want to avoid failure, it would seem like the most\nimportant thing is to quit your day job. Most founders of failed startups\ndon't quit their day jobs, and most founders of successful ones do. If startup\nfailure were a disease, the CDC would be issuing bulletins warning people to\navoid day jobs.  \n  \nDoes that mean you should quit your day job? Not necessarily. I'm guessing\nhere, but I'd guess that many of these would-be founders may not have the kind\nof determination it takes to start a company, and that in the back of their\nminds, they know it. The reason they don't invest more time in their startup\nis that they know it's a bad investment. [12]  \n  \nI'd also guess there's some band of people who could have succeeded if they'd\ntaken the leap and done it full-time, but didn't. I have no idea how wide this\nband is, but if the winner/borderline/hopeless progression has the sort of\ndistribution you'd expect, the number of people who could have made it, if\nthey'd quit their day job, is probably an order of magnitude larger than the\nnumber who do make it. [13]  \n  \nIf that's true, most startups that could succeed fail because the founders\ndon't devote their whole efforts to them. That certainly accords with what I\nsee out in the world. Most startups fail because they don't make something\npeople want, and the reason most don't is that they don't try hard enough.  \n  \nIn other words, starting startups is just like everything else. The biggest\nmistake you can make is not to try hard enough. To the extent there's a secret\nto success, it's not to be in denial about that.  \n  \n  \n  \n**Notes**  \n  \n[1] This is not a complete list of the causes of failure, just those you can\ncontrol. There are also several you can't, notably ineptitude and bad luck.  \n  \n[2] Ironically, one variant of the Facebook that might work is a facebook\nexclusively for college students.  \n  \n[3] Steve Jobs tried to motivate people by saying \"Real artists ship.\" This is\na fine sentence, but unfortunately not true. Many famous works of art are\nunfinished. It's true in fields that have hard deadlines, like architecture\nand filmmaking, but even there people tend to be tweaking stuff till it's\nyanked out of their hands.  \n  \n[4] There's probably also a second factor: startup founders tend to be at the\nleading edge of technology, so problems they face are probably especially\nvaluable.  \n  \n[5] You should take more than you think you'll need, maybe 50% to 100% more,\nbecause software takes longer to write and deals longer to close than you\nexpect.  \n  \n[6] Since people sometimes call us VCs, I should add that we're not. VCs\ninvest large amounts of other people's money. We invest small amounts of our\nown, like angel investors.  \n  \n[7] Not linearly of course, or it would take forever to raise five million\ndollars. In practice it just feels like it takes forever.  \n  \nThough if you include the cases where VCs don't invest, it would literally\ntake forever in the median case. And maybe we should, because the danger of\nchasing large investments is not just that they take a long time. That's the\n_best_ case. The real danger is that you'll expend a lot of time and get\nnothing.  \n  \n[8] Some VCs will offer you an artificially low valuation to see if you have\nthe balls to ask for more. It's lame that VCs play such games, but some do. If\nyou're dealing with one of those you should push back on the valuation a bit.  \n  \n[9] Suppose YouTube's founders had gone to Google in 2005 and told them\n\"Google Video is badly designed. Give us $10 million and we'll tell you all\nthe mistakes you made.\" They would have gotten the royal raspberry. Eighteen\nmonths later Google paid $1.6 billion for the same lesson, partly because they\ncould then tell themselves that they were buying a phenomenon, or a community,\nor some vague thing like that.  \n  \nI don't mean to be hard on Google. They did better than their competitors, who\nmay have now missed the video boat entirely.  \n  \n[10] Yes, actually: dealing with the government. But phone companies are up\nthere.  \n  \n[11] Many more than most people realize, because companies don't advertise\nthis. Did you know Apple originally had three founders?  \n  \n[12] I'm not dissing these people. I don't have the determination myself. I've\ntwice come close to starting startups since Viaweb, and both times I bailed\nbecause I realized that without the spur of poverty I just wasn't willing to\nendure the stress of a startup.  \n  \n[13] So how do you know whether you're in the category of people who should\nquit their day job, or the presumably larger one who shouldn't? I got to the\npoint of saying that this was hard to judge for yourself and that you should\nseek outside advice, before realizing that that's what we do. We think of\nourselves as investors, but viewed from the other direction Y Combinator is a\nservice for advising people whether or not to quit their day job. We could be\nmistaken, and no doubt often are, but we do at least bet money on our\nconclusions.  \n  \n**Thanks** to Sam Altman, Jessica Livingston, Greg McAdoo, and Robert Morris\nfor reading drafts of this.  \n  \n\nJuly 2007  \n  \nI have too much stuff. Most people in America do. In fact, the poorer people\nare, the more stuff they seem to have. Hardly anyone is so poor that they\ncan't afford a front yard full of old cars.  \n  \nIt wasn't always this way. Stuff used to be rare and valuable. You can still\nsee evidence of that if you look for it. For example, in my house in\nCambridge, which was built in 1876, the bedrooms don't have closets. In those\ndays people's stuff fit in a chest of drawers. Even as recently as a few\ndecades ago there was a lot less stuff. When I look back at photos from the\n1970s, I'm surprised how empty houses look. As a kid I had what I thought was\na huge fleet of toy cars, but they'd be dwarfed by the number of toys my\nnephews have. All together my Matchboxes and Corgis took up about a third of\nthe surface of my bed. In my nephews' rooms the bed is the only clear space.  \n  \nStuff has gotten a lot cheaper, but our attitudes toward it haven't changed\ncorrespondingly. We overvalue stuff.  \n  \nThat was a big problem for me when I had no money. I felt poor, and stuff\nseemed valuable, so almost instinctively I accumulated it. Friends would leave\nsomething behind when they moved, or I'd see something as I was walking down\nthe street on trash night (beware of anything you find yourself describing as\n\"perfectly good\"), or I'd find something in almost new condition for a tenth\nits retail price at a garage sale. And pow, more stuff.  \n  \nIn fact these free or nearly free things weren't bargains, because they were\nworth even less than they cost. Most of the stuff I accumulated was worthless,\nbecause I didn't need it.  \n  \nWhat I didn't understand was that the value of some new acquisition wasn't the\ndifference between its retail price and what I paid for it. It was the value I\nderived from it. Stuff is an extremely illiquid asset. Unless you have some\nplan for selling that valuable thing you got so cheaply, what difference does\nit make what it's \"worth?\" The only way you're ever going to extract any value\nfrom it is to use it. And if you don't have any immediate use for it, you\nprobably never will.  \n  \nCompanies that sell stuff have spent huge sums training us to think stuff is\nstill valuable. But it would be closer to the truth to treat stuff as\nworthless.  \n  \nIn fact, worse than worthless, because once you've accumulated a certain\namount of stuff, it starts to own you rather than the other way around. I know\nof one couple who couldn't retire to the town they preferred because they\ncouldn't afford a place there big enough for all their stuff. Their house\nisn't theirs; it's their stuff's.  \n  \nAnd unless you're extremely organized, a house full of stuff can be very\ndepressing. A cluttered room saps one's spirits. One reason, obviously, is\nthat there's less room for people in a room full of stuff. But there's more\ngoing on than that. I think humans constantly scan their environment to build\na mental model of what's around them. And the harder a scene is to parse, the\nless energy you have left for conscious thoughts. A cluttered room is\nliterally exhausting.  \n  \n(This could explain why clutter doesn't seem to bother kids as much as adults.\nKids are less perceptive. They build a coarser model of their surroundings,\nand this consumes less energy.)  \n  \nI first realized the worthlessness of stuff when I lived in Italy for a year.\nAll I took with me was one large backpack of stuff. The rest of my stuff I\nleft in my landlady's attic back in the US. And you know what? All I missed\nwere some of the books. By the end of the year I couldn't even remember what\nelse I had stored in that attic.  \n  \nAnd yet when I got back I didn't discard so much as a box of it. Throw away a\nperfectly good rotary telephone? I might need that one day.  \n  \nThe really painful thing to recall is not just that I accumulated all this\nuseless stuff, but that I often spent money I desperately needed on stuff that\nI didn't.  \n  \nWhy would I do that? Because the people whose job is to sell you stuff are\nreally, really good at it. The average 25 year old is no match for companies\nthat have spent years figuring out how to get you to spend money on stuff.\nThey make the experience of buying stuff so pleasant that \"shopping\" becomes a\nleisure activity.  \n  \nHow do you protect yourself from these people? It can't be easy. I'm a fairly\nskeptical person, and their tricks worked on me well into my thirties. But one\nthing that might work is to ask yourself, before buying something, \"is this\ngoing to make my life noticeably better?\"  \n  \nA friend of mine cured herself of a clothes buying habit by asking herself\nbefore she bought anything \"Am I going to wear this all the time?\" If she\ncouldn't convince herself that something she was thinking of buying would\nbecome one of those few things she wore all the time, she wouldn't buy it. I\nthink that would work for any kind of purchase. Before you buy anything, ask\nyourself: will this be something I use constantly? Or is it just something\nnice? Or worse still, a mere bargain?  \n  \nThe worst stuff in this respect may be stuff you don't use much because it's\ntoo good. Nothing owns you like fragile stuff. For example, the \"good china\"\nso many households have, and whose defining quality is not so much that it's\nfun to use, but that one must be especially careful not to break it.  \n  \nAnother way to resist acquiring stuff is to think of the overall cost of\nowning it. The purchase price is just the beginning. You're going to have to\n_think_ about that thing for years\u2014perhaps for the rest of your life. Every\nthing you own takes energy away from you. Some give more than they take. Those\nare the only things worth having.  \n  \nI've now stopped accumulating stuff. Except books\u2014but books are different.\nBooks are more like a fluid than individual objects. It's not especially\ninconvenient to own several thousand books, whereas if you owned several\nthousand random possessions you'd be a local celebrity. But except for books,\nI now actively avoid stuff. If I want to spend money on some kind of treat,\nI'll take services over goods any day.  \n  \nI'm not claiming this is because I've achieved some kind of zenlike detachment\nfrom material things. I'm talking about something more mundane. A historical\nchange has taken place, and I've now realized it. Stuff used to be valuable,\nand now it's not.  \n  \nIn industrialized countries the same thing happened with food in the middle of\nthe twentieth century. As food got cheaper (or we got richer; they're\nindistinguishable), eating too much started to be a bigger danger than eating\ntoo little. We've now reached that point with stuff. For most people, rich or\npoor, stuff has become a burden.  \n  \nThe good news is, if you're carrying a burden without knowing it, your life\ncould be better than you realize. Imagine walking around for years with five\npound ankle weights, then suddenly having them removed.  \n  \n  \n  \n  \n  \n  \n  \n\nOctober 2023  \n  \nOne of the most important things I didn't understand about the world when I\nwas a child is the degree to which the returns for performance are\nsuperlinear.  \n  \nTeachers and coaches implicitly told us the returns were linear. \"You get\nout,\" I heard a thousand times, \"what you put in.\" They meant well, but this\nis rarely true. If your product is only half as good as your competitor's, you\ndon't get half as many customers. You get no customers, and you go out of\nbusiness.  \n  \nIt's obviously true that the returns for performance are superlinear in\nbusiness. Some think this is a flaw of capitalism, and that if we changed the\nrules it would stop being true. But superlinear returns for performance are a\nfeature of the world, not an artifact of rules we've invented. We see the same\npattern in fame, power, military victories, knowledge, and even benefit to\nhumanity. In all of these, the rich get richer. [1]  \n  \nYou can't understand the world without understanding the concept of\nsuperlinear returns. And if you're ambitious you definitely should, because\nthis will be the wave you surf on.  \n  \n  \n  \n  \n  \nIt may seem as if there are a lot of different situations with superlinear\nreturns, but as far as I can tell they reduce to two fundamental causes:\nexponential growth and thresholds.  \n  \nThe most obvious case of superlinear returns is when you're working on\nsomething that grows exponentially. For example, growing bacterial cultures.\nWhen they grow at all, they grow exponentially. But they're tricky to grow.\nWhich means the difference in outcome between someone who's adept at it and\nsomeone who's not is very great.  \n  \nStartups can also grow exponentially, and we see the same pattern there. Some\nmanage to achieve high growth rates. Most don't. And as a result you get\nqualitatively different outcomes: the companies with high growth rates tend to\nbecome immensely valuable, while the ones with lower growth rates may not even\nsurvive.  \n  \nY Combinator encourages founders to focus on growth rate rather than absolute\nnumbers. It prevents them from being discouraged early on, when the absolute\nnumbers are still low. It also helps them decide what to focus on: you can use\ngrowth rate as a compass to tell you how to evolve the company. But the main\nadvantage is that by focusing on growth rate you tend to get something that\ngrows exponentially.  \n  \nYC doesn't explicitly tell founders that with growth rate \"you get out what\nyou put in,\" but it's not far from the truth. And if growth rate were\nproportional to performance, then the reward for performance _p_ over time _t_\nwould be proportional to _p t_.  \n  \nEven after decades of thinking about this, I find that sentence startling.  \n  \nWhenever how well you do depends on how well you've done, you'll get\nexponential growth. But neither our DNA nor our customs prepare us for it. No\none finds exponential growth natural; every child is surprised, the first time\nthey hear it, by the story of the man who asks the king for a single grain of\nrice the first day and double the amount each successive day.  \n  \nWhat we don't understand naturally we develop customs to deal with, but we\ndon't have many customs about exponential growth either, because there have\nbeen so few instances of it in human history. In principle herding should have\nbeen one: the more animals you had, the more offspring they'd have. But in\npractice grazing land was the limiting factor, and there was no plan for\ngrowing that exponentially.  \n  \nOr more precisely, no generally applicable plan. There _was_ a way to grow\none's territory exponentially: by conquest. The more territory you control,\nthe more powerful your army becomes, and the easier it is to conquer new\nterritory. This is why history is full of empires. But so few people created\nor ran empires that their experiences didn't affect customs very much. The\nemperor was a remote and terrifying figure, not a source of lessons one could\nuse in one's own life.  \n  \nThe most common case of exponential growth in preindustrial times was probably\nscholarship. The more you know, the easier it is to learn new things. The\nresult, then as now, was that some people were startlingly more knowledgeable\nthan the rest about certain topics. But this didn't affect customs much\neither. Although empires of ideas can overlap and there can thus be far more\nemperors, in preindustrial times this type of empire had little practical\neffect. [2]  \n  \nThat has changed in the last few centuries. Now the emperors of ideas can\ndesign bombs that defeat the emperors of territory. But this phenomenon is\nstill so new that we haven't fully assimilated it. Few even of the\nparticipants realize they're benefitting from exponential growth or ask what\nthey can learn from other instances of it.  \n  \nThe other source of superlinear returns is embodied in the expression \"winner\ntake all.\" In a sports match the relationship between performance and return\nis a step function: the winning team gets one win whether they do much better\nor just slightly better. [3]  \n  \nThe source of the step function is not competition per se, however. It's that\nthere are thresholds in the outcome. You don't need competition to get those.\nThere can be thresholds in situations where you're the only participant, like\nproving a theorem or hitting a target.  \n  \nIt's remarkable how often a situation with one source of superlinear returns\nalso has the other. Crossing thresholds leads to exponential growth: the\nwinning side in a battle usually suffers less damage, which makes them more\nlikely to win in the future. And exponential growth helps you cross\nthresholds: in a market with network effects, a company that grows fast enough\ncan shut out potential competitors.  \n  \nFame is an interesting example of a phenomenon that combines both sources of\nsuperlinear returns. Fame grows exponentially because existing fans bring you\nnew ones. But the fundamental reason it's so concentrated is thresholds:\nthere's only so much room on the A-list in the average person's head.  \n  \nThe most important case combining both sources of superlinear returns may be\nlearning. Knowledge grows exponentially, but there are also thresholds in it.\nLearning to ride a bicycle, for example. Some of these thresholds are akin to\nmachine tools: once you learn to read, you're able to learn anything else much\nfaster. But the most important thresholds of all are those representing new\ndiscoveries. Knowledge seems to be fractal in the sense that if you push hard\nat the boundary of one area of knowledge, you sometimes discover a whole new\nfield. And if you do, you get first crack at all the new discoveries to be\nmade in it. Newton did this, and so did Durer and Darwin.  \n  \n  \n  \n  \n  \nAre there general rules for finding situations with superlinear returns? The\nmost obvious one is to seek work that compounds.  \n  \nThere are two ways work can compound. It can compound directly, in the sense\nthat doing well in one cycle causes you to do better in the next. That happens\nfor example when you're building infrastructure, or growing an audience or\nbrand. Or work can compound by teaching you, since learning compounds. This\nsecond case is an interesting one because you may feel you're doing badly as\nit's happening. You may be failing to achieve your immediate goal. But if\nyou're learning a lot, then you're getting exponential growth nonetheless.  \n  \nThis is one reason Silicon Valley is so tolerant of failure. People in Silicon\nValley aren't blindly tolerant of failure. They'll only continue to bet on you\nif you're learning from your failures. But if you are, you are in fact a good\nbet: maybe your company didn't grow the way you wanted, but you yourself have,\nand that should yield results eventually.  \n  \nIndeed, the forms of exponential growth that don't consist of learning are so\noften intermixed with it that we should probably treat this as the rule rather\nthan the exception. Which yields another heuristic: always be learning. If\nyou're not learning, you're probably not on a path that leads to superlinear\nreturns.  \n  \nBut don't overoptimize _what_ you're learning. Don't limit yourself to\nlearning things that are already known to be valuable. You're learning; you\ndon't know for sure yet what's going to be valuable, and if you're too strict\nyou'll lop off the outliers.  \n  \nWhat about step functions? Are there also useful heuristics of the form \"seek\nthresholds\" or \"seek competition?\" Here the situation is trickier. The\nexistence of a threshold doesn't guarantee the game will be worth playing. If\nyou play a round of Russian roulette, you'll be in a situation with a\nthreshold, certainly, but in the best case you're no better off. \"Seek\ncompetition\" is similarly useless; what if the prize isn't worth competing\nfor? Sufficiently fast exponential growth guarantees both the shape and\nmagnitude of the return curve \u2014 because something that grows fast enough will\ngrow big even if it's trivially small at first \u2014 but thresholds only guarantee\nthe shape. [4]  \n  \nA principle for taking advantage of thresholds has to include a test to ensure\nthe game is worth playing. Here's one that does: if you come across something\nthat's mediocre yet still popular, it could be a good idea to replace it. For\nexample, if a company makes a product that people dislike yet still buy, then\npresumably they'd buy a better alternative if you made one. [5]  \n  \nIt would be great if there were a way to find promising intellectual\nthresholds. Is there a way to tell which questions have whole new fields\nbeyond them? I doubt we could ever predict this with certainty, but the prize\nis so valuable that it would be useful to have predictors that were even a\nlittle better than random, and there's hope of finding those. We can to some\ndegree predict when a research problem _isn't_ likely to lead to new\ndiscoveries: when it seems legit but boring. Whereas the kind that do lead to\nnew discoveries tend to seem very mystifying, but perhaps unimportant. (If\nthey were mystifying and obviously important, they'd be famous open questions\nwith lots of people already working on them.) So one heuristic here is to be\ndriven by curiosity rather than careerism \u2014 to give free rein to your\ncuriosity instead of working on what you're supposed to.  \n  \n  \n  \n  \n  \nThe prospect of superlinear returns for performance is an exciting one for the\nambitious. And there's good news in this department: this territory is\nexpanding in both directions. There are more types of work in which you can\nget superlinear returns, and the returns themselves are growing.  \n  \nThere are two reasons for this, though they're so closely intertwined that\nthey're more like one and a half: progress in technology, and the decreasing\nimportance of organizations.  \n  \nFifty years ago it used to be much more necessary to be part of an\norganization to work on ambitious projects. It was the only way to get the\nresources you needed, the only way to have colleagues, and the only way to get\ndistribution. So in 1970 your prestige was in most cases the prestige of the\norganization you belonged to. And prestige was an accurate predictor, because\nif you weren't part of an organization, you weren't likely to achieve much.\nThere were a handful of exceptions, most notably artists and writers, who\nworked alone using inexpensive tools and had their own brands. But even they\nwere at the mercy of organizations for reaching audiences. [6]  \n  \nA world dominated by organizations damped variation in the returns for\nperformance. But this world has eroded significantly just in my lifetime. Now\na lot more people can have the freedom that artists and writers had in the\n20th century. There are lots of ambitious projects that don't require much\ninitial funding, and lots of new ways to learn, make money, find colleagues,\nand reach audiences.  \n  \nThere's still plenty of the old world left, but the rate of change has been\ndramatic by historical standards. Especially considering what's at stake. It's\nhard to imagine a more fundamental change than one in the returns for\nperformance.  \n  \nWithout the damping effect of institutions, there will be more variation in\noutcomes. Which doesn't imply everyone will be better off: people who do well\nwill do even better, but those who do badly will do worse. That's an important\npoint to bear in mind. Exposing oneself to superlinear returns is not for\neveryone. Most people will be better off as part of the pool. So who should\nshoot for superlinear returns? Ambitious people of two types: those who know\nthey're so good that they'll be net ahead in a world with higher variation,\nand those, particularly the young, who can afford to risk trying it to find\nout. [7]  \n  \nThe switch away from institutions won't simply be an exodus of their current\ninhabitants. Many of the new winners will be people they'd never have let in.\nSo the resulting democratization of opportunity will be both greater and more\nauthentic than any tame intramural version the institutions themselves might\nhave cooked up.  \n  \n  \n  \n  \n  \nNot everyone is happy about this great unlocking of ambition. It threatens\nsome vested interests and contradicts some ideologies. [8] But if you're an\nambitious individual it's good news for you. How should you take advantage of\nit?  \n  \nThe most obvious way to take advantage of superlinear returns for performance\nis by doing exceptionally good work. At the far end of the curve, incremental\neffort is a bargain. All the more so because there's less competition at the\nfar end \u2014 and not just for the obvious reason that it's hard to do something\nexceptionally well, but also because people find the prospect so intimidating\nthat few even try. Which means it's not just a bargain to do exceptional work,\nbut a bargain even to try to.  \n  \nThere are many variables that affect how good your work is, and if you want to\nbe an outlier you need to get nearly all of them right. For example, to do\nsomething exceptionally well, you have to be interested in it. Mere diligence\nis not enough. So in a world with superlinear returns, it's even more valuable\nto know what you're interested in, and to find ways to work on it. [9] It will\nalso be important to choose work that suits your circumstances. For example,\nif there's a kind of work that inherently requires a huge expenditure of time\nand energy, it will be increasingly valuable to do it when you're young and\ndon't yet have children.  \n  \nThere's a surprising amount of technique to doing great work. It's not just a\nmatter of trying hard. I'm going to take a shot giving a recipe in one\nparagraph.  \n  \nChoose work you have a natural aptitude for and a deep interest in. Develop a\nhabit of working on your own projects; it doesn't matter what they are so long\nas you find them excitingly ambitious. Work as hard as you can without burning\nout, and this will eventually bring you to one of the frontiers of knowledge.\nThese look smooth from a distance, but up close they're full of gaps. Notice\nand explore such gaps, and if you're lucky one will expand into a whole new\nfield. Take as much risk as you can afford; if you're not failing occasionally\nyou're probably being too conservative. Seek out the best colleagues. Develop\ngood taste and learn from the best examples. Be honest, especially with\nyourself. Exercise and eat and sleep well and avoid the more dangerous drugs.\nWhen in doubt, follow your curiosity. It never lies, and it knows more than\nyou do about what's worth paying attention to. [10]  \n  \nAnd there is of course one other thing you need: to be lucky. Luck is always a\nfactor, but it's even more of a factor when you're working on your own rather\nthan as part of an organization. And though there are some valid aphorisms\nabout luck being where preparedness meets opportunity and so on, there's also\na component of true chance that you can't do anything about. The solution is\nto take multiple shots. Which is another reason to start taking risks early.  \n  \n  \n  \n  \n  \nThe best example of a field with superlinear returns is probably science. It\nhas exponential growth, in the form of learning, combined with thresholds at\nthe extreme edge of performance \u2014 literally at the limits of knowledge.  \n  \nThe result has been a level of inequality in scientific discovery that makes\nthe wealth inequality of even the most stratified societies seem mild by\ncomparison. Newton's discoveries were arguably greater than all his\ncontemporaries' combined. [11]  \n  \nThis point may seem obvious, but it might be just as well to spell it out.\nSuperlinear returns imply inequality. The steeper the return curve, the\ngreater the variation in outcomes.  \n  \nIn fact, the correlation between superlinear returns and inequality is so\nstrong that it yields another heuristic for finding work of this type: look\nfor fields where a few big winners outperform everyone else. A kind of work\nwhere everyone does about the same is unlikely to be one with superlinear\nreturns.  \n  \nWhat are fields where a few big winners outperform everyone else? Here are\nsome obvious ones: sports, politics, art, music, acting, directing, writing,\nmath, science, starting companies, and investing. In sports the phenomenon is\ndue to externally imposed thresholds; you only need to be a few percent faster\nto win every race. In politics, power grows much as it did in the days of\nemperors. And in some of the other fields (including politics) success is\ndriven largely by fame, which has its own source of superlinear growth. But\nwhen we exclude sports and politics and the effects of fame, a remarkable\npattern emerges: the remaining list is exactly the same as the list of fields\nwhere you have to be [_independent-minded_](think.html) to succeed \u2014 where\nyour ideas have to be not just correct, but novel as well. [12]  \n  \nThis is obviously the case in science. You can't publish papers saying things\nthat other people have already said. But it's just as true in investing, for\nexample. It's only useful to believe that a company will do well if most other\ninvestors don't; if everyone else thinks the company will do well, then its\nstock price will already reflect that, and there's no room to make money.  \n  \nWhat else can we learn from these fields? In all of them you have to put in\nthe initial effort. Superlinear returns seem small at first. _At this rate,_\nyou find yourself thinking, _I'll never get anywhere._ But because the reward\ncurve rises so steeply at the far end, it's worth taking extraordinary\nmeasures to get there.  \n  \nIn the startup world, the name for this principle is \"do things that don't\nscale.\" If you pay a ridiculous amount of attention to your tiny initial set\nof customers, ideally you'll kick off exponential growth by word of mouth. But\nthis same principle applies to anything that grows exponentially. Learning,\nfor example. When you first start learning something, you feel lost. But it's\nworth making the initial effort to get a toehold, because the more you learn,\nthe easier it will get.  \n  \nThere's another more subtle lesson in the list of fields with superlinear\nreturns: not to equate work with a job. For most of the 20th century the two\nwere identical for nearly everyone, and as a result we've inherited a custom\nthat equates productivity with having a job. Even now to most people the\nphrase \"your work\" means their job. But to a writer or artist or scientist it\nmeans whatever they're currently studying or creating. For someone like that,\ntheir work is something they carry with them from job to job, if they have\njobs at all. It may be done for an employer, but it's part of their portfolio.  \n  \n  \n  \n  \n  \nIt's an intimidating prospect to enter a field where a few big winners\noutperform everyone else. Some people do this deliberately, but you don't need\nto. If you have sufficient natural ability and you follow your curiosity\nsufficiently far, you'll end up in one. Your curiosity won't let you be\ninterested in boring questions, and interesting questions tend to create\nfields with superlinear returns if they're not already part of one.  \n  \nThe territory of superlinear returns is by no means static. Indeed, the most\nextreme returns come from expanding it. So while both ambition and curiosity\ncan get you into this territory, curiosity may be the more powerful of the\ntwo. Ambition tends to make you climb existing peaks, but if you stick close\nenough to an interesting enough question, it may grow into a mountain beneath\nyou.  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \nThere's a limit to how sharply you can distinguish between effort,\nperformance, and return, because they're not sharply distinguished in fact.\nWhat counts as return to one person might be performance to another. But\nthough the borders of these concepts are blurry, they're not meaningless. I've\ntried to write about them as precisely as I could without crossing into error.  \n  \n[1] Evolution itself is probably the most pervasive example of superlinear\nreturns for performance. But this is hard for us to empathize with because\nwe're not the recipients; we're the returns.  \n  \n[2] Knowledge did of course have a practical effect before the Industrial\nRevolution. The development of agriculture changed human life completely. But\nthis kind of change was the result of broad, gradual improvements in\ntechnique, not the discoveries of a few exceptionally learned people.  \n  \n[3] It's not mathematically correct to describe a step function as\nsuperlinear, but a step function starting from zero works like a superlinear\nfunction when it describes the reward curve for effort by a rational actor. If\nit starts at zero then the part before the step is below any linearly\nincreasing return, and the part after the step must be above the necessary\nreturn at that point or no one would bother.  \n  \n[4] Seeking competition could be a good heuristic in the sense that some\npeople find it motivating. It's also somewhat of a guide to promising\nproblems, because it's a sign that other people find them promising. But it's\na very imperfect sign: often there's a clamoring crowd chasing some problem,\nand they all end up being trumped by someone quietly working on another one.  \n  \n[5] Not always, though. You have to be careful with this rule. When something\nis popular despite being mediocre, there's often a hidden reason why. Perhaps\nmonopoly or regulation make it hard to compete. Perhaps customers have bad\ntaste or have broken procedures for deciding what to buy. There are huge\nswathes of mediocre things that exist for such reasons.  \n  \n[6] In my twenties I wanted to be an [_artist_](worked.html) and even went to\nart school to study painting. Mostly because I liked art, but a nontrivial\npart of my motivation came from the fact that artists seemed least at the\nmercy of organizations.  \n  \n[7] In principle everyone is getting superlinear returns. Learning compounds,\nand everyone learns in the course of their life. But in practice few push this\nkind of everyday learning to the point where the return curve gets really\nsteep.  \n  \n[8] It's unclear exactly what advocates of \"equity\" mean by it. They seem to\ndisagree among themselves. But whatever they mean is probably at odds with a\nworld in which institutions have less power to control outcomes, and a handful\nof outliers do much better than everyone else.  \n  \nIt may seem like bad luck for this concept that it arose at just the moment\nwhen the world was shifting in the opposite direction, but I don't think this\nwas a coincidence. I think one reason it arose now is because its adherents\nfeel threatened by rapidly increasing variation in performance.  \n  \n[9] Corollary: Parents who pressure their kids to work on something\nprestigious, like medicine, even though they have no interest in it, will be\nhosing them even more than they have in the past.  \n  \n[10] The original version of this paragraph was the first draft of \"[_How to\nDo Great Work_](greatwork.html).\" As soon as I wrote it I realized it was a\nmore important topic than superlinear returns, so I paused the present essay\nto expand this paragraph into its own. Practically nothing remains of the\noriginal version, because after I finished \"How to Do Great Work\" I rewrote it\nbased on that.  \n  \n[11] Before the Industrial Revolution, people who got rich usually did it like\nemperors: capturing some resource made them more powerful and enabled them to\ncapture more. Now it can be done like a scientist, by discovering or building\nsomething uniquely valuable. Most people who get rich use a mix of the old and\nthe new ways, but in the most advanced economies the ratio has [_shifted\ndramatically_](richnow.html) toward discovery just in the last half century.  \n  \n[12] It's not surprising that conventional-minded people would dislike\ninequality if independent-mindedness is one of the biggest drivers of it. But\nit's not simply that they don't want anyone to have what they can't. The\nconventional-minded literally can't imagine what it's like to have novel\nideas. So the whole phenomenon of great variation in performance seems\nunnatural to them, and when they encounter it they assume it must be due to\ncheating or to some malign external influence.  \n  \n  \n  \n**Thanks** to Trevor Blackwell, Patrick Collison, Tyler Cowen, Jessica\nLivingston, Harj Taggar, and Garry Tan for reading drafts of this.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nSeptember 2012  \n  \nI've done several types of work over the years but I don't know another as\ncounterintuitive as startup investing.  \n  \nThe two most important things to understand about startup investing, as a\nbusiness, are (1) that effectively all the returns are concentrated in a few\nbig winners, and (2) that the best ideas look initially like bad ideas.  \n  \nThe first rule I knew intellectually, but didn't really grasp till it happened\nto us. The total value of the companies we've funded is around 10 billion,\ngive or take a few. But just two companies, Dropbox and Airbnb, account for\nabout three quarters of it.  \n  \nIn startups, the big winners are big to a degree that violates our\nexpectations about variation. I don't know whether these expectations are\ninnate or learned, but whatever the cause, we are just not prepared for the\n1000x variation in outcomes that one finds in startup investing.  \n  \nThat yields all sorts of strange consequences. For example, in purely\nfinancial terms, there is probably at most one company in each YC batch that\nwill have a significant effect on our returns, and the rest are just a cost of\ndoing business. [1] I haven't really assimilated that fact, partly because\nit's so counterintuitive, and partly because we're not doing this just for\nfinancial reasons; YC would be a pretty lonely place if we only had one\ncompany per batch. And yet it's true.  \n  \nTo succeed in a domain that violates your intuitions, you need to be able to\nturn them off the way a pilot does when flying through clouds. [2] You need to\ndo what you know intellectually to be right, even though it feels wrong.  \n  \nIt's a constant battle for us. It's hard to make ourselves take enough risks.\nWhen you interview a startup and think \"they seem likely to succeed,\" it's\nhard not to fund them. And yet, financially at least, there is only one kind\nof success: they're either going to be one of the really big winners or not,\nand if not it doesn't matter whether you fund them, because even if they\nsucceed the effect on your returns will be insignificant. In the same day of\ninterviews you might meet some smart 19 year olds who aren't even sure what\nthey want to work on. Their chances of succeeding seem small. But again, it's\nnot their chances of succeeding that matter but their chances of succeeding\nreally big. The probability that any group will succeed really big is\nmicroscopically small, but the probability that those 19 year olds will might\nbe higher than that of the other, safer group.  \n  \nThe probability that a startup will make it big is not simply a constant\nfraction of the probability that they will succeed at all. If it were, you\ncould fund everyone who seemed likely to succeed at all, and you'd get that\nfraction of big hits. Unfortunately picking winners is harder than that. You\nhave to ignore the elephant in front of you, the likelihood they'll succeed,\nand focus instead on the separate and almost invisibly intangible question of\nwhether they'll succeed really big.  \n  \n**Harder**  \n  \nThat's made harder by the fact that the best startup ideas seem at first like\nbad ideas. I've written about this before: if a good idea were obviously good,\nsomeone else would already have done it. So the most successful founders tend\nto work on ideas that few beside them realize are good. Which is not that far\nfrom a description of insanity, till you reach the point where you see\nresults.  \n  \nThe first time Peter Thiel spoke at YC he drew a Venn diagram that illustrates\nthe situation perfectly. He drew two intersecting circles, one labelled \"seems\nlike a bad idea\" and the other \"is a good idea.\" The intersection is the sweet\nspot for startups.  \n  \nThis concept is a simple one and yet seeing it as a Venn diagram is\nilluminating. It reminds you that there is an intersection\u2014that there are good\nideas that seem bad. It also reminds you that the vast majority of ideas that\nseem bad are bad.  \n  \nThe fact that the best ideas seem like bad ideas makes it even harder to\nrecognize the big winners. It means the probability of a startup making it\nreally big is not merely not a constant fraction of the probability that it\nwill succeed, but that the startups with a high probability of the former will\nseem to have a disproportionately low probability of the latter.  \n  \nHistory tends to get rewritten by big successes, so that in retrospect it\nseems obvious they were going to make it big. For that reason one of my most\nvaluable memories is how lame Facebook sounded to me when I first heard about\nit. A site for college students to waste time? It seemed the perfect bad idea:\na site (1) for a niche market (2) with no money (3) to do something that\ndidn't matter.  \n  \nOne could have described Microsoft and Apple in exactly the same terms. [3]  \n  \n**Harder Still**  \n  \nWait, it gets worse. You not only have to solve this hard problem, but you\nhave to do it with no indication of whether you're succeeding. When you pick a\nbig winner, you won't know it for two years.  \n  \nMeanwhile, the one thing you _can_ measure is dangerously misleading. The one\nthing we can track precisely is how well the startups in each batch do at\nfundraising after Demo Day. But we know that's the wrong metric. There's no\ncorrelation between the percentage of startups that raise money and the metric\nthat does matter financially, whether that batch of startups contains a big\nwinner or not.  \n  \nExcept an inverse one. That's the scary thing: fundraising is not merely a\nuseless metric, but positively misleading. We're in a business where we need\nto pick unpromising-looking outliers, and the huge scale of the successes\nmeans we can afford to spread our net very widely. The big winners could\ngenerate 10,000x returns. That means for each big winner we could pick a\nthousand companies that returned nothing and still end up 10x ahead.  \n  \nIf we ever got to the point where 100% of the startups we funded were able to\nraise money after Demo Day, it would almost certainly mean we were being too\nconservative. [4]  \n  \nIt takes a conscious effort not to do that too. After 15 cycles of preparing\nstartups for investors and then watching how they do, I can now look at a\ngroup we're interviewing through Demo Day investors' eyes. But those are the\nwrong eyes to look through!  \n  \nWe can afford to take at least 10x as much risk as Demo Day investors. And\nsince risk is usually proportionate to reward, if you can afford to take more\nrisk you should. What would it mean to take 10x more risk than Demo Day\ninvestors? We'd have to be willing to fund 10x more startups than they would.\nWhich means that even if we're generous to ourselves and assume that YC can on\naverage triple a startup's expected value, we'd be taking the right amount of\nrisk if only 30% of the startups were able to raise significant funding after\nDemo Day.  \n  \nI don't know what fraction of them currently raise more after Demo Day. I\ndeliberately avoid calculating that number, because if you start measuring\nsomething you start optimizing it, and I know it's the wrong thing to\noptimize. [5] But the percentage is certainly way over 30%. And frankly the\nthought of a 30% success rate at fundraising makes my stomach clench. A Demo\nDay where only 30% of the startups were fundable would be a shambles. Everyone\nwould agree that YC had jumped the shark. We ourselves would feel that YC had\njumped the shark. And yet we'd all be wrong.  \n  \nFor better or worse that's never going to be more than a thought experiment.\nWe could never stand it. How about that for counterintuitive? I can lay out\nwhat I know to be the right thing to do, and still not do it. I can make up\nall sorts of plausible justifications. It would hurt YC's brand (at least\namong the innumerate) if we invested in huge numbers of risky startups that\nflamed out. It might dilute the value of the alumni network. Perhaps most\nconvincingly, it would be demoralizing for us to be up to our chins in failure\nall the time. But I know the real reason we're so conservative is that we just\nhaven't assimilated the fact of 1000x variation in returns.  \n  \nWe'll probably never be able to bring ourselves to take risks proportionate to\nthe returns in this business. The best we can hope for is that when we\ninterview a group and find ourselves thinking \"they seem like good founders,\nbut what are investors going to think of this crazy idea?\" we'll continue to\nbe able to say \"who cares what investors think?\" That's what we thought about\nAirbnb, and if we want to fund more Airbnbs we have to stay good at thinking\nit.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] I'm not saying that the big winners are all that matters, just that\nthey're all that matters financially for investors. Since we're not doing YC\nmainly for financial reasons, the big winners aren't all that matters to us.\nWe're delighted to have funded Reddit, for example. Even though we made\ncomparatively little from it, Reddit has had a big effect on the world, and it\nintroduced us to Steve Huffman and Alexis Ohanian, both of whom have become\ngood friends.  \n  \nNor do we push founders to try to become one of the big winners if they don't\nwant to. We didn't \"swing for the fences\" in our own startup (Viaweb, which\nwas acquired for $50 million), and it would feel pretty bogus to press\nfounders to do something we didn't do. Our rule is that it's up to the\nfounders. Some want to take over the world, and some just want that first few\nmillion. But we invest in so many companies that we don't have to sweat any\none outcome. In fact, we don't have to sweat whether startups have exits at\nall. The biggest exits are the only ones that matter financially, and those\nare guaranteed in the sense that if a company becomes big enough, a market for\nits shares will inevitably arise. Since the remaining outcomes don't have a\nsignificant effect on returns, it's cool with us if the founders want to sell\nearly for a small amount, or grow slowly and never sell (i.e. become a so-\ncalled lifestyle business), or even shut the company down. We're sometimes\ndisappointed when a startup we had high hopes for doesn't do well, but this\ndisappointment is mostly the ordinary variety that anyone feels when that\nhappens.  \n  \n[2] Without visual cues (e.g. the horizon) you can't distinguish between\ngravity and acceleration. Which means if you're flying through clouds you\ncan't tell what the attitude of the aircraft is. You could feel like you're\nflying straight and level while in fact you're descending in a spiral. The\nsolution is to ignore what your body is telling you and listen only to your\ninstruments. But it turns out to be very hard to ignore what your body is\ntelling you. Every pilot knows about this\n[problem](http://en.wikipedia.org/wiki/Spatial_disorientation) and yet it is\nstill a leading cause of accidents.  \n  \n[3] Not all big hits follow this pattern though. The reason Google seemed a\nbad idea was that there were already lots of search engines and there didn't\nseem to be room for another.  \n  \n[4] A startup's success at fundraising is a function of two things: what\nthey're selling and how good they are at selling it. And while we can teach\nstartups a lot about how to appeal to investors, even the most convincing\npitch can't sell an idea that investors don't like. I was genuinely worried\nthat Airbnb, for example, would not be able to raise money after Demo Day. I\ncouldn't convince [Fred Wilson](airbnb.html) to fund them. They might not have\nraised money at all but for the coincidence that Greg McAdoo, our contact at\nSequoia, was one of a handful of VCs who understood the vacation rental\nbusiness, having spent much of the previous two years investigating it.  \n  \n[5] I calculated it once for the last batch before a consortium of investors\nstarted offering investment automatically to every startup we funded, summer\n2010. At the time it was 94% (33 of 35 companies that tried to raise money\nsucceeded, and one didn't try because they were already profitable).\nPresumably it's lower now because of that investment; in the old days it was\nraise after Demo Day or die.  \n  \n**Thanks** to Sam Altman, Paul Buchheit, Patrick Collison, Jessica Livingston,\nGeoff Ralston, and Harj Taggar for reading drafts of this.  \n  \n\nDecember 2010  \n  \nI was thinking recently how inconvenient it was not to have a general term for\niPhones, iPads, and the corresponding things running Android. The closest to a\ngeneral term seems to be \"mobile devices,\" but that (a) applies to any mobile\nphone, and (b) doesn't really capture what's distinctive about the iPad.  \n  \nAfter a few seconds it struck me that what we'll end up calling these things\nis tablets. The only reason we even consider calling them \"mobile devices\" is\nthat the iPhone preceded the iPad. If the iPad had come first, we wouldn't\nthink of the iPhone as a phone; we'd think of it as a tablet small enough to\nhold up to your ear.  \n  \nThe iPhone isn't so much a phone as a replacement for a phone. That's an\nimportant distinction, because it's an early instance of what will become a\ncommon pattern. Many if not most of the special-purpose objects around us are\ngoing to be replaced by apps running on tablets.  \n  \nThis is already clear in cases like GPSes, music players, and cameras. But I\nthink it will surprise people how many things are going to get replaced. We\nfunded one startup that's [replacing keys](http://lockitron.com/). The fact\nthat you can change font sizes easily means the iPad effectively replaces\nreading glasses. I wouldn't be surprised if by playing some clever tricks with\nthe accelerometer you could even replace the bathroom scale.  \n  \nThe advantages of doing things in software on a single device are so great\nthat everything that can get turned into software will. So for the next couple\nyears, a good [recipe for startups](http://ycombinator.com/rfs8.html) will be\nto look around you for things that people haven't realized yet can be made\nunnecessary by a tablet app.  \n  \nIn 1938 Buckminster Fuller coined the term\n[ephemeralization](http://en.wikipedia.org/wiki/Ephemeralization) to describe\nthe increasing tendency of physical machinery to be replaced by what we would\nnow call software. The reason tablets are going to take over the world is not\n(just) that Steve Jobs and Co are industrial design wizards, but because they\nhave this force behind them. The iPhone and the iPad have effectively drilled\na hole that will allow ephemeralization to flow into a lot of new areas. No\none who has studied the history of technology would want to underestimate the\npower of that force.  \n  \nI worry about the power Apple could have with this force behind them. I don't\nwant to see another era of client monoculture like the Microsoft one in the\n80s and 90s. But if ephemeralization is one of the main forces driving the\nspread of tablets, that suggests a way to compete with Apple: be a better\nplatform for it.  \n  \nIt has turned out to be a great thing that Apple tablets have accelerometers\nin them. Developers have used the accelerometer in ways Apple could never have\nimagined. That's the nature of platforms. The more versatile the tool, the\nless you can predict how people will use it. So tablet makers should be\nthinking: what else can we put in there? Not merely hardware, but software\ntoo. What else can we give developers access to? Give hackers an inch and\nthey'll take you a mile.  \n  \n  \n  \n  \n  \n  \n  \n**Thanks** to Sam Altman, Paul Buchheit, Jessica Livingston, and Robert Morris\nfor reading drafts of this.  \n  \n  \n  \n\nOctober 2015  \n  \nHere's a simple trick for getting more people to read what you write: write in\nspoken language.  \n  \nSomething comes over most people when they start writing. They write in a\ndifferent language than they'd use if they were talking to a friend. The\nsentence structure and even the words are different. No one uses \"pen\" as a\nverb in spoken English. You'd feel like an idiot using \"pen\" instead of\n\"write\" in a conversation with a friend.  \n  \nThe last straw for me was a sentence I read a couple days ago:\n\n> The mercurial Spaniard himself declared: \"After Altamira, all is decadence.\"\n\nIt's from Neil Oliver's _A History of Ancient Britain_. I feel bad making an\nexample of this book, because it's no worse than lots of others. But just\nimagine calling Picasso \"the mercurial Spaniard\" when talking to a friend.\nEven one sentence of this would raise eyebrows in conversation. And yet people\nwrite whole books of it.  \n  \nOk, so written and spoken language are different. Does that make written\nlanguage worse?  \n  \nIf you want people to read and understand what you write, yes. Written\nlanguage is more complex, which makes it more work to read. It's also more\nformal and distant, which gives the reader's attention permission to drift.\nBut perhaps worst of all, the complex sentences and fancy words give you, the\nwriter, the false impression that you're saying more than you actually are.  \n  \nYou don't need complex sentences to express complex ideas. When specialists in\nsome abstruse topic talk to one another about ideas in their field, they don't\nuse sentences any more complex than they do when talking about what to have\nfor lunch. They use different words, certainly. But even those they use no\nmore than necessary. And in my experience, the harder the subject, the more\ninformally experts speak. Partly, I think, because they have less to prove,\nand partly because the harder the ideas you're talking about, the less you can\nafford to let language get in the way.  \n  \nInformal language is the athletic clothing of ideas.  \n  \nI'm not saying spoken language always works best. Poetry is as much music as\ntext, so you can say things you wouldn't say in conversation. And there are a\nhandful of writers who can get away with using fancy language in prose. And\nthen of course there are cases where writers don't want to make it easy to\nunderstand what they're saying\u2014in corporate announcements of bad news, for\nexample, or at the more\n[_bogus_](https://scholar.google.com/scholar?hl=en&as_sdt=1,5&q=transgression+narrative+postmodern+gender)\nend of the humanities. But for nearly everyone else, spoken language is\nbetter.  \n  \nIt seems to be hard for most people to write in spoken language. So perhaps\nthe best solution is to write your first draft the way you usually would, then\nafterward look at each sentence and ask \"Is this the way I'd say this if I\nwere talking to a friend?\" If it isn't, imagine what you would say, and use\nthat instead. After a while this filter will start to operate as you write.\nWhen you write something you wouldn't say, you'll hear the clank as it hits\nthe page.  \n  \nBefore I publish a new essay, I read it out loud and fix everything that\ndoesn't sound like conversation. I even fix bits that are phonetically\nawkward; I don't know if that's necessary, but it doesn't cost much.  \n  \nThis trick may not always be enough. I've seen writing so far removed from\nspoken language that it couldn't be fixed sentence by sentence. For cases like\nthat there's a more drastic solution. After writing the first draft, try\nexplaining to a friend what you just wrote. Then replace the draft with what\nyou said to your friend.  \n  \nPeople often tell me how much my essays sound like me talking. The fact that\nthis seems worthy of comment shows how rarely people manage to write in spoken\nlanguage. Otherwise everyone's writing would sound like them talking.  \n  \nIf you simply manage to write in spoken language, you'll be ahead of 95% of\nwriters. And it's so easy to do: just don't let a sentence through unless it's\nthe way you'd say it to a friend.  \n  \n  \n  \n  \n  \n  \n  \n**Thanks** to Patrick Collison and Jessica Livingston for reading drafts of\nthis.  \n  \n\nFebruary 2002  \n  \n\"...Copernicus' aesthetic objections to [equants] provided one essential\nmotive for his rejection of the Ptolemaic system....\"  \n  \n\\- Thomas Kuhn, _The Copernican Revolution_  \n  \n\"All of us had been trained by Kelly Johnson and believed fanatically in his\ninsistence that an airplane that looked beautiful would fly the same way.\"  \n  \n\\- Ben Rich, _Skunk Works_  \n  \n\"Beauty is the first test: there is no permanent place in this world for ugly\nmathematics.\"  \n  \n\\- G. H. Hardy, _A Mathematician's Apology_  \n  \n  \nI was talking recently to a friend who teaches at MIT. His field is hot now\nand every year he is inundated by applications from would-be graduate\nstudents. \"A lot of them seem smart,\" he said. \"What I can't tell is whether\nthey have any kind of taste.\"  \n  \nTaste. You don't hear that word much now. And yet we still need the underlying\nconcept, whatever we call it. What my friend meant was that he wanted students\nwho were not just good technicians, but who could use their technical\nknowledge to design beautiful things.  \n  \nMathematicians call good work \"beautiful,\" and so, either now or in the past,\nhave scientists, engineers, musicians, architects, designers, writers, and\npainters. Is it just a coincidence that they used the same word, or is there\nsome overlap in what they meant? If there is an overlap, can we use one\nfield's discoveries about beauty to help us in another?  \n  \nFor those of us who design things, these are not just theoretical questions.\nIf there is such a thing as beauty, we need to be able to recognize it. We\nneed good taste to make good things. Instead of treating beauty as an airy\nabstraction, to be either blathered about or avoided depending on how one\nfeels about airy abstractions, let's try considering it as a practical\nquestion: _how do you make good stuff?_  \n  \n  \n  \nIf you mention taste nowadays, a lot of people will tell you that \"taste is\nsubjective.\" They believe this because it really feels that way to them. When\nthey like something, they have no idea why. It could be because it's\nbeautiful, or because their mother had one, or because they saw a movie star\nwith one in a magazine, or because they know it's expensive. Their thoughts\nare a tangle of unexamined impulses.  \n  \nMost of us are encouraged, as children, to leave this tangle unexamined. If\nyou make fun of your little brother for coloring people green in his coloring\nbook, your mother is likely to tell you something like \"you like to do it your\nway and he likes to do it his way.\"  \n  \nYour mother at this point is not trying to teach you important truths about\naesthetics. She's trying to get the two of you to stop bickering.  \n  \nLike many of the half-truths adults tell us, this one contradicts other things\nthey tell us. After dinning into you that taste is merely a matter of personal\npreference, they take you to the museum and tell you that you should pay\nattention because Leonardo is a great artist.  \n  \nWhat goes through the kid's head at this point? What does he think \"great\nartist\" means? After having been told for years that everyone just likes to do\nthings their own way, he is unlikely to head straight for the conclusion that\na great artist is someone whose work is _better_ than the others'. A far more\nlikely theory, in his Ptolemaic model of the universe, is that a great artist\nis something that's good for you, like broccoli, because someone said so in a\nbook.  \n  \n  \n  \nSaying that taste is just personal preference is a good way to prevent\ndisputes. The trouble is, it's not true. You feel this when you start to\ndesign things.  \n  \nWhatever job people do, they naturally want to do better. Football players\nlike to win games. CEOs like to increase earnings. It's a matter of pride, and\na real pleasure, to get better at your job. But if your job is to design\nthings, and there is no such thing as beauty, then there is _no way to get\nbetter at your job._ If taste is just personal preference, then everyone's is\nalready perfect: you like whatever you like, and that's it.  \n  \nAs in any job, as you continue to design things, you'll get better at it. Your\ntastes will change. And, like anyone who gets better at their job, you'll know\nyou're getting better. If so, your old tastes were not merely different, but\nworse. Poof goes the axiom that taste can't be wrong.  \n  \nRelativism is fashionable at the moment, and that may hamper you from thinking\nabout taste, even as yours grows. But if you come out of the closet and admit,\nat least to yourself, that there is such a thing as good and bad design, then\nyou can start to study good design in detail. How has your taste changed? When\nyou made mistakes, what caused you to make them? What have other people\nlearned about design?  \n  \nOnce you start to examine the question, it's surprising how much different\nfields' ideas of beauty have in common. The same principles of good design\ncrop up again and again.  \n  \n  \n  \n**Good design is simple.** You hear this from math to painting. In math it\nmeans that a shorter proof tends to be a better one. Where axioms are\nconcerned, especially, less is more. It means much the same thing in\nprogramming. For architects and designers it means that beauty should depend\non a few carefully chosen structural elements rather than a profusion of\nsuperficial ornament. (Ornament is not in itself bad, only when it's\ncamouflage on insipid form.) Similarly, in painting, a still life of a few\ncarefully observed and solidly modelled objects will tend to be more\ninteresting than a stretch of flashy but mindlessly repetitive painting of,\nsay, a lace collar. In writing it means: say what you mean and say it briefly.  \n  \nIt seems strange to have to emphasize simplicity. You'd think simple would be\nthe default. Ornate is more work. But something seems to come over people when\nthey try to be creative. Beginning writers adopt a pompous tone that doesn't\nsound anything like the way they speak. Designers trying to be artistic resort\nto swooshes and curlicues. Painters discover that they're expressionists. It's\nall evasion. Underneath the long words or the \"expressive\" brush strokes,\nthere is not much going on, and that's frightening.  \n  \nWhen you're forced to be simple, you're forced to face the real problem. When\nyou can't deliver ornament, you have to deliver substance.  \n  \n  \n  \n**Good design is timeless.** In math, every proof is timeless unless it\ncontains a mistake. So what does Hardy mean when he says there is no permanent\nplace for ugly mathematics? He means the same thing Kelly Johnson did: if\nsomething is ugly, it can't be the best solution. There must be a better one,\nand eventually someone will discover it.  \n  \nAiming at timelessness is a way to make yourself find the best answer: if you\ncan imagine someone surpassing you, you should do it yourself. Some of the\ngreatest masters did this so well that they left little room for those who\ncame after. Every engraver since Durer has had to live in his shadow.  \n  \nAiming at timelessness is also a way to evade the grip of fashion. Fashions\nalmost by definition change with time, so if you can make something that will\nstill look good far into the future, then its appeal must derive more from\nmerit and less from fashion.  \n  \nStrangely enough, if you want to make something that will appeal to future\ngenerations, one way to do it is to try to appeal to past generations. It's\nhard to guess what the future will be like, but we can be sure it will be like\nthe past in caring nothing for present fashions. So if you can make something\nthat appeals to people today and would also have appealed to people in 1500,\nthere is a good chance it will appeal to people in 2500.  \n  \n  \n  \n**Good design solves the right problem.** The typical stove has four burners\narranged in a square, and a dial to control each. How do you arrange the\ndials? The simplest answer is to put them in a row. But this is a simple\nanswer to the wrong question. The dials are for humans to use, and if you put\nthem in a row, the unlucky human will have to stop and think each time about\nwhich dial matches which burner. Better to arrange the dials in a square like\nthe burners.  \n  \nA lot of bad design is industrious, but misguided. In the mid twentieth\ncentury there was a vogue for setting text in sans-serif fonts. These fonts\n_are_ closer to the pure, underlying letterforms. But in text that's not the\nproblem you're trying to solve. For legibility it's more important that\nletters be easy to tell apart. It may look Victorian, but a Times Roman\nlowercase g is easy to tell from a lowercase y.  \n  \nProblems can be improved as well as solutions. In software, an intractable\nproblem can usually be replaced by an equivalent one that's easy to solve.\nPhysics progressed faster as the problem became predicting observable\nbehavior, instead of reconciling it with scripture.  \n  \n  \n  \n**Good design is suggestive.** Jane Austen's novels contain almost no\ndescription; instead of telling you how everything looks, she tells her story\nso well that you envision the scene for yourself. Likewise, a painting that\nsuggests is usually more engaging than one that tells. Everyone makes up their\nown story about the Mona Lisa.  \n  \nIn architecture and design, this principle means that a building or object\nshould let you use it how you want: a good building, for example, will serve\nas a backdrop for whatever life people want to lead in it, instead of making\nthem live as if they were executing a program written by the architect.  \n  \nIn software, it means you should give users a few basic elements that they can\ncombine as they wish, like Lego. In math it means a proof that becomes the\nbasis for a lot of new work is preferable to a proof that was difficult, but\ndoesn't lead to future discoveries; in the sciences generally, citation is\nconsidered a rough indicator of merit.  \n  \n  \n  \n**Good design is often slightly funny.** This one may not always be true. But\nDurer's [engravings](pilate.html) and Saarinen's [womb chair](womb.html) and\nthe [Pantheon](pantheon.html) and the original [Porsche 911](1974-911s.html)\nall seem to me slightly funny. Godel's incompleteness theorem seems like a\npractical joke.  \n  \nI think it's because humor is related to strength. To have a sense of humor is\nto be strong: to keep one's sense of humor is to shrug off misfortunes, and to\nlose one's sense of humor is to be wounded by them. And so the mark-- or at\nleast the prerogative-- of strength is not to take oneself too seriously. The\nconfident will often, like swallows, seem to be making fun of the whole\nprocess slightly, as Hitchcock does in his films or Bruegel in his paintings--\nor Shakespeare, for that matter.  \n  \nGood design may not have to be funny, but it's hard to imagine something that\ncould be called humorless also being good design.  \n  \n  \n  \n**Good design is hard.** If you look at the people who've done great work, one\nthing they all seem to have in common is that they worked very hard. If you're\nnot working hard, you're probably wasting your time.  \n  \nHard problems call for great efforts. In math, difficult proofs require\ningenious solutions, and those tend to be interesting. Ditto in engineering.  \n  \nWhen you have to climb a mountain you toss everything unnecessary out of your\npack. And so an architect who has to build on a difficult site, or a small\nbudget, will find that he is forced to produce an elegant design. Fashions and\nflourishes get knocked aside by the difficult business of solving the problem\nat all.  \n  \nNot every kind of hard is good. There is good pain and bad pain. You want the\nkind of pain you get from going running, not the kind you get from stepping on\na nail. A difficult problem could be good for a designer, but a fickle client\nor unreliable materials would not be.  \n  \nIn art, the highest place has traditionally been given to paintings of people.\nThere is something to this tradition, and not just because pictures of faces\nget to press buttons in our brains that other pictures don't. We are so good\nat looking at faces that we force anyone who draws them to work hard to\nsatisfy us. If you draw a tree and you change the angle of a branch five\ndegrees, no one will know. When you change the angle of someone's eye five\ndegrees, people notice.  \n  \nWhen Bauhaus designers adopted Sullivan's \"form follows function,\" what they\nmeant was, form _should_ follow function. And if function is hard enough, form\nis forced to follow it, because there is no effort to spare for error. Wild\nanimals are beautiful because they have hard lives.  \n  \n  \n  \n**Good design looks easy.** Like great athletes, great designers make it look\neasy. Mostly this is an illusion. The easy, conversational tone of good\nwriting comes only on the eighth rewrite.  \n  \nIn science and engineering, some of the greatest discoveries seem so simple\nthat you say to yourself, I could have thought of that. The discoverer is\nentitled to reply, why didn't you?  \n  \nSome Leonardo heads are just a few lines. You look at them and you think, all\nyou have to do is get eight or ten lines in the right place and you've made\nthis beautiful portrait. Well, yes, but you have to get them in _exactly_ the\nright place. The slightest error will make the whole thing collapse.  \n  \nLine drawings are in fact the most difficult visual medium, because they\ndemand near perfection. In math terms, they are a closed-form solution; lesser\nartists literally solve the same problems by successive approximation. One of\nthe reasons kids give up drawing at ten or so is that they decide to start\ndrawing like grownups, and one of the first things they try is a line drawing\nof a face. Smack!  \n  \nIn most fields the appearance of ease seems to come with practice. Perhaps\nwhat practice does is train your unconscious mind to handle tasks that used to\nrequire conscious thought. In some cases you literally train your body. An\nexpert pianist can play notes faster than the brain can send signals to his\nhand. Likewise an artist, after a while, can make visual perception flow in\nthrough his eye and out through his hand as automatically as someone tapping\nhis foot to a beat.  \n  \nWhen people talk about being in \"the zone,\" I think what they mean is that the\nspinal cord has the situation under control. Your spinal cord is less\nhesitant, and it frees conscious thought for the hard problems.  \n  \n  \n  \n**Good design uses symmetry.** I think symmetry may just be one way to achieve\nsimplicity, but it's important enough to be mentioned on its own. Nature uses\nit a lot, which is a good sign.  \n  \nThere are two kinds of symmetry, repetition and recursion. Recursion means\nrepetition in subelements, like the pattern of veins in a leaf.  \n  \nSymmetry is unfashionable in some fields now, in reaction to excesses in the\npast. Architects started consciously making buildings asymmetric in Victorian\ntimes and by the 1920s asymmetry was an explicit premise of modernist\narchitecture. Even these buildings only tended to be asymmetric about major\naxes, though; there were hundreds of minor symmetries.  \n  \nIn writing you find symmetry at every level, from the phrases in a sentence to\nthe plot of a novel. You find the same in music and art. Mosaics (and some\nCezannes) get extra visual punch by making the whole picture out of the same\natoms. Compositional symmetry yields some of the most memorable paintings,\nespecially when two halves react to one another, as in the _[Creation of\nAdam](symptg.html)_ or _[American Gothic](symptg.html)._  \n  \nIn math and engineering, recursion, especially, is a big win. Inductive proofs\nare wonderfully short. In software, a problem that can be solved by recursion\nis nearly always best solved that way. The Eiffel Tower looks striking partly\nbecause it is a recursive solution, a tower on a tower.  \n  \nThe danger of symmetry, and repetition especially, is that it can be used as a\nsubstitute for thought.  \n  \n  \n  \n**Good design resembles nature.** It's not so much that resembling nature is\nintrinsically good as that nature has had a long time to work on the problem.\nIt's a good sign when your answer resembles nature's.  \n  \nIt's not cheating to copy. Few would deny that a story should be like life.\nWorking from life is a valuable tool in painting too, though its role has\noften been misunderstood. The aim is not simply to make a record. The point of\npainting from life is that it gives your mind something to chew on: when your\neyes are looking at something, your hand will do more interesting work.  \n  \nImitating nature also works in engineering. Boats have long had spines and\nribs like an animal's ribcage. In some cases we may have to wait for better\ntechnology: early aircraft designers were mistaken to design aircraft that\nlooked like birds, because they didn't have materials or power sources light\nenough (the Wrights' engine weighed 152 lbs. and generated only 12 hp.) or\ncontrol systems sophisticated enough for machines that flew like birds, but I\ncould imagine little unmanned reconnaissance planes flying like birds in fifty\nyears.  \n  \nNow that we have enough computer power, we can imitate nature's method as well\nas its results. Genetic algorithms may let us create things too complex to\ndesign in the ordinary sense.  \n  \n  \n  \n**Good design is redesign.** It's rare to get things right the first time.\nExperts expect to throw away some early work. They plan for plans to change.  \n  \nIt takes confidence to throw work away. You have to be able to think, _there's\nmore where that came from._ When people first start drawing, for example,\nthey're often reluctant to redo parts that aren't right; they feel they've\nbeen lucky to get that far, and if they try to redo something, it will turn\nout worse. Instead they convince themselves that the drawing is not that bad,\nreally-- in fact, maybe they meant it to look that way.  \n  \nDangerous territory, that; if anything you should cultivate dissatisfaction.\nIn Leonardo's [drawings](leonardo.html) there are often five or six attempts\nto get a line right. The distinctive back of the Porsche 911 only appeared in\nthe redesign of an awkward [prototype](porsche695.html). In Wright's early\nplans for the [Guggenheim](guggen.html), the right half was a ziggurat; he\ninverted it to get the present shape.  \n  \nMistakes are natural. Instead of treating them as disasters, make them easy to\nacknowledge and easy to fix. Leonardo more or less invented the sketch, as a\nway to make drawing bear a greater weight of exploration. Open-source software\nhas fewer bugs because it admits the possibility of bugs.  \n  \nIt helps to have a medium that makes change easy. When oil paint replaced\ntempera in the fifteenth century, it helped painters to deal with difficult\nsubjects like the human figure because, unlike tempera, oil can be blended and\noverpainted.  \n  \n  \n  \n**Good design can copy.** Attitudes to copying often make a round trip. A\nnovice imitates without knowing it; next he tries consciously to be original;\nfinally, he decides it's more important to be right than original.  \n  \nUnknowing imitation is almost a recipe for bad design. If you don't know where\nyour ideas are coming from, you're probably imitating an imitator. Raphael so\npervaded mid-nineteenth century taste that almost anyone who tried to draw was\nimitating him, often at several removes. It was this, more than Raphael's own\nwork, that bothered the Pre-Raphaelites.  \n  \nThe ambitious are not content to imitate. The second phase in the growth of\ntaste is a conscious attempt at originality.  \n  \nI think the greatest masters go on to achieve a kind of selflessness. They\njust want to get the right answer, and if part of the right answer has already\nbeen discovered by someone else, that's no reason not to use it. They're\nconfident enough to take from anyone without feeling that their own vision\nwill be lost in the process.  \n  \n  \n  \n**Good design is often strange.** Some of the very best work has an uncanny\nquality: [Euler's Formula](http://mathworld.wolfram.com/EulerFormula.html),\nBruegel's _[Hunters in the Snow](hunters.html),_ the [SR-71](sr71.html),\n[Lisp](rootsoflisp.html). They're not just beautiful, but strangely beautiful.  \n  \nI'm not sure why. It may just be my own stupidity. A can-opener must seem\nmiraculous to a dog. Maybe if I were smart enough it would seem the most\nnatural thing in the world that ei*pi = -1. It is after all necessarily true.  \n  \nMost of the qualities I've mentioned are things that can be cultivated, but I\ndon't think it works to cultivate strangeness. The best you can do is not\nsquash it if it starts to appear. Einstein didn't try to make relativity\nstrange. He tried to make it true, and the truth turned out to be strange.  \n  \nAt an art school where I once studied, the students wanted most of all to\ndevelop a personal style. But if you just try to make good things, you'll\ninevitably do it in a distinctive way, just as each person walks in a\ndistinctive way. Michelangelo was not trying to paint like Michelangelo. He\nwas just trying to paint well; he couldn't help painting like Michelangelo.  \n  \nThe only style worth having is the one you can't help. And this is especially\ntrue for strangeness. There is no shortcut to it. The Northwest Passage that\nthe Mannerists, the Romantics, and two generations of American high school\nstudents have searched for does not seem to exist. The only way to get there\nis to go through good and come out the other side.  \n  \n  \n  \n**Good design happens in chunks.** The inhabitants of fifteenth century\nFlorence included Brunelleschi, Ghiberti, Donatello, Masaccio, Filippo Lippi,\nFra Angelico, Verrocchio, Botticelli, Leonardo, and Michelangelo. Milan at the\ntime was as big as Florence. How many fifteenth century Milanese artists can\nyou name?  \n  \nSomething was happening in Florence in the fifteenth century. And it can't\nhave been heredity, because it isn't happening now. You have to assume that\nwhatever inborn ability Leonardo and Michelangelo had, there were people born\nin Milan with just as much. What happened to the Milanese Leonardo?  \n  \nThere are roughly a thousand times as many people alive in the US right now as\nlived in Florence during the fifteenth century. A thousand Leonardos and a\nthousand Michelangelos walk among us. If DNA ruled, we should be greeted daily\nby artistic marvels. We aren't, and the reason is that to make Leonardo you\nneed more than his innate ability. You also need Florence in 1450.  \n  \nNothing is more powerful than a community of talented people working on\nrelated problems. Genes count for little by comparison: being a genetic\nLeonardo was not enough to compensate for having been born near Milan instead\nof Florence. Today we move around more, but great work still comes\ndisproportionately from a few hotspots: the Bauhaus, the Manhattan Project,\nthe _New Yorker,_ Lockheed's Skunk Works, Xerox Parc.  \n  \nAt any given time there are a few hot topics and a few groups doing great work\non them, and it's nearly impossible to do good work yourself if you're too far\nremoved from one of these centers. You can push or pull these trends to some\nextent, but you can't break away from them. (Maybe _you_ can, but the Milanese\nLeonardo couldn't.)  \n  \n  \n  \n**Good design is often daring.** At every period of history, people have\nbelieved things that were just ridiculous, and believed them so strongly that\nyou risked ostracism or even violence by saying otherwise.  \n  \nIf our own time were any different, that would be remarkable. As far as I can\ntell it [isn't](say.html).  \n  \nThis problem afflicts not just every era, but in some degree every field. Much\nRenaissance art was in its time considered shockingly secular: according to\nVasari, Botticelli repented and gave up painting, and Fra Bartolommeo and\nLorenzo di Credi actually burned some of their work. Einstein's theory of\nrelativity offended many contemporary physicists, and was not fully accepted\nfor decades-- in France, not until the 1950s.  \n  \nToday's experimental error is tomorrow's new theory. If you want to discover\ngreat new things, then instead of turning a blind eye to the places where\nconventional wisdom and truth don't quite meet, you should pay particular\nattention to them.  \n  \n  \n  \nAs a practical matter, I think it's easier to see ugliness than to imagine\nbeauty. Most of the people who've made beautiful things seem to have done it\nby fixing something that they thought ugly. Great work usually seems to happen\nbecause someone sees something and thinks, _I could do better than that._\nGiotto saw traditional Byzantine madonnas painted according to a formula that\nhad satisfied everyone for centuries, and to him they looked wooden and\nunnatural. Copernicus was so troubled by a hack that all his contemporaries\ncould tolerate that he felt there must be a better solution.  \n  \nIntolerance for ugliness is not in itself enough. You have to understand a\nfield well before you develop a good nose for what needs fixing. You have to\ndo your homework. But as you become expert in a field, you'll start to hear\nlittle voices saying, _What a hack! There must be a better way._ Don't ignore\nthose voices. Cultivate them. The recipe for great work is: very exacting\ntaste, plus the ability to gratify it.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[Sullivan](https://sep.turbifycdn.com/ty/cdn/paulgraham/sullivan.html?t=1688221954&)\nactually said \"form ever follows function,\" but I think the usual misquotation\nis closer to what modernist architects meant.  \n  \nStephen G. Brush, \"Why was Relativity Accepted?\" _Phys. Perspect. 1 (1999)\n184-214.  \n  \n  \n_\n\nNovember 2020  \n  \nThere are some kinds of work that you can't do well without thinking\ndifferently from your peers. To be a successful scientist, for example, it's\nnot enough just to be correct. Your ideas have to be both correct and novel.\nYou can't publish papers saying things other people already know. You need to\nsay things no one else has realized yet.  \n  \nThe same is true for investors. It's not enough for a public market investor\nto predict correctly how a company will do. If a lot of other people make the\nsame prediction, the stock price will already reflect it, and there's no room\nto make money. The only valuable insights are the ones most other investors\ndon't share.  \n  \nYou see this pattern with startup founders too. You don't want to start a\nstartup to do something that everyone agrees is a good idea, or there will\nalready be other companies doing it. You have to do something that sounds to\nmost other people like a bad idea, but that you know isn't \u0097 like writing\nsoftware for a tiny computer used by a few thousand hobbyists, or starting a\nsite to let people rent airbeds on strangers' floors.  \n  \nDitto for essayists. An essay that told people things they already knew would\nbe boring. You have to tell them something [_new_](useful.html).  \n  \nBut this pattern isn't universal. In fact, it doesn't hold for most kinds of\nwork. In most kinds of work \u0097 to be an administrator, for example \u0097 all you\nneed is the first half. All you need is to be right. It's not essential that\neveryone else be wrong.  \n  \nThere's room for a little novelty in most kinds of work, but in practice\nthere's a fairly sharp distinction between the kinds of work where it's\nessential to be independent-minded, and the kinds where it's not.  \n  \nI wish someone had told me about this distinction when I was a kid, because\nit's one of the most important things to think about when you're deciding what\nkind of work you want to do. Do you want to do the kind of work where you can\nonly win by thinking differently from everyone else? I suspect most people's\nunconscious mind will answer that question before their conscious mind has a\nchance to. I know mine does.  \n  \nIndependent-mindedness seems to be more a matter of nature than nurture. Which\nmeans if you pick the wrong type of work, you're going to be unhappy. If\nyou're naturally independent-minded, you're going to find it frustrating to be\na middle manager. And if you're naturally conventional-minded, you're going to\nbe sailing into a headwind if you try to do original research.  \n  \nOne difficulty here, though, is that people are often mistaken about where\nthey fall on the spectrum from conventional- to independent-minded.\nConventional-minded people don't like to think of themselves as conventional-\nminded. And in any case, it genuinely feels to them as if they make up their\nown minds about everything. It's just a coincidence that their beliefs are\nidentical to their peers'. And the independent-minded, meanwhile, are often\nunaware how different their ideas are from conventional ones, at least till\nthey state them publicly. [1]  \n  \nBy the time they reach adulthood, most people know roughly how smart they are\n(in the narrow sense of ability to solve pre-set problems), because they're\nconstantly being tested and ranked according to it. But schools generally\nignore independent-mindedness, except to the extent they try to suppress it.\nSo we don't get anything like the same kind of feedback about how independent-\nminded we are.  \n  \nThere may even be a phenomenon like Dunning-Kruger at work, where the most\nconventional-minded people are confident that they're independent-minded,\nwhile the genuinely independent-minded worry they might not be independent-\nminded enough.  \n  \n___________  \n  \nCan you make yourself more independent-minded? I think so. This quality may be\nlargely inborn, but there seem to be ways to magnify it, or at least not to\nsuppress it.  \n  \nOne of the most effective techniques is one practiced unintentionally by most\nnerds: simply to be less aware what conventional beliefs are. It's hard to be\na conformist if you don't know what you're supposed to conform to. Though\nagain, it may be that such people already are independent-minded. A\nconventional-minded person would probably feel anxious not knowing what other\npeople thought, and make more effort to find out.  \n  \nIt matters a lot who you surround yourself with. If you're surrounded by\nconventional-minded people, it will constrain which ideas you can express, and\nthat in turn will constrain which ideas you have. But if you surround yourself\nwith independent-minded people, you'll have the opposite experience: hearing\nother people say surprising things will encourage you to, and to think of\nmore.  \n  \nBecause the independent-minded find it uncomfortable to be surrounded by\nconventional-minded people, they tend to self-segregate once they have a\nchance to. The problem with high school is that they haven't yet had a chance\nto. Plus high school tends to be an inward-looking little world whose\ninhabitants lack confidence, both of which magnify the forces of conformism.\nSo high school is often a [_bad time_](nerds.html) for the independent-minded.\nBut there is some advantage even here: it teaches you what to avoid. If you\nlater find yourself in a situation that makes you think \"this is like high\nschool,\" you know you should get out. [2]  \n  \nAnother place where the independent- and conventional-minded are thrown\ntogether is in successful startups. The founders and early employees are\nalmost always independent-minded; otherwise the startup wouldn't be\nsuccessful. But conventional-minded people greatly outnumber independent-\nminded ones, so as the company grows, the original spirit of independent-\nmindedness is inevitably diluted. This causes all kinds of problems besides\nthe obvious one that the company starts to suck. One of the strangest is that\nthe founders find themselves able to speak more freely with founders of other\ncompanies than with their own employees. [3]  \n  \nFortunately you don't have to spend all your time with independent-minded\npeople. It's enough to have one or two you can talk to regularly. And once you\nfind them, they're usually as eager to talk as you are; they need you too.\nAlthough universities no longer have the kind of monopoly they used to have on\neducation, good universities are still an excellent way to meet independent-\nminded people. Most students will still be conventional-minded, but you'll at\nleast find clumps of independent-minded ones, rather than the near zero you\nmay have found in high school.  \n  \nIt also works to go in the other direction: as well as cultivating a small\ncollection of independent-minded friends, to try to meet as many different\ntypes of people as you can. It will decrease the influence of your immediate\npeers if you have several other groups of peers. Plus if you're part of\nseveral different worlds, you can often import ideas from one to another.  \n  \nBut by different types of people, I don't mean demographically different. For\nthis technique to work, they have to think differently. So while it's an\nexcellent idea to go and visit other countries, you can probably find people\nwho think differently right around the corner. When I meet someone who knows a\nlot about something unusual (which includes practically everyone, if you dig\ndeep enough), I try to learn what they know that other people don't. There are\nalmost always surprises here. It's a good way to make conversation when you\nmeet strangers, but I don't do it to make conversation. I really want to know.  \n  \nYou can expand the source of influences in time as well as space, by reading\nhistory. When I read history I do it not just to learn what happened, but to\ntry to get inside the heads of people who lived in the past. How did things\nlook to them? This is hard to do, but worth the effort for the same reason\nit's worth travelling far to triangulate a point.  \n  \nYou can also take more explicit measures to prevent yourself from\nautomatically adopting conventional opinions. The most general is to cultivate\nan attitude of skepticism. When you hear someone say something, stop and ask\nyourself \"Is that true?\" Don't say it out loud. I'm not suggesting that you\nimpose on everyone who talks to you the burden of proving what they say, but\nrather that you take upon yourself the burden of evaluating what they say.  \n  \nTreat it as a puzzle. You know that some accepted ideas will later turn out to\nbe wrong. See if you can guess which. The end goal is not to find flaws in the\nthings you're told, but to find the new ideas that had been concealed by the\nbroken ones. So this game should be an exciting quest for novelty, not a\nboring protocol for intellectual hygiene. And you'll be surprised, when you\nstart asking \"Is this true?\", how often the answer is not an immediate yes. If\nyou have any imagination, you're more likely to have too many leads to follow\nthan too few.  \n  \nMore generally your goal should be not to let anything into your head\nunexamined, and things don't always enter your head in the form of statements.\nSome of the most powerful influences are implicit. How do you even notice\nthese? By standing back and watching how other people get their ideas.  \n  \nWhen you stand back at a sufficient distance, you can see ideas spreading\nthrough groups of people like waves. The most obvious are in fashion: you\nnotice a few people wearing a certain kind of shirt, and then more and more,\nuntil half the people around you are wearing the same shirt. You may not care\nmuch what you wear, but there are intellectual fashions too, and you\ndefinitely don't want to participate in those. Not just because you want\nsovereignty over your own thoughts, but because [_unfashionable_](nov.html)\nideas are disproportionately likely to lead somewhere interesting. The best\nplace to find undiscovered ideas is where no one else is looking. [4]  \n  \n___________  \n  \nTo go beyond this general advice, we need to look at the internal structure of\nindependent-mindedness \u0097 at the individual muscles we need to exercise, as it\nwere. It seems to me that it has three components: fastidiousness about truth,\nresistance to being told what to think, and curiosity.  \n  \nFastidiousness about truth means more than just not believing things that are\nfalse. It means being careful about degree of belief. For most people, degree\nof belief rushes unexamined toward the extremes: the unlikely becomes\nimpossible, and the probable becomes certain. [5] To the independent-minded,\nthis seems unpardonably sloppy. They're willing to have anything in their\nheads, from highly speculative hypotheses to (apparent) tautologies, but on\nsubjects they care about, everything has to be labelled with a carefully\nconsidered degree of belief. [6]  \n  \nThe independent-minded thus have a horror of ideologies, which require one to\naccept a whole collection of beliefs at once, and to treat them as articles of\nfaith. To an independent-minded person that would seem revolting, just as it\nwould seem to someone fastidious about food to take a bite of a submarine\nsandwich filled with a large variety of ingredients of indeterminate age and\nprovenance.  \n  \nWithout this fastidiousness about truth, you can't be truly independent-\nminded. It's not enough just to have resistance to being told what to think.\nThose kind of people reject conventional ideas only to replace them with the\nmost random conspiracy theories. And since these conspiracy theories have\noften been manufactured to capture them, they end up being less independent-\nminded than ordinary people, because they're subject to a much more exacting\nmaster than mere convention. [7]  \n  \nCan you increase your fastidiousness about truth? I would think so. In my\nexperience, merely thinking about something you're fastidious about causes\nthat fastidiousness to grow. If so, this is one of those rare virtues we can\nhave more of merely by wanting it. And if it's like other forms of\nfastidiousness, it should also be possible to encourage in children. I\ncertainly got a strong dose of it from my father. [8]  \n  \nThe second component of independent-mindedness, resistance to being told what\nto think, is the most visible of the three. But even this is often\nmisunderstood. The big mistake people make about it is to think of it as a\nmerely negative quality. The language we use reinforces that idea. You're _un_\nconventional. You _don't_ care what other people think. But it's not just a\nkind of immunity. In the most independent-minded people, the desire not to be\ntold what to think is a positive force. It's not mere skepticism, but an\nactive [_delight_](gba.html) in ideas that subvert the conventional wisdom,\nthe more counterintuitive the better.  \n  \nSome of the most novel ideas seemed at the time almost like practical jokes.\nThink how often your reaction to a novel idea is to laugh. I don't think it's\nbecause novel ideas are funny per se, but because novelty and humor share a\ncertain kind of surprisingness. But while not identical, the two are close\nenough that there is a definite correlation between having a sense of humor\nand being independent-minded \u0097 just as there is between being humorless and\nbeing conventional-minded. [9]  \n  \nI don't think we can significantly increase our resistance to being told what\nto think. It seems the most innate of the three components of independent-\nmindedness; people who have this quality as adults usually showed all too\nvisible signs of it as children. But if we can't increase our resistance to\nbeing told what to think, we can at least shore it up, by surrounding\nourselves with other independent-minded people.  \n  \nThe third component of independent-mindedness, curiosity, may be the most\ninteresting. To the extent that we can give a brief answer to the question of\nwhere novel ideas come from, it's curiosity. That's what people are usually\nfeeling before having them.  \n  \nIn my experience, independent-mindedness and curiosity predict one another\nperfectly. Everyone I know who's independent-minded is deeply curious, and\neveryone I know who's conventional-minded isn't. Except, curiously, children.\nAll small children are curious. Perhaps the reason is that even the\nconventional-minded have to be curious in the beginning, in order to learn\nwhat the conventions are. Whereas the independent-minded are the gluttons of\ncuriosity, who keep eating even after they're full. [10]  \n  \nThe three components of independent-mindedness work in concert: fastidiousness\nabout truth and resistance to being told what to think leave space in your\nbrain, and curiosity finds new ideas to fill it.  \n  \nInterestingly, the three components can substitute for one another in much the\nsame way muscles can. If you're sufficiently fastidious about truth, you don't\nneed to be as resistant to being told what to think, because fastidiousness\nalone will create sufficient gaps in your knowledge. And either one can\ncompensate for curiosity, because if you create enough space in your brain,\nyour discomfort at the resulting vacuum will add force to your curiosity. Or\ncuriosity can compensate for them: if you're sufficiently curious, you don't\nneed to clear space in your brain, because the new ideas you discover will\npush out the conventional ones you acquired by default.  \n  \nBecause the components of independent-mindedness are so interchangeable, you\ncan have them to varying degrees and still get the same result. So there is\nnot just a single model of independent-mindedness. Some independent-minded\npeople are openly subversive, and others are quietly curious. They all know\nthe secret handshake though.  \n  \nIs there a way to cultivate curiosity? To start with, you want to avoid\nsituations that suppress it. How much does the work you're currently doing\nengage your curiosity? If the answer is \"not much,\" maybe you should change\nsomething.  \n  \nThe most important active step you can take to cultivate your curiosity is\nprobably to seek out the topics that engage it. Few adults are equally curious\nabout everything, and it doesn't seem as if you can choose which topics\ninterest you. So it's up to you to [_find_](genius.html) them. Or invent them,\nif necessary.  \n  \nAnother way to increase your curiosity is to indulge it, by investigating\nthings you're interested in. Curiosity is unlike most other appetites in this\nrespect: indulging it tends to increase rather than to sate it. Questions lead\nto more questions.  \n  \nCuriosity seems to be more individual than fastidiousness about truth or\nresistance to being told what to think. To the degree people have the latter\ntwo, they're usually pretty general, whereas different people can be curious\nabout very different things. So perhaps curiosity is the compass here.\nPerhaps, if your goal is to discover novel ideas, your motto should not be \"do\nwhat you love\" so much as \"do what you're curious about.\"  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] One convenient consequence of the fact that no one identifies as\nconventional-minded is that you can say what you like about conventional-\nminded people without getting in too much trouble. When I wrote [_\"The Four\nQuadrants of Conformism\"_](conformism.html) I expected a firestorm of rage\nfrom the aggressively conventional-minded, but in fact it was quite muted.\nThey sensed that there was something about the essay that they disliked\nintensely, but they had a hard time finding a specific passage to pin it on.  \n  \n[2] When I ask myself what in my life is like high school, the answer is\nTwitter. It's not just full of conventional-minded people, as anything its\nsize will inevitably be, but subject to violent storms of conventional-\nmindedness that remind me of descriptions of Jupiter. But while it probably is\na net loss to spend time there, it has at least made me think more about the\ndistinction between independent- and conventional-mindedness, which I probably\nwouldn't have done otherwise.  \n  \n[3] The decrease in independent-mindedness in growing startups is still an\nopen problem, but there may be solutions.  \n  \nFounders can delay the problem by making a conscious effort only to hire\nindependent-minded people. Which of course also has the ancillary benefit that\nthey have better ideas.  \n  \nAnother possible solution is to create policies that somehow disrupt the force\nof conformism, much as control rods slow chain reactions, so that the\nconventional-minded aren't as dangerous. The physical separation of Lockheed's\nSkunk Works may have had this as a side benefit. Recent examples suggest\nemployee forums like Slack may not be an unmitigated good.  \n  \nThe most radical solution would be to grow revenues without growing the\ncompany. You think hiring that junior PR person will be cheap, compared to a\nprogrammer, but what will be the effect on the average level of independent-\nmindedness in your company? (The growth in staff relative to faculty seems to\nhave had a similar effect on universities.) Perhaps the rule about outsourcing\nwork that's not your \"core competency\" should be augmented by one about\noutsourcing work done by people who'd ruin your culture as employees.  \n  \nSome investment firms already seem to be able to grow revenues without growing\nthe number of employees. Automation plus the ever increasing articulation of\nthe \"tech stack\" suggest this may one day be possible for product companies.  \n  \n[4] There are intellectual fashions in every field, but their influence\nvaries. One of the reasons politics, for example, tends to be boring is that\nit's so extremely subject to them. The threshold for having opinions about\npolitics is much [_lower_](identity.html) than the one for having opinions\nabout set theory. So while there are some ideas in politics, in practice they\ntend to be swamped by waves of intellectual fashion.  \n  \n[5] The conventional-minded are often fooled by the strength of their opinions\ninto believing that they're independent-minded. But strong convictions are not\na sign of independent-mindedness. Rather the opposite.  \n  \n[6] Fastidiousness about truth doesn't imply that an independent-minded person\nwon't be dishonest, but that he won't be deluded. It's sort of like the\ndefinition of a gentleman as someone who is never unintentionally rude.  \n  \n[7] You see this especially among political extremists. They think themselves\nnonconformists, but actually they're niche conformists. Their opinions may be\ndifferent from the average person's, but they are often more influenced by\ntheir peers' opinions than the average person's are.  \n  \n[8] If we broaden the concept of fastidiousness about truth so that it\nexcludes pandering, bogusness, and pomposity as well as falsehood in the\nstrict sense, our model of independent-mindedness can expand further into the\narts.  \n  \n[9] This correlation is far from perfect, though. G\u00f6del and Dirac don't seem\nto have been very strong in the humor department. But someone who is both\n\"neurotypical\" and humorless is very likely to be conventional-minded.  \n  \n[10] Exception: gossip. Almost everyone is curious about gossip.  \n  \n  \n  \n**Thanks** to Trevor Blackwell, Paul Buchheit, Patrick Collison, Jessica\nLivingston, Robert Morris, Harj Taggar, and Peter Thiel for reading drafts of\nthis.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nJuly 2010  \n  \nI realized recently that what one thinks about in the shower in the morning is\nmore important than I'd thought. I knew it was a good time to have ideas. Now\nI'd go further: now I'd say it's hard to do a really good job on anything you\ndon't think about in the shower.  \n  \nEveryone who's worked on difficult problems is probably familiar with the\nphenomenon of working hard to figure something out, failing, and then suddenly\nseeing the answer a bit later while doing something else. There's a kind of\nthinking you do without trying to. I'm increasingly convinced this type of\nthinking is not merely helpful in solving hard problems, but necessary. The\ntricky part is, you can only control it indirectly. [1]  \n  \nI think most people have one top idea in their mind at any given time. That's\nthe idea their thoughts will drift toward when they're allowed to drift\nfreely. And this idea will thus tend to get all the benefit of that type of\nthinking, while others are starved of it. Which means it's a disaster to let\nthe wrong idea become the top one in your mind.  \n  \nWhat made this clear to me was having an idea I didn't want as the top one in\nmy mind for two long stretches.  \n  \nI'd noticed startups got way less done when they started raising money, but it\nwas not till we ourselves raised money that I understood why. The problem is\nnot the actual time it takes to meet with investors. The problem is that once\nyou start raising money, raising money becomes the top idea in your mind. That\nbecomes what you think about when you take a shower in the morning. And that\nmeans other questions aren't.  \n  \nI'd hated raising money when I was running Viaweb, but I'd forgotten why I\nhated it so much. When we raised money for Y Combinator, I remembered. Money\nmatters are particularly likely to become the top idea in your mind. The\nreason is that they have to be. It's hard to get money. It's not the sort of\nthing that happens by default. It's not going to happen unless you let it\nbecome the thing you think about in the shower. And then you'll make little\nprogress on anything else you'd rather be working on. [2]  \n  \n(I hear similar complaints from friends who are professors. Professors\nnowadays seem to have become professional fundraisers who do a little research\non the side. It may be time to fix that.)  \n  \nThe reason this struck me so forcibly is that for most of the preceding 10\nyears I'd been able to think about what I wanted. So the contrast when I\ncouldn't was sharp. But I don't think this problem is unique to me, because\njust about every startup I've seen grinds to a halt when they start raising\nmoney \u0097 or [talking to acquirers](corpdev.html).  \n  \nYou can't directly control where your thoughts drift. If you're controlling\nthem, they're not drifting. But you can control them indirectly, by\ncontrolling what situations you let yourself get into. That has been the\nlesson for me: be careful what you let become critical to you. Try to get\nyourself into situations where the most urgent problems are ones you want to\nthink about.  \n  \nYou don't have complete control, of course. An emergency could push other\nthoughts out of your head. But barring emergencies you have a good deal of\nindirect control over what becomes the top idea in your mind.  \n  \nI've found there are two types of thoughts especially worth avoiding \u0097\nthoughts like the Nile Perch in the way they push out more interesting ideas.\nOne I've already mentioned: thoughts about money. Getting money is almost by\ndefinition an attention sink. The other is disputes. These too are engaging in\nthe wrong way: they have the same velcro-like shape as genuinely interesting\nideas, but without the substance. So avoid disputes if you want to get real\nwork done. [3]  \n  \nEven Newton fell into this trap. After publishing his theory of colors in 1672\nhe found himself distracted by disputes for years, finally concluding that the\nonly solution was to stop publishing:\n\n> I see I have made myself a slave to Philosophy, but if I get free of Mr\n> Linus's business I will resolutely bid adew to it eternally, excepting what\n> I do for my privat satisfaction or leave to come out after me. For I see a\n> man must either resolve to put out nothing new or become a slave to defend\n> it. [4]\n\nLinus and his students at Liege were among the more tenacious critics.\nNewton's biographer Westfall seems to feel he was overreacting:\n\n> Recall that at the time he wrote, Newton's \"slavery\" consisted of five\n> replies to Liege, totalling fourteen printed pages, over the course of a\n> year.\n\nI'm more sympathetic to Newton. The problem was not the 14 pages, but the pain\nof having this stupid controversy constantly reintroduced as the top idea in a\nmind that wanted so eagerly to think about other things.  \n  \nTurning the other cheek turns out to have selfish advantages. Someone who does\nyou an injury hurts you twice: first by the injury itself, and second by\ntaking up your time afterward thinking about it. If you learn to ignore\ninjuries you can at least avoid the second half. I've found I can to some\nextent avoid thinking about nasty things people have done to me by telling\nmyself: this doesn't deserve space in my head. I'm always delighted to find\nI've forgotten the details of disputes, because that means I hadn't been\nthinking about them. My wife thinks I'm more forgiving than she is, but my\nmotives are purely selfish.  \n  \nI suspect a lot of people aren't sure what's the top idea in their mind at any\ngiven time. I'm often mistaken about it. I tend to think it's the idea I'd\nwant to be the top one, rather than the one that is. But it's easy to figure\nthis out: just take a shower. What topic do your thoughts keep returning to?\nIf it's not what you want to be thinking about, you may want to change\nsomething.  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] No doubt there are already names for this type of thinking, but I call it\n\"ambient thought.\"  \n  \n[2] This was made particularly clear in our case, because neither of the funds\nwe raised was difficult, and yet in both cases the process dragged on for\nmonths. Moving large amounts of money around is never something people treat\ncasually. The attention required increases with the amount\u2014maybe not linearly,\nbut definitely monotonically.  \n  \n[3] Corollary: Avoid becoming an administrator, or your job will consist of\ndealing with money and disputes.  \n  \n[4] Letter to Oldenburg, quoted in Westfall, Richard, _Life of Isaac Newton_ ,\np. 107.  \n  \n**Thanks** to Sam Altman, Patrick Collison, Jessica Livingston, and Robert\nMorris for reading drafts of this.  \n  \n\nFebruary 2008  \n  \nA user on Hacker News recently posted a\n[comment](http://news.ycombinator.com/item?id=116938) that set me thinking:\n\n> Something about hacker culture that never really set well with me was this \u0097\n> the nastiness. ... I just don't understand why people troll like they do.\n\nI've thought a lot over the last couple years about the problem of trolls.\nIt's an old one, as old as forums, but we're still just learning what the\ncauses are and how to address them.  \n  \nThere are two senses of the word \"troll.\" In the original sense it meant\nsomeone, usually an outsider, who deliberately stirred up fights in a forum by\nsaying controversial things. [1] For example, someone who didn't use a certain\nprogramming language might go to a forum for users of that language and make\ndisparaging remarks about it, then sit back and watch as people rose to the\nbait. This sort of trolling was in the nature of a practical joke, like\nletting a bat loose in a room full of people.  \n  \nThe definition then spread to people who behaved like assholes in forums,\nwhether intentionally or not. Now when people talk about trolls they usually\nmean this broader sense of the word. Though in a sense this is historically\ninaccurate, it is in other ways more accurate, because when someone is being\nan asshole it's usually uncertain even in their own mind how much is\ndeliberate. That is arguably one of the defining qualities of an asshole.  \n  \nI think trolling in the broader sense has four causes. The most important is\ndistance. People will say things in anonymous forums that they'd never dare\nsay to someone's face, just as they'll do things in cars that they'd never do\nas pedestrians \u0097 like tailgate people, or honk at them, or cut them off.  \n  \nTrolling tends to be particularly bad in forums related to computers, and I\nthink that's due to the kind of people you find there. Most of them (myself\nincluded) are more comfortable dealing with abstract ideas than with people.\nHackers can be abrupt even in person. Put them on an anonymous forum, and the\nproblem gets worse.  \n  \nThe third cause of trolling is incompetence. If you disagree with something,\nit's easier to say \"you suck\" than to figure out and explain exactly what you\ndisagree with. You're also safe that way from refutation. In this respect\ntrolling is a lot like graffiti. Graffiti happens at the intersection of\nambition and incompetence: people want to make their mark on the world, but\nhave no other way to do it than literally making a mark on the world. [2]  \n  \nThe final contributing factor is the culture of the forum. Trolls are like\nchildren (many _are_ children) in that they're capable of a wide range of\nbehavior depending on what they think will be tolerated. In a place where\nrudeness isn't tolerated, most can be polite. But vice versa as well.  \n  \nThere's a sort of Gresham's Law of trolls: trolls are willing to use a forum\nwith a lot of thoughtful people in it, but thoughtful people aren't willing to\nuse a forum with a lot of trolls in it. Which means that once trolling takes\nhold, it tends to become the dominant culture. That had already happened to\nSlashdot and Digg by the time I paid attention to comment threads there, but I\nwatched it happen to Reddit.  \n  \nNews.YC is, among other things, an experiment to see if this fate can be\navoided. The sites's [guidelines](http://ycombinator.com/newsguidelines.html)\nexplicitly ask people not to say things they wouldn't say face to face. If\nsomeone starts being rude, other users will step in and tell them to stop. And\nwhen people seem to be deliberately trolling, we ban them ruthlessly.  \n  \nTechnical tweaks may also help. On Reddit, votes on your comments don't affect\nyour karma score, but they do on News.YC. And it does seem to influence people\nwhen they can see their reputation in the eyes of their peers drain away after\nmaking an asshole remark. Often users have second thoughts and delete such\ncomments.  \n  \nOne might worry this would prevent people from expressing controversial ideas,\nbut empirically that doesn't seem to be what happens. When people say\nsomething substantial that gets modded down, they stubbornly leave it up. What\npeople delete are wisecracks, because they have less invested in them.  \n  \nSo far the experiment seems to be working. The level of conversation on\nNews.YC is as high as on any forum I've seen. But we still only have about\n8,000 uniques a day. The conversations on Reddit were good when it was that\nsmall. The challenge is whether we can keep things this way.  \n  \nI'm optimistic we will. We're not depending just on technical tricks. The core\nusers of News.YC are mostly refugees from other sites that were overrun by\ntrolls. They feel about trolls roughly the way refugees from Cuba or Eastern\nEurope feel about dictatorships. So there are a lot of people working to keep\nthis from happening again.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] I mean forum in the general sense of a place to exchange views. The\noriginal Internet forums were not web sites but Usenet newsgroups.  \n  \n[2] I'm talking here about everyday tagging. Some graffiti is quite impressive\n(anything becomes art if you do it well enough) but the median tag is just\nvisual spam.  \n  \n\nApril 2009  \n  \n[Om Malik](http://gigaom.com/2009/04/03/google-may-buy-twitter-or-not-but-why-\nis-twitter-so-hot/) is the most recent of many people to ask why Twitter is\nsuch a big deal.  \n  \nThe reason is that it's a new messaging protocol, where you don't specify the\nrecipients. New protocols are rare. Or more precisely, new protocols that take\noff are. There are only a handful of commonly used ones: TCP/IP (the\nInternet), SMTP (email), HTTP (the web), and so on. So any new protocol is a\nbig deal. But Twitter is a protocol owned by a private company. That's even\nrarer.  \n  \nCuriously, the fact that the founders of Twitter have been slow to monetize it\nmay in the long run prove to be an advantage. Because they haven't tried to\ncontrol it too much, Twitter feels to everyone like previous protocols. One\nforgets it's owned by a private company. That must have made it easier for\nTwitter to spread.  \n  \n\nNovember 2004  \n  \n _(This is a new essay for the Japanese edition of[Hackers &\nPainters](http://www.amazon.com/exec/obidos/tg/detail/-/0596006624). It tries\nto explain why Americans make some things well and others badly.)_  \n  \nA few years ago an Italian friend of mine travelled by train from Boston to\nProvidence. She had only been in America for a couple weeks and hadn't seen\nmuch of the country yet. She arrived looking astonished. \"It's so _ugly!\"_  \n  \nPeople from other rich countries can scarcely imagine the squalor of the man-\nmade bits of America. In travel books they show you mostly natural\nenvironments: the Grand Canyon, whitewater rafting, horses in a field. If you\nsee pictures with man-made things in them, it will be either a view of the New\nYork skyline shot from a discreet distance, or a carefully cropped image of a\nseacoast town in Maine.  \n  \nHow can it be, visitors must wonder. How can the richest country in the world\nlook like this?  \n  \nOddly enough, it may not be a coincidence. Americans are good at some things\nand bad at others. We're good at making movies and software, and bad at making\ncars and cities. And I think we may be good at what we're good at for the same\nreason we're bad at what we're bad at. We're impatient. In America, if you\nwant to do something, you don't worry that it might come out badly, or upset\ndelicate social balances, or that people might think you're getting above\nyourself. If you want to do something, as Nike says, _just do it._  \n  \n  \n  \nThis works well in some fields and badly in others. I suspect it works in\nmovies and software because they're both messy processes. \"Systematic\" is the\nlast word I'd use to describe the way [good programmers](gh.html) write\nsoftware. Code is not something they assemble painstakingly after careful\nplanning, like the pyramids. It's something they plunge into, working fast and\nconstantly changing their minds, like a charcoal sketch.  \n  \nIn software, paradoxical as it sounds, good craftsmanship means working fast.\nIf you work slowly and meticulously, you merely end up with a very fine\nimplementation of your initial, mistaken idea. Working slowly and meticulously\nis premature optimization. Better to get a prototype done fast, and see what\nnew ideas it gives you.  \n  \nIt sounds like making movies works a lot like making software. Every movie is\na Frankenstein, full of imperfections and usually quite different from what\nwas originally envisioned. But interesting, and finished fairly quickly.  \n  \nI think we get away with this in movies and software because they're both\nmalleable mediums. Boldness pays.  And if at the last minute two parts don't\nquite fit, you can figure out some hack that will at least conceal the\nproblem.  \n  \nNot so with cars, or cities. They are all too physical. If the car business\nworked like software or movies, you'd surpass your competitors by making a car\nthat weighed only fifty pounds, or folded up to the size of a motorcycle when\nyou wanted to park it. But with physical products there are more constraints.\nYou don't win by dramatic innovations so much as by good taste and attention\nto detail.  \n  \nThe trouble is, the very word \"taste\" sounds slightly ridiculous to American\nears. It seems pretentious, or frivolous, or even effeminate. Blue staters\nthink it's \"subjective,\" and red staters think it's for sissies. So anyone in\nAmerica who really cares about design will be sailing upwind.  \n  \n  \n  \nTwenty years ago we used to hear that the problem with the US car industry was\nthe workers. We don't hear that any more now that Japanese companies are\nbuilding cars in the US. The problem with American cars is bad design. You can\nsee that just by looking at them.  \n  \nAll that extra sheet metal on the [AMC Matador](matador.html) wasn't added by\nthe workers. The problem with this car, as with American cars today, is that\nit was designed by marketing people instead of designers.  \n  \nWhy do the Japanese make better cars than us? Some say it's because their\nculture encourages cooperation. That may come into it. But in this case it\nseems more to the point that their culture prizes design and craftsmanship.  \n  \nFor centuries the Japanese have made finer things than we have in the West.\nWhen you look at swords they made in 1200, you just can't believe the date on\nthe label is right. Presumably their cars fit together more precisely than\nours for the same reason their joinery always has. They're obsessed with\nmaking things well.  \n  \nNot us. When we make something in America, our aim is just to get the job\ndone. Once we reach that point, we take one of two routes. We can stop there,\nand have something crude but serviceable, like a Vise-grip. Or we can improve\nit, which usually means encrusting it with gratuitous ornament. When we want\nto make a car \"better,\" we stick [tail fins](59eldorado.html) on it, or make\nit [longer](75eldorado.html), or make the [windows smaller](04magnum.html),\ndepending on the current fashion.  \n  \nDitto for houses. In America you can have either a flimsy box banged together\nout of two by fours and drywall, or a McMansion-- a flimsy box banged together\nout of two by fours and drywall, but larger, more dramatic-looking, and full\nof expensive fittings. Rich people don't get better design or craftsmanship;\nthey just get a larger, more conspicuous version of the standard house.  \n  \nWe don't especially prize design or craftsmanship here. What we like is speed,\nand we're willing to do something in an ugly way to get it done fast. In some\nfields, like software or movies, this is a net win.  \n  \nBut it's not just that software and movies are malleable mediums. In those\nbusinesses, the designers (though they're not generally called that) have more\npower. Software companies, at least successful ones, tend to be run by\nprogrammers. And in the film industry, though producers may second-guess\ndirectors, the director controls most of what appears on the screen. And so\nAmerican software and movies, and Japanese cars, all have this in common: the\npeople in charge care about design-- the former because the designers are in\ncharge, and the latter because the whole culture cares about design.  \n  \nI think most Japanese executives would be horrified at the idea of making a\nbad car. Whereas American executives, in their hearts, still believe the most\nimportant thing about a car is the image it projects. Make a good car? What's\n\"good?\" It's so _subjective._ If you want to know how to design a car, ask a\nfocus group.  \n  \nInstead of relying on their own internal design compass (like Henry Ford did),\nAmerican car companies try to make what marketing people think consumers want.\nBut it isn't working. American cars continue to lose market share. And the\nreason is that the customer doesn't want what he thinks he wants.  \n  \nLetting focus groups design your cars for you only wins in the short term. In\nthe long term, it pays to bet on good design. The focus group may say they\nwant the meretricious feature du jour, but what they want even more is to\nimitate sophisticated buyers, and they, though a small minority, really do\ncare about good design. Eventually the pimps and drug dealers notice that the\ndoctors and lawyers have switched from Cadillac to Lexus, and do the same.  \n  \nApple is an interesting counterexample to the general American trend. If you\nwant to buy a nice CD player, you'll probably buy a Japanese one. But if you\nwant to buy an MP3 player, you'll probably buy an iPod. What happened? Why\ndoesn't Sony dominate MP3 players? Because Apple is in the consumer\nelectronics business now, and unlike other American companies, they're\nobsessed with good design. Or more precisely, their CEO is.  \n  \nI just got an iPod, and it's not just nice. It's _surprisingly_ nice. For it\nto surprise me, it must be satisfying expectations I didn't know I had. No\nfocus group is going to discover those. Only a great designer can.  \n  \n  \n  \nCars aren't the worst thing we make in America. Where the just-do-it model\nfails most dramatically is in our cities-- or rather, [exurbs](denver.html).\nIf real estate developers operated on a large enough scale, if they built\nwhole towns, market forces would compel them to build towns that didn't suck.\nBut they only build a couple office buildings or suburban streets at a time,\nand the result is so depressing that the inhabitants consider it a great treat\nto fly to Europe and spend a couple weeks living what is, for people there,\njust everyday life. [1]  \n  \nBut the just-do-it model does have advantages. It seems the clear winner for\ngenerating wealth and technical innovations (which are practically the same\nthing). I think speed is the reason. It's hard to create wealth by making a\ncommodity. The real value is in things that are new, and if you want to be the\nfirst to make something, it helps to work fast. For better or worse, the just-\ndo-it model is fast, whether you're Dan Bricklin writing the prototype of\nVisiCalc in a weekend, or a real estate developer building a block of shoddy\ncondos in a month.  \n  \nIf I had to choose between the just-do-it model and the careful model, I'd\nprobably choose just-do-it. But do we have to choose? Could we have it both\nways? Could Americans have nice places to live without undermining the\nimpatient, individualistic spirit that makes us good at software? Could other\ncountries introduce more individualism into their technology companies and\nresearch labs without having it metastasize as strip malls? I'm optimistic.\nIt's harder to say about other countries, but in the US, at least, I think we\ncan have both.  \n  \nApple is an encouraging example. They've managed to preserve enough of the\nimpatient, hackerly spirit you need to write software. And yet when you pick\nup a new Apple laptop, well, it doesn't seem American. It's too perfect. It\nseems as if it must have been made by a Swedish or a Japanese company.  \n  \nIn many technologies, version 2 has higher resolution. Why not in design\ngenerally? I think we'll gradually see national characters superseded by\noccupational characters: hackers in Japan will be allowed to behave with a\n[willfulness](gba.html) that would now seem unJapanese, and products in\nAmerica will be designed with an insistence on [taste](taste.html) that would\nnow seem unAmerican. Perhaps the most successful countries, in the future,\nwill be those most willing to ignore what are now considered national\ncharacters, and do each kind of work in the way that works best. Race you.  \n  \n  \n  \n**Notes**  \n  \n[1] Japanese cities are ugly too, but for different reasons. Japan is prone to\nearthquakes, so buildings are traditionally seen as temporary; there is no\ngrand tradition of city planning like the one Europeans inherited from Rome.\nThe other cause is the notoriously corrupt relationship between the government\nand construction companies.  \n  \n**Thanks** to Trevor Blackwell, Barry Eisler, Sarah Harlin, Shiro Kawai,\nJessica Livingston, Jackie McDonough, Robert Morris, and Eric Raymond for\nreading drafts of this.  \n  \n  \n\nSeptember 2022  \n  \nI recently told applicants to Y Combinator that the best advice I could give\nfor getting in, per word, was\n\n> Explain what you've learned from users.\n\nThat tests a lot of things: whether you're paying attention to users, how well\nyou understand them, and even how much they need what you're making.  \n  \nAfterward I asked myself the same question. What have I learned from YC's\nusers, the startups we've funded?  \n  \nThe first thing that came to mind was that most startups have the same\nproblems. No two have exactly the same problems, but it's surprising how much\nthe problems remain the same, regardless of what they're making. Once you've\nadvised 100 startups all doing different things, you rarely encounter problems\nyou haven't seen before.  \n  \nThis fact is one of the things that makes YC work. But I didn't know it when\nwe started YC. I only had a few data points: our own startup, and those\nstarted by friends. It was a surprise to me how often the same problems recur\nin different forms. Many later stage investors might never realize this,\nbecause later stage investors might not advise 100 startups in their whole\ncareer, but a YC partner will get this much experience in the first year or\ntwo.  \n  \nThat's one advantage of funding large numbers of early stage companies rather\nthan smaller numbers of later-stage ones. You get a lot of data. Not just\nbecause you're looking at more companies, but also because more goes wrong.  \n  \nBut knowing (nearly) all the problems startups can encounter doesn't mean that\nadvising them can be automated, or reduced to a formula. There's no substitute\nfor individual office hours with a YC partner. Each startup is unique, which\nmeans they have to be advised by specific partners who know them well. [1]  \n  \nWe learned that the hard way, in the notorious \"batch that broke YC\" in the\nsummer of 2012. Up till that point we treated the partners as a pool. When a\nstartup requested office hours, they got the next available slot posted by any\npartner. That meant every partner had to know every startup. This worked fine\nup to 60 startups, but when the batch grew to 80, everything broke. The\nfounders probably didn't realize anything was wrong, but the partners were\nconfused and unhappy because halfway through the batch they still didn't know\nall the companies yet. [2]  \n  \nAt first I was puzzled. How could things be fine at 60 startups and broken at\n80? It was only a third more. Then I realized what had happened. We were using\nan _O(n 2)_ algorithm. So of course it blew up.  \n  \nThe solution we adopted was the classic one in these situations. We sharded\nthe batch into smaller groups of startups, each overseen by a dedicated group\nof partners. That fixed the problem, and has worked fine ever since. But the\nbatch that broke YC was a powerful demonstration of how individualized the\nprocess of advising startups has to be.  \n  \nAnother related surprise is how bad founders can be at realizing what their\nproblems are. Founders will sometimes come in to talk about some problem, and\nwe'll discover another much bigger one in the course of the conversation. For\nexample (and this case is all too common), founders will come in to talk about\nthe difficulties they're having raising money, and after digging into their\nsituation, it turns out the reason is that the company is doing badly, and\ninvestors can tell. Or founders will come in worried that they still haven't\ncracked the problem of user acquisition, and the reason turns out to be that\ntheir product isn't good enough. There have been times when I've asked \"Would\nyou use this yourself, if you hadn't built it?\" and the founders, on thinking\nabout it, said \"No.\" Well, there's the reason you're having trouble getting\nusers.  \n  \nOften founders know what their problems are, but not their relative\nimportance. [3] They'll come in to talk about three problems they're worrying\nabout. One is of moderate importance, one doesn't matter at all, and one will\nkill the company if it isn't addressed immediately. It's like watching one of\nthose horror movies where the heroine is deeply upset that her boyfriend\ncheated on her, and only mildly curious about the door that's mysteriously\najar. You want to say: never mind about your boyfriend, think about that door!\nFortunately in office hours you can. So while startups still die with some\nregularity, it's rarely because they wandered into a room containing a\nmurderer. The YC partners can warn them where the murderers are.  \n  \nNot that founders listen. That was another big surprise: how often founders\ndon't listen to us. A couple weeks ago I talked to a partner who had been\nworking for YC for a couple batches and was starting to see the pattern. \"They\ncome back a year later,\" she said, \"and say 'We wish we'd listened to you.'\"  \n  \nIt took me a long time to figure out why founders don't listen. At first I\nthought it was mere stubbornness. That's part of the reason, but another and\nprobably more important reason is that so much about startups is\n[counterintuitive](before.html). And when you tell someone something\ncounterintuitive, what it sounds to them is wrong. So the reason founders\ndon't listen to us is that they don't _believe_ us. At least not till\nexperience teaches them otherwise. [4]  \n  \nThe reason startups are so counterintuitive is that they're so different from\nmost people's other experiences. No one knows what it's like except those\nwho've done it. Which is why YC partners should usually have been founders\nthemselves. But strangely enough, the counterintuitiveness of startups turns\nout to be another of the things that make YC work. If it weren't\ncounterintuitive, founders wouldn't need our advice about how to do it.  \n  \nFocus is doubly important for early stage startups, because not only do they\nhave a hundred different problems, they don't have anyone to work on them\nexcept the founders. If the founders focus on things that don't matter,\nthere's no one focusing on the things that do. So the essence of what happens\nat YC is to figure out which problems matter most, then cook up ideas for\nsolving them \u2014 ideally at a resolution of a week or less \u2014 and then try those\nideas and measure how well they worked. The focus is on action, with\nmeasurable, near-term results.  \n  \nThis doesn't imply that founders should rush forward regardless of the\nconsequences. If you correct course at a high enough frequency, you can be\nsimultaneously decisive at a micro scale and tentative at a macro scale. The\nresult is a somewhat winding path, but executed very rapidly, like the path a\nrunning back takes downfield. And in practice there's less backtracking than\nyou might expect. Founders usually guess right about which direction to run\nin, especially if they have someone experienced like a YC partner to bounce\ntheir hypotheses off. And when they guess wrong, they notice fast, because\nthey'll talk about the results at office hours the next week. [5]  \n  \nA small improvement in navigational ability can make you a lot faster, because\nit has a double effect: the path is shorter, and you can travel faster along\nit when you're more certain it's the right one. That's where a lot of YC's\nvalue lies, in helping founders get an extra increment of focus that lets them\nmove faster. And since moving fast is the essence of a startup, YC in effect\nmakes startups more startup-like.  \n  \nSpeed defines startups. Focus enables speed. YC improves focus.  \n  \nWhy are founders uncertain about what to do? Partly because startups almost by\ndefinition are doing something new, which means no one knows how to do it yet,\nor in most cases even what \"it\" is. Partly because startups are so\ncounterintuitive generally. And partly because many founders, especially young\nand ambitious ones, have been trained to win the wrong way. That took me years\nto figure out. The educational system in most countries trains you to win by\n[hacking the test](lesson.html) instead of actually doing whatever it's\nsupposed to measure. But that stops working when you start a startup. So part\nof what YC does is to retrain founders to stop trying to hack the test. (It\ntakes a surprisingly long time. A year in, you still see them reverting to\ntheir old habits.)  \n  \nYC is not simply more experienced founders passing on their knowledge. It's\nmore like specialization than apprenticeship. The knowledge of the YC partners\nand the founders have different shapes: It wouldn't be worthwhile for a\nfounder to acquire the encyclopedic knowledge of startup problems that a YC\npartner has, just as it wouldn't be worthwhile for a YC partner to acquire the\ndepth of domain knowledge that a founder has. That's why it can still be\nvaluable for an experienced founder to do YC, just as it can still be valuable\nfor an experienced athlete to have a coach.  \n  \nThe other big thing YC gives founders is colleagues, and this may be even more\nimportant than the advice of partners. If you look at history, great work\nclusters around certain places and institutions: Florence in the late 15th\ncentury, the University of G\u00f6ttingen in the late 19th, _The New Yorker_ under\nRoss, Bell Labs, Xerox PARC. However good you are, good colleagues make you\nbetter. Indeed, very ambitious people probably need colleagues more than\nanyone else, because they're so starved for them in everyday life.  \n  \nWhether or not YC manages one day to be listed alongside those famous\nclusters, it won't be for lack of trying. We were very aware of this\nhistorical phenomenon and deliberately designed YC to be one. By this point\nit's not bragging to say that it's the biggest cluster of great startup\nfounders. Even people trying to attack YC concede that.  \n  \nColleagues and startup founders are two of the most powerful forces in the\nworld, so you'd expect it to have a big effect to combine them. Before YC, to\nthe extent people thought about the question at all, most assumed they\ncouldn't be combined \u2014 that loneliness was the price of independence. That was\nhow it felt to us when we started our own startup in Boston in the 1990s. We\nhad a handful of older people we could go to for advice (of varying quality),\nbut no peers. There was no one we could commiserate with about the misbehavior\nof investors, or speculate with about the future of technology. I often tell\nfounders to make something they themselves want, and YC is certainly that: it\nwas designed to be exactly what we wanted when we were starting a startup.  \n  \nOne thing we wanted was to be able to get seed funding without having to make\nthe rounds of random rich people. That has become a commodity now, at least in\nthe US. But great colleagues can never become a commodity, because the fact\nthat they cluster in some places means they're proportionally absent from the\nrest.  \n  \nSomething magical happens where they do cluster though. The energy in the room\nat a YC dinner is like nothing else I've experienced. We would have been happy\njust to have one or two other startups to talk to. When you have a whole\nroomful it's another thing entirely.  \n  \nYC founders aren't just inspired by one another. They also help one another.\nThat's the happiest thing I've learned about startup founders: how generous\nthey can be in helping one another. We noticed this in the first batch and\nconsciously designed YC to magnify it. The result is something far more\nintense than, say, a university. Between the partners, the alumni, and their\nbatchmates, founders are surrounded by people who want to help them, and can.  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] This is why I've never liked it when people refer to YC as a \"bootcamp.\"\nIt's intense like a bootcamp, but the opposite in structure. Instead of\neveryone doing the same thing, they're each talking to YC partners to figure\nout what their specific startup needs.  \n  \n[2] When I say the summer 2012 batch was broken, I mean it felt to the\npartners that something was wrong. Things weren't yet so broken that the\nstartups had a worse experience. In fact that batch did unusually well.  \n  \n[3] This situation reminds me of the research showing that people are much\nbetter at answering questions than they are at judging how accurate their\nanswers are. The two phenomena feel very similar.  \n  \n[4] The [Airbnbs](airbnbs.html) were particularly good at listening \u2014 partly\nbecause they were flexible and disciplined, but also because they'd had such a\nrough time during the preceding year. They were ready to listen.  \n  \n[5] The optimal unit of decisiveness depends on how long it takes to get\nresults, and that depends on the type of problem you're solving. When you're\nnegotiating with investors, it could be a couple days, whereas if you're\nbuilding hardware it could be months.  \n  \n  \n  \n**Thanks** to Trevor Blackwell, Jessica Livingston, Harj Taggar, and Garry Tan\nfor reading drafts of this.  \n  \n\nMarch 2005  \n  \nA couple months ago I got an email from a recruiter asking if I was interested\nin being a \"technologist in residence\" at a new venture capital fund. I think\nthe idea was to play Karl Rove to the VCs' George Bush.  \n  \nI considered it for about four seconds. Work for a VC fund? Ick.  \n  \nOne of my most vivid memories from our startup is going to visit Greylock, the\nfamous Boston VCs. They were the most arrogant people I've met in my life. And\nI've met a lot of arrogant people. [1]  \n  \nI'm not alone in feeling this way, of course. Even a VC friend of mine\ndislikes VCs. \"Assholes,\" he says.  \n  \nBut lately I've been learning more about how the VC world works,  and a few\ndays ago it hit me that there's a reason VCs are the way they are. It's not so\nmuch that the business attracts jerks, or even that the power they wield\ncorrupts them. The real problem is the way they're paid.  \n  \nThe problem with VC funds is that they're _funds_. Like the managers of mutual\nfunds or hedge funds, VCs get paid a percentage of the money they manage:\nabout 2% a year in management fees, plus a percentage of the gains. So they\nwant the fund to be huge-- hundreds of millions of dollars, if possible. But\nthat means each partner ends up being responsible for investing a lot of\nmoney. And since one person can only manage so many deals, each deal has to be\nfor multiple millions of dollars.  \n  \nThis turns out to explain nearly all the characteristics of VCs that founders\nhate.  \n  \nIt explains why VCs take so agonizingly long to make up their minds, and why\ntheir due diligence feels like a body cavity search. [2] With so much at\nstake, they have to be paranoid.  \n  \nIt explains why they steal your ideas. Every founder knows that VCs will tell\nyour secrets to your competitors if they end up investing in them. It's not\nunheard of for VCs to meet you when they have no intention of funding you,\njust to pick your brain for a competitor. This prospect makes naive founders\nclumsily secretive. Experienced founders treat it as a cost of doing business.\nEither way it sucks. But again, the only reason VCs are so sneaky is the giant\ndeals they do. With so much at stake, they have to be devious.  \n  \nIt explains why VCs tend to interfere in the companies they invest in. They\nwant to be on your board not just so that they can advise you, but so that\nthey can watch you. Often they even install a new CEO. Yes, he may have\nextensive business experience. But he's also their man: these newly installed\nCEOs always play something of the role of a political commissar in a Red Army\nunit. With so much at stake, VCs can't resist micromanaging you.  \n  \nThe huge investments themselves are something founders would dislike, if they\nrealized how damaging they can be. VCs don't invest $x million because that's\nthe amount you need, but because that's the amount the structure of their\nbusiness requires them to invest. Like steroids, these sudden huge investments\ncan do more harm than good. Google survived enormous VC funding because it\ncould legitimately absorb large amounts of money. They had to buy a lot of\nservers and a lot of bandwidth to crawl the whole Web. Less fortunate startups\njust end up hiring armies of people to sit around having meetings.  \n  \nIn principle you could take a huge VC investment, put it in treasury bills,\nand continue to operate frugally. You just try it.  \n  \nAnd of course giant investments mean giant valuations. They have to, or\nthere's not enough stock left to keep the founders interested. You might think\na high valuation is a great thing. Many founders do. But you can't eat paper.\nYou can't benefit from a high valuation unless you can somehow achieve what\nthose in the business  call a \"liquidity event,\" and the higher your\nvaluation, the narrower your options for doing that. Many a founder would be\nhappy to sell his company for $15 million, but VCs who've just invested at a\npre-money valuation of $8 million won't hear of that. You're rolling the dice\nagain, whether you like it or not.  \n  \nBack in 1997, one of our competitors raised $20 million in a single round of\nVC funding. This was at the time more than the valuation of our entire\ncompany. Was I worried? Not at all: I was delighted. It was like watching a\ncar you're chasing turn down a street that you know has no outlet.  \n  \nTheir smartest move at that point would have been to take every penny of the\n$20 million and use it to buy us. We would have sold. Their investors would\nhave been furious of course. But I think the main reason they never considered\nthis was that they never imagined we could be had so cheap. They probably\nassumed we were on the same VC gravy train they were.  \n  \nIn fact we only spent about $2 million in our entire existence. And that gave\nus flexibility. We could sell ourselves to Yahoo for $50 million, and everyone\nwas delighted. If our competitor had done that, the last round of investors\nwould presumably have lost money. I assume they could have vetoed such a deal.\nBut no one those days was paying a lot more than Yahoo. So unless their\nfounders could pull off an IPO (which would be difficult with Yahoo as a\ncompetitor), they had no choice but to ride the thing down.  \n  \nThe puffed-up companies that went public during the Bubble didn't do it just\nbecause they were pulled into it by unscrupulous investment bankers. Most were\npushed just as hard from the other side by VCs who'd invested at high\nvaluations, leaving an IPO as the only way out. The only people dumber were\nretail investors. So it was literally IPO or bust. Or rather, IPO then bust,\nor just bust.  \n  \nAdd up all the evidence of VCs' behavior, and the resulting personality is not\nattractive. In fact, it's the classic villain: alternately cowardly, greedy,\nsneaky, and overbearing.  \n  \nI used to take it for granted that VCs were like this. Complaining that VCs\nwere jerks used to seem as naive to me as complaining that users didn't read\nthe reference manual. Of course VCs were jerks. How could it be otherwise?  \n  \nBut I realize now that they're not intrinsically jerks. VCs are like car\nsalesmen or bureaucrats: the nature of their work turns them into jerks.  \n  \nI've met a few VCs I like. Mike Moritz seems a good guy. He even has a sense\nof humor, which is almost unheard of among VCs. From what I've read about John\nDoerr, he sounds like a good guy too, almost a hacker. But they work for the\nvery best VC funds. And my theory explains why they'd tend to be different:\njust as the very most popular kids don't have to persecute\n[nerds](nerds.html), the very best VCs don't have to act like VCs. They get\nthe pick of all the best deals. So they don't have to be so paranoid and\nsneaky, and they can choose those rare companies, like Google, that will\nactually benefit from the giant sums they're compelled to invest.  \n  \nVCs often complain that in their business there's too much money chasing too\nfew deals. Few realize that this also describes a flaw in the way funding\nworks at the level of individual firms.  \n  \nPerhaps this was the sort of strategic insight I was supposed to come up with\nas a \"technologist in residence.\" If so, the good news is that they're getting\nit for free. The bad news is it means that if you're not one of the very top\nfunds, you're condemned to be the bad guys.  \n  \n  \n  \n**Notes**  \n  \n[1] After Greylock booted founder Philip Greenspun out of ArsDigita, he wrote\na hilarious but also very informative\n[essay](http://www.waxy.org/random/arsdigita/) about it.  \n  \n[2] Since most VCs aren't tech guys, the technology side of their due\ndiligence tends to be like a body cavity search by someone with a faulty\nknowledge of human anatomy. After a while we were quite sore from VCs\nattempting to probe our nonexistent database orifice.  \n  \nNo, we don't use Oracle. We just store the data in files. Our secret is to use\nan OS that doesn't lose our data. Which OS? FreeBSD. Why do you use that\ninstead of Windows NT? Because it's better and it doesn't cost anything. What,\nyou're using a _freeware_ OS?  \n  \nHow many times that conversation was repeated. Then when we got to Yahoo, we\nfound they used FreeBSD and stored their data in files too.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nMay 2004  \n  \n _(This essay was originally published in[Hackers &\nPainters](http://www.amazon.com/gp/product/0596006624/104-0572701-7443937).) _  \n  \nIf you wanted to get rich, how would you do it? I think your best bet would be\nto start or join a startup. That's been a reliable way to get rich for\nhundreds of years. The word \"startup\" dates from the 1960s, but what happens\nin one is very similar to the venture-backed trading voyages of the Middle\nAges.  \n  \nStartups usually involve technology, so much so that the phrase \"high-tech\nstartup\" is almost redundant. A startup is a small company that takes on a\nhard technical problem.  \n  \nLots of people get rich knowing nothing more than that. You don't have to know\nphysics to be a good pitcher. But I think it could give you an edge to\nunderstand the underlying principles. Why do startups have to be small? Will a\nstartup inevitably stop being a startup as it grows larger? And why do they so\noften work on developing new technology? Why are there so many startups\nselling new drugs or computer software, and none selling corn oil or laundry\ndetergent?  \n  \n**The Proposition**  \n  \nEconomically, you can think of a startup as a way to compress your whole\nworking life into a few years. Instead of working at a low intensity for forty\nyears, you work as hard as you possibly can for four. This pays especially\nwell in technology, where you earn a premium for working fast.  \n  \nHere is a brief sketch of the economic proposition. If you're a good hacker in\nyour mid twenties, you can get a job paying about $80,000 per year. So on\naverage such a hacker must be able to do at least $80,000 worth of work per\nyear for the company just to break even. You could probably work twice as many\nhours as a corporate employee, and if you focus you can probably get three\ntimes as much done in an hour. [1] You should get another multiple of two, at\nleast, by eliminating the drag of the pointy-haired middle manager who would\nbe your boss in a big company. Then there is one more multiple: how much\nsmarter are you than your job description expects you to be? Suppose another\nmultiple of three. Combine all these multipliers, and I'm claiming you could\nbe 36 times more productive than you're expected to be in a random corporate\njob. [2] If a fairly good hacker is worth $80,000 a year at a big company,\nthen a smart hacker working very hard without any corporate bullshit to slow\nhim down should be able to do work worth about $3 million a year.  \n  \nLike all back-of-the-envelope calculations, this one has a lot of wiggle room.\nI wouldn't try to defend the actual numbers. But I stand by the structure of\nthe calculation. I'm not claiming the multiplier is precisely 36, but it is\ncertainly more than 10, and probably rarely as high as 100.  \n  \nIf $3 million a year seems high, remember that we're talking about the limit\ncase: the case where you not only have zero leisure time but indeed work so\nhard that you endanger your health.  \n  \nStartups are not magic. They don't change the laws of wealth creation. They\njust represent a point at the far end of the curve. There is a conservation\nlaw at work here: if you want to make a million dollars, you have to endure a\nmillion dollars' worth of pain. For example, one way to make a million dollars\nwould be to work for the Post Office your whole life, and save every penny of\nyour salary. Imagine the stress of working for the Post Office for fifty\nyears. In a startup you compress all this stress into three or four years. You\ndo tend to get a certain bulk discount if you buy the economy-size pain, but\nyou can't evade the fundamental conservation law. If starting a startup were\neasy, everyone would do it.  \n  \n**Millions, not Billions**  \n  \nIf $3 million a year seems high to some people, it will seem low to others.\nThree _million?_ How do I get to be a billionaire, like Bill Gates?  \n  \nSo let's get Bill Gates out of the way right now. It's not a good idea to use\nfamous rich people as examples, because the press only write about the very\nrichest, and these tend to be outliers. Bill Gates is a smart, determined, and\nhardworking man, but you need more than that to make as much money as he has.\nYou also need to be very lucky.  \n  \nThere is a large random factor in the success of any company. So the guys you\nend up reading about in the papers are the ones who are very smart, totally\ndedicated, _and_ win the lottery. Certainly Bill is smart and dedicated, but\nMicrosoft also happens to have been the beneficiary of one of the most\nspectacular blunders in the history of business: the licensing deal for DOS.\nNo doubt Bill did everything he could to steer IBM into making that blunder,\nand he has done an excellent job of exploiting it, but if there had been one\nperson with a brain on IBM's side, Microsoft's future would have been very\ndifferent. Microsoft at that stage had little leverage over IBM. They were\neffectively a component supplier. If IBM had required an exclusive license, as\nthey should have, Microsoft would still have signed the deal. It would still\nhave meant a lot of money for them, and IBM could easily have gotten an\noperating system elsewhere.  \n  \nInstead IBM ended up using all its power in the market to give Microsoft\ncontrol of the PC standard. From that point, all Microsoft had to do was\nexecute. They never had to bet the company on a bold decision. All they had to\ndo was play hardball with licensees and copy more innovative products\nreasonably promptly.  \n  \nIf IBM hadn't made this mistake, Microsoft would still have been a successful\ncompany, but it could not have grown so big so fast. Bill Gates would be rich,\nbut he'd be somewhere near the bottom of the Forbes 400 with the other guys\nhis age.  \n  \nThere are a lot of ways to get rich, and this essay is about only one of them.\nThis essay is about how to make money by creating wealth and getting paid for\nit. There are plenty of other ways to get money, including chance,\nspeculation, marriage, inheritance, theft, extortion, fraud, monopoly, graft,\nlobbying, counterfeiting, and prospecting. Most of the greatest fortunes have\nprobably involved several of these.  \n  \nThe advantage of creating wealth, as a way to get rich, is not just that it's\nmore legitimate (many of the other methods are now illegal) but that it's more\n_straightforward._ You just have to do something people want.  \n  \n**Money Is Not Wealth**  \n  \nIf you want to create wealth, it will help to understand what it is. Wealth is\nnot the same thing as money. [3] Wealth is as old as human history. Far older,\nin fact; ants have wealth. Money is a comparatively recent invention.  \n  \nWealth is the fundamental thing. Wealth is stuff we want: food, clothes,\nhouses, cars, gadgets, travel to interesting places, and so on. You can have\nwealth without having money. If you had a magic machine that could on command\nmake you a car or cook you dinner or do your laundry, or do anything else you\nwanted, you wouldn't need money. Whereas if you were in the middle of\nAntarctica, where there is nothing to buy, it wouldn't matter how much money\nyou had.  \n  \nWealth is what you want, not money. But if wealth is the important thing, why\ndoes everyone talk about making money? It is a kind of shorthand: money is a\nway of moving wealth, and in practice they are usually interchangeable. But\nthey are not the same thing, and unless you plan to get rich by\ncounterfeiting, talking about _making money_ can make it harder to understand\nhow to make money.  \n  \nMoney is a side effect of specialization. In a specialized society, most of\nthe things you need, you can't make for yourself. If you want a potato or a\npencil or a place to live, you have to get it from someone else.  \n  \nHow do you get the person who grows the potatoes to give you some? By giving\nhim something he wants in return. But you can't get very far by trading things\ndirectly with the people who need them. If you make violins, and none of the\nlocal farmers wants one, how will you eat?  \n  \nThe solution societies find, as they get more specialized, is to make the\ntrade into a two-step process. Instead of trading violins directly for\npotatoes, you trade violins for, say, silver, which you can then trade again\nfor anything else you need. The intermediate stuff-- the _medium of exchange_\n\\-- can be anything that's rare and portable. Historically metals have been\nthe most common, but recently we've been using a medium of exchange, called\nthe _dollar_ , that doesn't physically exist. It works as a medium of\nexchange, however, because its rarity is guaranteed by the U.S. Government.  \n  \nThe advantage of a medium of exchange is that it makes trade work. The\ndisadvantage is that it tends to obscure what trade really means. People think\nthat what a business does is make money. But money is just the intermediate\nstage-- just a shorthand-- for whatever people want. What most businesses\nreally do is make wealth. They do something people want. [4]  \n  \n**The Pie Fallacy**  \n  \nA surprising number of people retain from childhood the idea that there is a\nfixed amount of wealth in the world. There is, in any normal family, a fixed\namount of _money_ at any moment. But that's not the same thing.  \n  \nWhen wealth is talked about in this context, it is often described as a pie.\n\"You can't make the pie larger,\" say politicians. When you're talking about\nthe amount of money in one family's bank account, or the amount available to a\ngovernment from one year's tax revenue, this is true. If one person gets more,\nsomeone else has to get less.  \n  \nI can remember believing, as a child, that if a few rich people had all the\nmoney, it left less for everyone else. Many people seem to continue to believe\nsomething like this well into adulthood. This fallacy is usually there in the\nbackground when you hear someone talking about how x percent of the population\nhave y percent of the wealth. If you plan to start a startup, then whether you\nrealize it or not, you're planning to disprove the Pie Fallacy.  \n  \nWhat leads people astray here is the abstraction of money. Money is not\nwealth. It's just something we use to move wealth around. So although there\nmay be, in certain specific moments (like your family, this month) a fixed\namount of money available to trade with other people for things you want,\nthere is not a fixed amount of wealth in the world. _You can make more\nwealth._ Wealth has been getting created and destroyed (but on balance,\ncreated) for all of human history.  \n  \nSuppose you own a beat-up old car. Instead of sitting on your butt next\nsummer, you could spend the time restoring your car to pristine condition. In\ndoing so you create wealth. The world is-- and you specifically are-- one\npristine old car the richer. And not just in some metaphorical way. If you\nsell your car, you'll get more for it.  \n  \nIn restoring your old car you have made yourself richer. You haven't made\nanyone else poorer. So there is obviously not a fixed pie. And in fact, when\nyou look at it this way, you wonder why anyone would think there was. [5]  \n  \nKids know, without knowing they know, that they can create wealth. If you need\nto give someone a present and don't have any money, you make one. But kids are\nso bad at making things that they consider home-made presents to be a\ndistinct, inferior, sort of thing to store-bought ones-- a mere expression of\nthe proverbial thought that counts. And indeed, the lumpy ashtrays we made for\nour parents did not have much of a resale market.  \n  \n**Craftsmen**  \n  \nThe people most likely to grasp that wealth can be created are the ones who\nare good at making things, the craftsmen. Their hand-made objects become\nstore-bought ones. But with the rise of industrialization there are fewer and\nfewer craftsmen. One of the biggest remaining groups is computer programmers.  \n  \nA programmer can sit down in front of a computer and _create wealth_. A good\npiece of software is, in itself, a valuable thing. There is no manufacturing\nto confuse the issue. Those characters you type are a complete, finished\nproduct. If someone sat down and wrote a web browser that didn't suck (a fine\nidea, by the way), the world would be that much richer. [5b]  \n  \nEveryone in a company works together to create wealth, in the sense of making\nmore things people want. Many of the employees (e.g. the people in the\nmailroom or the personnel department) work at one remove from the actual\nmaking of stuff. Not the programmers. They literally think the product, one\nline at a time. And so it's clearer to programmers that wealth is something\nthat's made, rather than being distributed, like slices of a pie, by some\nimaginary Daddy.  \n  \nIt's also obvious to programmers that there are huge variations in the rate at\nwhich wealth is created. At Viaweb we had one programmer who was a sort of\nmonster of productivity. I remember watching what he did one long day and\nestimating that he had added several hundred thousand dollars to the market\nvalue of the company. A great programmer, on a roll, could create a million\ndollars worth of wealth in a couple weeks. A mediocre programmer over the same\nperiod will generate zero or even negative wealth (e.g. by introducing bugs).  \n  \nThis is why so many of the best programmers are libertarians. In our world,\nyou sink or swim, and there are no excuses. When those far removed from the\ncreation of wealth-- undergraduates, reporters, politicians-- hear that the\nrichest 5% of the people have half the total wealth, they tend to think\n_injustice!_ An experienced programmer would be more likely to think _is that\nall?_ The top 5% of programmers probably write 99% of the good software.  \n  \nWealth can be created without being sold. Scientists, till recently at least,\neffectively donated the wealth they created. We are all richer for knowing\nabout penicillin, because we're less likely to die from infections. Wealth is\nwhatever people want, and not dying is certainly something we want. Hackers\noften donate their work by writing open source software that anyone can use\nfor free. I am much the richer for the operating system FreeBSD, which I'm\nrunning on the computer I'm using now, and so is Yahoo, which runs it on all\ntheir servers.  \n  \n**What a Job Is**  \n  \nIn industrialized countries, people belong to one institution or another at\nleast until their twenties. After all those years you get used to the idea of\nbelonging to a group of people who all get up in the morning, go to some set\nof buildings, and do things that they do not, ordinarily, enjoy doing.\nBelonging to such a group becomes part of your identity: name, age, role,\ninstitution. If you have to introduce yourself, or someone else describes you,\nit will be as something like, John Smith, age 10, a student at such and such\nelementary school, or John Smith, age 20, a student at such and such college.  \n  \nWhen John Smith finishes school he is expected to get a job. And what getting\na job seems to mean is joining another institution. Superficially it's a lot\nlike college. You pick the companies you want to work for and apply to join\nthem. If one likes you, you become a member of this new group. You get up in\nthe morning and go to a new set of buildings, and do things that you do not,\nordinarily, enjoy doing. There are a few differences: life is not as much fun,\nand you get paid, instead of paying, as you did in college. But the\nsimilarities feel greater than the differences. John Smith is now John Smith,\n22, a software developer at such and such corporation.  \n  \nIn fact John Smith's life has changed more than he realizes. Socially, a\ncompany looks much like college, but the deeper you go into the underlying\nreality, the more different it gets.  \n  \nWhat a company does, and has to do if it wants to continue to exist, is earn\nmoney. And the way most companies make money is by creating wealth. Companies\ncan be so specialized that this similarity is concealed, but it is not only\nmanufacturing companies that create wealth. A big component of wealth is\nlocation. Remember that magic machine that could make you cars and cook you\ndinner and so on? It would not be so useful if it delivered your dinner to a\nrandom location in central Asia. If wealth means what people want, companies\nthat move things also create wealth. Ditto for many other kinds of companies\nthat don't make anything physical. Nearly all companies exist to do something\npeople want.  \n  \nAnd that's what you do, as well, when you go to work for a company. But here\nthere is another layer that tends to obscure the underlying reality. In a\ncompany, the work you do is averaged together with a lot of other people's.\nYou may not even be aware you're doing something people want. Your\ncontribution may be indirect. But the company as a whole must be giving people\nsomething they want, or they won't make any money. And if they are paying you\nx dollars a year, then on average you must be contributing at least x dollars\na year worth of work, or the company will be spending more than it makes, and\nwill go out of business.  \n  \nSomeone graduating from college thinks, and is told, that he needs to get a\njob, as if the important thing were becoming a member of an institution. A\nmore direct way to put it would be: you need to start doing something people\nwant. You don't need to join a company to do that. All a company is is a group\nof people working together to do something people want. It's doing something\npeople want that matters, not joining the group. [6]  \n  \nFor most people the best plan probably is to go to work for some existing\ncompany. But it is a good idea to understand what's happening when you do\nthis. A job means doing something people want, averaged together with everyone\nelse in that company.  \n  \n**Working Harder**  \n  \nThat averaging gets to be a problem. I think the single biggest problem\nafflicting large companies is the difficulty of assigning a value to each\nperson's work. For the most part they punt. In a big company you get paid a\nfairly predictable salary for working fairly hard. You're expected not to be\nobviously incompetent or lazy, but you're not expected to devote your whole\nlife to your work.  \n  \nIt turns out, though, that there are economies of scale in how much of your\nlife you devote to your work. In the right kind of business, someone who\nreally devoted himself to work could generate ten or even a hundred times as\nmuch wealth as an average employee. A programmer, for example, instead of\nchugging along maintaining and updating an existing piece of software, could\nwrite a whole new piece of software, and with it create a new source of\nrevenue.  \n  \nCompanies are not set up to reward people who want to do this. You can't go to\nyour boss and say, I'd like to start working ten times as hard, so will you\nplease pay me ten times as much? For one thing, the official fiction is that\nyou are already working as hard as you can. But a more serious problem is that\nthe company has no way of measuring the value of your work.  \n  \nSalesmen are an exception. It's easy to measure how much revenue they\ngenerate, and they're usually paid a percentage of it. If a salesman wants to\nwork harder, he can just start doing it, and he will automatically get paid\nproportionally more.  \n  \nThere is one other job besides sales where big companies can hire first-rate\npeople: in the top management jobs. And for the same reason: their performance\ncan be measured. The top managers are held responsible for the performance of\nthe entire company. Because an ordinary employee's performance can't usually\nbe measured, he is not expected to do more than put in a solid effort. Whereas\ntop management, like salespeople, have to actually come up with the numbers.\nThe CEO of a company that tanks cannot plead that he put in a solid effort. If\nthe company does badly, he's done badly.  \n  \nA company that could pay all its employees so straightforwardly would be\nenormously successful. Many employees would work harder if they could get paid\nfor it. More importantly, such a company would attract people who wanted to\nwork especially hard. It would crush its competitors.  \n  \nUnfortunately, companies can't pay everyone like salesmen. Salesmen work\nalone. Most employees' work is tangled together. Suppose a company makes some\nkind of consumer gadget. The engineers build a reliable gadget with all kinds\nof new features; the industrial designers design a beautiful case for it; and\nthen the marketing people convince everyone that it's something they've got to\nhave. How do you know how much of the gadget's sales are due to each group's\nefforts? Or, for that matter, how much is due to the creators of past gadgets\nthat gave the company a reputation for quality? There's no way to untangle all\ntheir contributions. Even if you could read the minds of the consumers, you'd\nfind these factors were all blurred together.  \n  \nIf you want to go faster, it's a problem to have your work tangled together\nwith a large number of other people's. In a large group, your performance is\nnot separately measurable-- and the rest of the group slows you down.  \n  \n**Measurement and Leverage**  \n  \nTo get rich you need to get yourself in a situation with two things,\nmeasurement and leverage. You need to be in a position where your performance\ncan be measured, or there is no way to get paid more by doing more. And you\nhave to have leverage, in the sense that the decisions you make have a big\neffect.  \n  \nMeasurement alone is not enough. An example of a job with measurement but not\nleverage is doing piecework in a sweatshop. Your performance is measured and\nyou get paid accordingly, but you have no scope for decisions. The only\ndecision you get to make is how fast you work, and that can probably only\nincrease your earnings by a factor of two or three.  \n  \nAn example of a job with both measurement and leverage would be lead actor in\na movie. Your performance can be measured in the gross of the movie. And you\nhave leverage in the sense that your performance can make or break it.  \n  \nCEOs also have both measurement and leverage. They're measured, in that the\nperformance of the company is their performance. And they have leverage in\nthat their decisions set the whole company moving in one direction or another.  \n  \nI think everyone who gets rich by their own efforts will be found to be in a\nsituation with measurement and leverage. Everyone I can think of does: CEOs,\nmovie stars, hedge fund managers, professional athletes. A good hint to the\npresence of leverage is the possibility of failure. Upside must be balanced by\ndownside, so if there is big potential for gain there must also be a\nterrifying possibility of loss. CEOs, stars, fund managers, and athletes all\nlive with the sword hanging over their heads; the moment they start to suck,\nthey're out. If you're in a job that feels safe, you are not going to get\nrich, because if there is no danger there is almost certainly no leverage.  \n  \nBut you don't have to become a CEO or a movie star to be in a situation with\nmeasurement and leverage. All you need to do is be part of a small group\nworking on a hard problem.  \n  \n**Smallness = Measurement**  \n  \nIf you can't measure the value of the work done by individual employees, you\ncan get close. You can measure the value of the work done by small groups.  \n  \nOne level at which you can accurately measure the revenue generated by\nemployees is at the level of the whole company. When the company is small, you\nare thereby fairly close to measuring the contributions of individual\nemployees. A viable startup might only have ten employees, which puts you\nwithin a factor of ten of measuring individual effort.  \n  \nStarting or joining a startup is thus as close as most people can get to\nsaying to one's boss, I want to work ten times as hard, so please pay me ten\ntimes as much. There are two differences: you're not saying it to your boss,\nbut directly to the customers (for whom your boss is only a proxy after all),\nand you're not doing it individually, but along with a small group of other\nambitious people.  \n  \nIt will, ordinarily, be a group. Except in a few unusual kinds of work, like\nacting or writing books, you can't be a company of one person. And the people\nyou work with had better be good, because it's their work that yours is going\nto be averaged with.  \n  \nA big company is like a giant galley driven by a thousand rowers. Two things\nkeep the speed of the galley down. One is that individual rowers don't see any\nresult from working harder. The other is that, in a group of a thousand\npeople, the average rower is likely to be pretty average.  \n  \nIf you took ten people at random out of the big galley and put them in a boat\nby themselves, they could probably go faster. They would have both carrot and\nstick to motivate them. An energetic rower would be encouraged by the thought\nthat he could have a visible effect on the speed of the boat. And if someone\nwas lazy, the others would be more likely to notice and complain.  \n  \nBut the real advantage of the ten-man boat shows when you take the ten _best_\nrowers out of the big galley and put them in a boat together. They will have\nall the extra motivation that comes from being in a small group. But more\nimportantly, by selecting that small a group you can get the best rowers. Each\none will be in the top 1%. It's a much better deal for them to average their\nwork together with a small group of their peers than to average it with\neveryone.  \n  \nThat's the real point of startups. Ideally, you are getting together with a\ngroup of other people who also want to work a lot harder, and get paid a lot\nmore, than they would in a big company. And because startups tend to get\nfounded by self-selecting groups of ambitious people who already know one\nanother (at least by reputation), the level of measurement is more precise\nthan you get from smallness alone. A startup is not merely ten people, but ten\npeople like you.  \n  \nSteve Jobs once said that the success or failure of a startup depends on the\nfirst ten employees. I agree. If anything, it's more like the first five.\nBeing small is not, in itself, what makes startups kick butt, but rather that\nsmall groups can be select. You don't want small in the sense of a village,\nbut small in the sense of an all-star team.  \n  \nThe larger a group, the closer its average member will be to the average for\nthe population as a whole. So all other things being equal, a very able person\nin a big company is probably getting a bad deal, because his performance is\ndragged down by the overall lower performance of the others. Of course, all\nother things often are not equal: the able person may not care about money, or\nmay prefer the stability of a large company. But a very able person who does\ncare about money will ordinarily do better to go off and work with a small\ngroup of peers.  \n  \n**Technology = Leverage**  \n  \nStartups offer anyone a way to be in a situation with measurement and\nleverage. They allow measurement because they're small, and they offer\nleverage because they make money by inventing new technology.  \n  \nWhat is technology? It's _technique_. It's the way we all do things. And when\nyou discover a new way to do things, its value is multiplied by all the people\nwho use it. It is the proverbial fishing rod, rather than the fish. That's the\ndifference between a startup and a restaurant or a barber shop. You fry eggs\nor cut hair one customer at a time. Whereas if you solve a technical problem\nthat a lot of people care about, you help everyone who uses your solution.\nThat's leverage.  \n  \nIf you look at history, it seems that most people who got rich by creating\nwealth did it by developing new technology. You just can't fry eggs or cut\nhair fast enough. What made the Florentines rich in 1200 was the discovery of\nnew techniques for making the high-tech product of the time, fine woven cloth.\nWhat made the Dutch rich in 1600 was the discovery of shipbuilding and\nnavigation techniques that enabled them to dominate the seas of the Far East.  \n  \nFortunately there is a natural fit between smallness and solving hard\nproblems. The leading edge of technology moves fast. Technology that's\nvaluable today could be worthless in a couple years. Small companies are more\nat home in this world, because they don't have layers of bureaucracy to slow\nthem down. Also, technical advances tend to come from unorthodox approaches,\nand small companies are less constrained by convention.  \n  \nBig companies can develop technology. They just can't do it quickly. Their\nsize makes them slow and prevents them from rewarding employees for the\nextraordinary effort required. So in practice big companies only get to\ndevelop technology in fields where large capital requirements prevent startups\nfrom competing with them, like microprocessors, power plants, or passenger\naircraft. And even in those fields they depend heavily on startups for\ncomponents and ideas.  \n  \nIt's obvious that biotech or software startups exist to solve hard technical\nproblems, but I think it will also be found to be true in businesses that\ndon't seem to be about technology. McDonald's, for example, grew big by\ndesigning a system, the McDonald's franchise, that could then be reproduced at\nwill all over the face of the earth. A McDonald's franchise is controlled by\nrules so precise that it is practically a piece of software. Write once, run\neverywhere. Ditto for Wal-Mart. Sam Walton got rich not by being a retailer,\nbut by designing a new kind of store.  \n  \nUse difficulty as a guide not just in selecting the overall aim of your\ncompany, but also at decision points along the way. At Viaweb one of our rules\nof thumb was _run upstairs._ Suppose you are a little, nimble guy being chased\nby a big, fat, bully. You open a door and find yourself in a staircase. Do you\ngo up or down? I say up. The bully can probably run downstairs as fast as you\ncan. Going upstairs his bulk will be more of a disadvantage. Running upstairs\nis hard for you but even harder for him.  \n  \nWhat this meant in practice was that we deliberately sought hard problems. If\nthere were two features we could add to our software, both equally valuable in\nproportion to their difficulty, we'd always take the harder one. Not just\nbecause it was more valuable, but _because it was harder._ We delighted in\nforcing bigger, slower competitors to follow us over difficult ground. Like\nguerillas, startups prefer the difficult terrain of the mountains, where the\ntroops of the central government can't follow. I can remember times when we\nwere just exhausted after wrestling all day with some horrible technical\nproblem. And I'd be delighted, because something that was hard for us would be\nimpossible for our competitors.  \n  \nThis is not just a good way to run a startup. It's what a startup is. Venture\ncapitalists know about this and have a phrase for it: _barriers to entry._ If\nyou go to a VC with a new idea and ask him to invest in it, one of the first\nthings he'll ask is, how hard would this be for someone else to develop? That\nis, how much difficult ground have you put between yourself and potential\npursuers? [7] And you had better have a convincing explanation of why your\ntechnology would be hard to duplicate. Otherwise as soon as some big company\nbecomes aware of it, they'll make their own, and with their brand name,\ncapital, and distribution clout, they'll take away your market overnight.\nYou'd be like guerillas caught in the open field by regular army forces.  \n  \nOne way to put up barriers to entry is through patents. But patents may not\nprovide much protection. Competitors commonly find ways to work around a\npatent. And if they can't, they may simply violate it and invite you to sue\nthem. A big company is not afraid to be sued; it's an everyday thing for them.\nThey'll make sure that suing them is expensive and takes a long time. Ever\nheard of Philo Farnsworth? He invented television. The reason you've never\nheard of him is that his company was not the one to make money from it. [8]\nThe company that did was RCA, and Farnsworth's reward for his efforts was a\ndecade of patent litigation.  \n  \nHere, as so often, the best defense is a good offense. If you can develop\ntechnology that's simply too hard for competitors to duplicate, you don't need\nto rely on other defenses. Start by picking a hard problem, and then at every\ndecision point, take the harder choice. [9]  \n  \n**The Catch(es)**  \n  \nIf it were simply a matter of working harder than an ordinary employee and\ngetting paid proportionately, it would obviously be a good deal to start a\nstartup. Up to a point it would be more fun. I don't think many people like\nthe slow pace of big companies, the interminable meetings, the water-cooler\nconversations, the clueless middle managers, and so on.  \n  \nUnfortunately there are a couple catches. One is that you can't choose the\npoint on the curve that you want to inhabit. You can't decide, for example,\nthat you'd like to work just two or three times as hard, and get paid that\nmuch more. When you're running a startup, your competitors decide how hard you\nwork. And they pretty much all make the same decision: as hard as you possibly\ncan.  \n  \nThe other catch is that the payoff is only on average proportionate to your\nproductivity. There is, as I said before, a large random multiplier in the\nsuccess of any company. So in practice the deal is not that you're 30 times as\nproductive and get paid 30 times as much. It is that you're 30 times as\nproductive, and get paid between zero and a thousand times as much. If the\nmean is 30x, the median is probably zero. Most startups tank, and not just the\ndogfood portals we all heard about during the Internet Bubble. It's common for\na startup to be developing a genuinely good product, take slightly too long to\ndo it, run out of money, and have to shut down.  \n  \nA startup is like a mosquito. A bear can absorb a hit and a crab is armored\nagainst one, but a mosquito is designed for one thing: to score. No energy is\nwasted on defense. The defense of mosquitos, as a species, is that there are a\nlot of them, but this is little consolation to the individual mosquito.  \n  \nStartups, like mosquitos, tend to be an all-or-nothing proposition. And you\ndon't generally know which of the two you're going to get till the last\nminute. Viaweb came close to tanking several times. Our trajectory was like a\nsine wave. Fortunately we got bought at the top of the cycle, but it was\ndamned close. While we were visiting Yahoo in California to talk about selling\nthe company to them, we had to borrow a conference room to reassure an\ninvestor who was about to back out of a new round of funding that we needed to\nstay alive.  \n  \nThe all-or-nothing aspect of startups was not something we wanted. Viaweb's\nhackers were all extremely risk-averse. If there had been some way just to\nwork super hard and get paid for it, without having a lottery mixed in, we\nwould have been delighted. We would have much preferred a 100% chance of $1\nmillion to a 20% chance of $10 million, even though theoretically the second\nis worth twice as much. Unfortunately, there is not currently any space in the\nbusiness world where you can get the first deal.  \n  \nThe closest you can get is by selling your startup in the early stages, giving\nup upside (and risk) for a smaller but guaranteed payoff. We had a chance to\ndo this, and stupidly, as we then thought, let it slip by. After that we\nbecame comically eager to sell. For the next year or so, if anyone expressed\nthe slightest curiosity about Viaweb we would try to sell them the company.\nBut there were no takers, so we had to keep going.  \n  \nIt would have been a bargain to buy us at an early stage, but companies doing\nacquisitions are not looking for bargains. A company big enough to acquire\nstartups will be big enough to be fairly conservative, and within the company\nthe people in charge of acquisitions will be among the more conservative,\nbecause they are likely to be business school types who joined the company\nlate. They would rather overpay for a safe choice. So it is easier to sell an\nestablished startup, even at a large premium, than an early-stage one.  \n  \n**Get Users**  \n  \nI think it's a good idea to get bought, if you can. Running a business is\ndifferent from growing one. It is just as well to let a big company take over\nonce you reach cruising altitude. It's also financially wiser, because selling\nallows you to diversify. What would you think of a financial advisor who put\nall his client's assets into one volatile stock?  \n  \nHow do you get bought? Mostly by doing the same things you'd do if you didn't\nintend to sell the company. Being profitable, for example. But getting bought\nis also an art in its own right, and one that we spent a lot of time trying to\nmaster.  \n  \nPotential buyers will always delay if they can. The hard part about getting\nbought is getting them to act. For most people, the most powerful motivator is\nnot the hope of gain, but the fear of loss. For potential acquirers, the most\npowerful motivator is the prospect that one of their competitors will buy you.\nThis, as we found, causes CEOs to take red-eyes. The second biggest is the\nworry that, if they don't buy you now, you'll continue to grow rapidly and\nwill cost more to acquire later, or even become a competitor.  \n  \nIn both cases, what it all comes down to is users. You'd think that a company\nabout to buy you would do a lot of research and decide for themselves how\nvaluable your technology was. Not at all. What they go by is the number of\nusers you have.  \n  \nIn effect, acquirers assume the customers know who has the best technology.\nAnd this is not as stupid as it sounds. Users are the only real proof that\nyou've created wealth. Wealth is what people want, and if people aren't using\nyour software, maybe it's not just because you're bad at marketing. Maybe it's\nbecause you haven't made what they want.  \n  \nVenture capitalists have a list of danger signs to watch out for. Near the top\nis the company run by techno-weenies who are obsessed with solving interesting\ntechnical problems, instead of making users happy. In a startup, you're not\njust trying to solve problems. You're trying to solve problems _that users\ncare about._  \n  \nSo I think you should make users the test, just as acquirers do. Treat a\nstartup as an optimization problem in which performance is measured by number\nof users. As anyone who has tried to optimize software knows, the key is\nmeasurement. When you try to guess where your program is slow, and what would\nmake it faster, you almost always guess wrong.  \n  \nNumber of users may not be the perfect test, but it will be very close. It's\nwhat acquirers care about. It's what revenues depend on. It's what makes\ncompetitors unhappy. It's what impresses reporters, and potential new users.\nCertainly it's a better test than your a priori notions of what problems are\nimportant to solve, no matter how technically adept you are.  \n  \nAmong other things, treating a startup as an optimization problem will help\nyou avoid another pitfall that VCs worry about, and rightly-- taking a long\ntime to develop a product. Now we can recognize this as something hackers\nalready know to avoid: premature optimization. Get a version 1.0 out there as\nsoon as you can. Until you have some users to measure, you're optimizing based\non guesses.  \n  \nThe ball you need to keep your eye on here is the underlying principle that\nwealth is what people want. If you plan to get rich by creating wealth, you\nhave to know what people want. So few businesses really pay attention to\nmaking customers happy. How often do you walk into a store, or call a company\non the phone, with a feeling of dread in the back of your mind? When you hear\n\"your call is important to us, please stay on the line,\" do you think, oh\ngood, now everything will be all right?  \n  \nA restaurant can afford to serve the occasional burnt dinner. But in\ntechnology, you cook one thing and that's what everyone eats. So any\ndifference between what people want and what you deliver is multiplied. You\nplease or annoy customers wholesale. The closer you can get to what they want,\nthe more wealth you generate.  \n  \n**Wealth and Power**  \n  \nMaking wealth is not the only way to get rich. For most of human history it\nhas not even been the most common. Until a few centuries ago, the main sources\nof wealth were mines, slaves and serfs, land, and cattle, and the only ways to\nacquire these rapidly were by inheritance, marriage, conquest, or\nconfiscation. Naturally wealth had a bad reputation.  \n  \nTwo things changed. The first was the rule of law. For most of the world's\nhistory, if you did somehow accumulate a fortune, the ruler or his henchmen\nwould find a way to steal it. But in medieval Europe something new happened. A\nnew class of merchants and manufacturers began to collect in towns. [10]\nTogether they were able to withstand the local feudal lord. So for the first\ntime in our history, the bullies stopped stealing the nerds' lunch money. This\nwas naturally a great incentive, and possibly indeed the main cause of the\nsecond big change, industrialization.  \n  \nA great deal has been written about the causes of the Industrial Revolution.\nBut surely a necessary, if not sufficient, condition was that people who made\nfortunes be able to enjoy them in peace. [11] One piece of evidence is what\nhappened to countries that tried to return to the old model, like the Soviet\nUnion, and to a lesser extent Britain under the labor governments of the 1960s\nand early 1970s. Take away the incentive of wealth, and technical innovation\ngrinds to a halt.  \n  \nRemember what a startup is, economically: a way of saying, I want to work\nfaster. Instead of accumulating money slowly by being paid a regular wage for\nfifty years, I want to get it over with as soon as possible. So governments\nthat forbid you to accumulate wealth are in effect decreeing that you work\nslowly. They're willing to let you earn $3 million over fifty years, but\nthey're not willing to let you work so hard that you can do it in two. They\nare like the corporate boss that you can't go to and say, I want to work ten\ntimes as hard, so please pay me ten times a much. Except this is not a boss\nyou can escape by starting your own company.  \n  \nThe problem with working slowly is not just that technical innovation happens\nslowly. It's that it tends not to happen at all. It's only when you're\ndeliberately looking for hard problems, as a way to use speed to the greatest\nadvantage, that you take on this kind of project. Developing new technology is\na pain in the ass. It is, as Edison said, one percent inspiration and ninety-\nnine percent perspiration. Without the incentive of wealth, no one wants to do\nit. Engineers will work on sexy projects like fighter planes and moon rockets\nfor ordinary salaries, but more mundane technologies like light bulbs or\nsemiconductors have to be developed by entrepreneurs.  \n  \nStartups are not just something that happened in Silicon Valley in the last\ncouple decades. Since it became possible to get rich by creating wealth,\neveryone who has done it has used essentially the same recipe: measurement and\nleverage, where measurement comes from working with a small group, and\nleverage from developing new techniques. The recipe was the same in Florence\nin 1200 as it is in Santa Clara today.  \n  \nUnderstanding this may help to answer an important question: why Europe grew\nso powerful. Was it something about the geography of Europe? Was it that\nEuropeans are somehow racially superior? Was it their religion? The answer (or\nat least the proximate cause) may be that the Europeans rode on the crest of a\npowerful new idea: allowing those who made a lot of money to keep it.  \n  \nOnce you're allowed to do that, people who want to get rich can do it by\ngenerating wealth instead of stealing it. The resulting technological growth\ntranslates not only into wealth but into military power. The theory that led\nto the stealth plane was developed by a Soviet mathematician. But because the\nSoviet Union didn't have a computer industry, it remained for them a theory;\nthey didn't have hardware capable of executing the calculations fast enough to\ndesign an actual airplane.  \n  \nIn that respect the Cold War teaches the same lesson as World War II and, for\nthat matter, most wars in recent history. Don't let a ruling class of warriors\nand politicians squash the entrepreneurs. The same recipe that makes\nindividuals rich makes countries powerful. Let the nerds keep their lunch\nmoney, and you rule the world.  \n  \n  \n  \n**Notes**  \n  \n[1] One valuable thing you tend to get only in startups is\n_uninterruptability_. Different kinds of work have different time quanta.\nSomeone proofreading a manuscript could probably be interrupted every fifteen\nminutes with little loss of productivity. But the time quantum for hacking is\nvery long: it might take an hour just to load a problem into your head. So the\ncost of having someone from personnel call you about a form you forgot to fill\nout can be huge.  \n  \nThis is why hackers give you such a baleful stare as they turn from their\nscreen to answer your question. Inside their heads a giant house of cards is\ntottering.  \n  \nThe mere possibility of being interrupted deters hackers from starting hard\nprojects. This is why they tend to work late at night, and why it's next to\nimpossible to write great software in a cubicle (except late at night).  \n  \nOne great advantage of startups is that they don't yet have any of the people\nwho interrupt you. There is no personnel department, and thus no form nor\nanyone to call you about it.  \n  \n[2] Faced with the idea that people working for startups might be 20 or 30\ntimes as productive as those working for large companies, executives at large\ncompanies will naturally wonder, how could I get the people working for me to\ndo that? The answer is simple: pay them to.  \n  \nInternally most companies are run like Communist states. If you believe in\nfree markets, why not turn your company into one?  \n  \nHypothesis: A company will be maximally profitable when each employee is paid\nin proportion to the wealth they generate.  \n  \n[3] Until recently even governments sometimes didn't grasp the distinction\nbetween money and wealth. Adam Smith (_Wealth of Nations_ , v:i) mentions\nseveral that tried to preserve their \"wealth\" by forbidding the export of gold\nor silver. But having more of the medium of exchange would not make a country\nricher; if you have more money chasing the same amount of material wealth, the\nonly result is higher prices.  \n  \n[4] There are many senses of the word \"wealth,\" not all of them material. I'm\nnot trying to make a deep philosophical point here about which is the true\nkind. I'm writing about one specific, rather technical sense of the word\n\"wealth.\" What people will give you money for. This is an interesting sort of\nwealth to study, because it is the kind that prevents you from starving. And\nwhat people will give you money for depends on them, not you.  \n  \nWhen you're starting a business, it's easy to slide into thinking that\ncustomers want what you do. During the Internet Bubble I talked to a woman\nwho, because she liked the outdoors, was starting an \"outdoor portal.\" You\nknow what kind of business you should start if you like the outdoors? One to\nrecover data from crashed hard disks.  \n  \nWhat's the connection? None at all. Which is precisely my point. If you want\nto create wealth (in the narrow technical sense of not starving) then you\nshould be especially skeptical about any plan that centers on things you like\ndoing. That is where your idea of what's valuable is least likely to coincide\nwith other people's.  \n  \n[5] In the average car restoration you probably do make everyone else\nmicroscopically poorer, by doing a small amount of damage to the environment.\nWhile environmental costs should be taken into account, they don't make wealth\na zero-sum game. For example, if you repair a machine that's broken because a\npart has come unscrewed, you create wealth with no environmental cost.  \n  \n[5b] This essay was written before Firefox.  \n  \n[6] Many people feel confused and depressed in their early twenties. Life\nseemed so much more fun in college. Well, of course it was. Don't be fooled by\nthe surface similarities. You've gone from guest to servant. It's possible to\nhave fun in this new world. Among other things, you now get to go behind the\ndoors that say \"authorized personnel only.\" But the change is a shock at\nfirst, and all the worse if you're not consciously aware of it.  \n  \n[7] When VCs asked us how long it would take another startup to duplicate our\nsoftware, we used to reply that they probably wouldn't be able to at all. I\nthink this made us seem naive, or liars.  \n  \n[8] Few technologies have one clear inventor. So as a rule, if you know the\n\"inventor\" of something (the telephone, the assembly line, the airplane, the\nlight bulb, the transistor) it is because their company made money from it,\nand the company's PR people worked hard to spread the story. If you don't know\nwho invented something (the automobile, the television, the computer, the jet\nengine, the laser), it's because other companies made all the money.  \n  \n[9] This is a good plan for life in general. If you have two choices, choose\nthe harder. If you're trying to decide whether to go out running or sit home\nand watch TV, go running. Probably the reason this trick works so well is that\nwhen you have two choices and one is harder, the only reason you're even\nconsidering the other is laziness. You know in the back of your mind what's\nthe right thing to do, and this trick merely forces you to acknowledge it.  \n  \n[10] It is probably no accident that the middle class first appeared in\nnorthern Italy and the low countries, where there were no strong central\ngovernments. These two regions were the richest of their time and became the\ntwin centers from which Renaissance civilization radiated. If they no longer\nplay that role, it is because other places, like the United States, have been\ntruer to the principles they discovered.  \n  \n[11] It may indeed be a sufficient condition. But if so, why didn't the\nIndustrial Revolution happen earlier? Two possible (and not incompatible)\nanswers: (a) It did. The Industrial Revolution was one in a series. (b)\nBecause in medieval towns, monopolies and guild regulations initially slowed\nthe development of new means of production.  \n  \n[](http://reddit.com) [ Comment](http://reddit.com/info?id=20775) on this\nessay.  \n  \n  \n  \n  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nOctober 2007  \n  \n _(This essay is derived from a keynote at FOWA in October 2007.)_  \n  \nThere's something interesting happening right now. Startups are undergoing the\nsame transformation that technology does when it becomes cheaper.  \n  \nIt's a pattern we see over and over in technology. Initially there's some\ndevice that's very expensive and made in small quantities. Then someone\ndiscovers how to make them cheaply; many more get built; and as a result they\ncan be used in new ways.  \n  \nComputers are a familiar example. When I was a kid, computers were big,\nexpensive machines built one at a time. Now they're a commodity. Now we can\nstick computers in everything.  \n  \nThis pattern is very old. Most of the turning points in economic history are\ninstances of it. It happened to steel in the 1850s, and to power in the 1780s.\nIt happened to cloth manufacture in the thirteenth century, generating the\nwealth that later brought about the Renaissance. Agriculture itself was an\ninstance of this pattern.  \n  \nNow as well as being produced by startups, this pattern is happening _to_\nstartups. It's so cheap to start web startups that orders of magnitudes more\nwill be started. If the pattern holds true, that should cause dramatic\nchanges.  \n  \n**1\\. Lots of Startups**  \n  \nSo my first prediction about the future of web startups is pretty\nstraightforward: there will be a lot of them. When starting a startup was\nexpensive, you had to get the permission of investors to do it. Now the only\nthreshold is courage.  \n  \nEven that threshold is getting lower, as people watch others take the plunge\nand survive. In the last batch of startups we funded, we had several founders\nwho said they'd thought of applying before, but weren't sure and got jobs\ninstead. It was only after hearing reports of friends who'd done it that they\ndecided to try it themselves.  \n  \nStarting a startup is hard, but having a 9 to 5 job is hard too, and in some\nways a worse kind of hard. In a startup you have lots of worries, but you\ndon't have that feeling that your life is flying by like you do in a big\ncompany. Plus in a startup you could make much more money.  \n  \nAs word spreads that startups work, the number may grow to a point that would\nnow seem surprising.  \n  \nWe now think of it as normal to have a job at a company, but this is the\nthinnest of historical veneers. Just two or three lifetimes ago, most people\nin what are now called industrialized countries lived by farming. So while it\nmay seem surprising to propose that large numbers of people will change the\nway they make a living, it would be more surprising if they didn't.  \n  \n**2\\. Standardization**  \n  \nWhen technology makes something dramatically cheaper, standardization always\nfollows. When you make things in large volumes you tend to standardize\neverything that doesn't need to change.  \n  \nAt Y Combinator we still only have four people, so we try to standardize\neverything. We could hire employees, but we want to be forced to figure out\nhow to scale investing.  \n  \nWe often tell startups to release a minimal version one quickly, then let the\nneeds of the users determine what to do next. In essense, let the market\ndesign the product. We've done the same thing ourselves. We think of the\ntechniques we're developing for dealing with large numbers of startups as like\nsoftware. Sometimes it literally is software, like [Hacker\nNews](http://news.ycombinator.com) and our application system.  \n  \nOne of the most important things we've been working on standardizing are\ninvestment terms. Till now investment terms have been individually negotiated.\nThis is a problem for founders, because it makes raising money take longer and\ncost more in legal fees. So as well as using the same paperwork for every deal\nwe do, we've commissioned generic angel paperwork that all the startups we\nfund can use for future rounds.  \n  \nSome investors will still want to cook up their own deal terms. Series A\nrounds, where you raise a million dollars or more, will be custom deals for\nthe forseeable future. But I think angel rounds will start to be done mostly\nwith standardized agreements. An angel who wants to insert a bunch of\ncomplicated terms into the agreement is probably not one you want anyway.  \n  \n**3\\. New Attitude to Acquisition**  \n  \nAnother thing I see starting to get standardized is acquisitions. As the\nvolume of startups increases, big companies will start to develop standardized\nprocedures that make acquisitions little more work than hiring someone.  \n  \nGoogle is the leader here, as in so many areas of technology. They buy a lot\nof startups\u2014 more than most people realize, because they only announce a\nfraction of them. And being Google, they're figuring out how to do it\nefficiently.  \n  \nOne problem they've solved is how to think about acquisitions. For most\ncompanies, acquisitions still carry some stigma of inadequacy. Companies do\nthem because they have to, but there's usually some feeling they shouldn't\nhave to\u2014that their own programmers should be able to build everything they\nneed.  \n  \nGoogle's example should cure the rest of the world of this idea. Google has by\nfar the best programmers of any public technology company. If they don't have\na problem doing acquisitions, the others should have even less problem.\nHowever many Google does, Microsoft should do ten times as many.  \n  \nOne reason Google doesn't have a problem with acquisitions is that they know\nfirst-hand the quality of the people they can get that way. Larry and Sergey\nonly started Google after making the rounds of the search engines trying to\nsell their idea and finding no takers. They've _been_ the guys coming in to\nvisit the big company, so they know who might be sitting across that\nconference table from them.  \n  \n**4\\. Riskier Strategies are Possible**  \n  \nRisk is always proportionate to reward. The way to get really big returns is\nto do things that seem crazy, like starting a new search engine in 1998, or\nturning down a billion dollar acquisition offer.  \n  \nThis has traditionally been a problem in venture funding. Founders and\ninvestors have different attitudes to risk. Knowing that risk is on average\nproportionate to reward, investors like risky strategies, while founders, who\ndon't have a big enough sample size to care what's true on average, tend to be\nmore conservative.  \n  \nIf startups are easy to start, this conflict goes away, because founders can\nstart them younger, when it's rational to take more risk, and can start more\nstartups total in their careers. When founders can do lots of startups, they\ncan start to look at the world in the same portfolio-optimizing way as\ninvestors. And that means the overall amount of wealth created can be greater,\nbecause strategies can be riskier.  \n  \n**5\\. Younger, Nerdier Founders**  \n  \nIf startups become a cheap commodity, more people will be able to have them,\njust as more people could have computers once microprocessors made them cheap.\nAnd in particular, younger and more technical founders will be able to start\nstartups than could before.  \n  \nBack when it cost a lot to start a startup, you had to convince investors to\nlet you do it. And that required very different skills from actually doing the\nstartup. If investors were perfect judges, the two would require exactly the\nsame skills. But unfortunately most investors are terrible judges. I know\nbecause I see behind the scenes what an enormous amount of work it takes to\nraise money, and the amount of selling required in an industry is always\ninversely proportional to the judgement of the buyers.  \n  \nFortunately, if startups get cheaper to start, there's another way to convince\ninvestors. Instead of going to venture capitalists with a business plan and\ntrying to convince them to fund it, you can get a product launched on a few\ntens of thousands of dollars of seed money from us or your uncle, and approach\nthem with a working company instead of a plan for one. Then instead of having\nto seem smooth and confident, you can just point them to Alexa.  \n  \nThis way of convincing investors is better suited to hackers, who often went\ninto technology in part because they felt uncomfortable with the amount of\nfakeness required in other fields.  \n  \n**6\\. Startup Hubs Will Persist**  \n  \nIt might seem that if startups get cheap to start, it will mean the end of\nstartup hubs like Silicon Valley. If all you need to start a startup is rent\nmoney, you should be able to do it anywhere.  \n  \nThis is kind of true and kind of false. It's true that you can now _start_ a\nstartup anywhere. But you have to do more with a startup than just start it.\nYou have to make it succeed. And that is more likely to happen in a startup\nhub.  \n  \nI've thought a lot about this question, and it seems to me the increasing\ncheapness of web startups will if anything increase the importance of startup\nhubs. The value of startup hubs, like centers for any kind of business, lies\nin something very old-fashioned: face to face meetings. No technology in the\nimmediate future will replace walking down University Ave and running into a\nfriend who tells you how to fix a bug that's been bothering you all weekend,\nor visiting a friend's startup down the street and ending up in a conversation\nwith one of their investors.  \n  \nThe question of whether to be in a startup hub is like the question of whether\nto take outside investment. The question is not whether you _need_ it, but\nwhether it brings any advantage at all. Because anything that brings an\nadvantage will give your competitors an advantage over you if they do it and\nyou don't. So if you hear someone saying \"we don't need to be in Silicon\nValley,\" that use of the word \"need\" is a sign they're not even thinking about\nthe question right.  \n  \nAnd while startup hubs are as powerful magnets as ever, the increasing\ncheapness of starting a startup means the particles they're attracting are\ngetting lighter. A startup now can be just a pair of 22 year old guys. A\ncompany like that can move much more easily than one with 10 people, half of\nwhom have kids.  \n  \nWe know because we make people move for Y Combinator, and it doesn't seem to\nbe a problem. The advantage of being able to work together face to face for\nthree months outweighs the inconvenience of moving. Ask anyone who's done it.  \n  \nThe mobility of seed-stage startups means that seed funding is a national\nbusiness. One of the most common emails we get is from people asking if we can\nhelp them set up a local clone of Y Combinator. But this just wouldn't work.\nSeed funding isn't regional, just as big research universities aren't.  \n  \nIs seed funding not merely national, but international? Interesting question.\nThere are signs it may be. We've had an ongoing stream of founders from\noutside the US, and they tend to do particularly well, because they're all\npeople who were so determined to succeed that they were willing to move to\nanother country to do it.  \n  \nThe more mobile startups get, the harder it would be to start new silicon\nvalleys. If startups are mobile, the best local talent will go to the real\nSilicon Valley, and all they'll get at the local one will be the people who\ndidn't have the energy to move.  \n  \nThis is not a nationalistic idea, incidentally. It's cities that compete, not\ncountries. Atlanta is just as hosed as Munich.  \n  \n**7\\. Better Judgement Needed**  \n  \nIf the number of startups increases dramatically, then the people whose job is\nto judge them are going to have to get better at it. I'm thinking particularly\nof investors and acquirers. We now get on the order of 1000 applications a\nyear. What are we going to do if we get 10,000?  \n  \nThat's actually an alarming idea. But we'll figure out some kind of answer.\nWe'll have to. It will probably involve writing some software, but fortunately\nwe can do that.  \n  \nAcquirers will also have to get better at picking winners. They generally do\nbetter than investors, because they pick later, when there's more performance\nto measure. But even at the most advanced acquirers, identifying companies to\nbuy is extremely ad hoc, and completing the acquisition often involves a great\ndeal of unneccessary friction.  \n  \nI think acquirers may eventually have chief acquisition officers who will both\nidentify good acquisitions and make the deals happen. At the moment those two\nfunctions are separate. Promising new startups are often discovered by\ndevelopers. If someone powerful enough wants to buy them, the deal is handed\nover to corp dev guys to negotiate. It would be better if both were combined\nin one group, headed by someone with a technical background and some vision of\nwhat they wanted to accomplish. Maybe in the future big companies will have\nboth a VP of Engineering responsible for technology developed in-house, and a\nCAO responsible for bringing technology in from outside.  \n  \nAt the moment, there is no one within big companies who gets in trouble when\nthey buy a startup for $200 million that they could have bought earlier for\n$20 million. There should start to be someone who gets in trouble for that.  \n  \n**8\\. College Will Change**  \n  \nIf the best hackers start their own companies after college instead of getting\njobs, that will change what happens in college. Most of these changes will be\nfor the better. I think the experience of college is warped in a bad way by\nthe expectation that afterward you'll be judged by potential employers.  \n  \nOne change will be in the meaning of \"after college,\" which will switch from\nwhen one graduates from college to when one leaves it. If you're starting your\nown company, why do you need a degree? We don't encourage people to start\nstartups during college, but the best founders are certainly capable of it.\nSome of the most successful companies we've funded were started by undergrads.  \n  \nI grew up in a time where college degrees seemed really important, so I'm\nalarmed to be saying things like this, but there's nothing magical about a\ndegree. There's nothing that magically changes after you take that last exam.\nThe importance of degrees is due solely to the administrative needs of large\norganizations. These can certainly affect your life\u2014it's hard to get into grad\nschool, or to get a work visa in the US, without an undergraduate degree\u2014but\ntests like this will matter less and less.  \n  \nAs well as mattering less whether students get degrees, it will also start to\nmatter less where they go to college. In a startup you're judged by users, and\nthey don't care where you went to college. So in a world of startups, elite\nuniversities will play less of a role as gatekeepers. In the US it's a\nnational scandal how easily children of rich parents game college admissions.\nBut the way this problem ultimately gets solved may not be by reforming the\nuniversities but by going around them. We in the technology world are used to\nthat sort of solution: you don't beat the incumbents; you redefine the problem\nto make them irrelevant.  \n  \nThe greatest value of universities is not the brand name or perhaps even the\nclasses so much as the people you meet. If it becomes common to start a\nstartup after college, students may start trying to maximize this. Instead of\nfocusing on getting internships at companies they want to work for, they may\nstart to focus on working with other students they want as cofounders.  \n  \nWhat students do in their classes will change too. Instead of trying to get\ngood grades to impress future employers, students will try to learn things.\nWe're talking about some pretty dramatic changes here.  \n  \n**9\\. Lots of Competitors**  \n  \nIf it gets easier to start a startup, it's easier for competitors too. That\ndoesn't erase the advantage of increased cheapness, however. You're not all\nplaying a zero-sum game. There's not some fixed number of startups that can\nsucceed, regardless of how many are started.  \n  \nIn fact, I don't think there's any limit to the number of startups that could\nsucceed. Startups succeed by creating wealth, which is the satisfaction of\npeople's desires. And people's desires seem to be effectively infinite, at\nleast in the short term.  \n  \nWhat the increasing number of startups does mean is that you won't be able to\nsit on a good idea. Other people have your idea, and they'll be increasingly\nlikely to do something about it.  \n  \n**10\\. Faster Advances**  \n  \nThere's a good side to that, at least for consumers of technology. If people\nget right to work implementing ideas instead of sitting on them, technology\nwill evolve faster.  \n  \nSome kinds of innovations happen a company at a time, like the punctuated\nequilibrium model of evolution. There are some kinds of ideas that are so\nthreatening that it's hard for big companies even to think of them. Look at\nwhat a hard time Microsoft is having discovering web apps. They're like a\ncharacter in a movie that everyone in the audience can see something bad is\nabout to happen to, but who can't see it himself. The big innovations that\nhappen a company at a time will obviously happen faster if the rate of new\ncompanies increases.  \n  \nBut in fact there will be a double speed increase. People won't wait as long\nto act on new ideas, but also those ideas will increasingly be developed\nwithin startups rather than big companies. Which means technology will evolve\nfaster per company as well.  \n  \nBig companies are just not a good place to make things happen fast. I talked\nrecently to a founder whose startup had been acquired by a big company. He was\na precise sort of guy, so he'd measured their productivity before and after.\nHe counted lines of code, which can be a dubious measure, but in this case was\nmeaningful because it was the same group of programmers. He found they were\none thirteenth as productive after the acquisition.  \n  \nThe company that bought them was not a particularly stupid one. I think what\nhe was measuring was mostly the cost of bigness. I experienced this myself,\nand his number sounds about right. There's something about big companies that\njust sucks the energy out of you.  \n  \nImagine what all that energy could do if it were put to use. There is an\nenormous latent capacity in the world's hackers that most people don't even\nrealize is there. That's the main reason we do Y Combinator: to let loose all\nthis energy by making it easy for hackers to start their own startups.  \n  \n**A Series of Tubes**  \n  \nThe process of starting startups is currently like the plumbing in an old\nhouse. The pipes are narrow and twisty, and there are leaks in every joint. In\nthe future this mess will gradually be replaced by a single, huge pipe. The\nwater will still have to get from A to B, but it will get there faster and\nwithout the risk of spraying out through some random leak.  \n  \nThis will change a lot of things for the better. In a big, straight pipe like\nthat, the force of being measured by one's performance will propagate back\nthrough the whole system. Performance is always the ultimate test, but there\nare so many kinks in the plumbing now that most people are insulated from it\nmost of the time. So you end up with a world in which high school students\nthink they need to get good grades to get into elite colleges, and college\nstudents think they need to get good grades to impress employers, within which\nthe employees waste most of their time in political battles, and from which\nconsumers have to buy anyway because there are so few choices. Imagine if that\nsequence became a big, straight pipe. Then the effects of being measured by\nperformance would propagate all the way back to high school, flushing out all\nthe arbitrary stuff people are measured by now. That is the future of web\nstartups.  \n  \n  \n  \n  \n  \n**Thanks** to Brian Oberkirch and Simon Willison for inviting me to speak, and\nthe crew at Carson Systems for making everything run smoothly.  \n  \n\nMarch 2006, rev August 2009  \n  \nYesterday one of the founders we funded asked me why we started [Y\nCombinator](http://ycombinator.com). Or more precisely, he asked if we'd\nstarted YC mainly for fun.  \n  \nKind of, but not quite. It is enormously fun to be able to work with Rtm and\nTrevor again. I missed that after we sold Viaweb, and for all the years after\nI always had a background process running, looking for something we could do\ntogether. There is definitely an aspect of a band reunion to Y Combinator.\nEvery couple days I slip and call it \"Viaweb.\"  \n  \nViaweb we started very explicitly to make money. I was sick of living from one\nfreelance project to the next, and decided to just work as hard as I could\ntill I'd made enough to solve the problem once and for all. Viaweb was\nsometimes fun, but it wasn't designed for fun, and mostly it wasn't. I'd be\nsurprised if any startup is. All startups are mostly schleps.  \n  \nThe real reason we started Y Combinator is neither selfish nor virtuous. We\ndidn't start it mainly to make money; we have no idea what our average returns\nmight be, and won't know for years. Nor did we start YC mainly to help out\nyoung would-be founders, though we do like the idea, and comfort ourselves\noccasionally with the thought that if all our investments tank, we will thus\nhave been doing something unselfish. (It's oddly nondeterministic.)  \n  \nThe real reason we started Y Combinator is one probably only a\n[hacker](gba.html) would understand. We did it because it seems such a great\nhack. There are thousands of smart people who could start companies and don't,\nand with a relatively small amount of force applied at just the right place,\nwe can spring on the world a stream of new startups that might otherwise not\nhave existed.  \n  \nIn a way this is virtuous, because I think startups are a good thing. But\nreally what motivates us is the completely amoral desire that would motivate\nany hacker who looked at some complex device and realized that with a tiny\ntweak he could make it run more efficiently. In this case, the device is the\nworld's economy, which fortunately happens to be open source.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nJanuary 2012  \n  \nA year ago I noticed a pattern in the least successful startups we'd funded:\nthey all seemed hard to talk to. It felt as if there was some kind of wall\nbetween us. I could never quite tell if they understood what I was saying.  \n  \nThis caught my attention because earlier we'd noticed a pattern among the most\nsuccessful startups, and it seemed to hinge on a different quality. We found\nthe startups that did best were the ones with the sort of founders about whom\nwe'd say \"they can take care of themselves.\" The startups that do best are\nfire-and-forget in the sense that all you have to do is give them a lead, and\nthey'll close it, whatever type of lead it is. When they're raising money, for\nexample, you can do the initial intros knowing that if you wanted to you could\nstop thinking about it at that point. You won't have to babysit the round to\nmake sure it happens. That type of founder is going to come back with the\nmoney; the only question is how much on what terms.  \n  \nIt seemed odd that the outliers at the two ends of the spectrum could be\ndetected by what appeared to be unrelated tests. You'd expect that if the\nfounders at one end were distinguished by the presence of quality x, at the\nother end they'd be distinguished by lack of x. Was there some kind of inverse\nrelation between [resourcefulness](relres.html) and being hard to talk to?  \n  \nIt turns out there is, and the key to the mystery is the old adage \"a word to\nthe wise is sufficient.\" Because this phrase is not only overused, but\noverused in an indirect way (by prepending the subject to some advice), most\npeople who've heard it don't know what it means. What it means is that if\nsomeone is wise, all you have to do is say one word to them, and they'll\nunderstand immediately. You don't have to explain in detail; they'll chase\ndown all the implications.  \n  \nIn much the same way that all you have to do is give the right sort of founder\na one line intro to a VC, and he'll chase down the money. That's the\nconnection. Understanding all the implications \u2014 even the inconvenient\nimplications \u2014 of what someone tells you is a subset of resourcefulness. It's\nconversational resourcefulness.  \n  \nLike real world resourcefulness, conversational resourcefulness often means\ndoing things you don't want to. Chasing down all the implications of what's\nsaid to you can sometimes lead to uncomfortable conclusions. The best word to\ndescribe the failure to do so is probably \"denial,\" though that seems a bit\ntoo narrow. A better way to describe the situation would be to say that the\nunsuccessful founders had the sort of conservatism that comes from weakness.\nThey traversed idea space as gingerly as a very old person traverses the\nphysical world. [1]  \n  \nThe unsuccessful founders weren't stupid. Intellectually they were as capable\nas the successful founders of following all the implications of what one said\nto them. They just weren't eager to.  \n  \nSo being hard to talk to was not what was killing the unsuccessful startups.\nIt was a sign of an underlying lack of resourcefulness. That's what was\nkilling them. As well as failing to chase down the implications of what was\nsaid to them, the unsuccessful founders would also fail to chase down funding,\nand users, and sources of new ideas. But the most immediate evidence I had\nthat something was amiss was that I couldn't talk to them.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] A YC partner wrote:  \n  \nMy feeling with the bad groups is that coming into office hours, they've\nalready decided what they're going to do and everything I say is being put\nthrough an internal process in their heads, which either desperately tries to\nmunge what I've said into something that conforms with their decision or just\noutright dismisses it and creates a rationalization for doing so. They may not\neven be conscious of this process but that's what I think is happening when\nyou say something to bad groups and they have that glazed over look. I don't\nthink it's confusion or lack of understanding per se, it's this internal\nprocess at work.  \n  \nWith the good groups, you can tell that everything you say is being looked at\nwith fresh eyes and even if it's dismissed, it's because of some logical\nreason e.g. \"we already tried that\" or \"from speaking to our users that isn't\nwhat they'd like,\" etc. Those groups never have that glazed over look.  \n  \n  \n  \n**Thanks** to Sam Altman, Patrick Collison, Aaron Iba, Jessica Livingston,\nRobert Morris, Harj Taggar, and Garry Tan for reading drafts of this.  \n  \n\nFebruary 2022  \n  \nWriting about something, even something you know well, usually shows you that\nyou didn't know it as well as you thought. Putting ideas into words is a\nsevere test. The first words you choose are usually wrong; you have to rewrite\nsentences over and over  to get them exactly right. And your ideas won't just\nbe imprecise, but incomplete too. Half the ideas that end up in an essay will\nbe ones you thought of while you were writing it. Indeed, that's why I write\nthem.  \n  \nOnce you publish something, the convention is that whatever you wrote was what\nyou thought before you wrote it. These were your ideas, and now you've\nexpressed them. But you know this isn't true. You know that putting your ideas\ninto words changed them. And not just the ideas you published. Presumably\nthere were others that turned out to be too broken to fix, and those you\ndiscarded instead.  \n  \nIt's not just having to commit your ideas to specific words that makes writing\nso exacting. The real test is reading what you've written. You have to pretend\nto be a neutral reader who knows nothing of what's in your head, only what you\nwrote. When he reads what you wrote, does it seem correct? Does it seem\ncomplete? If you make an effort, you can read your writing as if you were a\ncomplete stranger, and when you do the news is usually bad. It takes me many\ncycles before I can get an essay past the stranger. But the stranger is\nrational, so you always can, if you ask him what he needs. If he's not\nsatisfied because you failed to mention x or didn't qualify some sentence\nsufficiently, then you mention x or add more qualifications. Happy now? It may\ncost you some nice sentences, but you have to resign yourself to that. You\njust have to make them as good as you can and still satisfy the stranger.  \n  \nThis much, I assume, won't be that controversial. I think it will accord with\nthe experience of anyone who has tried to write about anything nontrivial.\nThere may exist people whose thoughts are so perfectly formed that they just\nflow straight into words. But I've never known anyone who could do this, and\nif I met someone who said they could, it would seem evidence of their\nlimitations rather than their ability. Indeed, this is a trope in movies: the\nguy who claims to have a plan for doing some difficult thing, and who when\nquestioned further, taps his head and says \"It's all up here.\" Everyone\nwatching the movie knows what that means. At best the plan is vague and\nincomplete. Very likely there's some undiscovered flaw that invalidates it\ncompletely. At best it's a plan for a plan.  \n  \nIn precisely defined domains it's possible to form complete ideas in your\nhead. People can play chess in their heads, for example. And mathematicians\ncan do some amount of math in their heads, though they don't seem to feel sure\nof a proof over a certain length till they write it down. But this only seems\npossible with ideas you can express in a formal language. [1] Arguably what\nsuch people are doing is putting ideas into words in their heads. I can to\nsome extent write essays in my head. I'll sometimes think of a paragraph while\nwalking or lying in bed that survives nearly unchanged in the final version.\nBut really I'm writing when I do this. I'm doing the mental part of writing;\nmy fingers just aren't moving as I do it. [2]  \n  \nYou can know a great deal about something without writing about it. Can you\never know so much that you wouldn't learn more from trying to explain what you\nknow? I don't think so. I've written about at least two subjects I know well \u2014\nLisp hacking and startups \u2014 and in both cases I learned a lot from writing\nabout them. In both cases there were things I didn't consciously realize till\nI had to explain them. And I don't think my experience was anomalous. A great\ndeal of knowledge is unconscious, and experts have if anything a higher\nproportion of unconscious knowledge than beginners.  \n  \nI'm not saying that writing is the best way to explore all ideas. If you have\nideas about architecture, presumably the best way to explore them is to build\nactual buildings. What I'm saying is that however much you learn from\nexploring ideas in other ways, you'll still learn new things from writing\nabout them.  \n  \nPutting ideas into words doesn't have to mean writing, of course. You can also\ndo it the old way, by talking. But in my experience, writing is the stricter\ntest. You have to commit to a single, optimal sequence of words. Less can go\nunsaid when you don't have tone of voice to carry meaning. And you can focus\nin a way that would seem excessive in conversation. I'll often spend 2 weeks\non an essay and reread drafts 50 times. If you did that in conversation it\nwould seem evidence of some kind of mental disorder. If you're lazy, of\ncourse, writing and talking are equally useless. But if you want to push\nyourself to get things right, writing is the steeper hill. [3]  \n  \nThe reason I've spent so long establishing this rather obvious point is that\nit leads to another that many people will find shocking. If writing down your\nideas always makes them more precise and more complete, then no one who hasn't\nwritten about a topic has fully formed ideas about it. And someone who never\nwrites has no fully formed ideas about anything nontrivial.  \n  \nIt feels to them as if they do, especially if they're not in the habit of\ncritically examining their own thinking. Ideas can feel complete. It's only\nwhen you try to put them into words that you discover they're not. So if you\nnever subject your ideas to that test, you'll not only never have fully formed\nideas, but also never realize it.  \n  \nPutting ideas into words is certainly no guarantee that they'll be right. Far\nfrom it. But though it's not a sufficient condition, it is a necessary one.  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] Machinery and circuits are formal languages.  \n  \n[2] I thought of this sentence as I was walking down the street in Palo Alto.  \n  \n[3] There are two senses of talking to someone: a strict sense in which the\nconversation is verbal, and a more general sense in which it can take any\nform, including writing. In the limit case (e.g. Seneca's letters),\nconversation in the latter sense becomes essay writing.  \n  \nIt can be very useful to talk (in either sense) with other people as you're\nwriting something. But a verbal conversation will never be more exacting than\nwhen you're talking about something you're writing.  \n  \n  \n  \n**Thanks** to Trevor Blackwell, Patrick Collison, and Robert Morris for\nreading drafts of this.  \n  \n\nJanuary 2015  \n  \nMy father is a mathematician. For most of my childhood he worked for\nWestinghouse, modelling nuclear reactors.  \n  \nHe was one of those lucky people who know early on what they want to do. When\nyou talk to him about his childhood, there's a clear watershed at about age\n12, when he \"got interested in maths.\"  \n  \nHe grew up in the small Welsh seacoast town of\n[Pwllheli](https://goo.gl/maps/rkzUm). As we retraced his walk to school on\nGoogle Street View, he said that it had been nice growing up in the country.  \n  \n\"Didn't it get boring when you got to be about 15?\" I asked.  \n  \n\"No,\" he said, \"by then I was interested in maths.\"  \n  \nIn another conversation he told me that what he really liked was solving\nproblems. To me the exercises at the end of each chapter in a math textbook\nrepresent work, or at best a way to reinforce what you learned in that\nchapter. To him the problems were the reward. The text of each chapter was\njust some advice about solving them. He said that as soon as he got a new\ntextbook he'd immediately work out all the problems \u2014 to the slight annoyance\nof his teacher, since the class was supposed to work through the book\ngradually.  \n  \nFew people know so early or so certainly what they want to work on. But\ntalking to my father reminded me of a heuristic the rest of us can use. If\nsomething that seems like work to other people doesn't seem like work to you,\nthat's something you're well suited for. For example, a lot of programmers I\nknow, including me, actually like debugging. It's not something people tend to\nvolunteer; one likes it the way one likes popping zits. But you may have to\nlike debugging to like programming, considering the degree to which\nprogramming consists of it.  \n  \nThe stranger your tastes seem to other people, the stronger evidence they\nprobably are of what you should do. When I was in college I used to write\npapers for my friends. It was quite interesting to write a paper for a class I\nwasn't taking. Plus they were always so relieved.  \n  \nIt seemed curious that the same task could be painful to one person and\npleasant to another, but I didn't realize at the time what this imbalance\nimplied, because I wasn't looking for it. I didn't realize how hard it can be\nto decide what you should work on, and that you sometimes have to [figure it\nout](love.html) from subtle clues, like a detective solving a case in a\nmystery novel. So I bet it would help a lot of people to ask themselves about\nthis explicitly. What seems like work to other people that doesn't seem like\nwork to you?  \n  \n  \n  \n  \n  \n**Thanks** to Sam Altman, Trevor Blackwell, Jessica Livingston, Robert Morris,\nand my father for reading drafts of this.  \n  \n\nMarch 2005  \n  \n_(In the process of answering an email, I accidentally wrote a tiny essay\nabout writing. I usually spend weeks on an essay. This one took 67 minutes\u201423\nof writing, and  44 of rewriting.)_  \n  \nI think it's far more important to write well than most people realize.\nWriting doesn't just communicate ideas; it generates them. If you're bad at\nwriting and don't like to do it, you'll miss out on most of the ideas writing\nwould have generated.  \n  \nAs for how to write well, here's the short version: Write a bad version 1 as\nfast as you can; rewrite it over and over; cut ~~out~~ everything unnecessary;\nwrite in a conversational tone; develop a nose for bad writing, so you can see\nand fix it in yours; imitate writers you like; if you can't get started, tell\nsomeone what you plan to write about, then write down what you said; expect\n80% of the ideas in an essay to happen after you start writing it, and 50% of\nthose you start with to be wrong; be confident enough to cut; have friends you\ntrust read your stuff and tell you which bits are confusing or drag; don't\n(always) make detailed outlines; mull ideas over for a few days before\nwriting; carry a small notebook or scrap paper with you; start writing when\nyou think of the first sentence; if a deadline forces you to start before\nthat, just say the most important sentence first; write about stuff you like;\ndon't try to sound impressive; don't hesitate to change the topic on the fly;\nuse footnotes to contain digressions; use anaphora to knit sentences together;\nread your essays out loud to see (a) where you stumble over awkward phrases\nand (b) which bits are boring (the paragraphs you dread reading); try to tell\nthe reader something new and useful; work in fairly big quanta of time; when\nyou restart, begin by rereading what you have so far; when you finish, leave\nyourself something easy to start with; accumulate notes for topics you plan to\ncover at the bottom of the file; don't feel obliged to cover any of them;\nwrite for a reader who won't read the essay as carefully as you do, just as\npop songs are designed to sound ok on crappy car radios;  if you say anything\nmistaken, fix it immediately; ask friends which sentence you'll regret most;\ngo back and tone down harsh remarks; publish stuff online, because an audience\nmakes you write more, and thus generate more ideas; print out drafts instead\nof just looking at them on the screen; use simple, germanic words; learn to\ndistinguish surprises from digressions; learn to recognize the approach of an\nending, and when one appears, grab it.  \n  \n\nAugust 2020  \n  \nSome politicians are proposing to introduce wealth taxes in addition to income\nand capital gains taxes. Let's try modeling the effects of various levels of\nwealth tax to see what they would mean in practice for a startup founder.  \n  \nSuppose you start a successful startup in your twenties, and then live for\nanother 60 years. How much of your stock will a wealth tax consume?  \n  \nIf the wealth tax applies to all your assets, it's easy to calculate its\neffect. A wealth tax of 1% means you get to keep 99% of your stock each year.\nAfter 60 years the proportion of stock you'll have left will be .99^60, or\n.547. So a straight 1% wealth tax means the government will over the course of\nyour life take 45% of your stock.  \n  \n(Losing shares does not, obviously, mean becoming _net_ poorer unless the\nvalue per share is increasing by less than the wealth tax rate.)  \n  \nHere's how much stock the government would take over 60 years at various\nlevels of wealth tax:  \n  \nwealth taxgovernment takes  \n0.1%6%  \n0.5%26%  \n1.0%45%  \n2.0%70%  \n3.0%84%  \n4.0%91%  \n5.0%95%  \n  \nA wealth tax will usually have a threshold at which it starts. How much\ndifference would a high threshold make? To model that, we need to make some\nassumptions about the initial value of your stock and the growth rate.  \n  \nSuppose your stock is initially worth $2 million, and the company's trajectory\nis as follows: the value of your stock grows 3x for 2 years, then 2x for 2\nyears, then 50% for 2 years, after which you just get a typical public company\ngrowth rate, which we'll call 8%. [1] Suppose the wealth tax threshold is $50\nmillion. How much stock does the government take now?  wealth taxgovernment\ntakes  \n0.1%5%  \n0.5%23%  \n1.0%41%  \n2.0%65%  \n3.0%79%  \n4.0%88%  \n5.0%93%  \n  \nIt may at first seem surprising that such apparently small tax rates produce\nsuch dramatic effects. A 2% wealth tax with a $50 million threshold takes\nabout two thirds of a successful founder's stock.  \n  \nThe reason wealth taxes have such dramatic effects is that they're applied\nover and over to the same money. Income tax happens every year, but only to\nthat year's income. Whereas if you live for 60 years after acquiring some\nasset, a wealth tax will tax that same asset 60 times. A wealth tax compounds.  \n  \n  \n  \n  \n  \n  \n  \n**Note**  \n  \n[1] In practice, eventually some of this 8% would come in the form of\ndividends, which are taxed as income at issue, so this model actually\nrepresents the most optimistic case for the founder.  \n  \n\n**Want to start a startup?** Get funded by [Y\nCombinator](http://ycombinator.com/apply.html).  \n  \n  \nAugust 2010  \n  \nWhen I went to work for Yahoo after they bought our startup in 1998, it felt\nlike the center of the world. It was supposed to be the next big thing. It was\nsupposed to be what Google turned out to be.  \n  \nWhat went wrong? The problems that hosed Yahoo go back a long time,\npractically to the beginning of the company. They were already very visible\nwhen I got there in 1998. Yahoo had two problems Google didn't: easy money,\nand ambivalence about being a technology company.  \n  \n**Money**  \n  \nThe first time I met Jerry Yang, we thought we were meeting for different\nreasons. He thought we were meeting so he could check us out in person before\nbuying us. I thought we were meeting so we could show him our new technology,\nRevenue Loop. It was a way of sorting shopping search results. Merchants bid a\npercentage of sales for traffic, but the results were sorted not by the bid\nbut by the bid times the average amount a user would buy. It was like the\nalgorithm Google uses now to sort ads, but this was in the spring of 1998,\nbefore Google was founded.  \n  \nRevenue Loop was the optimal sort for shopping search, in the sense that it\nsorted in order of how much money Yahoo would make from each link. But it\nwasn't just optimal in that sense. Ranking search results by user behavior\nalso makes search better. Users train the search: you can start out finding\nmatches based on mere textual similarity, and as users buy more stuff the\nsearch results get better and better.  \n  \nJerry didn't seem to care. I was confused. I was showing him technology that\nextracted the maximum value from search traffic, and he didn't care? I\ncouldn't tell whether I was explaining it badly, or he was just very poker\nfaced.  \n  \nI didn't realize the answer till later, after I went to work at Yahoo. It was\nneither of my guesses. The reason Yahoo didn't care about a technique that\nextracted the full value of traffic was that advertisers were already\noverpaying for it. If Yahoo merely extracted the actual value, they'd have\nmade less.  \n  \nHard as it is to believe now, the big money then was in banner ads.\nAdvertisers were willing to pay ridiculous amounts for banner ads. So Yahoo's\nsales force had evolved to exploit this source of revenue. Led by a large and\nterrifyingly formidable man called Anil Singh, Yahoo's sales guys would fly\nout to Procter & Gamble and come back with million dollar orders for banner ad\nimpressions.  \n  \nThe prices seemed cheap compared to print, which was what advertisers, for\nlack of any other reference, compared them to. But they were expensive\ncompared to what they were worth. So these big, dumb companies were a\ndangerous source of revenue to depend on. But there was another source even\nmore dangerous: other Internet startups.  \n  \nBy 1998, Yahoo was the beneficiary of a de facto Ponzi scheme. Investors were\nexcited about the Internet. One reason they were excited was Yahoo's revenue\ngrowth. So they invested in new Internet startups. The startups then used the\nmoney to buy ads on Yahoo to get traffic. Which caused yet more revenue growth\nfor Yahoo, and further convinced investors the Internet was worth investing\nin. When I realized this one day, sitting in my cubicle, I jumped up like\nArchimedes in his bathtub, except instead of \"Eureka!\" I was shouting \"Sell!\"  \n  \nBoth the Internet startups and the Procter & Gambles were doing brand\nadvertising. They didn't care about targeting. They just wanted lots of people\nto see their ads. So traffic became the thing to get at Yahoo. It didn't\nmatter what type. [1]  \n  \nIt wasn't just Yahoo. All the search engines were doing it. This was why they\nwere trying to get people to start calling them \"portals\" instead of \"search\nengines.\" Despite the actual meaning of the word portal, what they meant by it\nwas a site where users would find what they wanted on the site itself, instead\nof just passing through on their way to other destinations, as they did at a\nsearch engine.  \n  \nI remember telling David Filo in late 1998 or early 1999 that Yahoo should buy\nGoogle, because I and most of the other programmers in the company were using\nit instead of Yahoo for search. He told me that it wasn't worth worrying\nabout. Search was only 6% of our traffic, and we were growing at 10% a month.\nIt wasn't worth doing better.  \n  \nI didn't say \"But search traffic is worth more than other traffic!\" I said\n\"Oh, ok.\" Because I didn't realize either how much search traffic was worth.\nI'm not sure even Larry and Sergey did then. If they had, Google presumably\nwouldn't have expended any effort on enterprise search.  \n  \nIf circumstances had been different, the people running Yahoo might have\nrealized sooner how important search was. But they had the most opaque\nobstacle in the world between them and the truth: money. As long as customers\nwere writing big checks for banner ads, it was hard to take search seriously.\nGoogle didn't have that to distract them.  \n  \n**Hackers**  \n  \nBut Yahoo also had another problem that made it hard to change directions.\nThey'd been thrown off balance from the start by their ambivalence about being\na technology company.  \n  \nOne of the weirdest things about Yahoo when I went to work there was the way\nthey insisted on calling themselves a \"media company.\" If you walked around\ntheir offices, it seemed like a software company. The cubicles were full of\nprogrammers writing code, product managers thinking about feature lists and\nship dates, support people (yes, there were actually support people) telling\nusers to restart their browsers, and so on, just like a software company. So\nwhy did they call themselves a media company?  \n  \nOne reason was the way they made money: by selling ads. In 1995 it was hard to\nimagine a technology company making money that way. Technology companies made\nmoney by selling their software to users. Media companies sold ads. So they\nmust be a media company.  \n  \nAnother big factor was the fear of Microsoft. If anyone at Yahoo considered\nthe idea that they should be a technology company, the next thought would have\nbeen that Microsoft would crush them.  \n  \nIt's hard for anyone much younger than me to understand the fear Microsoft\nstill inspired in 1995. Imagine a company with several times the power Google\nhas now, but way meaner. It was perfectly reasonable to be afraid of them.\nYahoo watched them crush the first hot Internet company, Netscape. It was\nreasonable to worry that if they tried to be the next Netscape, they'd suffer\nthe same fate. How were they to know that Netscape would turn out to be\nMicrosoft's last victim?  \n  \nIt would have been a clever move to pretend to be a media company to throw\nMicrosoft off their scent. But unfortunately Yahoo actually tried to be one,\nsort of. Project managers at Yahoo were called \"producers,\" for example, and\nthe different parts of the company were called \"properties.\" But what Yahoo\nreally needed to be was a technology company, and by trying to be something\nelse, they ended up being something that was neither here nor there. That's\nwhy Yahoo as a company has never had a sharply defined identity.  \n  \nThe worst consequence of trying to be a media company was that they didn't\ntake programming seriously enough. Microsoft (back in the day), Google, and\nFacebook have all had hacker-centric cultures. But Yahoo treated programming\nas a commodity. At Yahoo, user-facing software was controlled by product\nmanagers and designers. The job of programmers was just to take the work of\nthe product managers and designers the final step, by translating it into\ncode.  \n  \nOne obvious result of this practice was that when Yahoo built things, they\noften weren't very good. But that wasn't the worst problem. The worst problem\nwas that they hired bad programmers.  \n  \nMicrosoft (back in the day), Google, and Facebook have all been obsessed with\nhiring the best programmers. Yahoo wasn't. They preferred good programmers to\nbad ones, but they didn't have the kind of single-minded, almost obnoxiously\nelitist focus on hiring the smartest people that the big winners have had. And\nwhen you consider how much competition there was for programmers when they\nwere hiring, during the Bubble, it's not surprising that the quality of their\nprogrammers was uneven.  \n  \nIn technology, once you have bad programmers, you're doomed. I can't think of\nan instance where a company has sunk into technical mediocrity and recovered.\nGood programmers want to work with other good programmers. So once the quality\nof programmers at your company starts to drop, you enter a death spiral from\nwhich there is no recovery. [2]  \n  \nAt Yahoo this death spiral started early. If there was ever a time when Yahoo\nwas a Google-style talent magnet, it was over by the time I got there in 1998.  \n  \nThe company felt prematurely old. Most technology companies eventually get\ntaken over by suits and middle managers. At Yahoo it felt as if they'd\ndeliberately accelerated this process. They didn't want to be a bunch of\nhackers. They wanted to be suits. A media company should be run by suits.  \n  \nThe first time I visited Google, they had about 500 people, the same number\nYahoo had when I went to work there. But boy did things seem different. It was\nstill very much a hacker-centric culture. I remember talking to some\nprogrammers in the cafeteria about the problem of gaming search results (now\nknown as SEO), and they asked \"what should we do?\" Programmers at Yahoo\nwouldn't have asked that. Theirs was not to reason why; theirs was to build\nwhat product managers spec'd. I remember coming away from Google thinking\n\"Wow, it's still a startup.\"  \n  \nThere's not much we can learn from Yahoo's first fatal flaw. It's probably too\nmuch to hope any company could avoid being damaged by depending on a bogus\nsource of revenue. But startups can learn an important lesson from the second\none. In the software business, you can't afford not to have a hacker-centric\nculture.  \n  \nProbably the most impressive commitment I've heard to having a hacker-centric\nculture came from Mark Zuckerberg, when he spoke at Startup School in 2007. He\nsaid that in the early days Facebook made a point of hiring programmers even\nfor jobs that would not ordinarily consist of programming, like HR and\nmarketing.  \n  \nSo which companies need to have a hacker-centric culture? Which companies are\n\"in the software business\" in this respect? As Yahoo discovered, the area\ncovered by this rule is bigger than most people realize. The answer is: any\ncompany that needs to have good software.  \n  \nWhy would great programmers want to work for a company that didn't have a\nhacker-centric culture, as long as there were others that did? I can imagine\ntwo reasons: if they were paid a huge amount, or if the domain was interesting\nand none of the companies in it were hacker-centric. Otherwise you can't\nattract good programmers to work in a suit-centric culture. And without good\nprogrammers you won't get good software, no matter how many people you put on\na task, or how many procedures you establish to ensure \"quality.\"  \n  \n[Hacker culture](gba.html) often seems kind of irresponsible. That's why\npeople proposing to destroy it use phrases like \"adult supervision.\" That was\nthe phrase they used at Yahoo. But there are worse things than seeming\nirresponsible. Losing, for example.  \n  \n  \n  \n  \n  \n**Notes**  \n  \n[1] The closest we got to targeting when I was there was when we created\npets.yahoo.com in order to provoke a bidding war between 3 pet supply startups\nfor the spot as top sponsor.  \n  \n[2] In theory you could beat the death spiral by buying good programmers\ninstead of hiring them. You can get programmers who would never have come to\nyou as employees by buying their startups. But so far the only companies smart\nenough to do this are companies smart enough not to need to.  \n  \n**Thanks** to Trevor Blackwell, Jessica Livingston, and Geoff Ralston for\nreading drafts of this.  \n  \n\nMarch 2008, rev May 2013  \n  \n _(This essay grew out of something I wrote for myself to figure out what we\ndo. Even though Y Combinator is now 3 years old, we're still trying to\nunderstand its implications.)_  \n  \nI was annoyed recently to read a description of Y Combinator that said \"Y\nCombinator does seed funding for startups.\" What was especially annoying about\nit was that I wrote it. This doesn't really convey what we do. And the reason\nit's inaccurate is that, paradoxically, funding very early stage startups is\nnot mainly about funding.  \n  \nSaying YC does seed funding for startups is a description in terms of earlier\nmodels. It's like calling a car a horseless carriage.  \n  \nWhen you scale animals you can't just keep everything in proportion. For\nexample, volume grows as the cube of linear dimension, but surface area only\nas the square. So as animals get bigger they have trouble radiating heat.\nThat's why mice and rabbits are furry and elephants and hippos aren't. You\ncan't make a mouse by scaling down an elephant.  \n  \nYC represents a new, smaller kind of animal\u2014so much smaller that all the rules\nare different.  \n  \nBefore us, most companies in the startup funding business were venture capital\nfunds. VCs generally fund later stage companies than we do. And they supply so\nmuch money that, even though the other things they do may be very valuable,\nit's not that inaccurate to regard VCs as sources of money. Good VCs are\n\"smart money,\" but they're still money.  \n  \nAll good investors supply a combination of money and help. But these scale\ndifferently, just as volume and surface area do. Late stage investors supply\nhuge amounts of money and comparatively little help: when a company about to\ngo public gets a mezzanine round of $50 million, the deal tends to be almost\nentirely about money. As you move earlier in the venture funding process, the\nratio of help to money increases, because earlier stage companies have\ndifferent needs. Early stage companies need less money because they're smaller\nand cheaper to run, but they need more help because life is so precarious for\nthem. So when VCs do a series A round for, say, $2 million, they generally\nexpect to offer a significant amount of help along with the money.  \n  \nY Combinator occupies the earliest end of the spectrum. We're at least one and\ngenerally two steps before VC funding. (Though some startups go straight from\nYC to VC, the most common trajectory is to do an angel round first.) And what\nhappens at Y Combinator is as different from what happens in a series A round\nas a series A round is from a mezzanine financing.  \n  \nAt our end, money is almost a negligible factor. The startup usually consists\nof just the founders. Their living expenses are the company's main expense,\nand since most founders are under 30, their living expenses are low. But at\nthis early stage companies need a lot of help. Practically every question is\nstill unanswered. Some companies we've funded have been working on their\nsoftware for a year or more, but others haven't decided what to work on, or\neven who the founders should be.  \n  \nWhen PR people and journalists recount the histories of startups after they've\nbecome big, they always underestimate how uncertain things were at first.\nThey're not being deliberately misleading. When you look at a company like\nGoogle, it's hard to imagine they could once have been small and helpless.\nSure, at one point they were a just a couple guys in a garage\u2014but even then\ntheir greatness was assured, and all they had to do was roll forward along the\nrailroad tracks of destiny.  \n  \nFar from it. A lot of startups with just as promising beginnings end up\nfailing. Google has such momentum now that it would be hard for anyone to stop\nthem. But all it would have taken in the beginning would have been for two\nGoogle employees to focus on the wrong things for six months, and the company\ncould have died.  \n  \nWe know, because we've been there, just how vulnerable startups are in the\nearliest phases. Curiously enough, that's why founders tend to get so rich\nfrom them. Reward is always proportionate to risk, and very early stage\nstartups are insanely risky.  \n  \nWhat we really do at Y Combinator is get startups launched straight. One of\nmany metaphors you could use for YC is a steam catapult on an aircraft\ncarrier. We get startups airborne. Barely airborne, but enough that they can\naccelerate fast.  \n  \nWhen you're launching planes they have to be set up properly or you're just\nlaunching projectiles. They have to be pointed straight down the deck; the\nwings have to be trimmed properly; the engines have to be at full power; the\npilot has to be ready. These are the kind of problems we deal with. After we\nfund startups we work closely with them for three months\u2014so closely in fact\nthat we insist they move to where we are. And what we do in those three months\nis make sure everything is set up for launch. If there are tensions between\ncofounders we help sort them out. We get all the paperwork set up properly so\nthere are no nasty surprises later. If the founders aren't sure what to focus\non first, we try to figure that out. If there is some obstacle right in front\nof them, we either try to remove it, or shift the startup sideways. The goal\nis to get every distraction out of the way so the founders can use that time\nto build (or finish building) something impressive. And then near the end of\nthe three months we push the button on the steam catapult in the form of Demo\nDay, where the current group of startups present to pretty much every investor\nin Silicon Valley.  \n  \nLaunching companies isn't identical with launching products. Though we do\nspend a lot of time on launch strategies for products, there are some things\nthat take too long to build for a startup to launch them before raising their\nnext round of funding. Several of the most promising startups we've funded\nhaven't launched their products yet, but are definitely launched as companies.  \n  \nIn the earliest stage, startups not only have more questions to answer, but\nthey tend to be different kinds of questions. In later stage startups the\nquestions are about deals, or hiring, or organization. In the earliest phase\nthey tend to be about technology and design. What do you make? That's the\nfirst problem to solve. That's why our motto is \"Make something people want.\"\nThis is always a good thing for companies to do, but it's even more important\nearly on, because it sets the bounds for every other question. Who you hire,\nhow much money you raise, how you market yourself\u2014they all depend on what\nyou're making.  \n  \nBecause the early problems are so much about technology and design, you\nprobably need to be hackers to do what we do. While some VCs have technical\nbackgrounds, I don't know any who still write code. Their expertise is mostly\nin business\u2014as it should be, because that's the kind of expertise you need in\nthe phase between series A and (if you're lucky) IPO.  \n  \nWe're so different from VCs that we're really a different kind of animal. Can\nwe claim founders are better off as a result of this new type of venture firm?\nI'm pretty sure the answer is yes, because YC is an improved version of what\nhappened to our startup, and our case was not atypical. We started Viaweb with\n$10,000 in seed money from our friend Julian. He was a lawyer and arranged all\nour paperwork, so we could just code. We spent three months building a version\n1, which we then presented to investors to raise more money. Sounds familiar,\ndoesn't it? But YC improves on that significantly. Julian knew a lot about law\nand business, but his advice ended there; he was not a startup guy. So we made\nsome basic mistakes early on. And when we presented to investors, we presented\nto only 2, because that was all we knew. If we'd had our later selves to\nencourage and advise us, and Demo Day to present at, we would have been in\nmuch better shape. We probably could have raised money at 3 to 5 times the\nvaluation we did.  \n  \nIf we take 7% of a company we fund, the founders only have to do\n[7.5%](equity.html) better in their next round of funding to end up net ahead.\nWe certainly manage that.  \n  \nSo who is our 7% coming out of? If the founders end up net ahead it's not\ncoming out of them. So is it coming out of later stage investors? Well, they\ndo end up paying more. But I think they pay more because the company is\nactually more valuable. And later stage investors have no problem with that.\nThe returns of a VC fund depend on the quality of the companies they invest\nin, not how cheaply they can buy stock in them.  \n  \nIf what we do is useful, why wasn't anyone doing it before? There are two\nanswers to that. One is that people were doing it before, just haphazardly on\na smaller scale. Before us, seed funding came primarily from individual angel\ninvestors. Larry and Sergey, for example, got their seed funding from Andy\nBechtolsheim, one of the founders of Sun. And because he was a startup guy he\nprobably gave them useful advice. But raising money from angel investors is a\nhit or miss thing. It's a sideline for most of them, so they only do a handful\nof deals a year and they don't spend a lot of time on the startups they invest\nin. And they're hard to reach, because they don't want random startups\npestering them with business plans. The Google guys were lucky because they\nknew someone who knew Bechtolsheim. It generally takes a personal introduction\nwith angels.  \n  \nThe other reason no one was doing quite what we do is that till recently it\nwas a lot more expensive to start a startup. You'll notice we haven't funded\nany biotech startups. That's still expensive. But advancing technology has\nmade web startups so cheap that you really can get a company airborne for\n$15,000. If you understand how to operate a steam catapult, at least.  \n  \nSo in effect what's happened is that a new ecological niche has opened up, and\nY Combinator is the new kind of animal that has moved into it. We're not a\nreplacement for venture capital funds. We occupy a new, adjacent niche. And\nconditions in our niche are really quite different. It's not just that the\nproblems we face are different; the whole structure of the business is\ndifferent. VCs are playing a zero-sum game. They're all competing for a slice\nof a fixed amount of \"deal flow,\" and that explains a lot of their behavior.\nWhereas our m.o. is to create new deal flow, by encouraging hackers who would\nhave gotten jobs to start their own startups instead. We compete more with\nemployers than VCs.  \n  \nIt's not surprising something like this would happen. Most fields become more\nspecialized\u2014more articulated\u2014as they develop, and startups are certainly an\narea in which there has been a lot of development over the past couple\ndecades. The venture business in its present form is only about forty years\nold. It stands to reason it would evolve.  \n  \nAnd it's natural that the new niche would at first be described, even by its\ninhabitants, in terms of the old one. But really Y Combinator is not in the\nstartup funding business. Really we're more of a small, furry steam catapult.  \n  \n  \n  \n  \n  \n**Thanks** to Trevor Blackwell, Jessica Livingston, and Robert Morris for\nreading drafts of this.  \n  \n[Comment](http://news.ycombinator.com/item?id=133430) on this essay.  \n  \n  \n\nMarch 2012  \n  \nY Combinator's 7th birthday was March 11. As usual we were so busy we didn't\nnotice till a few days after. I don't think we've ever managed to remember our\nbirthday on our birthday.\n\nOn March 11 2005, Jessica and I were walking home from dinner in Harvard\nSquare. Jessica was working at an investment bank at the time, but she didn't\nlike it much, so she had interviewed for a job as director of marketing at a\nBoston VC fund. The VC fund was doing what now seems a comically familiar\nthing for a VC fund to do: taking a long time to make up their mind. Meanwhile\nI had been telling Jessica all the things they should change about the VC\nbusiness \u0097 essentially the ideas now underlying Y Combinator: investors should\nbe making more, smaller investments, they should be funding hackers instead of\nsuits, they should be willing to fund younger founders, etc.\n\nAt the time I had been thinking about doing some angel investing. I had just\ngiven a talk to the undergraduate computer club at Harvard about [how to start\na startup](start.html), and it hit me afterward that although I had always\nmeant to do angel investing, 7 years had now passed since I got enough money\nto do it, and I still hadn't started. I had also been thinking about ways to\nwork with Robert Morris and Trevor Blackwell again. A few hours before I had\nsent them an email trying to figure out what we could do together.\n\nBetween Harvard Square and my house the idea gelled. We'd start our own\ninvestment firm and Jessica could work for that instead. As we turned onto\nWalker Street we decided to do it. I agreed to put $100k into the new fund and\nJessica agreed to quit her job to work for it. Over the next couple days I\nrecruited Robert and Trevor, who put in another $50k each. So YC started with\n$200k.\n\nJessica was so happy to be able to quit her job and start her own company that\nI took her\n[picture](https://web.archive.org/web/20170609055553/http://www.ycombinator.com/yc05.html)\nwhen we got home.\n\nThe company wasn't called Y Combinator yet. At first we called it Cambridge\nSeed. But that name never saw the light of day, because by the time we\nannounced it a few days later, we'd changed the name to Y Combinator. We\nrealized early on that what we were doing could be national in scope and we\ndidn't want a name that tied us to one place.\n\nInitially we only had part of the idea. We were going to do seed funding with\nstandardized terms. Before YC, seed funding was very haphazard. You'd get that\nfirst $10k from your friend's rich uncle. The deal terms were often a\ndisaster; often neither the investor nor the founders nor the lawyer knew what\nthe documents should look like. Facebook's early history as a Florida LLC\nshows how random things could be in those days. We were going to be something\nthere had not been before: a standard source of seed funding.\n\nWe modelled YC on the seed funding we ourselves had taken when we started\nViaweb. We started Viaweb with $10k we got from our friend [Julian\nWeber](julian.html), the husband of Idelle Weber, whose painting class I took\nas a grad student at Harvard. Julian knew about business, but you would not\ndescribe him as a suit. Among other things he'd been president of the\n_National Lampoon_. He was also a lawyer, and got all our paperwork set up\nproperly. In return for $10k, getting us set up as a company, teaching us what\nbusiness was about, and remaining calm in times of crisis, Julian got 10% of\nViaweb. I remember thinking once what a good deal Julian got. And then a\nsecond later I realized that without Julian, Viaweb would never have made it.\nSo even though it was a good deal for him, it was a good deal for us too.\nThat's why I knew there was room for something like Y Combinator.\n\nInitially we didn't have what turned out to be the most important idea:\nfunding startups synchronously, instead of asynchronously as it had always\nbeen done before. Or rather we had the idea, but we didn't realize its\nsignificance. We decided very early that the first thing we'd do would be to\nfund a bunch of startups over the coming summer. But we didn't realize\ninitially that this would be the way we'd do all our investing. The reason we\nbegan by funding a bunch of startups at once was not that we thought it would\nbe a better way to fund startups, but simply because we wanted to learn how to\nbe angel investors, and a summer program for undergrads seemed the fastest way\nto do it. No one takes summer jobs that seriously. The opportunity cost for a\nbunch of undergrads to spend a summer working on startups was low enough that\nwe wouldn't feel guilty encouraging them to do it.\n\nWe knew students would already be making plans for the summer, so we did what\nwe're always telling startups to do: we launched fast. Here are the initial\n[announcement](summerfounder.html) and\n[description](https://web.archive.org/web/20170609055553/http://ycombinator.com/old/sfp.html)\nof what was at the time called the Summer Founders Program.\n\nWe got lucky in that the length and structure of a summer program turns out to\nbe perfect for what we do. The structure of the YC cycle is still almost\nidentical to what it was that first summer.\n\nWe also got lucky in who the first batch of founders were. We never expected\nto make any money from that first batch. We thought of the money we were\ninvesting as a combination of an educational expense and a charitable\ndonation. But the founders in the first batch turned out to be surprisingly\ngood. And great people too. We're still friends with a lot of them today.\n\nIt's hard for people to realize now how inconsequential YC seemed at the time.\nI can't blame people who didn't take us seriously, because we ourselves didn't\ntake that first summer program seriously in the very beginning. But as the\nsummer progressed we were increasingly impressed by how well the startups were\ndoing. Other people started to be impressed too. Jessica and I invented a\nterm, \"the Y Combinator effect,\" to describe the moment when the realization\nhit someone that YC was not totally lame. When people came to YC to speak at\nthe dinners that first summer, they came in the spirit of someone coming to\naddress a Boy Scout troop. By the time they left the building they were all\nsaying some variant of \"Wow, these companies might actually succeed.\"\n\nNow YC is well enough known that people are no longer surprised when the\ncompanies we fund are legit, but it took a while for reputation to catch up\nwith reality. That's one of the reasons we especially like funding ideas that\nmight be dismissed as \"toys\" \u0097 because YC itself was dismissed as one\ninitially.\n\nWhen we saw how well it worked to fund companies synchronously, we decided\nwe'd keep doing that. We'd fund two batches of startups a year.\n\nWe funded the second batch in Silicon Valley. That was a last minute decision.\nIn retrospect I think what pushed me over the edge was going to Foo Camp that\nfall. The density of startup people in the Bay Area was so much greater than\nin Boston, and the weather was so nice. I remembered that from living there in\nthe 90s. Plus I didn't want someone else to copy us and describe it as the Y\nCombinator of Silicon Valley. I wanted YC to be the Y Combinator of Silicon\nValley. So doing the winter batch in California seemed like one of those rare\ncases where the self-indulgent choice and the ambitious one were the same.\n\nIf we'd had enough time to do what we wanted, Y Combinator would have been in\nBerkeley. That was our favorite part of the Bay Area. But we didn't have time\nto get a building in Berkeley. We didn't have time to get our own building\nanywhere. The only way to get enough space in time was to convince Trevor to\nlet us take over part of his (as it then seemed) giant building in Mountain\nView. Yet again we lucked out, because Mountain View turned out to be the\nideal place to put something like YC. But even then we barely made it. The\nfirst dinner in California, we had to warn all the founders not to touch the\nwalls, because the paint was still wet.  \n  \n\n"}